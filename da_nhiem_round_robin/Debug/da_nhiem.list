
da_nhiem.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b150  08000110  08000110  00001110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000550  0800b260  0800b260  0000c260  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b7b0  0800b7b0  0000d1e8  2**0
                  CONTENTS
  4 .ARM          00000008  0800b7b0  0800b7b0  0000c7b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b7b8  0800b7b8  0000d1e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b7b8  0800b7b8  0000c7b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800b7bc  0800b7bc  0000c7bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001e8  20000000  0800b7c0  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001c5c  200001e8  0800b9a8  0000d1e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001e44  0800b9a8  0000de44  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000d1e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019aa5  00000000  00000000  0000d211  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003922  00000000  00000000  00026cb6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001818  00000000  00000000  0002a5d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000012dd  00000000  00000000  0002bdf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a788  00000000  00000000  0002d0cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001b939  00000000  00000000  00047855  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000995f2  00000000  00000000  0006318e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000fc780  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000782c  00000000  00000000  000fc7c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000050  00000000  00000000  00103ff0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001e8 	.word	0x200001e8
 800012c:	00000000 	.word	0x00000000
 8000130:	0800b248 	.word	0x0800b248

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001ec 	.word	0x200001ec
 800014c:	0800b248 	.word	0x0800b248

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_frsub>:
 8000a88:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000a8c:	e002      	b.n	8000a94 <__addsf3>
 8000a8e:	bf00      	nop

08000a90 <__aeabi_fsub>:
 8000a90:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000a94 <__addsf3>:
 8000a94:	0042      	lsls	r2, r0, #1
 8000a96:	bf1f      	itttt	ne
 8000a98:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000a9c:	ea92 0f03 	teqne	r2, r3
 8000aa0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000aa4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000aa8:	d06a      	beq.n	8000b80 <__addsf3+0xec>
 8000aaa:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000aae:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000ab2:	bfc1      	itttt	gt
 8000ab4:	18d2      	addgt	r2, r2, r3
 8000ab6:	4041      	eorgt	r1, r0
 8000ab8:	4048      	eorgt	r0, r1
 8000aba:	4041      	eorgt	r1, r0
 8000abc:	bfb8      	it	lt
 8000abe:	425b      	neglt	r3, r3
 8000ac0:	2b19      	cmp	r3, #25
 8000ac2:	bf88      	it	hi
 8000ac4:	4770      	bxhi	lr
 8000ac6:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000aca:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ace:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000ad2:	bf18      	it	ne
 8000ad4:	4240      	negne	r0, r0
 8000ad6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000ada:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000ade:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000ae2:	bf18      	it	ne
 8000ae4:	4249      	negne	r1, r1
 8000ae6:	ea92 0f03 	teq	r2, r3
 8000aea:	d03f      	beq.n	8000b6c <__addsf3+0xd8>
 8000aec:	f1a2 0201 	sub.w	r2, r2, #1
 8000af0:	fa41 fc03 	asr.w	ip, r1, r3
 8000af4:	eb10 000c 	adds.w	r0, r0, ip
 8000af8:	f1c3 0320 	rsb	r3, r3, #32
 8000afc:	fa01 f103 	lsl.w	r1, r1, r3
 8000b00:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000b04:	d502      	bpl.n	8000b0c <__addsf3+0x78>
 8000b06:	4249      	negs	r1, r1
 8000b08:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b0c:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000b10:	d313      	bcc.n	8000b3a <__addsf3+0xa6>
 8000b12:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000b16:	d306      	bcc.n	8000b26 <__addsf3+0x92>
 8000b18:	0840      	lsrs	r0, r0, #1
 8000b1a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b1e:	f102 0201 	add.w	r2, r2, #1
 8000b22:	2afe      	cmp	r2, #254	@ 0xfe
 8000b24:	d251      	bcs.n	8000bca <__addsf3+0x136>
 8000b26:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000b2a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b2e:	bf08      	it	eq
 8000b30:	f020 0001 	biceq.w	r0, r0, #1
 8000b34:	ea40 0003 	orr.w	r0, r0, r3
 8000b38:	4770      	bx	lr
 8000b3a:	0049      	lsls	r1, r1, #1
 8000b3c:	eb40 0000 	adc.w	r0, r0, r0
 8000b40:	3a01      	subs	r2, #1
 8000b42:	bf28      	it	cs
 8000b44:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000b48:	d2ed      	bcs.n	8000b26 <__addsf3+0x92>
 8000b4a:	fab0 fc80 	clz	ip, r0
 8000b4e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b52:	ebb2 020c 	subs.w	r2, r2, ip
 8000b56:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b5a:	bfaa      	itet	ge
 8000b5c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000b60:	4252      	neglt	r2, r2
 8000b62:	4318      	orrge	r0, r3
 8000b64:	bfbc      	itt	lt
 8000b66:	40d0      	lsrlt	r0, r2
 8000b68:	4318      	orrlt	r0, r3
 8000b6a:	4770      	bx	lr
 8000b6c:	f092 0f00 	teq	r2, #0
 8000b70:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000b74:	bf06      	itte	eq
 8000b76:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000b7a:	3201      	addeq	r2, #1
 8000b7c:	3b01      	subne	r3, #1
 8000b7e:	e7b5      	b.n	8000aec <__addsf3+0x58>
 8000b80:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b84:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b88:	bf18      	it	ne
 8000b8a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b8e:	d021      	beq.n	8000bd4 <__addsf3+0x140>
 8000b90:	ea92 0f03 	teq	r2, r3
 8000b94:	d004      	beq.n	8000ba0 <__addsf3+0x10c>
 8000b96:	f092 0f00 	teq	r2, #0
 8000b9a:	bf08      	it	eq
 8000b9c:	4608      	moveq	r0, r1
 8000b9e:	4770      	bx	lr
 8000ba0:	ea90 0f01 	teq	r0, r1
 8000ba4:	bf1c      	itt	ne
 8000ba6:	2000      	movne	r0, #0
 8000ba8:	4770      	bxne	lr
 8000baa:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000bae:	d104      	bne.n	8000bba <__addsf3+0x126>
 8000bb0:	0040      	lsls	r0, r0, #1
 8000bb2:	bf28      	it	cs
 8000bb4:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000bb8:	4770      	bx	lr
 8000bba:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000bbe:	bf3c      	itt	cc
 8000bc0:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000bc4:	4770      	bxcc	lr
 8000bc6:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000bca:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000bce:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bd2:	4770      	bx	lr
 8000bd4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000bd8:	bf16      	itet	ne
 8000bda:	4608      	movne	r0, r1
 8000bdc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000be0:	4601      	movne	r1, r0
 8000be2:	0242      	lsls	r2, r0, #9
 8000be4:	bf06      	itte	eq
 8000be6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000bea:	ea90 0f01 	teqeq	r0, r1
 8000bee:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000bf2:	4770      	bx	lr

08000bf4 <__aeabi_ui2f>:
 8000bf4:	f04f 0300 	mov.w	r3, #0
 8000bf8:	e004      	b.n	8000c04 <__aeabi_i2f+0x8>
 8000bfa:	bf00      	nop

08000bfc <__aeabi_i2f>:
 8000bfc:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000c00:	bf48      	it	mi
 8000c02:	4240      	negmi	r0, r0
 8000c04:	ea5f 0c00 	movs.w	ip, r0
 8000c08:	bf08      	it	eq
 8000c0a:	4770      	bxeq	lr
 8000c0c:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000c10:	4601      	mov	r1, r0
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	e01c      	b.n	8000c52 <__aeabi_l2f+0x2a>

08000c18 <__aeabi_ul2f>:
 8000c18:	ea50 0201 	orrs.w	r2, r0, r1
 8000c1c:	bf08      	it	eq
 8000c1e:	4770      	bxeq	lr
 8000c20:	f04f 0300 	mov.w	r3, #0
 8000c24:	e00a      	b.n	8000c3c <__aeabi_l2f+0x14>
 8000c26:	bf00      	nop

08000c28 <__aeabi_l2f>:
 8000c28:	ea50 0201 	orrs.w	r2, r0, r1
 8000c2c:	bf08      	it	eq
 8000c2e:	4770      	bxeq	lr
 8000c30:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000c34:	d502      	bpl.n	8000c3c <__aeabi_l2f+0x14>
 8000c36:	4240      	negs	r0, r0
 8000c38:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c3c:	ea5f 0c01 	movs.w	ip, r1
 8000c40:	bf02      	ittt	eq
 8000c42:	4684      	moveq	ip, r0
 8000c44:	4601      	moveq	r1, r0
 8000c46:	2000      	moveq	r0, #0
 8000c48:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000c4c:	bf08      	it	eq
 8000c4e:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000c52:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000c56:	fabc f28c 	clz	r2, ip
 8000c5a:	3a08      	subs	r2, #8
 8000c5c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000c60:	db10      	blt.n	8000c84 <__aeabi_l2f+0x5c>
 8000c62:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c66:	4463      	add	r3, ip
 8000c68:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c6c:	f1c2 0220 	rsb	r2, r2, #32
 8000c70:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000c74:	fa20 f202 	lsr.w	r2, r0, r2
 8000c78:	eb43 0002 	adc.w	r0, r3, r2
 8000c7c:	bf08      	it	eq
 8000c7e:	f020 0001 	biceq.w	r0, r0, #1
 8000c82:	4770      	bx	lr
 8000c84:	f102 0220 	add.w	r2, r2, #32
 8000c88:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c8c:	f1c2 0220 	rsb	r2, r2, #32
 8000c90:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000c94:	fa21 f202 	lsr.w	r2, r1, r2
 8000c98:	eb43 0002 	adc.w	r0, r3, r2
 8000c9c:	bf08      	it	eq
 8000c9e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ca2:	4770      	bx	lr

08000ca4 <__aeabi_fmul>:
 8000ca4:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000ca8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000cac:	bf1e      	ittt	ne
 8000cae:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000cb2:	ea92 0f0c 	teqne	r2, ip
 8000cb6:	ea93 0f0c 	teqne	r3, ip
 8000cba:	d06f      	beq.n	8000d9c <__aeabi_fmul+0xf8>
 8000cbc:	441a      	add	r2, r3
 8000cbe:	ea80 0c01 	eor.w	ip, r0, r1
 8000cc2:	0240      	lsls	r0, r0, #9
 8000cc4:	bf18      	it	ne
 8000cc6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000cca:	d01e      	beq.n	8000d0a <__aeabi_fmul+0x66>
 8000ccc:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000cd0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000cd4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000cd8:	fba0 3101 	umull	r3, r1, r0, r1
 8000cdc:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000ce0:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000ce4:	bf3e      	ittt	cc
 8000ce6:	0049      	lslcc	r1, r1, #1
 8000ce8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000cec:	005b      	lslcc	r3, r3, #1
 8000cee:	ea40 0001 	orr.w	r0, r0, r1
 8000cf2:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000cf6:	2afd      	cmp	r2, #253	@ 0xfd
 8000cf8:	d81d      	bhi.n	8000d36 <__aeabi_fmul+0x92>
 8000cfa:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000cfe:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d02:	bf08      	it	eq
 8000d04:	f020 0001 	biceq.w	r0, r0, #1
 8000d08:	4770      	bx	lr
 8000d0a:	f090 0f00 	teq	r0, #0
 8000d0e:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000d12:	bf08      	it	eq
 8000d14:	0249      	lsleq	r1, r1, #9
 8000d16:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d1a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d1e:	3a7f      	subs	r2, #127	@ 0x7f
 8000d20:	bfc2      	ittt	gt
 8000d22:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000d26:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d2a:	4770      	bxgt	lr
 8000d2c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000d30:	f04f 0300 	mov.w	r3, #0
 8000d34:	3a01      	subs	r2, #1
 8000d36:	dc5d      	bgt.n	8000df4 <__aeabi_fmul+0x150>
 8000d38:	f112 0f19 	cmn.w	r2, #25
 8000d3c:	bfdc      	itt	le
 8000d3e:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000d42:	4770      	bxle	lr
 8000d44:	f1c2 0200 	rsb	r2, r2, #0
 8000d48:	0041      	lsls	r1, r0, #1
 8000d4a:	fa21 f102 	lsr.w	r1, r1, r2
 8000d4e:	f1c2 0220 	rsb	r2, r2, #32
 8000d52:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d56:	ea5f 0031 	movs.w	r0, r1, rrx
 8000d5a:	f140 0000 	adc.w	r0, r0, #0
 8000d5e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000d62:	bf08      	it	eq
 8000d64:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d68:	4770      	bx	lr
 8000d6a:	f092 0f00 	teq	r2, #0
 8000d6e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000d72:	bf02      	ittt	eq
 8000d74:	0040      	lsleq	r0, r0, #1
 8000d76:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000d7a:	3a01      	subeq	r2, #1
 8000d7c:	d0f9      	beq.n	8000d72 <__aeabi_fmul+0xce>
 8000d7e:	ea40 000c 	orr.w	r0, r0, ip
 8000d82:	f093 0f00 	teq	r3, #0
 8000d86:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000d8a:	bf02      	ittt	eq
 8000d8c:	0049      	lsleq	r1, r1, #1
 8000d8e:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000d92:	3b01      	subeq	r3, #1
 8000d94:	d0f9      	beq.n	8000d8a <__aeabi_fmul+0xe6>
 8000d96:	ea41 010c 	orr.w	r1, r1, ip
 8000d9a:	e78f      	b.n	8000cbc <__aeabi_fmul+0x18>
 8000d9c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000da0:	ea92 0f0c 	teq	r2, ip
 8000da4:	bf18      	it	ne
 8000da6:	ea93 0f0c 	teqne	r3, ip
 8000daa:	d00a      	beq.n	8000dc2 <__aeabi_fmul+0x11e>
 8000dac:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000db0:	bf18      	it	ne
 8000db2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000db6:	d1d8      	bne.n	8000d6a <__aeabi_fmul+0xc6>
 8000db8:	ea80 0001 	eor.w	r0, r0, r1
 8000dbc:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000dc0:	4770      	bx	lr
 8000dc2:	f090 0f00 	teq	r0, #0
 8000dc6:	bf17      	itett	ne
 8000dc8:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000dcc:	4608      	moveq	r0, r1
 8000dce:	f091 0f00 	teqne	r1, #0
 8000dd2:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000dd6:	d014      	beq.n	8000e02 <__aeabi_fmul+0x15e>
 8000dd8:	ea92 0f0c 	teq	r2, ip
 8000ddc:	d101      	bne.n	8000de2 <__aeabi_fmul+0x13e>
 8000dde:	0242      	lsls	r2, r0, #9
 8000de0:	d10f      	bne.n	8000e02 <__aeabi_fmul+0x15e>
 8000de2:	ea93 0f0c 	teq	r3, ip
 8000de6:	d103      	bne.n	8000df0 <__aeabi_fmul+0x14c>
 8000de8:	024b      	lsls	r3, r1, #9
 8000dea:	bf18      	it	ne
 8000dec:	4608      	movne	r0, r1
 8000dee:	d108      	bne.n	8000e02 <__aeabi_fmul+0x15e>
 8000df0:	ea80 0001 	eor.w	r0, r0, r1
 8000df4:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000df8:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000dfc:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000e00:	4770      	bx	lr
 8000e02:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000e06:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000e0a:	4770      	bx	lr

08000e0c <__aeabi_fdiv>:
 8000e0c:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000e10:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e14:	bf1e      	ittt	ne
 8000e16:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e1a:	ea92 0f0c 	teqne	r2, ip
 8000e1e:	ea93 0f0c 	teqne	r3, ip
 8000e22:	d069      	beq.n	8000ef8 <__aeabi_fdiv+0xec>
 8000e24:	eba2 0203 	sub.w	r2, r2, r3
 8000e28:	ea80 0c01 	eor.w	ip, r0, r1
 8000e2c:	0249      	lsls	r1, r1, #9
 8000e2e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e32:	d037      	beq.n	8000ea4 <__aeabi_fdiv+0x98>
 8000e34:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000e38:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000e3c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000e40:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000e44:	428b      	cmp	r3, r1
 8000e46:	bf38      	it	cc
 8000e48:	005b      	lslcc	r3, r3, #1
 8000e4a:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000e4e:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000e52:	428b      	cmp	r3, r1
 8000e54:	bf24      	itt	cs
 8000e56:	1a5b      	subcs	r3, r3, r1
 8000e58:	ea40 000c 	orrcs.w	r0, r0, ip
 8000e5c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000e60:	bf24      	itt	cs
 8000e62:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000e66:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000e6a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000e6e:	bf24      	itt	cs
 8000e70:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000e74:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000e78:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000e7c:	bf24      	itt	cs
 8000e7e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000e82:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000e86:	011b      	lsls	r3, r3, #4
 8000e88:	bf18      	it	ne
 8000e8a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000e8e:	d1e0      	bne.n	8000e52 <__aeabi_fdiv+0x46>
 8000e90:	2afd      	cmp	r2, #253	@ 0xfd
 8000e92:	f63f af50 	bhi.w	8000d36 <__aeabi_fmul+0x92>
 8000e96:	428b      	cmp	r3, r1
 8000e98:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e9c:	bf08      	it	eq
 8000e9e:	f020 0001 	biceq.w	r0, r0, #1
 8000ea2:	4770      	bx	lr
 8000ea4:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000ea8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000eac:	327f      	adds	r2, #127	@ 0x7f
 8000eae:	bfc2      	ittt	gt
 8000eb0:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000eb4:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000eb8:	4770      	bxgt	lr
 8000eba:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ebe:	f04f 0300 	mov.w	r3, #0
 8000ec2:	3a01      	subs	r2, #1
 8000ec4:	e737      	b.n	8000d36 <__aeabi_fmul+0x92>
 8000ec6:	f092 0f00 	teq	r2, #0
 8000eca:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000ece:	bf02      	ittt	eq
 8000ed0:	0040      	lsleq	r0, r0, #1
 8000ed2:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000ed6:	3a01      	subeq	r2, #1
 8000ed8:	d0f9      	beq.n	8000ece <__aeabi_fdiv+0xc2>
 8000eda:	ea40 000c 	orr.w	r0, r0, ip
 8000ede:	f093 0f00 	teq	r3, #0
 8000ee2:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000ee6:	bf02      	ittt	eq
 8000ee8:	0049      	lsleq	r1, r1, #1
 8000eea:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000eee:	3b01      	subeq	r3, #1
 8000ef0:	d0f9      	beq.n	8000ee6 <__aeabi_fdiv+0xda>
 8000ef2:	ea41 010c 	orr.w	r1, r1, ip
 8000ef6:	e795      	b.n	8000e24 <__aeabi_fdiv+0x18>
 8000ef8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000efc:	ea92 0f0c 	teq	r2, ip
 8000f00:	d108      	bne.n	8000f14 <__aeabi_fdiv+0x108>
 8000f02:	0242      	lsls	r2, r0, #9
 8000f04:	f47f af7d 	bne.w	8000e02 <__aeabi_fmul+0x15e>
 8000f08:	ea93 0f0c 	teq	r3, ip
 8000f0c:	f47f af70 	bne.w	8000df0 <__aeabi_fmul+0x14c>
 8000f10:	4608      	mov	r0, r1
 8000f12:	e776      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f14:	ea93 0f0c 	teq	r3, ip
 8000f18:	d104      	bne.n	8000f24 <__aeabi_fdiv+0x118>
 8000f1a:	024b      	lsls	r3, r1, #9
 8000f1c:	f43f af4c 	beq.w	8000db8 <__aeabi_fmul+0x114>
 8000f20:	4608      	mov	r0, r1
 8000f22:	e76e      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f24:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000f28:	bf18      	it	ne
 8000f2a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000f2e:	d1ca      	bne.n	8000ec6 <__aeabi_fdiv+0xba>
 8000f30:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8000f34:	f47f af5c 	bne.w	8000df0 <__aeabi_fmul+0x14c>
 8000f38:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000f3c:	f47f af3c 	bne.w	8000db8 <__aeabi_fmul+0x114>
 8000f40:	e75f      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f42:	bf00      	nop

08000f44 <CLCD_Delay>:
******************************************************************************************************************/
#include "CLCD_I2C.h"

//************************** Low Level Function ****************************************************************//
static void CLCD_Delay(uint16_t Time)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b082      	sub	sp, #8
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	80fb      	strh	r3, [r7, #6]
	HAL_Delay(Time);
 8000f4e:	88fb      	ldrh	r3, [r7, #6]
 8000f50:	4618      	mov	r0, r3
 8000f52:	f000 ff97 	bl	8001e84 <HAL_Delay>
}
 8000f56:	bf00      	nop
 8000f58:	3708      	adds	r7, #8
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	bd80      	pop	{r7, pc}

08000f5e <CLCD_WriteI2C>:
static void CLCD_WriteI2C(CLCD_I2C_Name* LCD, uint8_t Data, uint8_t Mode)
{
 8000f5e:	b580      	push	{r7, lr}
 8000f60:	b086      	sub	sp, #24
 8000f62:	af02      	add	r7, sp, #8
 8000f64:	6078      	str	r0, [r7, #4]
 8000f66:	460b      	mov	r3, r1
 8000f68:	70fb      	strb	r3, [r7, #3]
 8000f6a:	4613      	mov	r3, r2
 8000f6c:	70bb      	strb	r3, [r7, #2]
	char Data_H;
	char Data_L;
	uint8_t Data_I2C[4];
	Data_H = Data&0xF0;
 8000f6e:	78fb      	ldrb	r3, [r7, #3]
 8000f70:	f023 030f 	bic.w	r3, r3, #15
 8000f74:	73fb      	strb	r3, [r7, #15]
	Data_L = (Data<<4)&0xF0;
 8000f76:	78fb      	ldrb	r3, [r7, #3]
 8000f78:	011b      	lsls	r3, r3, #4
 8000f7a:	73bb      	strb	r3, [r7, #14]
	if(LCD->BACKLIGHT)
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	7adb      	ldrb	r3, [r3, #11]
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d007      	beq.n	8000f94 <CLCD_WriteI2C+0x36>
	{
		Data_H |= LCD_BACKLIGHT; 
 8000f84:	7bfb      	ldrb	r3, [r7, #15]
 8000f86:	f043 0308 	orr.w	r3, r3, #8
 8000f8a:	73fb      	strb	r3, [r7, #15]
		Data_L |= LCD_BACKLIGHT; 
 8000f8c:	7bbb      	ldrb	r3, [r7, #14]
 8000f8e:	f043 0308 	orr.w	r3, r3, #8
 8000f92:	73bb      	strb	r3, [r7, #14]
	}
	if(Mode == CLCD_DATA)
 8000f94:	78bb      	ldrb	r3, [r7, #2]
 8000f96:	2b01      	cmp	r3, #1
 8000f98:	d108      	bne.n	8000fac <CLCD_WriteI2C+0x4e>
	{
		Data_H |= LCD_RS;
 8000f9a:	7bfb      	ldrb	r3, [r7, #15]
 8000f9c:	f043 0301 	orr.w	r3, r3, #1
 8000fa0:	73fb      	strb	r3, [r7, #15]
		Data_L |= LCD_RS;
 8000fa2:	7bbb      	ldrb	r3, [r7, #14]
 8000fa4:	f043 0301 	orr.w	r3, r3, #1
 8000fa8:	73bb      	strb	r3, [r7, #14]
 8000faa:	e00a      	b.n	8000fc2 <CLCD_WriteI2C+0x64>
	}
	else if(Mode == CLCD_COMMAND)
 8000fac:	78bb      	ldrb	r3, [r7, #2]
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d107      	bne.n	8000fc2 <CLCD_WriteI2C+0x64>
	{
		Data_H &= ~LCD_RS;
 8000fb2:	7bfb      	ldrb	r3, [r7, #15]
 8000fb4:	f023 0301 	bic.w	r3, r3, #1
 8000fb8:	73fb      	strb	r3, [r7, #15]
		Data_L &= ~LCD_RS;
 8000fba:	7bbb      	ldrb	r3, [r7, #14]
 8000fbc:	f023 0301 	bic.w	r3, r3, #1
 8000fc0:	73bb      	strb	r3, [r7, #14]
	}
	Data_I2C[0] = Data_H|LCD_EN;
 8000fc2:	7bfb      	ldrb	r3, [r7, #15]
 8000fc4:	f043 0304 	orr.w	r3, r3, #4
 8000fc8:	b2db      	uxtb	r3, r3
 8000fca:	723b      	strb	r3, [r7, #8]
	CLCD_Delay(1);
 8000fcc:	2001      	movs	r0, #1
 8000fce:	f7ff ffb9 	bl	8000f44 <CLCD_Delay>
	Data_I2C[1] = Data_H;
 8000fd2:	7bfb      	ldrb	r3, [r7, #15]
 8000fd4:	727b      	strb	r3, [r7, #9]
	Data_I2C[2] = Data_L|LCD_EN;
 8000fd6:	7bbb      	ldrb	r3, [r7, #14]
 8000fd8:	f043 0304 	orr.w	r3, r3, #4
 8000fdc:	b2db      	uxtb	r3, r3
 8000fde:	72bb      	strb	r3, [r7, #10]
	CLCD_Delay(1);
 8000fe0:	2001      	movs	r0, #1
 8000fe2:	f7ff ffaf 	bl	8000f44 <CLCD_Delay>
	Data_I2C[3] = Data_L;
 8000fe6:	7bbb      	ldrb	r3, [r7, #14]
 8000fe8:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit(LCD->I2C, LCD->ADDRESS, (uint8_t *)Data_I2C, sizeof(Data_I2C), 1000);
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	6818      	ldr	r0, [r3, #0]
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	791b      	ldrb	r3, [r3, #4]
 8000ff2:	4619      	mov	r1, r3
 8000ff4:	f107 0208 	add.w	r2, r7, #8
 8000ff8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000ffc:	9300      	str	r3, [sp, #0]
 8000ffe:	2304      	movs	r3, #4
 8001000:	f001 fbbe 	bl	8002780 <HAL_I2C_Master_Transmit>
}
 8001004:	bf00      	nop
 8001006:	3710      	adds	r7, #16
 8001008:	46bd      	mov	sp, r7
 800100a:	bd80      	pop	{r7, pc}

0800100c <CLCD_I2C_Init>:


//************************** High Level Function ****************************************************************//
void CLCD_I2C_Init(CLCD_I2C_Name* LCD, I2C_HandleTypeDef* hi2c_CLCD, uint8_t Address, uint8_t Colums, uint8_t Rows)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b084      	sub	sp, #16
 8001010:	af00      	add	r7, sp, #0
 8001012:	60f8      	str	r0, [r7, #12]
 8001014:	60b9      	str	r1, [r7, #8]
 8001016:	4611      	mov	r1, r2
 8001018:	461a      	mov	r2, r3
 800101a:	460b      	mov	r3, r1
 800101c:	71fb      	strb	r3, [r7, #7]
 800101e:	4613      	mov	r3, r2
 8001020:	71bb      	strb	r3, [r7, #6]
	LCD->I2C = hi2c_CLCD;
 8001022:	68fb      	ldr	r3, [r7, #12]
 8001024:	68ba      	ldr	r2, [r7, #8]
 8001026:	601a      	str	r2, [r3, #0]
	LCD->ADDRESS = Address;
 8001028:	68fb      	ldr	r3, [r7, #12]
 800102a:	79fa      	ldrb	r2, [r7, #7]
 800102c:	711a      	strb	r2, [r3, #4]
	LCD->COLUMS = Colums;
 800102e:	68fb      	ldr	r3, [r7, #12]
 8001030:	79ba      	ldrb	r2, [r7, #6]
 8001032:	715a      	strb	r2, [r3, #5]
	LCD->ROWS = Rows;
 8001034:	68fb      	ldr	r3, [r7, #12]
 8001036:	7e3a      	ldrb	r2, [r7, #24]
 8001038:	719a      	strb	r2, [r3, #6]
	
	LCD->FUNCTIONSET = LCD_FUNCTIONSET|LCD_4BITMODE|LCD_2LINE|LCD_5x8DOTS;
 800103a:	68fb      	ldr	r3, [r7, #12]
 800103c:	2228      	movs	r2, #40	@ 0x28
 800103e:	729a      	strb	r2, [r3, #10]
	LCD->ENTRYMODE = LCD_ENTRYMODESET|LCD_ENTRYLEFT|LCD_ENTRYSHIFTDECREMENT;
 8001040:	68fb      	ldr	r3, [r7, #12]
 8001042:	2206      	movs	r2, #6
 8001044:	71da      	strb	r2, [r3, #7]
	LCD->DISPLAYCTRL = LCD_DISPLAYCONTROL|LCD_DISPLAYON|LCD_CURSOROFF|LCD_BLINKOFF;
 8001046:	68fb      	ldr	r3, [r7, #12]
 8001048:	220c      	movs	r2, #12
 800104a:	721a      	strb	r2, [r3, #8]
	LCD->CURSORSHIFT = LCD_CURSORSHIFT|LCD_CURSORMOVE|LCD_MOVERIGHT;
 800104c:	68fb      	ldr	r3, [r7, #12]
 800104e:	2214      	movs	r2, #20
 8001050:	725a      	strb	r2, [r3, #9]
	LCD->BACKLIGHT = LCD_BACKLIGHT;
 8001052:	68fb      	ldr	r3, [r7, #12]
 8001054:	2208      	movs	r2, #8
 8001056:	72da      	strb	r2, [r3, #11]

	CLCD_Delay(50);
 8001058:	2032      	movs	r0, #50	@ 0x32
 800105a:	f7ff ff73 	bl	8000f44 <CLCD_Delay>
	CLCD_WriteI2C(LCD, 0x33, CLCD_COMMAND);
 800105e:	2200      	movs	r2, #0
 8001060:	2133      	movs	r1, #51	@ 0x33
 8001062:	68f8      	ldr	r0, [r7, #12]
 8001064:	f7ff ff7b 	bl	8000f5e <CLCD_WriteI2C>
//	CLCD_Delay(5);
	CLCD_WriteI2C(LCD, 0x33, CLCD_COMMAND);
 8001068:	2200      	movs	r2, #0
 800106a:	2133      	movs	r1, #51	@ 0x33
 800106c:	68f8      	ldr	r0, [r7, #12]
 800106e:	f7ff ff76 	bl	8000f5e <CLCD_WriteI2C>
	CLCD_Delay(5);
 8001072:	2005      	movs	r0, #5
 8001074:	f7ff ff66 	bl	8000f44 <CLCD_Delay>
	CLCD_WriteI2C(LCD, 0x32, CLCD_COMMAND);
 8001078:	2200      	movs	r2, #0
 800107a:	2132      	movs	r1, #50	@ 0x32
 800107c:	68f8      	ldr	r0, [r7, #12]
 800107e:	f7ff ff6e 	bl	8000f5e <CLCD_WriteI2C>
	CLCD_Delay(5);
 8001082:	2005      	movs	r0, #5
 8001084:	f7ff ff5e 	bl	8000f44 <CLCD_Delay>
	CLCD_WriteI2C(LCD, 0x20, CLCD_COMMAND);
 8001088:	2200      	movs	r2, #0
 800108a:	2120      	movs	r1, #32
 800108c:	68f8      	ldr	r0, [r7, #12]
 800108e:	f7ff ff66 	bl	8000f5e <CLCD_WriteI2C>
	CLCD_Delay(5);
 8001092:	2005      	movs	r0, #5
 8001094:	f7ff ff56 	bl	8000f44 <CLCD_Delay>
	
	CLCD_WriteI2C(LCD, LCD->ENTRYMODE,CLCD_COMMAND);
 8001098:	68fb      	ldr	r3, [r7, #12]
 800109a:	79db      	ldrb	r3, [r3, #7]
 800109c:	2200      	movs	r2, #0
 800109e:	4619      	mov	r1, r3
 80010a0:	68f8      	ldr	r0, [r7, #12]
 80010a2:	f7ff ff5c 	bl	8000f5e <CLCD_WriteI2C>
	CLCD_WriteI2C(LCD, LCD->DISPLAYCTRL,CLCD_COMMAND);
 80010a6:	68fb      	ldr	r3, [r7, #12]
 80010a8:	7a1b      	ldrb	r3, [r3, #8]
 80010aa:	2200      	movs	r2, #0
 80010ac:	4619      	mov	r1, r3
 80010ae:	68f8      	ldr	r0, [r7, #12]
 80010b0:	f7ff ff55 	bl	8000f5e <CLCD_WriteI2C>
	CLCD_WriteI2C(LCD, LCD->CURSORSHIFT,CLCD_COMMAND);
 80010b4:	68fb      	ldr	r3, [r7, #12]
 80010b6:	7a5b      	ldrb	r3, [r3, #9]
 80010b8:	2200      	movs	r2, #0
 80010ba:	4619      	mov	r1, r3
 80010bc:	68f8      	ldr	r0, [r7, #12]
 80010be:	f7ff ff4e 	bl	8000f5e <CLCD_WriteI2C>
	CLCD_WriteI2C(LCD, LCD->FUNCTIONSET,CLCD_COMMAND);
 80010c2:	68fb      	ldr	r3, [r7, #12]
 80010c4:	7a9b      	ldrb	r3, [r3, #10]
 80010c6:	2200      	movs	r2, #0
 80010c8:	4619      	mov	r1, r3
 80010ca:	68f8      	ldr	r0, [r7, #12]
 80010cc:	f7ff ff47 	bl	8000f5e <CLCD_WriteI2C>
	
	CLCD_WriteI2C(LCD, LCD_CLEARDISPLAY,CLCD_COMMAND);
 80010d0:	2200      	movs	r2, #0
 80010d2:	2101      	movs	r1, #1
 80010d4:	68f8      	ldr	r0, [r7, #12]
 80010d6:	f7ff ff42 	bl	8000f5e <CLCD_WriteI2C>
	CLCD_WriteI2C(LCD, LCD_RETURNHOME,CLCD_COMMAND);
 80010da:	2200      	movs	r2, #0
 80010dc:	2102      	movs	r1, #2
 80010de:	68f8      	ldr	r0, [r7, #12]
 80010e0:	f7ff ff3d 	bl	8000f5e <CLCD_WriteI2C>
}
 80010e4:	bf00      	nop
 80010e6:	3710      	adds	r7, #16
 80010e8:	46bd      	mov	sp, r7
 80010ea:	bd80      	pop	{r7, pc}

080010ec <CLCD_I2C_SetCursor>:
void CLCD_I2C_SetCursor(CLCD_I2C_Name* LCD, uint8_t Xpos, uint8_t Ypos)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b084      	sub	sp, #16
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	6078      	str	r0, [r7, #4]
 80010f4:	460b      	mov	r3, r1
 80010f6:	70fb      	strb	r3, [r7, #3]
 80010f8:	4613      	mov	r3, r2
 80010fa:	70bb      	strb	r3, [r7, #2]
	uint8_t DRAM_ADDRESS = 0x00;
 80010fc:	2300      	movs	r3, #0
 80010fe:	73fb      	strb	r3, [r7, #15]
	if(Xpos >= LCD->COLUMS)
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	795b      	ldrb	r3, [r3, #5]
 8001104:	78fa      	ldrb	r2, [r7, #3]
 8001106:	429a      	cmp	r2, r3
 8001108:	d303      	bcc.n	8001112 <CLCD_I2C_SetCursor+0x26>
	{
		Xpos = LCD->COLUMS - 1;
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	795b      	ldrb	r3, [r3, #5]
 800110e:	3b01      	subs	r3, #1
 8001110:	70fb      	strb	r3, [r7, #3]
	}
	if(Ypos >= LCD->ROWS)
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	799b      	ldrb	r3, [r3, #6]
 8001116:	78ba      	ldrb	r2, [r7, #2]
 8001118:	429a      	cmp	r2, r3
 800111a:	d303      	bcc.n	8001124 <CLCD_I2C_SetCursor+0x38>
	{
		Ypos = LCD->ROWS -1;
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	799b      	ldrb	r3, [r3, #6]
 8001120:	3b01      	subs	r3, #1
 8001122:	70bb      	strb	r3, [r7, #2]
	}
	if(Ypos == 0)
 8001124:	78bb      	ldrb	r3, [r7, #2]
 8001126:	2b00      	cmp	r3, #0
 8001128:	d102      	bne.n	8001130 <CLCD_I2C_SetCursor+0x44>
	{
		DRAM_ADDRESS = 0x00 + Xpos;
 800112a:	78fb      	ldrb	r3, [r7, #3]
 800112c:	73fb      	strb	r3, [r7, #15]
 800112e:	e013      	b.n	8001158 <CLCD_I2C_SetCursor+0x6c>
	}
	else if(Ypos == 1)
 8001130:	78bb      	ldrb	r3, [r7, #2]
 8001132:	2b01      	cmp	r3, #1
 8001134:	d103      	bne.n	800113e <CLCD_I2C_SetCursor+0x52>
	{
		DRAM_ADDRESS = 0x40 + Xpos;
 8001136:	78fb      	ldrb	r3, [r7, #3]
 8001138:	3340      	adds	r3, #64	@ 0x40
 800113a:	73fb      	strb	r3, [r7, #15]
 800113c:	e00c      	b.n	8001158 <CLCD_I2C_SetCursor+0x6c>
	}
	else if(Ypos == 2)
 800113e:	78bb      	ldrb	r3, [r7, #2]
 8001140:	2b02      	cmp	r3, #2
 8001142:	d103      	bne.n	800114c <CLCD_I2C_SetCursor+0x60>
	{
		DRAM_ADDRESS = 0x14 + Xpos;
 8001144:	78fb      	ldrb	r3, [r7, #3]
 8001146:	3314      	adds	r3, #20
 8001148:	73fb      	strb	r3, [r7, #15]
 800114a:	e005      	b.n	8001158 <CLCD_I2C_SetCursor+0x6c>
	}
	else if(Ypos == 3)
 800114c:	78bb      	ldrb	r3, [r7, #2]
 800114e:	2b03      	cmp	r3, #3
 8001150:	d102      	bne.n	8001158 <CLCD_I2C_SetCursor+0x6c>
	{
		DRAM_ADDRESS = 0x54 + Xpos;
 8001152:	78fb      	ldrb	r3, [r7, #3]
 8001154:	3354      	adds	r3, #84	@ 0x54
 8001156:	73fb      	strb	r3, [r7, #15]
	}
	CLCD_WriteI2C(LCD, LCD_SETDDRAMADDR|DRAM_ADDRESS, CLCD_COMMAND);
 8001158:	7bfb      	ldrb	r3, [r7, #15]
 800115a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800115e:	b2db      	uxtb	r3, r3
 8001160:	2200      	movs	r2, #0
 8001162:	4619      	mov	r1, r3
 8001164:	6878      	ldr	r0, [r7, #4]
 8001166:	f7ff fefa 	bl	8000f5e <CLCD_WriteI2C>
}
 800116a:	bf00      	nop
 800116c:	3710      	adds	r7, #16
 800116e:	46bd      	mov	sp, r7
 8001170:	bd80      	pop	{r7, pc}

08001172 <CLCD_I2C_WriteChar>:
void CLCD_I2C_WriteChar(CLCD_I2C_Name* LCD, char character)
{
 8001172:	b580      	push	{r7, lr}
 8001174:	b082      	sub	sp, #8
 8001176:	af00      	add	r7, sp, #0
 8001178:	6078      	str	r0, [r7, #4]
 800117a:	460b      	mov	r3, r1
 800117c:	70fb      	strb	r3, [r7, #3]
	CLCD_WriteI2C(LCD, character, CLCD_DATA);
 800117e:	78fb      	ldrb	r3, [r7, #3]
 8001180:	2201      	movs	r2, #1
 8001182:	4619      	mov	r1, r3
 8001184:	6878      	ldr	r0, [r7, #4]
 8001186:	f7ff feea 	bl	8000f5e <CLCD_WriteI2C>
}
 800118a:	bf00      	nop
 800118c:	3708      	adds	r7, #8
 800118e:	46bd      	mov	sp, r7
 8001190:	bd80      	pop	{r7, pc}

08001192 <CLCD_I2C_WriteString>:
void CLCD_I2C_WriteString(CLCD_I2C_Name* LCD, char *String)
{
 8001192:	b580      	push	{r7, lr}
 8001194:	b082      	sub	sp, #8
 8001196:	af00      	add	r7, sp, #0
 8001198:	6078      	str	r0, [r7, #4]
 800119a:	6039      	str	r1, [r7, #0]
	while(*String)CLCD_I2C_WriteChar(LCD, *String++);
 800119c:	e007      	b.n	80011ae <CLCD_I2C_WriteString+0x1c>
 800119e:	683b      	ldr	r3, [r7, #0]
 80011a0:	1c5a      	adds	r2, r3, #1
 80011a2:	603a      	str	r2, [r7, #0]
 80011a4:	781b      	ldrb	r3, [r3, #0]
 80011a6:	4619      	mov	r1, r3
 80011a8:	6878      	ldr	r0, [r7, #4]
 80011aa:	f7ff ffe2 	bl	8001172 <CLCD_I2C_WriteChar>
 80011ae:	683b      	ldr	r3, [r7, #0]
 80011b0:	781b      	ldrb	r3, [r3, #0]
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d1f3      	bne.n	800119e <CLCD_I2C_WriteString+0xc>
}
 80011b6:	bf00      	nop
 80011b8:	bf00      	nop
 80011ba:	3708      	adds	r7, #8
 80011bc:	46bd      	mov	sp, r7
 80011be:	bd80      	pop	{r7, pc}

080011c0 <HAL_UART_RxCpltCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b082      	sub	sp, #8
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  if(huart->Instance == USART1){
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	4a29      	ldr	r2, [pc, #164]	@ (8001274 <HAL_UART_RxCpltCallback+0xb4>)
 80011ce:	4293      	cmp	r3, r2
 80011d0:	d14c      	bne.n	800126c <HAL_UART_RxCpltCallback+0xac>
	 // rxData[sizeof(rxData) - 1] = '\0';
	if ((rxData[0] == 't') && (rxData[1] == 'e') && (rxData[2] == 'm') && (rxData[3] == 'p'))
 80011d2:	4b29      	ldr	r3, [pc, #164]	@ (8001278 <HAL_UART_RxCpltCallback+0xb8>)
 80011d4:	781b      	ldrb	r3, [r3, #0]
 80011d6:	2b74      	cmp	r3, #116	@ 0x74
 80011d8:	d112      	bne.n	8001200 <HAL_UART_RxCpltCallback+0x40>
 80011da:	4b27      	ldr	r3, [pc, #156]	@ (8001278 <HAL_UART_RxCpltCallback+0xb8>)
 80011dc:	785b      	ldrb	r3, [r3, #1]
 80011de:	2b65      	cmp	r3, #101	@ 0x65
 80011e0:	d10e      	bne.n	8001200 <HAL_UART_RxCpltCallback+0x40>
 80011e2:	4b25      	ldr	r3, [pc, #148]	@ (8001278 <HAL_UART_RxCpltCallback+0xb8>)
 80011e4:	789b      	ldrb	r3, [r3, #2]
 80011e6:	2b6d      	cmp	r3, #109	@ 0x6d
 80011e8:	d10a      	bne.n	8001200 <HAL_UART_RxCpltCallback+0x40>
 80011ea:	4b23      	ldr	r3, [pc, #140]	@ (8001278 <HAL_UART_RxCpltCallback+0xb8>)
 80011ec:	78db      	ldrb	r3, [r3, #3]
 80011ee:	2b70      	cmp	r3, #112	@ 0x70
 80011f0:	d106      	bne.n	8001200 <HAL_UART_RxCpltCallback+0x40>
	{
		DisplayMode = DISPLAY_TEMP;
 80011f2:	4b22      	ldr	r3, [pc, #136]	@ (800127c <HAL_UART_RxCpltCallback+0xbc>)
 80011f4:	2200      	movs	r2, #0
 80011f6:	701a      	strb	r2, [r3, #0]
		printf("Change Display Mode to DISPLAY_TEMP\r\n\n");
 80011f8:	4821      	ldr	r0, [pc, #132]	@ (8001280 <HAL_UART_RxCpltCallback+0xc0>)
 80011fa:	f007 fee9 	bl	8008fd0 <puts>
 80011fe:	e030      	b.n	8001262 <HAL_UART_RxCpltCallback+0xa2>
		//memset(rxData, 0, sizeof(rxData));
	}
	else if ((rxData[0] == 'h') && (rxData[1] == 'u') && (rxData[2] == 'm') && (rxData[3] == 'i'))
 8001200:	4b1d      	ldr	r3, [pc, #116]	@ (8001278 <HAL_UART_RxCpltCallback+0xb8>)
 8001202:	781b      	ldrb	r3, [r3, #0]
 8001204:	2b68      	cmp	r3, #104	@ 0x68
 8001206:	d112      	bne.n	800122e <HAL_UART_RxCpltCallback+0x6e>
 8001208:	4b1b      	ldr	r3, [pc, #108]	@ (8001278 <HAL_UART_RxCpltCallback+0xb8>)
 800120a:	785b      	ldrb	r3, [r3, #1]
 800120c:	2b75      	cmp	r3, #117	@ 0x75
 800120e:	d10e      	bne.n	800122e <HAL_UART_RxCpltCallback+0x6e>
 8001210:	4b19      	ldr	r3, [pc, #100]	@ (8001278 <HAL_UART_RxCpltCallback+0xb8>)
 8001212:	789b      	ldrb	r3, [r3, #2]
 8001214:	2b6d      	cmp	r3, #109	@ 0x6d
 8001216:	d10a      	bne.n	800122e <HAL_UART_RxCpltCallback+0x6e>
 8001218:	4b17      	ldr	r3, [pc, #92]	@ (8001278 <HAL_UART_RxCpltCallback+0xb8>)
 800121a:	78db      	ldrb	r3, [r3, #3]
 800121c:	2b69      	cmp	r3, #105	@ 0x69
 800121e:	d106      	bne.n	800122e <HAL_UART_RxCpltCallback+0x6e>
	{
		DisplayMode = DISPLAY_HUMID;
 8001220:	4b16      	ldr	r3, [pc, #88]	@ (800127c <HAL_UART_RxCpltCallback+0xbc>)
 8001222:	2201      	movs	r2, #1
 8001224:	701a      	strb	r2, [r3, #0]
		printf("Change Display Mode to DISPLAY_HUMI\r\n\n");
 8001226:	4817      	ldr	r0, [pc, #92]	@ (8001284 <HAL_UART_RxCpltCallback+0xc4>)
 8001228:	f007 fed2 	bl	8008fd0 <puts>
 800122c:	e019      	b.n	8001262 <HAL_UART_RxCpltCallback+0xa2>
		//memset(rxData, 0, sizeof(rxData));
	}
	else if ((rxData[0] == 'b') && (rxData[1] == 'o') && (rxData[2] == 't') && (rxData[3] == 'h'))
 800122e:	4b12      	ldr	r3, [pc, #72]	@ (8001278 <HAL_UART_RxCpltCallback+0xb8>)
 8001230:	781b      	ldrb	r3, [r3, #0]
 8001232:	2b62      	cmp	r3, #98	@ 0x62
 8001234:	d112      	bne.n	800125c <HAL_UART_RxCpltCallback+0x9c>
 8001236:	4b10      	ldr	r3, [pc, #64]	@ (8001278 <HAL_UART_RxCpltCallback+0xb8>)
 8001238:	785b      	ldrb	r3, [r3, #1]
 800123a:	2b6f      	cmp	r3, #111	@ 0x6f
 800123c:	d10e      	bne.n	800125c <HAL_UART_RxCpltCallback+0x9c>
 800123e:	4b0e      	ldr	r3, [pc, #56]	@ (8001278 <HAL_UART_RxCpltCallback+0xb8>)
 8001240:	789b      	ldrb	r3, [r3, #2]
 8001242:	2b74      	cmp	r3, #116	@ 0x74
 8001244:	d10a      	bne.n	800125c <HAL_UART_RxCpltCallback+0x9c>
 8001246:	4b0c      	ldr	r3, [pc, #48]	@ (8001278 <HAL_UART_RxCpltCallback+0xb8>)
 8001248:	78db      	ldrb	r3, [r3, #3]
 800124a:	2b68      	cmp	r3, #104	@ 0x68
 800124c:	d106      	bne.n	800125c <HAL_UART_RxCpltCallback+0x9c>
	{
		DisplayMode = DISPLAY_ALL;
 800124e:	4b0b      	ldr	r3, [pc, #44]	@ (800127c <HAL_UART_RxCpltCallback+0xbc>)
 8001250:	2202      	movs	r2, #2
 8001252:	701a      	strb	r2, [r3, #0]
		printf("Change Display Mode to DISPLAY_ALL\r\n\n");
 8001254:	480c      	ldr	r0, [pc, #48]	@ (8001288 <HAL_UART_RxCpltCallback+0xc8>)
 8001256:	f007 febb 	bl	8008fd0 <puts>
 800125a:	e002      	b.n	8001262 <HAL_UART_RxCpltCallback+0xa2>
		//memset(rxData, 0, sizeof(rxData));
	}
	else
	{
		printf("Error Command Syntax\r\n\n");
 800125c:	480b      	ldr	r0, [pc, #44]	@ (800128c <HAL_UART_RxCpltCallback+0xcc>)
 800125e:	f007 feb7 	bl	8008fd0 <puts>
	}
	HAL_UART_Receive_IT(&huart1, rxData, sizeof(rxData) - 1);
 8001262:	2204      	movs	r2, #4
 8001264:	4904      	ldr	r1, [pc, #16]	@ (8001278 <HAL_UART_RxCpltCallback+0xb8>)
 8001266:	480a      	ldr	r0, [pc, #40]	@ (8001290 <HAL_UART_RxCpltCallback+0xd0>)
 8001268:	f003 f8d3 	bl	8004412 <HAL_UART_Receive_IT>
  }

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800126c:	bf00      	nop
 800126e:	3708      	adds	r7, #8
 8001270:	46bd      	mov	sp, r7
 8001272:	bd80      	pop	{r7, pc}
 8001274:	40013800 	.word	0x40013800
 8001278:	20000310 	.word	0x20000310
 800127c:	20000000 	.word	0x20000000
 8001280:	0800b288 	.word	0x0800b288
 8001284:	0800b2b0 	.word	0x0800b2b0
 8001288:	0800b2d8 	.word	0x0800b2d8
 800128c:	0800b300 	.word	0x0800b300
 8001290:	200002ac 	.word	0x200002ac

08001294 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	b082      	sub	sp, #8
 8001298:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800129a:	f000 fdc1 	bl	8001e20 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800129e:	f000 f865 	bl	800136c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80012a2:	f000 f92f 	bl	8001504 <MX_GPIO_Init>
  MX_I2C1_Init();
 80012a6:	f000 f8a7 	bl	80013f8 <MX_I2C1_Init>
  MX_I2C2_Init();
 80012aa:	f000 f8d3 	bl	8001454 <MX_I2C2_Init>
  MX_USART1_UART_Init();
 80012ae:	f000 f8ff 	bl	80014b0 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  CLCD_I2C_Init(&LCD1, &hi2c2, 0X4e, 20, 4);
 80012b2:	2304      	movs	r3, #4
 80012b4:	9300      	str	r3, [sp, #0]
 80012b6:	2314      	movs	r3, #20
 80012b8:	224e      	movs	r2, #78	@ 0x4e
 80012ba:	491c      	ldr	r1, [pc, #112]	@ (800132c <main+0x98>)
 80012bc:	481c      	ldr	r0, [pc, #112]	@ (8001330 <main+0x9c>)
 80012be:	f7ff fea5 	bl	800100c <CLCD_I2C_Init>
  CLCD_I2C_SetCursor(&LCD1,0,0);
 80012c2:	2200      	movs	r2, #0
 80012c4:	2100      	movs	r1, #0
 80012c6:	481a      	ldr	r0, [pc, #104]	@ (8001330 <main+0x9c>)
 80012c8:	f7ff ff10 	bl	80010ec <CLCD_I2C_SetCursor>
  CLCD_I2C_WriteString(&LCD1,"Start");
 80012cc:	4919      	ldr	r1, [pc, #100]	@ (8001334 <main+0xa0>)
 80012ce:	4818      	ldr	r0, [pc, #96]	@ (8001330 <main+0x9c>)
 80012d0:	f7ff ff5f 	bl	8001192 <CLCD_I2C_WriteString>
  HAL_UART_Receive_IT(&huart1, rxData, sizeof(rxData) - 1);
 80012d4:	2204      	movs	r2, #4
 80012d6:	4918      	ldr	r1, [pc, #96]	@ (8001338 <main+0xa4>)
 80012d8:	4818      	ldr	r0, [pc, #96]	@ (800133c <main+0xa8>)
 80012da:	f003 f89a 	bl	8004412 <HAL_UART_Receive_IT>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80012de:	f003 fe6b 	bl	8004fb8 <osKernelInitialize>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of bin_sem */
  bin_semHandle = osSemaphoreNew(1, 1, &bin_sem_attributes);
 80012e2:	4a17      	ldr	r2, [pc, #92]	@ (8001340 <main+0xac>)
 80012e4:	2101      	movs	r1, #1
 80012e6:	2001      	movs	r0, #1
 80012e8:	f003 ff5b 	bl	80051a2 <osSemaphoreNew>
 80012ec:	4603      	mov	r3, r0
 80012ee:	4a15      	ldr	r2, [pc, #84]	@ (8001344 <main+0xb0>)
 80012f0:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of measure */
  measureHandle = osThreadNew(measure_task, NULL, &measure_attributes);
 80012f2:	4a15      	ldr	r2, [pc, #84]	@ (8001348 <main+0xb4>)
 80012f4:	2100      	movs	r1, #0
 80012f6:	4815      	ldr	r0, [pc, #84]	@ (800134c <main+0xb8>)
 80012f8:	f003 fea6 	bl	8005048 <osThreadNew>
 80012fc:	4603      	mov	r3, r0
 80012fe:	4a14      	ldr	r2, [pc, #80]	@ (8001350 <main+0xbc>)
 8001300:	6013      	str	r3, [r2, #0]

  /* creation of write_clcd */
  write_clcdHandle = osThreadNew(write_clcd_task, NULL, &write_clcd_attributes);
 8001302:	4a14      	ldr	r2, [pc, #80]	@ (8001354 <main+0xc0>)
 8001304:	2100      	movs	r1, #0
 8001306:	4814      	ldr	r0, [pc, #80]	@ (8001358 <main+0xc4>)
 8001308:	f003 fe9e 	bl	8005048 <osThreadNew>
 800130c:	4603      	mov	r3, r0
 800130e:	4a13      	ldr	r2, [pc, #76]	@ (800135c <main+0xc8>)
 8001310:	6013      	str	r3, [r2, #0]

  /* creation of send_uart */
  send_uartHandle = osThreadNew(send_uart_task, NULL, &send_uart_attributes);
 8001312:	4a13      	ldr	r2, [pc, #76]	@ (8001360 <main+0xcc>)
 8001314:	2100      	movs	r1, #0
 8001316:	4813      	ldr	r0, [pc, #76]	@ (8001364 <main+0xd0>)
 8001318:	f003 fe96 	bl	8005048 <osThreadNew>
 800131c:	4603      	mov	r3, r0
 800131e:	4a12      	ldr	r2, [pc, #72]	@ (8001368 <main+0xd4>)
 8001320:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8001322:	f003 fe6b 	bl	8004ffc <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001326:	bf00      	nop
 8001328:	e7fd      	b.n	8001326 <main+0x92>
 800132a:	bf00      	nop
 800132c:	20000258 	.word	0x20000258
 8001330:	20000320 	.word	0x20000320
 8001334:	0800b318 	.word	0x0800b318
 8001338:	20000310 	.word	0x20000310
 800133c:	200002ac 	.word	0x200002ac
 8001340:	0800b404 	.word	0x0800b404
 8001344:	20000300 	.word	0x20000300
 8001348:	0800b398 	.word	0x0800b398
 800134c:	08001561 	.word	0x08001561
 8001350:	200002f4 	.word	0x200002f4
 8001354:	0800b3bc 	.word	0x0800b3bc
 8001358:	080016c9 	.word	0x080016c9
 800135c:	200002f8 	.word	0x200002f8
 8001360:	0800b3e0 	.word	0x0800b3e0
 8001364:	08001819 	.word	0x08001819
 8001368:	200002fc 	.word	0x200002fc

0800136c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	b090      	sub	sp, #64	@ 0x40
 8001370:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001372:	f107 0318 	add.w	r3, r7, #24
 8001376:	2228      	movs	r2, #40	@ 0x28
 8001378:	2100      	movs	r1, #0
 800137a:	4618      	mov	r0, r3
 800137c:	f007 ff28 	bl	80091d0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001380:	1d3b      	adds	r3, r7, #4
 8001382:	2200      	movs	r2, #0
 8001384:	601a      	str	r2, [r3, #0]
 8001386:	605a      	str	r2, [r3, #4]
 8001388:	609a      	str	r2, [r3, #8]
 800138a:	60da      	str	r2, [r3, #12]
 800138c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800138e:	2301      	movs	r3, #1
 8001390:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001392:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001396:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001398:	2300      	movs	r3, #0
 800139a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800139c:	2301      	movs	r3, #1
 800139e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80013a0:	2302      	movs	r3, #2
 80013a2:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80013a4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80013a8:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80013aa:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 80013ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80013b0:	f107 0318 	add.w	r3, r7, #24
 80013b4:	4618      	mov	r0, r3
 80013b6:	f002 f8d3 	bl	8003560 <HAL_RCC_OscConfig>
 80013ba:	4603      	mov	r3, r0
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d001      	beq.n	80013c4 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80013c0:	f000 faa2 	bl	8001908 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80013c4:	230f      	movs	r3, #15
 80013c6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80013c8:	2302      	movs	r3, #2
 80013ca:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80013cc:	2300      	movs	r3, #0
 80013ce:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80013d0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80013d4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80013d6:	2300      	movs	r3, #0
 80013d8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80013da:	1d3b      	adds	r3, r7, #4
 80013dc:	2102      	movs	r1, #2
 80013de:	4618      	mov	r0, r3
 80013e0:	f002 fb40 	bl	8003a64 <HAL_RCC_ClockConfig>
 80013e4:	4603      	mov	r3, r0
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d001      	beq.n	80013ee <SystemClock_Config+0x82>
  {
    Error_Handler();
 80013ea:	f000 fa8d 	bl	8001908 <Error_Handler>
  }
}
 80013ee:	bf00      	nop
 80013f0:	3740      	adds	r7, #64	@ 0x40
 80013f2:	46bd      	mov	sp, r7
 80013f4:	bd80      	pop	{r7, pc}
	...

080013f8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80013fc:	4b12      	ldr	r3, [pc, #72]	@ (8001448 <MX_I2C1_Init+0x50>)
 80013fe:	4a13      	ldr	r2, [pc, #76]	@ (800144c <MX_I2C1_Init+0x54>)
 8001400:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001402:	4b11      	ldr	r3, [pc, #68]	@ (8001448 <MX_I2C1_Init+0x50>)
 8001404:	4a12      	ldr	r2, [pc, #72]	@ (8001450 <MX_I2C1_Init+0x58>)
 8001406:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001408:	4b0f      	ldr	r3, [pc, #60]	@ (8001448 <MX_I2C1_Init+0x50>)
 800140a:	2200      	movs	r2, #0
 800140c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800140e:	4b0e      	ldr	r3, [pc, #56]	@ (8001448 <MX_I2C1_Init+0x50>)
 8001410:	2200      	movs	r2, #0
 8001412:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001414:	4b0c      	ldr	r3, [pc, #48]	@ (8001448 <MX_I2C1_Init+0x50>)
 8001416:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800141a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800141c:	4b0a      	ldr	r3, [pc, #40]	@ (8001448 <MX_I2C1_Init+0x50>)
 800141e:	2200      	movs	r2, #0
 8001420:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001422:	4b09      	ldr	r3, [pc, #36]	@ (8001448 <MX_I2C1_Init+0x50>)
 8001424:	2200      	movs	r2, #0
 8001426:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001428:	4b07      	ldr	r3, [pc, #28]	@ (8001448 <MX_I2C1_Init+0x50>)
 800142a:	2200      	movs	r2, #0
 800142c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800142e:	4b06      	ldr	r3, [pc, #24]	@ (8001448 <MX_I2C1_Init+0x50>)
 8001430:	2200      	movs	r2, #0
 8001432:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001434:	4804      	ldr	r0, [pc, #16]	@ (8001448 <MX_I2C1_Init+0x50>)
 8001436:	f001 f85f 	bl	80024f8 <HAL_I2C_Init>
 800143a:	4603      	mov	r3, r0
 800143c:	2b00      	cmp	r3, #0
 800143e:	d001      	beq.n	8001444 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001440:	f000 fa62 	bl	8001908 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001444:	bf00      	nop
 8001446:	bd80      	pop	{r7, pc}
 8001448:	20000204 	.word	0x20000204
 800144c:	40005400 	.word	0x40005400
 8001450:	000186a0 	.word	0x000186a0

08001454 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	af00      	add	r7, sp, #0

  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */
  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001458:	4b12      	ldr	r3, [pc, #72]	@ (80014a4 <MX_I2C2_Init+0x50>)
 800145a:	4a13      	ldr	r2, [pc, #76]	@ (80014a8 <MX_I2C2_Init+0x54>)
 800145c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 800145e:	4b11      	ldr	r3, [pc, #68]	@ (80014a4 <MX_I2C2_Init+0x50>)
 8001460:	4a12      	ldr	r2, [pc, #72]	@ (80014ac <MX_I2C2_Init+0x58>)
 8001462:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001464:	4b0f      	ldr	r3, [pc, #60]	@ (80014a4 <MX_I2C2_Init+0x50>)
 8001466:	2200      	movs	r2, #0
 8001468:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 800146a:	4b0e      	ldr	r3, [pc, #56]	@ (80014a4 <MX_I2C2_Init+0x50>)
 800146c:	2200      	movs	r2, #0
 800146e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001470:	4b0c      	ldr	r3, [pc, #48]	@ (80014a4 <MX_I2C2_Init+0x50>)
 8001472:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001476:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001478:	4b0a      	ldr	r3, [pc, #40]	@ (80014a4 <MX_I2C2_Init+0x50>)
 800147a:	2200      	movs	r2, #0
 800147c:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 800147e:	4b09      	ldr	r3, [pc, #36]	@ (80014a4 <MX_I2C2_Init+0x50>)
 8001480:	2200      	movs	r2, #0
 8001482:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001484:	4b07      	ldr	r3, [pc, #28]	@ (80014a4 <MX_I2C2_Init+0x50>)
 8001486:	2200      	movs	r2, #0
 8001488:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800148a:	4b06      	ldr	r3, [pc, #24]	@ (80014a4 <MX_I2C2_Init+0x50>)
 800148c:	2200      	movs	r2, #0
 800148e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001490:	4804      	ldr	r0, [pc, #16]	@ (80014a4 <MX_I2C2_Init+0x50>)
 8001492:	f001 f831 	bl	80024f8 <HAL_I2C_Init>
 8001496:	4603      	mov	r3, r0
 8001498:	2b00      	cmp	r3, #0
 800149a:	d001      	beq.n	80014a0 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 800149c:	f000 fa34 	bl	8001908 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80014a0:	bf00      	nop
 80014a2:	bd80      	pop	{r7, pc}
 80014a4:	20000258 	.word	0x20000258
 80014a8:	40005800 	.word	0x40005800
 80014ac:	000186a0 	.word	0x000186a0

080014b0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80014b4:	4b11      	ldr	r3, [pc, #68]	@ (80014fc <MX_USART1_UART_Init+0x4c>)
 80014b6:	4a12      	ldr	r2, [pc, #72]	@ (8001500 <MX_USART1_UART_Init+0x50>)
 80014b8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80014ba:	4b10      	ldr	r3, [pc, #64]	@ (80014fc <MX_USART1_UART_Init+0x4c>)
 80014bc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80014c0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80014c2:	4b0e      	ldr	r3, [pc, #56]	@ (80014fc <MX_USART1_UART_Init+0x4c>)
 80014c4:	2200      	movs	r2, #0
 80014c6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80014c8:	4b0c      	ldr	r3, [pc, #48]	@ (80014fc <MX_USART1_UART_Init+0x4c>)
 80014ca:	2200      	movs	r2, #0
 80014cc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80014ce:	4b0b      	ldr	r3, [pc, #44]	@ (80014fc <MX_USART1_UART_Init+0x4c>)
 80014d0:	2200      	movs	r2, #0
 80014d2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80014d4:	4b09      	ldr	r3, [pc, #36]	@ (80014fc <MX_USART1_UART_Init+0x4c>)
 80014d6:	220c      	movs	r2, #12
 80014d8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014da:	4b08      	ldr	r3, [pc, #32]	@ (80014fc <MX_USART1_UART_Init+0x4c>)
 80014dc:	2200      	movs	r2, #0
 80014de:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80014e0:	4b06      	ldr	r3, [pc, #24]	@ (80014fc <MX_USART1_UART_Init+0x4c>)
 80014e2:	2200      	movs	r2, #0
 80014e4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80014e6:	4805      	ldr	r0, [pc, #20]	@ (80014fc <MX_USART1_UART_Init+0x4c>)
 80014e8:	f002 feb8 	bl	800425c <HAL_UART_Init>
 80014ec:	4603      	mov	r3, r0
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d001      	beq.n	80014f6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80014f2:	f000 fa09 	bl	8001908 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80014f6:	bf00      	nop
 80014f8:	bd80      	pop	{r7, pc}
 80014fa:	bf00      	nop
 80014fc:	200002ac 	.word	0x200002ac
 8001500:	40013800 	.word	0x40013800

08001504 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001504:	b480      	push	{r7}
 8001506:	b085      	sub	sp, #20
 8001508:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800150a:	4b14      	ldr	r3, [pc, #80]	@ (800155c <MX_GPIO_Init+0x58>)
 800150c:	699b      	ldr	r3, [r3, #24]
 800150e:	4a13      	ldr	r2, [pc, #76]	@ (800155c <MX_GPIO_Init+0x58>)
 8001510:	f043 0320 	orr.w	r3, r3, #32
 8001514:	6193      	str	r3, [r2, #24]
 8001516:	4b11      	ldr	r3, [pc, #68]	@ (800155c <MX_GPIO_Init+0x58>)
 8001518:	699b      	ldr	r3, [r3, #24]
 800151a:	f003 0320 	and.w	r3, r3, #32
 800151e:	60fb      	str	r3, [r7, #12]
 8001520:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001522:	4b0e      	ldr	r3, [pc, #56]	@ (800155c <MX_GPIO_Init+0x58>)
 8001524:	699b      	ldr	r3, [r3, #24]
 8001526:	4a0d      	ldr	r2, [pc, #52]	@ (800155c <MX_GPIO_Init+0x58>)
 8001528:	f043 0308 	orr.w	r3, r3, #8
 800152c:	6193      	str	r3, [r2, #24]
 800152e:	4b0b      	ldr	r3, [pc, #44]	@ (800155c <MX_GPIO_Init+0x58>)
 8001530:	699b      	ldr	r3, [r3, #24]
 8001532:	f003 0308 	and.w	r3, r3, #8
 8001536:	60bb      	str	r3, [r7, #8]
 8001538:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800153a:	4b08      	ldr	r3, [pc, #32]	@ (800155c <MX_GPIO_Init+0x58>)
 800153c:	699b      	ldr	r3, [r3, #24]
 800153e:	4a07      	ldr	r2, [pc, #28]	@ (800155c <MX_GPIO_Init+0x58>)
 8001540:	f043 0304 	orr.w	r3, r3, #4
 8001544:	6193      	str	r3, [r2, #24]
 8001546:	4b05      	ldr	r3, [pc, #20]	@ (800155c <MX_GPIO_Init+0x58>)
 8001548:	699b      	ldr	r3, [r3, #24]
 800154a:	f003 0304 	and.w	r3, r3, #4
 800154e:	607b      	str	r3, [r7, #4]
 8001550:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001552:	bf00      	nop
 8001554:	3714      	adds	r7, #20
 8001556:	46bd      	mov	sp, r7
 8001558:	bc80      	pop	{r7}
 800155a:	4770      	bx	lr
 800155c:	40021000 	.word	0x40021000

08001560 <measure_task>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_measure_task */
void measure_task(void *argument)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	b086      	sub	sp, #24
 8001564:	af02      	add	r7, sp, #8
 8001566:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	/* Infinite loop */
  for(;;)
  {
	a++;
 8001568:	4b47      	ldr	r3, [pc, #284]	@ (8001688 <measure_task+0x128>)
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	3301      	adds	r3, #1
 800156e:	4a46      	ldr	r2, [pc, #280]	@ (8001688 <measure_task+0x128>)
 8001570:	6013      	str	r3, [r2, #0]
	start_time_SHTC3 = HAL_GetTick();
 8001572:	f000 fc7d 	bl	8001e70 <HAL_GetTick>
 8001576:	4603      	mov	r3, r0
 8001578:	4a44      	ldr	r2, [pc, #272]	@ (800168c <measure_task+0x12c>)
 800157a:	6013      	str	r3, [r2, #0]
	uint16_t hex_ther;
	uint16_t hex_moisture;
	HAL_I2C_Master_Transmit(&hi2c1,SHTC3_ADDRESS, wakeup_cmd ,2, 500);
 800157c:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8001580:	9300      	str	r3, [sp, #0]
 8001582:	2302      	movs	r3, #2
 8001584:	4a42      	ldr	r2, [pc, #264]	@ (8001690 <measure_task+0x130>)
 8001586:	21e0      	movs	r1, #224	@ 0xe0
 8001588:	4842      	ldr	r0, [pc, #264]	@ (8001694 <measure_task+0x134>)
 800158a:	f001 f8f9 	bl	8002780 <HAL_I2C_Master_Transmit>
	HAL_Delay(1);
 800158e:	2001      	movs	r0, #1
 8001590:	f000 fc78 	bl	8001e84 <HAL_Delay>
	HAL_I2C_Master_Transmit(&hi2c1,SHTC3_ADDRESS, measure_cmd ,2, 500);
 8001594:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8001598:	9300      	str	r3, [sp, #0]
 800159a:	2302      	movs	r3, #2
 800159c:	4a3e      	ldr	r2, [pc, #248]	@ (8001698 <measure_task+0x138>)
 800159e:	21e0      	movs	r1, #224	@ 0xe0
 80015a0:	483c      	ldr	r0, [pc, #240]	@ (8001694 <measure_task+0x134>)
 80015a2:	f001 f8ed 	bl	8002780 <HAL_I2C_Master_Transmit>
	HAL_Delay(15);
 80015a6:	200f      	movs	r0, #15
 80015a8:	f000 fc6c 	bl	8001e84 <HAL_Delay>
	HAL_I2C_Master_Receive(&hi2c1,SHTC3_ADDRESS, rev_buffer ,6,500);
 80015ac:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 80015b0:	9300      	str	r3, [sp, #0]
 80015b2:	2306      	movs	r3, #6
 80015b4:	4a39      	ldr	r2, [pc, #228]	@ (800169c <measure_task+0x13c>)
 80015b6:	21e0      	movs	r1, #224	@ 0xe0
 80015b8:	4836      	ldr	r0, [pc, #216]	@ (8001694 <measure_task+0x134>)
 80015ba:	f001 f9df 	bl	800297c <HAL_I2C_Master_Receive>
	HAL_I2C_Master_Transmit(&hi2c1,SHTC3_ADDRESS, sleep_cmd ,2, 500);
 80015be:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 80015c2:	9300      	str	r3, [sp, #0]
 80015c4:	2302      	movs	r3, #2
 80015c6:	4a36      	ldr	r2, [pc, #216]	@ (80016a0 <measure_task+0x140>)
 80015c8:	21e0      	movs	r1, #224	@ 0xe0
 80015ca:	4832      	ldr	r0, [pc, #200]	@ (8001694 <measure_task+0x134>)
 80015cc:	f001 f8d8 	bl	8002780 <HAL_I2C_Master_Transmit>
	hex_ther = (rev_buffer[0]<<8)|rev_buffer[1];
 80015d0:	4b32      	ldr	r3, [pc, #200]	@ (800169c <measure_task+0x13c>)
 80015d2:	781b      	ldrb	r3, [r3, #0]
 80015d4:	021b      	lsls	r3, r3, #8
 80015d6:	b21a      	sxth	r2, r3
 80015d8:	4b30      	ldr	r3, [pc, #192]	@ (800169c <measure_task+0x13c>)
 80015da:	785b      	ldrb	r3, [r3, #1]
 80015dc:	b21b      	sxth	r3, r3
 80015de:	4313      	orrs	r3, r2
 80015e0:	b21b      	sxth	r3, r3
 80015e2:	81fb      	strh	r3, [r7, #14]
	hex_moisture = (rev_buffer[3]<<8)|rev_buffer[4];
 80015e4:	4b2d      	ldr	r3, [pc, #180]	@ (800169c <measure_task+0x13c>)
 80015e6:	78db      	ldrb	r3, [r3, #3]
 80015e8:	021b      	lsls	r3, r3, #8
 80015ea:	b21a      	sxth	r2, r3
 80015ec:	4b2b      	ldr	r3, [pc, #172]	@ (800169c <measure_task+0x13c>)
 80015ee:	791b      	ldrb	r3, [r3, #4]
 80015f0:	b21b      	sxth	r3, r3
 80015f2:	4313      	orrs	r3, r2
 80015f4:	b21b      	sxth	r3, r3
 80015f6:	81bb      	strh	r3, [r7, #12]
	if (osSemaphoreAcquire(bin_semHandle, osWaitForever) == osOK) {
 80015f8:	4b2a      	ldr	r3, [pc, #168]	@ (80016a4 <measure_task+0x144>)
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	f04f 31ff 	mov.w	r1, #4294967295
 8001600:	4618      	mov	r0, r3
 8001602:	f003 fe57 	bl	80052b4 <osSemaphoreAcquire>
 8001606:	4603      	mov	r3, r0
 8001608:	2b00      	cmp	r3, #0
 800160a:	d12d      	bne.n	8001668 <measure_task+0x108>
		temperature = -45.0f + 175.0f * (float)hex_ther / 65535.0f;
 800160c:	89fb      	ldrh	r3, [r7, #14]
 800160e:	4618      	mov	r0, r3
 8001610:	f7ff faf0 	bl	8000bf4 <__aeabi_ui2f>
 8001614:	4603      	mov	r3, r0
 8001616:	4924      	ldr	r1, [pc, #144]	@ (80016a8 <measure_task+0x148>)
 8001618:	4618      	mov	r0, r3
 800161a:	f7ff fb43 	bl	8000ca4 <__aeabi_fmul>
 800161e:	4603      	mov	r3, r0
 8001620:	4922      	ldr	r1, [pc, #136]	@ (80016ac <measure_task+0x14c>)
 8001622:	4618      	mov	r0, r3
 8001624:	f7ff fbf2 	bl	8000e0c <__aeabi_fdiv>
 8001628:	4603      	mov	r3, r0
 800162a:	4921      	ldr	r1, [pc, #132]	@ (80016b0 <measure_task+0x150>)
 800162c:	4618      	mov	r0, r3
 800162e:	f7ff fa2f 	bl	8000a90 <__aeabi_fsub>
 8001632:	4603      	mov	r3, r0
 8001634:	461a      	mov	r2, r3
 8001636:	4b1f      	ldr	r3, [pc, #124]	@ (80016b4 <measure_task+0x154>)
 8001638:	601a      	str	r2, [r3, #0]
		humidity = 100.0f * (float)hex_moisture / 65535.0f;
 800163a:	89bb      	ldrh	r3, [r7, #12]
 800163c:	4618      	mov	r0, r3
 800163e:	f7ff fad9 	bl	8000bf4 <__aeabi_ui2f>
 8001642:	4603      	mov	r3, r0
 8001644:	491c      	ldr	r1, [pc, #112]	@ (80016b8 <measure_task+0x158>)
 8001646:	4618      	mov	r0, r3
 8001648:	f7ff fb2c 	bl	8000ca4 <__aeabi_fmul>
 800164c:	4603      	mov	r3, r0
 800164e:	4917      	ldr	r1, [pc, #92]	@ (80016ac <measure_task+0x14c>)
 8001650:	4618      	mov	r0, r3
 8001652:	f7ff fbdb 	bl	8000e0c <__aeabi_fdiv>
 8001656:	4603      	mov	r3, r0
 8001658:	461a      	mov	r2, r3
 800165a:	4b18      	ldr	r3, [pc, #96]	@ (80016bc <measure_task+0x15c>)
 800165c:	601a      	str	r2, [r3, #0]
		// Release Semaphore
		osSemaphoreRelease(bin_semHandle);
 800165e:	4b11      	ldr	r3, [pc, #68]	@ (80016a4 <measure_task+0x144>)
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	4618      	mov	r0, r3
 8001664:	f003 fe78 	bl	8005358 <osSemaphoreRelease>
	}
	end_time_SHTC3 = HAL_GetTick();
 8001668:	f000 fc02 	bl	8001e70 <HAL_GetTick>
 800166c:	4603      	mov	r3, r0
 800166e:	4a14      	ldr	r2, [pc, #80]	@ (80016c0 <measure_task+0x160>)
 8001670:	6013      	str	r3, [r2, #0]
	elapsed_time_SHTC3 = -(start_time_SHTC3 - end_time_SHTC3);
 8001672:	4b13      	ldr	r3, [pc, #76]	@ (80016c0 <measure_task+0x160>)
 8001674:	681a      	ldr	r2, [r3, #0]
 8001676:	4b05      	ldr	r3, [pc, #20]	@ (800168c <measure_task+0x12c>)
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	1ad3      	subs	r3, r2, r3
 800167c:	4a11      	ldr	r2, [pc, #68]	@ (80016c4 <measure_task+0x164>)
 800167e:	6013      	str	r3, [r2, #0]
	osDelay(250);
 8001680:	20fa      	movs	r0, #250	@ 0xfa
 8001682:	f003 fd73 	bl	800516c <osDelay>
  {
 8001686:	e76f      	b.n	8001568 <measure_task+0x8>
 8001688:	20000304 	.word	0x20000304
 800168c:	20000334 	.word	0x20000334
 8001690:	20000004 	.word	0x20000004
 8001694:	20000204 	.word	0x20000204
 8001698:	20000008 	.word	0x20000008
 800169c:	2000032c 	.word	0x2000032c
 80016a0:	2000000c 	.word	0x2000000c
 80016a4:	20000300 	.word	0x20000300
 80016a8:	432f0000 	.word	0x432f0000
 80016ac:	477fff00 	.word	0x477fff00
 80016b0:	42340000 	.word	0x42340000
 80016b4:	20000318 	.word	0x20000318
 80016b8:	42c80000 	.word	0x42c80000
 80016bc:	2000031c 	.word	0x2000031c
 80016c0:	20000338 	.word	0x20000338
 80016c4:	2000033c 	.word	0x2000033c

080016c8 <write_clcd_task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_write_clcd_task */
void write_clcd_task(void *argument)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b08c      	sub	sp, #48	@ 0x30
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN write_clcd_task */
  /* Infinite loop */
  for(;;)
  {
	c++;
 80016d0:	4b45      	ldr	r3, [pc, #276]	@ (80017e8 <write_clcd_task+0x120>)
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	3301      	adds	r3, #1
 80016d6:	4a44      	ldr	r2, [pc, #272]	@ (80017e8 <write_clcd_task+0x120>)
 80016d8:	6013      	str	r3, [r2, #0]
	start_time_CLCD = HAL_GetTick();
 80016da:	f000 fbc9 	bl	8001e70 <HAL_GetTick>
 80016de:	4603      	mov	r3, r0
 80016e0:	4a42      	ldr	r2, [pc, #264]	@ (80017ec <write_clcd_task+0x124>)
 80016e2:	6013      	str	r3, [r2, #0]
	char lcd_line1[17];
	char lcd_line2[17];
	if (osSemaphoreAcquire(bin_semHandle, osWaitForever) == osOK) {
 80016e4:	4b42      	ldr	r3, [pc, #264]	@ (80017f0 <write_clcd_task+0x128>)
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	f04f 31ff 	mov.w	r1, #4294967295
 80016ec:	4618      	mov	r0, r3
 80016ee:	f003 fde1 	bl	80052b4 <osSemaphoreAcquire>
 80016f2:	4603      	mov	r3, r0
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d14f      	bne.n	8001798 <write_clcd_task+0xd0>
		switch(DisplayMode){
 80016f8:	4b3e      	ldr	r3, [pc, #248]	@ (80017f4 <write_clcd_task+0x12c>)
 80016fa:	781b      	ldrb	r3, [r3, #0]
 80016fc:	b2db      	uxtb	r3, r3
 80016fe:	2b02      	cmp	r3, #2
 8001700:	d006      	beq.n	8001710 <write_clcd_task+0x48>
 8001702:	2b02      	cmp	r3, #2
 8001704:	dc43      	bgt.n	800178e <write_clcd_task+0xc6>
 8001706:	2b00      	cmp	r3, #0
 8001708:	d02e      	beq.n	8001768 <write_clcd_task+0xa0>
 800170a:	2b01      	cmp	r3, #1
 800170c:	d019      	beq.n	8001742 <write_clcd_task+0x7a>
 800170e:	e03e      	b.n	800178e <write_clcd_task+0xc6>
			case DISPLAY_ALL:
				sprintf(lcd_line2, "Humidity: %.2f%%", humidity);
 8001710:	4b39      	ldr	r3, [pc, #228]	@ (80017f8 <write_clcd_task+0x130>)
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	4618      	mov	r0, r3
 8001716:	f7fe fe87 	bl	8000428 <__aeabi_f2d>
 800171a:	4602      	mov	r2, r0
 800171c:	460b      	mov	r3, r1
 800171e:	f107 0008 	add.w	r0, r7, #8
 8001722:	4936      	ldr	r1, [pc, #216]	@ (80017fc <write_clcd_task+0x134>)
 8001724:	f007 fc5c 	bl	8008fe0 <siprintf>
				sprintf(lcd_line1, "Temp: %.2f C   ",temperature);
 8001728:	4b35      	ldr	r3, [pc, #212]	@ (8001800 <write_clcd_task+0x138>)
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	4618      	mov	r0, r3
 800172e:	f7fe fe7b 	bl	8000428 <__aeabi_f2d>
 8001732:	4602      	mov	r2, r0
 8001734:	460b      	mov	r3, r1
 8001736:	f107 001c 	add.w	r0, r7, #28
 800173a:	4932      	ldr	r1, [pc, #200]	@ (8001804 <write_clcd_task+0x13c>)
 800173c:	f007 fc50 	bl	8008fe0 <siprintf>
				break;
 8001740:	e025      	b.n	800178e <write_clcd_task+0xc6>
			case DISPLAY_HUMID:
				sprintf(lcd_line1, "Humidity: %.2f%%", humidity);
 8001742:	4b2d      	ldr	r3, [pc, #180]	@ (80017f8 <write_clcd_task+0x130>)
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	4618      	mov	r0, r3
 8001748:	f7fe fe6e 	bl	8000428 <__aeabi_f2d>
 800174c:	4602      	mov	r2, r0
 800174e:	460b      	mov	r3, r1
 8001750:	f107 001c 	add.w	r0, r7, #28
 8001754:	4929      	ldr	r1, [pc, #164]	@ (80017fc <write_clcd_task+0x134>)
 8001756:	f007 fc43 	bl	8008fe0 <siprintf>
				sprintf(lcd_line2, "                ");
 800175a:	f107 0308 	add.w	r3, r7, #8
 800175e:	492a      	ldr	r1, [pc, #168]	@ (8001808 <write_clcd_task+0x140>)
 8001760:	4618      	mov	r0, r3
 8001762:	f007 fc3d 	bl	8008fe0 <siprintf>
				break;
 8001766:	e012      	b.n	800178e <write_clcd_task+0xc6>
			case DISPLAY_TEMP:
				sprintf(lcd_line1, "Temp: %.2f C   ",temperature);
 8001768:	4b25      	ldr	r3, [pc, #148]	@ (8001800 <write_clcd_task+0x138>)
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	4618      	mov	r0, r3
 800176e:	f7fe fe5b 	bl	8000428 <__aeabi_f2d>
 8001772:	4602      	mov	r2, r0
 8001774:	460b      	mov	r3, r1
 8001776:	f107 001c 	add.w	r0, r7, #28
 800177a:	4922      	ldr	r1, [pc, #136]	@ (8001804 <write_clcd_task+0x13c>)
 800177c:	f007 fc30 	bl	8008fe0 <siprintf>
				sprintf(lcd_line2, "                ");
 8001780:	f107 0308 	add.w	r3, r7, #8
 8001784:	4920      	ldr	r1, [pc, #128]	@ (8001808 <write_clcd_task+0x140>)
 8001786:	4618      	mov	r0, r3
 8001788:	f007 fc2a 	bl	8008fe0 <siprintf>
				break;
 800178c:	bf00      	nop
		}
		// Release Semaphore
		osSemaphoreRelease(bin_semHandle);
 800178e:	4b18      	ldr	r3, [pc, #96]	@ (80017f0 <write_clcd_task+0x128>)
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	4618      	mov	r0, r3
 8001794:	f003 fde0 	bl	8005358 <osSemaphoreRelease>
	}
	CLCD_I2C_SetCursor(&LCD1,0,0);
 8001798:	2200      	movs	r2, #0
 800179a:	2100      	movs	r1, #0
 800179c:	481b      	ldr	r0, [pc, #108]	@ (800180c <write_clcd_task+0x144>)
 800179e:	f7ff fca5 	bl	80010ec <CLCD_I2C_SetCursor>
	CLCD_I2C_WriteString(&LCD1,lcd_line1);
 80017a2:	f107 031c 	add.w	r3, r7, #28
 80017a6:	4619      	mov	r1, r3
 80017a8:	4818      	ldr	r0, [pc, #96]	@ (800180c <write_clcd_task+0x144>)
 80017aa:	f7ff fcf2 	bl	8001192 <CLCD_I2C_WriteString>
	CLCD_I2C_SetCursor(&LCD1,0,1);
 80017ae:	2201      	movs	r2, #1
 80017b0:	2100      	movs	r1, #0
 80017b2:	4816      	ldr	r0, [pc, #88]	@ (800180c <write_clcd_task+0x144>)
 80017b4:	f7ff fc9a 	bl	80010ec <CLCD_I2C_SetCursor>
	CLCD_I2C_WriteString(&LCD1,lcd_line2);
 80017b8:	f107 0308 	add.w	r3, r7, #8
 80017bc:	4619      	mov	r1, r3
 80017be:	4813      	ldr	r0, [pc, #76]	@ (800180c <write_clcd_task+0x144>)
 80017c0:	f7ff fce7 	bl	8001192 <CLCD_I2C_WriteString>
	end_time_CLCD = HAL_GetTick();
 80017c4:	f000 fb54 	bl	8001e70 <HAL_GetTick>
 80017c8:	4603      	mov	r3, r0
 80017ca:	4a11      	ldr	r2, [pc, #68]	@ (8001810 <write_clcd_task+0x148>)
 80017cc:	6013      	str	r3, [r2, #0]
	elapsed_time_CLCD = -(start_time_CLCD - end_time_CLCD);
 80017ce:	4b10      	ldr	r3, [pc, #64]	@ (8001810 <write_clcd_task+0x148>)
 80017d0:	681a      	ldr	r2, [r3, #0]
 80017d2:	4b06      	ldr	r3, [pc, #24]	@ (80017ec <write_clcd_task+0x124>)
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	1ad3      	subs	r3, r2, r3
 80017d8:	4a0e      	ldr	r2, [pc, #56]	@ (8001814 <write_clcd_task+0x14c>)
 80017da:	6013      	str	r3, [r2, #0]
	osDelay(5000);
 80017dc:	f241 3088 	movw	r0, #5000	@ 0x1388
 80017e0:	f003 fcc4 	bl	800516c <osDelay>
  {
 80017e4:	e774      	b.n	80016d0 <write_clcd_task+0x8>
 80017e6:	bf00      	nop
 80017e8:	2000030c 	.word	0x2000030c
 80017ec:	20000340 	.word	0x20000340
 80017f0:	20000300 	.word	0x20000300
 80017f4:	20000000 	.word	0x20000000
 80017f8:	2000031c 	.word	0x2000031c
 80017fc:	0800b320 	.word	0x0800b320
 8001800:	20000318 	.word	0x20000318
 8001804:	0800b334 	.word	0x0800b334
 8001808:	0800b344 	.word	0x0800b344
 800180c:	20000320 	.word	0x20000320
 8001810:	20000344 	.word	0x20000344
 8001814:	20000348 	.word	0x20000348

08001818 <send_uart_task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_send_uart_task */
void send_uart_task(void *argument)
{
 8001818:	b5b0      	push	{r4, r5, r7, lr}
 800181a:	b094      	sub	sp, #80	@ 0x50
 800181c:	af02      	add	r7, sp, #8
 800181e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN send_uart_task */
  /* Infinite loop */
  for(;;)
  {
	b++;
 8001820:	4b27      	ldr	r3, [pc, #156]	@ (80018c0 <send_uart_task+0xa8>)
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	3301      	adds	r3, #1
 8001826:	4a26      	ldr	r2, [pc, #152]	@ (80018c0 <send_uart_task+0xa8>)
 8001828:	6013      	str	r3, [r2, #0]
	start_time_UART = HAL_GetTick();
 800182a:	f000 fb21 	bl	8001e70 <HAL_GetTick>
 800182e:	4603      	mov	r3, r0
 8001830:	4a24      	ldr	r2, [pc, #144]	@ (80018c4 <send_uart_task+0xac>)
 8001832:	6013      	str	r3, [r2, #0]
	if (osSemaphoreAcquire(bin_semHandle, osWaitForever) == osOK) {
 8001834:	4b24      	ldr	r3, [pc, #144]	@ (80018c8 <send_uart_task+0xb0>)
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	f04f 31ff 	mov.w	r1, #4294967295
 800183c:	4618      	mov	r0, r3
 800183e:	f003 fd39 	bl	80052b4 <osSemaphoreAcquire>
 8001842:	4603      	mov	r3, r0
 8001844:	2b00      	cmp	r3, #0
 8001846:	d129      	bne.n	800189c <send_uart_task+0x84>
	char data[64];
		sprintf(data, "Temperature: %.2f C, Humidity: %.2f%%\r\n", temperature, humidity);
 8001848:	4b20      	ldr	r3, [pc, #128]	@ (80018cc <send_uart_task+0xb4>)
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	4618      	mov	r0, r3
 800184e:	f7fe fdeb 	bl	8000428 <__aeabi_f2d>
 8001852:	4604      	mov	r4, r0
 8001854:	460d      	mov	r5, r1
 8001856:	4b1e      	ldr	r3, [pc, #120]	@ (80018d0 <send_uart_task+0xb8>)
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	4618      	mov	r0, r3
 800185c:	f7fe fde4 	bl	8000428 <__aeabi_f2d>
 8001860:	4602      	mov	r2, r0
 8001862:	460b      	mov	r3, r1
 8001864:	f107 0008 	add.w	r0, r7, #8
 8001868:	e9cd 2300 	strd	r2, r3, [sp]
 800186c:	4622      	mov	r2, r4
 800186e:	462b      	mov	r3, r5
 8001870:	4918      	ldr	r1, [pc, #96]	@ (80018d4 <send_uart_task+0xbc>)
 8001872:	f007 fbb5 	bl	8008fe0 <siprintf>
		HAL_UART_Transmit(&huart1, (uint8_t*)data, strlen(data), 1000);
 8001876:	f107 0308 	add.w	r3, r7, #8
 800187a:	4618      	mov	r0, r3
 800187c:	f7fe fc68 	bl	8000150 <strlen>
 8001880:	4603      	mov	r3, r0
 8001882:	b29a      	uxth	r2, r3
 8001884:	f107 0108 	add.w	r1, r7, #8
 8001888:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800188c:	4812      	ldr	r0, [pc, #72]	@ (80018d8 <send_uart_task+0xc0>)
 800188e:	f002 fd35 	bl	80042fc <HAL_UART_Transmit>

		// Release Semaphore
		osSemaphoreRelease(bin_semHandle);
 8001892:	4b0d      	ldr	r3, [pc, #52]	@ (80018c8 <send_uart_task+0xb0>)
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	4618      	mov	r0, r3
 8001898:	f003 fd5e 	bl	8005358 <osSemaphoreRelease>
	}
	end_time_UART = HAL_GetTick();
 800189c:	f000 fae8 	bl	8001e70 <HAL_GetTick>
 80018a0:	4603      	mov	r3, r0
 80018a2:	4a0e      	ldr	r2, [pc, #56]	@ (80018dc <send_uart_task+0xc4>)
 80018a4:	6013      	str	r3, [r2, #0]
	elapsed_time_UART = -(start_time_UART - end_time_UART);
 80018a6:	4b0d      	ldr	r3, [pc, #52]	@ (80018dc <send_uart_task+0xc4>)
 80018a8:	681a      	ldr	r2, [r3, #0]
 80018aa:	4b06      	ldr	r3, [pc, #24]	@ (80018c4 <send_uart_task+0xac>)
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	1ad3      	subs	r3, r2, r3
 80018b0:	4a0b      	ldr	r2, [pc, #44]	@ (80018e0 <send_uart_task+0xc8>)
 80018b2:	6013      	str	r3, [r2, #0]
	osDelay(1000);
 80018b4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80018b8:	f003 fc58 	bl	800516c <osDelay>
	b++;
 80018bc:	e7b0      	b.n	8001820 <send_uart_task+0x8>
 80018be:	bf00      	nop
 80018c0:	20000308 	.word	0x20000308
 80018c4:	2000034c 	.word	0x2000034c
 80018c8:	20000300 	.word	0x20000300
 80018cc:	20000318 	.word	0x20000318
 80018d0:	2000031c 	.word	0x2000031c
 80018d4:	0800b358 	.word	0x0800b358
 80018d8:	200002ac 	.word	0x200002ac
 80018dc:	20000350 	.word	0x20000350
 80018e0:	20000354 	.word	0x20000354

080018e4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b082      	sub	sp, #8
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	4a04      	ldr	r2, [pc, #16]	@ (8001904 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80018f2:	4293      	cmp	r3, r2
 80018f4:	d101      	bne.n	80018fa <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80018f6:	f000 faa9 	bl	8001e4c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */
  /* USER CODE END Callback 1 */
}
 80018fa:	bf00      	nop
 80018fc:	3708      	adds	r7, #8
 80018fe:	46bd      	mov	sp, r7
 8001900:	bd80      	pop	{r7, pc}
 8001902:	bf00      	nop
 8001904:	40012c00 	.word	0x40012c00

08001908 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001908:	b480      	push	{r7}
 800190a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800190c:	b672      	cpsid	i
}
 800190e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001910:	bf00      	nop
 8001912:	e7fd      	b.n	8001910 <Error_Handler+0x8>

08001914 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	b084      	sub	sp, #16
 8001918:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800191a:	4b18      	ldr	r3, [pc, #96]	@ (800197c <HAL_MspInit+0x68>)
 800191c:	699b      	ldr	r3, [r3, #24]
 800191e:	4a17      	ldr	r2, [pc, #92]	@ (800197c <HAL_MspInit+0x68>)
 8001920:	f043 0301 	orr.w	r3, r3, #1
 8001924:	6193      	str	r3, [r2, #24]
 8001926:	4b15      	ldr	r3, [pc, #84]	@ (800197c <HAL_MspInit+0x68>)
 8001928:	699b      	ldr	r3, [r3, #24]
 800192a:	f003 0301 	and.w	r3, r3, #1
 800192e:	60bb      	str	r3, [r7, #8]
 8001930:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001932:	4b12      	ldr	r3, [pc, #72]	@ (800197c <HAL_MspInit+0x68>)
 8001934:	69db      	ldr	r3, [r3, #28]
 8001936:	4a11      	ldr	r2, [pc, #68]	@ (800197c <HAL_MspInit+0x68>)
 8001938:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800193c:	61d3      	str	r3, [r2, #28]
 800193e:	4b0f      	ldr	r3, [pc, #60]	@ (800197c <HAL_MspInit+0x68>)
 8001940:	69db      	ldr	r3, [r3, #28]
 8001942:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001946:	607b      	str	r3, [r7, #4]
 8001948:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800194a:	2200      	movs	r2, #0
 800194c:	210f      	movs	r1, #15
 800194e:	f06f 0001 	mvn.w	r0, #1
 8001952:	f000 fb70 	bl	8002036 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001956:	4b0a      	ldr	r3, [pc, #40]	@ (8001980 <HAL_MspInit+0x6c>)
 8001958:	685b      	ldr	r3, [r3, #4]
 800195a:	60fb      	str	r3, [r7, #12]
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8001962:	60fb      	str	r3, [r7, #12]
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800196a:	60fb      	str	r3, [r7, #12]
 800196c:	4a04      	ldr	r2, [pc, #16]	@ (8001980 <HAL_MspInit+0x6c>)
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001972:	bf00      	nop
 8001974:	3710      	adds	r7, #16
 8001976:	46bd      	mov	sp, r7
 8001978:	bd80      	pop	{r7, pc}
 800197a:	bf00      	nop
 800197c:	40021000 	.word	0x40021000
 8001980:	40010000 	.word	0x40010000

08001984 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	b08a      	sub	sp, #40	@ 0x28
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800198c:	f107 0318 	add.w	r3, r7, #24
 8001990:	2200      	movs	r2, #0
 8001992:	601a      	str	r2, [r3, #0]
 8001994:	605a      	str	r2, [r3, #4]
 8001996:	609a      	str	r2, [r3, #8]
 8001998:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	4a2b      	ldr	r2, [pc, #172]	@ (8001a4c <HAL_I2C_MspInit+0xc8>)
 80019a0:	4293      	cmp	r3, r2
 80019a2:	d124      	bne.n	80019ee <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019a4:	4b2a      	ldr	r3, [pc, #168]	@ (8001a50 <HAL_I2C_MspInit+0xcc>)
 80019a6:	699b      	ldr	r3, [r3, #24]
 80019a8:	4a29      	ldr	r2, [pc, #164]	@ (8001a50 <HAL_I2C_MspInit+0xcc>)
 80019aa:	f043 0308 	orr.w	r3, r3, #8
 80019ae:	6193      	str	r3, [r2, #24]
 80019b0:	4b27      	ldr	r3, [pc, #156]	@ (8001a50 <HAL_I2C_MspInit+0xcc>)
 80019b2:	699b      	ldr	r3, [r3, #24]
 80019b4:	f003 0308 	and.w	r3, r3, #8
 80019b8:	617b      	str	r3, [r7, #20]
 80019ba:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = SHTC3_SCL_Pin|SHTC3_SDA_Pin;
 80019bc:	23c0      	movs	r3, #192	@ 0xc0
 80019be:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80019c0:	2312      	movs	r3, #18
 80019c2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80019c4:	2303      	movs	r3, #3
 80019c6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019c8:	f107 0318 	add.w	r3, r7, #24
 80019cc:	4619      	mov	r1, r3
 80019ce:	4821      	ldr	r0, [pc, #132]	@ (8001a54 <HAL_I2C_MspInit+0xd0>)
 80019d0:	f000 fc0e 	bl	80021f0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80019d4:	4b1e      	ldr	r3, [pc, #120]	@ (8001a50 <HAL_I2C_MspInit+0xcc>)
 80019d6:	69db      	ldr	r3, [r3, #28]
 80019d8:	4a1d      	ldr	r2, [pc, #116]	@ (8001a50 <HAL_I2C_MspInit+0xcc>)
 80019da:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80019de:	61d3      	str	r3, [r2, #28]
 80019e0:	4b1b      	ldr	r3, [pc, #108]	@ (8001a50 <HAL_I2C_MspInit+0xcc>)
 80019e2:	69db      	ldr	r3, [r3, #28]
 80019e4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80019e8:	613b      	str	r3, [r7, #16]
 80019ea:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80019ec:	e029      	b.n	8001a42 <HAL_I2C_MspInit+0xbe>
  else if(hi2c->Instance==I2C2)
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	4a19      	ldr	r2, [pc, #100]	@ (8001a58 <HAL_I2C_MspInit+0xd4>)
 80019f4:	4293      	cmp	r3, r2
 80019f6:	d124      	bne.n	8001a42 <HAL_I2C_MspInit+0xbe>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019f8:	4b15      	ldr	r3, [pc, #84]	@ (8001a50 <HAL_I2C_MspInit+0xcc>)
 80019fa:	699b      	ldr	r3, [r3, #24]
 80019fc:	4a14      	ldr	r2, [pc, #80]	@ (8001a50 <HAL_I2C_MspInit+0xcc>)
 80019fe:	f043 0308 	orr.w	r3, r3, #8
 8001a02:	6193      	str	r3, [r2, #24]
 8001a04:	4b12      	ldr	r3, [pc, #72]	@ (8001a50 <HAL_I2C_MspInit+0xcc>)
 8001a06:	699b      	ldr	r3, [r3, #24]
 8001a08:	f003 0308 	and.w	r3, r3, #8
 8001a0c:	60fb      	str	r3, [r7, #12]
 8001a0e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 8001a10:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001a14:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001a16:	2312      	movs	r3, #18
 8001a18:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001a1a:	2303      	movs	r3, #3
 8001a1c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a1e:	f107 0318 	add.w	r3, r7, #24
 8001a22:	4619      	mov	r1, r3
 8001a24:	480b      	ldr	r0, [pc, #44]	@ (8001a54 <HAL_I2C_MspInit+0xd0>)
 8001a26:	f000 fbe3 	bl	80021f0 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001a2a:	4b09      	ldr	r3, [pc, #36]	@ (8001a50 <HAL_I2C_MspInit+0xcc>)
 8001a2c:	69db      	ldr	r3, [r3, #28]
 8001a2e:	4a08      	ldr	r2, [pc, #32]	@ (8001a50 <HAL_I2C_MspInit+0xcc>)
 8001a30:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001a34:	61d3      	str	r3, [r2, #28]
 8001a36:	4b06      	ldr	r3, [pc, #24]	@ (8001a50 <HAL_I2C_MspInit+0xcc>)
 8001a38:	69db      	ldr	r3, [r3, #28]
 8001a3a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001a3e:	60bb      	str	r3, [r7, #8]
 8001a40:	68bb      	ldr	r3, [r7, #8]
}
 8001a42:	bf00      	nop
 8001a44:	3728      	adds	r7, #40	@ 0x28
 8001a46:	46bd      	mov	sp, r7
 8001a48:	bd80      	pop	{r7, pc}
 8001a4a:	bf00      	nop
 8001a4c:	40005400 	.word	0x40005400
 8001a50:	40021000 	.word	0x40021000
 8001a54:	40010c00 	.word	0x40010c00
 8001a58:	40005800 	.word	0x40005800

08001a5c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b088      	sub	sp, #32
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a64:	f107 0310 	add.w	r3, r7, #16
 8001a68:	2200      	movs	r2, #0
 8001a6a:	601a      	str	r2, [r3, #0]
 8001a6c:	605a      	str	r2, [r3, #4]
 8001a6e:	609a      	str	r2, [r3, #8]
 8001a70:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	4a20      	ldr	r2, [pc, #128]	@ (8001af8 <HAL_UART_MspInit+0x9c>)
 8001a78:	4293      	cmp	r3, r2
 8001a7a:	d139      	bne.n	8001af0 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001a7c:	4b1f      	ldr	r3, [pc, #124]	@ (8001afc <HAL_UART_MspInit+0xa0>)
 8001a7e:	699b      	ldr	r3, [r3, #24]
 8001a80:	4a1e      	ldr	r2, [pc, #120]	@ (8001afc <HAL_UART_MspInit+0xa0>)
 8001a82:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001a86:	6193      	str	r3, [r2, #24]
 8001a88:	4b1c      	ldr	r3, [pc, #112]	@ (8001afc <HAL_UART_MspInit+0xa0>)
 8001a8a:	699b      	ldr	r3, [r3, #24]
 8001a8c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001a90:	60fb      	str	r3, [r7, #12]
 8001a92:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a94:	4b19      	ldr	r3, [pc, #100]	@ (8001afc <HAL_UART_MspInit+0xa0>)
 8001a96:	699b      	ldr	r3, [r3, #24]
 8001a98:	4a18      	ldr	r2, [pc, #96]	@ (8001afc <HAL_UART_MspInit+0xa0>)
 8001a9a:	f043 0304 	orr.w	r3, r3, #4
 8001a9e:	6193      	str	r3, [r2, #24]
 8001aa0:	4b16      	ldr	r3, [pc, #88]	@ (8001afc <HAL_UART_MspInit+0xa0>)
 8001aa2:	699b      	ldr	r3, [r3, #24]
 8001aa4:	f003 0304 	and.w	r3, r3, #4
 8001aa8:	60bb      	str	r3, [r7, #8]
 8001aaa:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001aac:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001ab0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ab2:	2302      	movs	r3, #2
 8001ab4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001ab6:	2303      	movs	r3, #3
 8001ab8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001aba:	f107 0310 	add.w	r3, r7, #16
 8001abe:	4619      	mov	r1, r3
 8001ac0:	480f      	ldr	r0, [pc, #60]	@ (8001b00 <HAL_UART_MspInit+0xa4>)
 8001ac2:	f000 fb95 	bl	80021f0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001ac6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001aca:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001acc:	2300      	movs	r3, #0
 8001ace:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ad4:	f107 0310 	add.w	r3, r7, #16
 8001ad8:	4619      	mov	r1, r3
 8001ada:	4809      	ldr	r0, [pc, #36]	@ (8001b00 <HAL_UART_MspInit+0xa4>)
 8001adc:	f000 fb88 	bl	80021f0 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	2105      	movs	r1, #5
 8001ae4:	2025      	movs	r0, #37	@ 0x25
 8001ae6:	f000 faa6 	bl	8002036 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001aea:	2025      	movs	r0, #37	@ 0x25
 8001aec:	f000 fabf 	bl	800206e <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8001af0:	bf00      	nop
 8001af2:	3720      	adds	r7, #32
 8001af4:	46bd      	mov	sp, r7
 8001af6:	bd80      	pop	{r7, pc}
 8001af8:	40013800 	.word	0x40013800
 8001afc:	40021000 	.word	0x40021000
 8001b00:	40010800 	.word	0x40010800

08001b04 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b08c      	sub	sp, #48	@ 0x30
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 8001b10:	2300      	movs	r3, #0
 8001b12:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status = HAL_OK;
 8001b14:	2300      	movs	r3, #0
 8001b16:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001b1a:	4b2e      	ldr	r3, [pc, #184]	@ (8001bd4 <HAL_InitTick+0xd0>)
 8001b1c:	699b      	ldr	r3, [r3, #24]
 8001b1e:	4a2d      	ldr	r2, [pc, #180]	@ (8001bd4 <HAL_InitTick+0xd0>)
 8001b20:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001b24:	6193      	str	r3, [r2, #24]
 8001b26:	4b2b      	ldr	r3, [pc, #172]	@ (8001bd4 <HAL_InitTick+0xd0>)
 8001b28:	699b      	ldr	r3, [r3, #24]
 8001b2a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001b2e:	60bb      	str	r3, [r7, #8]
 8001b30:	68bb      	ldr	r3, [r7, #8]

/* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001b32:	f107 020c 	add.w	r2, r7, #12
 8001b36:	f107 0310 	add.w	r3, r7, #16
 8001b3a:	4611      	mov	r1, r2
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	f002 f901 	bl	8003d44 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001b42:	f002 f8eb 	bl	8003d1c <HAL_RCC_GetPCLK2Freq>
 8001b46:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001b48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001b4a:	4a23      	ldr	r2, [pc, #140]	@ (8001bd8 <HAL_InitTick+0xd4>)
 8001b4c:	fba2 2303 	umull	r2, r3, r2, r3
 8001b50:	0c9b      	lsrs	r3, r3, #18
 8001b52:	3b01      	subs	r3, #1
 8001b54:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001b56:	4b21      	ldr	r3, [pc, #132]	@ (8001bdc <HAL_InitTick+0xd8>)
 8001b58:	4a21      	ldr	r2, [pc, #132]	@ (8001be0 <HAL_InitTick+0xdc>)
 8001b5a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8001b5c:	4b1f      	ldr	r3, [pc, #124]	@ (8001bdc <HAL_InitTick+0xd8>)
 8001b5e:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001b62:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8001b64:	4a1d      	ldr	r2, [pc, #116]	@ (8001bdc <HAL_InitTick+0xd8>)
 8001b66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b68:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001b6a:	4b1c      	ldr	r3, [pc, #112]	@ (8001bdc <HAL_InitTick+0xd8>)
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b70:	4b1a      	ldr	r3, [pc, #104]	@ (8001bdc <HAL_InitTick+0xd8>)
 8001b72:	2200      	movs	r2, #0
 8001b74:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b76:	4b19      	ldr	r3, [pc, #100]	@ (8001bdc <HAL_InitTick+0xd8>)
 8001b78:	2200      	movs	r2, #0
 8001b7a:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8001b7c:	4817      	ldr	r0, [pc, #92]	@ (8001bdc <HAL_InitTick+0xd8>)
 8001b7e:	f002 f92f 	bl	8003de0 <HAL_TIM_Base_Init>
 8001b82:	4603      	mov	r3, r0
 8001b84:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8001b88:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d11b      	bne.n	8001bc8 <HAL_InitTick+0xc4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8001b90:	4812      	ldr	r0, [pc, #72]	@ (8001bdc <HAL_InitTick+0xd8>)
 8001b92:	f002 f97d 	bl	8003e90 <HAL_TIM_Base_Start_IT>
 8001b96:	4603      	mov	r3, r0
 8001b98:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8001b9c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d111      	bne.n	8001bc8 <HAL_InitTick+0xc4>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8001ba4:	2019      	movs	r0, #25
 8001ba6:	f000 fa62 	bl	800206e <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	2b0f      	cmp	r3, #15
 8001bae:	d808      	bhi.n	8001bc2 <HAL_InitTick+0xbe>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority, 0U);
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	6879      	ldr	r1, [r7, #4]
 8001bb4:	2019      	movs	r0, #25
 8001bb6:	f000 fa3e 	bl	8002036 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001bba:	4a0a      	ldr	r2, [pc, #40]	@ (8001be4 <HAL_InitTick+0xe0>)
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	6013      	str	r3, [r2, #0]
 8001bc0:	e002      	b.n	8001bc8 <HAL_InitTick+0xc4>
      }
      else
      {
        status = HAL_ERROR;
 8001bc2:	2301      	movs	r3, #1
 8001bc4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8001bc8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8001bcc:	4618      	mov	r0, r3
 8001bce:	3730      	adds	r7, #48	@ 0x30
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	bd80      	pop	{r7, pc}
 8001bd4:	40021000 	.word	0x40021000
 8001bd8:	431bde83 	.word	0x431bde83
 8001bdc:	20000358 	.word	0x20000358
 8001be0:	40012c00 	.word	0x40012c00
 8001be4:	20000014 	.word	0x20000014

08001be8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001be8:	b480      	push	{r7}
 8001bea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001bec:	bf00      	nop
 8001bee:	e7fd      	b.n	8001bec <NMI_Handler+0x4>

08001bf0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001bf0:	b480      	push	{r7}
 8001bf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001bf4:	bf00      	nop
 8001bf6:	e7fd      	b.n	8001bf4 <HardFault_Handler+0x4>

08001bf8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001bf8:	b480      	push	{r7}
 8001bfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001bfc:	bf00      	nop
 8001bfe:	e7fd      	b.n	8001bfc <MemManage_Handler+0x4>

08001c00 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c00:	b480      	push	{r7}
 8001c02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c04:	bf00      	nop
 8001c06:	e7fd      	b.n	8001c04 <BusFault_Handler+0x4>

08001c08 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c08:	b480      	push	{r7}
 8001c0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c0c:	bf00      	nop
 8001c0e:	e7fd      	b.n	8001c0c <UsageFault_Handler+0x4>

08001c10 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c10:	b480      	push	{r7}
 8001c12:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c14:	bf00      	nop
 8001c16:	46bd      	mov	sp, r7
 8001c18:	bc80      	pop	{r7}
 8001c1a:	4770      	bx	lr

08001c1c <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001c20:	4802      	ldr	r0, [pc, #8]	@ (8001c2c <TIM1_UP_IRQHandler+0x10>)
 8001c22:	f002 f987 	bl	8003f34 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8001c26:	bf00      	nop
 8001c28:	bd80      	pop	{r7, pc}
 8001c2a:	bf00      	nop
 8001c2c:	20000358 	.word	0x20000358

08001c30 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001c34:	4802      	ldr	r0, [pc, #8]	@ (8001c40 <USART1_IRQHandler+0x10>)
 8001c36:	f002 fc11 	bl	800445c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001c3a:	bf00      	nop
 8001c3c:	bd80      	pop	{r7, pc}
 8001c3e:	bf00      	nop
 8001c40:	200002ac 	.word	0x200002ac

08001c44 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001c44:	b480      	push	{r7}
 8001c46:	af00      	add	r7, sp, #0
  return 1;
 8001c48:	2301      	movs	r3, #1
}
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	46bd      	mov	sp, r7
 8001c4e:	bc80      	pop	{r7}
 8001c50:	4770      	bx	lr

08001c52 <_kill>:

int _kill(int pid, int sig)
{
 8001c52:	b580      	push	{r7, lr}
 8001c54:	b082      	sub	sp, #8
 8001c56:	af00      	add	r7, sp, #0
 8001c58:	6078      	str	r0, [r7, #4]
 8001c5a:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001c5c:	f007 fb0a 	bl	8009274 <__errno>
 8001c60:	4603      	mov	r3, r0
 8001c62:	2216      	movs	r2, #22
 8001c64:	601a      	str	r2, [r3, #0]
  return -1;
 8001c66:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	3708      	adds	r7, #8
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	bd80      	pop	{r7, pc}

08001c72 <_exit>:

void _exit (int status)
{
 8001c72:	b580      	push	{r7, lr}
 8001c74:	b082      	sub	sp, #8
 8001c76:	af00      	add	r7, sp, #0
 8001c78:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001c7a:	f04f 31ff 	mov.w	r1, #4294967295
 8001c7e:	6878      	ldr	r0, [r7, #4]
 8001c80:	f7ff ffe7 	bl	8001c52 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001c84:	bf00      	nop
 8001c86:	e7fd      	b.n	8001c84 <_exit+0x12>

08001c88 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	b086      	sub	sp, #24
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	60f8      	str	r0, [r7, #12]
 8001c90:	60b9      	str	r1, [r7, #8]
 8001c92:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c94:	2300      	movs	r3, #0
 8001c96:	617b      	str	r3, [r7, #20]
 8001c98:	e00a      	b.n	8001cb0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001c9a:	f3af 8000 	nop.w
 8001c9e:	4601      	mov	r1, r0
 8001ca0:	68bb      	ldr	r3, [r7, #8]
 8001ca2:	1c5a      	adds	r2, r3, #1
 8001ca4:	60ba      	str	r2, [r7, #8]
 8001ca6:	b2ca      	uxtb	r2, r1
 8001ca8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001caa:	697b      	ldr	r3, [r7, #20]
 8001cac:	3301      	adds	r3, #1
 8001cae:	617b      	str	r3, [r7, #20]
 8001cb0:	697a      	ldr	r2, [r7, #20]
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	429a      	cmp	r2, r3
 8001cb6:	dbf0      	blt.n	8001c9a <_read+0x12>
  }

  return len;
 8001cb8:	687b      	ldr	r3, [r7, #4]
}
 8001cba:	4618      	mov	r0, r3
 8001cbc:	3718      	adds	r7, #24
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	bd80      	pop	{r7, pc}

08001cc2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001cc2:	b580      	push	{r7, lr}
 8001cc4:	b086      	sub	sp, #24
 8001cc6:	af00      	add	r7, sp, #0
 8001cc8:	60f8      	str	r0, [r7, #12]
 8001cca:	60b9      	str	r1, [r7, #8]
 8001ccc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cce:	2300      	movs	r3, #0
 8001cd0:	617b      	str	r3, [r7, #20]
 8001cd2:	e009      	b.n	8001ce8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001cd4:	68bb      	ldr	r3, [r7, #8]
 8001cd6:	1c5a      	adds	r2, r3, #1
 8001cd8:	60ba      	str	r2, [r7, #8]
 8001cda:	781b      	ldrb	r3, [r3, #0]
 8001cdc:	4618      	mov	r0, r3
 8001cde:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ce2:	697b      	ldr	r3, [r7, #20]
 8001ce4:	3301      	adds	r3, #1
 8001ce6:	617b      	str	r3, [r7, #20]
 8001ce8:	697a      	ldr	r2, [r7, #20]
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	429a      	cmp	r2, r3
 8001cee:	dbf1      	blt.n	8001cd4 <_write+0x12>
  }
  return len;
 8001cf0:	687b      	ldr	r3, [r7, #4]
}
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	3718      	adds	r7, #24
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	bd80      	pop	{r7, pc}

08001cfa <_close>:

int _close(int file)
{
 8001cfa:	b480      	push	{r7}
 8001cfc:	b083      	sub	sp, #12
 8001cfe:	af00      	add	r7, sp, #0
 8001d00:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001d02:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001d06:	4618      	mov	r0, r3
 8001d08:	370c      	adds	r7, #12
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	bc80      	pop	{r7}
 8001d0e:	4770      	bx	lr

08001d10 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001d10:	b480      	push	{r7}
 8001d12:	b083      	sub	sp, #12
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]
 8001d18:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001d1a:	683b      	ldr	r3, [r7, #0]
 8001d1c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001d20:	605a      	str	r2, [r3, #4]
  return 0;
 8001d22:	2300      	movs	r3, #0
}
 8001d24:	4618      	mov	r0, r3
 8001d26:	370c      	adds	r7, #12
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	bc80      	pop	{r7}
 8001d2c:	4770      	bx	lr

08001d2e <_isatty>:

int _isatty(int file)
{
 8001d2e:	b480      	push	{r7}
 8001d30:	b083      	sub	sp, #12
 8001d32:	af00      	add	r7, sp, #0
 8001d34:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001d36:	2301      	movs	r3, #1
}
 8001d38:	4618      	mov	r0, r3
 8001d3a:	370c      	adds	r7, #12
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	bc80      	pop	{r7}
 8001d40:	4770      	bx	lr

08001d42 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001d42:	b480      	push	{r7}
 8001d44:	b085      	sub	sp, #20
 8001d46:	af00      	add	r7, sp, #0
 8001d48:	60f8      	str	r0, [r7, #12]
 8001d4a:	60b9      	str	r1, [r7, #8]
 8001d4c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001d4e:	2300      	movs	r3, #0
}
 8001d50:	4618      	mov	r0, r3
 8001d52:	3714      	adds	r7, #20
 8001d54:	46bd      	mov	sp, r7
 8001d56:	bc80      	pop	{r7}
 8001d58:	4770      	bx	lr
	...

08001d5c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	b086      	sub	sp, #24
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001d64:	4a14      	ldr	r2, [pc, #80]	@ (8001db8 <_sbrk+0x5c>)
 8001d66:	4b15      	ldr	r3, [pc, #84]	@ (8001dbc <_sbrk+0x60>)
 8001d68:	1ad3      	subs	r3, r2, r3
 8001d6a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001d6c:	697b      	ldr	r3, [r7, #20]
 8001d6e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001d70:	4b13      	ldr	r3, [pc, #76]	@ (8001dc0 <_sbrk+0x64>)
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d102      	bne.n	8001d7e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001d78:	4b11      	ldr	r3, [pc, #68]	@ (8001dc0 <_sbrk+0x64>)
 8001d7a:	4a12      	ldr	r2, [pc, #72]	@ (8001dc4 <_sbrk+0x68>)
 8001d7c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001d7e:	4b10      	ldr	r3, [pc, #64]	@ (8001dc0 <_sbrk+0x64>)
 8001d80:	681a      	ldr	r2, [r3, #0]
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	4413      	add	r3, r2
 8001d86:	693a      	ldr	r2, [r7, #16]
 8001d88:	429a      	cmp	r2, r3
 8001d8a:	d207      	bcs.n	8001d9c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001d8c:	f007 fa72 	bl	8009274 <__errno>
 8001d90:	4603      	mov	r3, r0
 8001d92:	220c      	movs	r2, #12
 8001d94:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001d96:	f04f 33ff 	mov.w	r3, #4294967295
 8001d9a:	e009      	b.n	8001db0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001d9c:	4b08      	ldr	r3, [pc, #32]	@ (8001dc0 <_sbrk+0x64>)
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001da2:	4b07      	ldr	r3, [pc, #28]	@ (8001dc0 <_sbrk+0x64>)
 8001da4:	681a      	ldr	r2, [r3, #0]
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	4413      	add	r3, r2
 8001daa:	4a05      	ldr	r2, [pc, #20]	@ (8001dc0 <_sbrk+0x64>)
 8001dac:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001dae:	68fb      	ldr	r3, [r7, #12]
}
 8001db0:	4618      	mov	r0, r3
 8001db2:	3718      	adds	r7, #24
 8001db4:	46bd      	mov	sp, r7
 8001db6:	bd80      	pop	{r7, pc}
 8001db8:	20005000 	.word	0x20005000
 8001dbc:	00000400 	.word	0x00000400
 8001dc0:	200003a0 	.word	0x200003a0
 8001dc4:	20001e48 	.word	0x20001e48

08001dc8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001dc8:	b480      	push	{r7}
 8001dca:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001dcc:	bf00      	nop
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	bc80      	pop	{r7}
 8001dd2:	4770      	bx	lr

08001dd4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001dd4:	f7ff fff8 	bl	8001dc8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001dd8:	480b      	ldr	r0, [pc, #44]	@ (8001e08 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001dda:	490c      	ldr	r1, [pc, #48]	@ (8001e0c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001ddc:	4a0c      	ldr	r2, [pc, #48]	@ (8001e10 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001dde:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001de0:	e002      	b.n	8001de8 <LoopCopyDataInit>

08001de2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001de2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001de4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001de6:	3304      	adds	r3, #4

08001de8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001de8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001dea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001dec:	d3f9      	bcc.n	8001de2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001dee:	4a09      	ldr	r2, [pc, #36]	@ (8001e14 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001df0:	4c09      	ldr	r4, [pc, #36]	@ (8001e18 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001df2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001df4:	e001      	b.n	8001dfa <LoopFillZerobss>

08001df6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001df6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001df8:	3204      	adds	r2, #4

08001dfa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001dfa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001dfc:	d3fb      	bcc.n	8001df6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001dfe:	f007 fa3f 	bl	8009280 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001e02:	f7ff fa47 	bl	8001294 <main>
  bx lr
 8001e06:	4770      	bx	lr
  ldr r0, =_sdata
 8001e08:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001e0c:	200001e8 	.word	0x200001e8
  ldr r2, =_sidata
 8001e10:	0800b7c0 	.word	0x0800b7c0
  ldr r2, =_sbss
 8001e14:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 8001e18:	20001e44 	.word	0x20001e44

08001e1c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001e1c:	e7fe      	b.n	8001e1c <ADC1_2_IRQHandler>
	...

08001e20 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001e24:	4b08      	ldr	r3, [pc, #32]	@ (8001e48 <HAL_Init+0x28>)
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	4a07      	ldr	r2, [pc, #28]	@ (8001e48 <HAL_Init+0x28>)
 8001e2a:	f043 0310 	orr.w	r3, r3, #16
 8001e2e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e30:	2003      	movs	r0, #3
 8001e32:	f000 f8f5 	bl	8002020 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001e36:	200f      	movs	r0, #15
 8001e38:	f7ff fe64 	bl	8001b04 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001e3c:	f7ff fd6a 	bl	8001914 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001e40:	2300      	movs	r3, #0
}
 8001e42:	4618      	mov	r0, r3
 8001e44:	bd80      	pop	{r7, pc}
 8001e46:	bf00      	nop
 8001e48:	40022000 	.word	0x40022000

08001e4c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e4c:	b480      	push	{r7}
 8001e4e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001e50:	4b05      	ldr	r3, [pc, #20]	@ (8001e68 <HAL_IncTick+0x1c>)
 8001e52:	781b      	ldrb	r3, [r3, #0]
 8001e54:	461a      	mov	r2, r3
 8001e56:	4b05      	ldr	r3, [pc, #20]	@ (8001e6c <HAL_IncTick+0x20>)
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	4413      	add	r3, r2
 8001e5c:	4a03      	ldr	r2, [pc, #12]	@ (8001e6c <HAL_IncTick+0x20>)
 8001e5e:	6013      	str	r3, [r2, #0]
}
 8001e60:	bf00      	nop
 8001e62:	46bd      	mov	sp, r7
 8001e64:	bc80      	pop	{r7}
 8001e66:	4770      	bx	lr
 8001e68:	20000018 	.word	0x20000018
 8001e6c:	200003a4 	.word	0x200003a4

08001e70 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e70:	b480      	push	{r7}
 8001e72:	af00      	add	r7, sp, #0
  return uwTick;
 8001e74:	4b02      	ldr	r3, [pc, #8]	@ (8001e80 <HAL_GetTick+0x10>)
 8001e76:	681b      	ldr	r3, [r3, #0]
}
 8001e78:	4618      	mov	r0, r3
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	bc80      	pop	{r7}
 8001e7e:	4770      	bx	lr
 8001e80:	200003a4 	.word	0x200003a4

08001e84 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	b084      	sub	sp, #16
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001e8c:	f7ff fff0 	bl	8001e70 <HAL_GetTick>
 8001e90:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e9c:	d005      	beq.n	8001eaa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001e9e:	4b0a      	ldr	r3, [pc, #40]	@ (8001ec8 <HAL_Delay+0x44>)
 8001ea0:	781b      	ldrb	r3, [r3, #0]
 8001ea2:	461a      	mov	r2, r3
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	4413      	add	r3, r2
 8001ea8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001eaa:	bf00      	nop
 8001eac:	f7ff ffe0 	bl	8001e70 <HAL_GetTick>
 8001eb0:	4602      	mov	r2, r0
 8001eb2:	68bb      	ldr	r3, [r7, #8]
 8001eb4:	1ad3      	subs	r3, r2, r3
 8001eb6:	68fa      	ldr	r2, [r7, #12]
 8001eb8:	429a      	cmp	r2, r3
 8001eba:	d8f7      	bhi.n	8001eac <HAL_Delay+0x28>
  {
  }
}
 8001ebc:	bf00      	nop
 8001ebe:	bf00      	nop
 8001ec0:	3710      	adds	r7, #16
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	bd80      	pop	{r7, pc}
 8001ec6:	bf00      	nop
 8001ec8:	20000018 	.word	0x20000018

08001ecc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ecc:	b480      	push	{r7}
 8001ece:	b085      	sub	sp, #20
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	f003 0307 	and.w	r3, r3, #7
 8001eda:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001edc:	4b0c      	ldr	r3, [pc, #48]	@ (8001f10 <__NVIC_SetPriorityGrouping+0x44>)
 8001ede:	68db      	ldr	r3, [r3, #12]
 8001ee0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ee2:	68ba      	ldr	r2, [r7, #8]
 8001ee4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001ee8:	4013      	ands	r3, r2
 8001eea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ef0:	68bb      	ldr	r3, [r7, #8]
 8001ef2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ef4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001ef8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001efc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001efe:	4a04      	ldr	r2, [pc, #16]	@ (8001f10 <__NVIC_SetPriorityGrouping+0x44>)
 8001f00:	68bb      	ldr	r3, [r7, #8]
 8001f02:	60d3      	str	r3, [r2, #12]
}
 8001f04:	bf00      	nop
 8001f06:	3714      	adds	r7, #20
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	bc80      	pop	{r7}
 8001f0c:	4770      	bx	lr
 8001f0e:	bf00      	nop
 8001f10:	e000ed00 	.word	0xe000ed00

08001f14 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f14:	b480      	push	{r7}
 8001f16:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f18:	4b04      	ldr	r3, [pc, #16]	@ (8001f2c <__NVIC_GetPriorityGrouping+0x18>)
 8001f1a:	68db      	ldr	r3, [r3, #12]
 8001f1c:	0a1b      	lsrs	r3, r3, #8
 8001f1e:	f003 0307 	and.w	r3, r3, #7
}
 8001f22:	4618      	mov	r0, r3
 8001f24:	46bd      	mov	sp, r7
 8001f26:	bc80      	pop	{r7}
 8001f28:	4770      	bx	lr
 8001f2a:	bf00      	nop
 8001f2c:	e000ed00 	.word	0xe000ed00

08001f30 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f30:	b480      	push	{r7}
 8001f32:	b083      	sub	sp, #12
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	4603      	mov	r3, r0
 8001f38:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	db0b      	blt.n	8001f5a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f42:	79fb      	ldrb	r3, [r7, #7]
 8001f44:	f003 021f 	and.w	r2, r3, #31
 8001f48:	4906      	ldr	r1, [pc, #24]	@ (8001f64 <__NVIC_EnableIRQ+0x34>)
 8001f4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f4e:	095b      	lsrs	r3, r3, #5
 8001f50:	2001      	movs	r0, #1
 8001f52:	fa00 f202 	lsl.w	r2, r0, r2
 8001f56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001f5a:	bf00      	nop
 8001f5c:	370c      	adds	r7, #12
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	bc80      	pop	{r7}
 8001f62:	4770      	bx	lr
 8001f64:	e000e100 	.word	0xe000e100

08001f68 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f68:	b480      	push	{r7}
 8001f6a:	b083      	sub	sp, #12
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	4603      	mov	r3, r0
 8001f70:	6039      	str	r1, [r7, #0]
 8001f72:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	db0a      	blt.n	8001f92 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f7c:	683b      	ldr	r3, [r7, #0]
 8001f7e:	b2da      	uxtb	r2, r3
 8001f80:	490c      	ldr	r1, [pc, #48]	@ (8001fb4 <__NVIC_SetPriority+0x4c>)
 8001f82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f86:	0112      	lsls	r2, r2, #4
 8001f88:	b2d2      	uxtb	r2, r2
 8001f8a:	440b      	add	r3, r1
 8001f8c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f90:	e00a      	b.n	8001fa8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f92:	683b      	ldr	r3, [r7, #0]
 8001f94:	b2da      	uxtb	r2, r3
 8001f96:	4908      	ldr	r1, [pc, #32]	@ (8001fb8 <__NVIC_SetPriority+0x50>)
 8001f98:	79fb      	ldrb	r3, [r7, #7]
 8001f9a:	f003 030f 	and.w	r3, r3, #15
 8001f9e:	3b04      	subs	r3, #4
 8001fa0:	0112      	lsls	r2, r2, #4
 8001fa2:	b2d2      	uxtb	r2, r2
 8001fa4:	440b      	add	r3, r1
 8001fa6:	761a      	strb	r2, [r3, #24]
}
 8001fa8:	bf00      	nop
 8001faa:	370c      	adds	r7, #12
 8001fac:	46bd      	mov	sp, r7
 8001fae:	bc80      	pop	{r7}
 8001fb0:	4770      	bx	lr
 8001fb2:	bf00      	nop
 8001fb4:	e000e100 	.word	0xe000e100
 8001fb8:	e000ed00 	.word	0xe000ed00

08001fbc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001fbc:	b480      	push	{r7}
 8001fbe:	b089      	sub	sp, #36	@ 0x24
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	60f8      	str	r0, [r7, #12]
 8001fc4:	60b9      	str	r1, [r7, #8]
 8001fc6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	f003 0307 	and.w	r3, r3, #7
 8001fce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001fd0:	69fb      	ldr	r3, [r7, #28]
 8001fd2:	f1c3 0307 	rsb	r3, r3, #7
 8001fd6:	2b04      	cmp	r3, #4
 8001fd8:	bf28      	it	cs
 8001fda:	2304      	movcs	r3, #4
 8001fdc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001fde:	69fb      	ldr	r3, [r7, #28]
 8001fe0:	3304      	adds	r3, #4
 8001fe2:	2b06      	cmp	r3, #6
 8001fe4:	d902      	bls.n	8001fec <NVIC_EncodePriority+0x30>
 8001fe6:	69fb      	ldr	r3, [r7, #28]
 8001fe8:	3b03      	subs	r3, #3
 8001fea:	e000      	b.n	8001fee <NVIC_EncodePriority+0x32>
 8001fec:	2300      	movs	r3, #0
 8001fee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ff0:	f04f 32ff 	mov.w	r2, #4294967295
 8001ff4:	69bb      	ldr	r3, [r7, #24]
 8001ff6:	fa02 f303 	lsl.w	r3, r2, r3
 8001ffa:	43da      	mvns	r2, r3
 8001ffc:	68bb      	ldr	r3, [r7, #8]
 8001ffe:	401a      	ands	r2, r3
 8002000:	697b      	ldr	r3, [r7, #20]
 8002002:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002004:	f04f 31ff 	mov.w	r1, #4294967295
 8002008:	697b      	ldr	r3, [r7, #20]
 800200a:	fa01 f303 	lsl.w	r3, r1, r3
 800200e:	43d9      	mvns	r1, r3
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002014:	4313      	orrs	r3, r2
         );
}
 8002016:	4618      	mov	r0, r3
 8002018:	3724      	adds	r7, #36	@ 0x24
 800201a:	46bd      	mov	sp, r7
 800201c:	bc80      	pop	{r7}
 800201e:	4770      	bx	lr

08002020 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	b082      	sub	sp, #8
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002028:	6878      	ldr	r0, [r7, #4]
 800202a:	f7ff ff4f 	bl	8001ecc <__NVIC_SetPriorityGrouping>
}
 800202e:	bf00      	nop
 8002030:	3708      	adds	r7, #8
 8002032:	46bd      	mov	sp, r7
 8002034:	bd80      	pop	{r7, pc}

08002036 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002036:	b580      	push	{r7, lr}
 8002038:	b086      	sub	sp, #24
 800203a:	af00      	add	r7, sp, #0
 800203c:	4603      	mov	r3, r0
 800203e:	60b9      	str	r1, [r7, #8]
 8002040:	607a      	str	r2, [r7, #4]
 8002042:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002044:	2300      	movs	r3, #0
 8002046:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002048:	f7ff ff64 	bl	8001f14 <__NVIC_GetPriorityGrouping>
 800204c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800204e:	687a      	ldr	r2, [r7, #4]
 8002050:	68b9      	ldr	r1, [r7, #8]
 8002052:	6978      	ldr	r0, [r7, #20]
 8002054:	f7ff ffb2 	bl	8001fbc <NVIC_EncodePriority>
 8002058:	4602      	mov	r2, r0
 800205a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800205e:	4611      	mov	r1, r2
 8002060:	4618      	mov	r0, r3
 8002062:	f7ff ff81 	bl	8001f68 <__NVIC_SetPriority>
}
 8002066:	bf00      	nop
 8002068:	3718      	adds	r7, #24
 800206a:	46bd      	mov	sp, r7
 800206c:	bd80      	pop	{r7, pc}

0800206e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800206e:	b580      	push	{r7, lr}
 8002070:	b082      	sub	sp, #8
 8002072:	af00      	add	r7, sp, #0
 8002074:	4603      	mov	r3, r0
 8002076:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002078:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800207c:	4618      	mov	r0, r3
 800207e:	f7ff ff57 	bl	8001f30 <__NVIC_EnableIRQ>
}
 8002082:	bf00      	nop
 8002084:	3708      	adds	r7, #8
 8002086:	46bd      	mov	sp, r7
 8002088:	bd80      	pop	{r7, pc}

0800208a <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800208a:	b480      	push	{r7}
 800208c:	b085      	sub	sp, #20
 800208e:	af00      	add	r7, sp, #0
 8002090:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002092:	2300      	movs	r3, #0
 8002094:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800209c:	b2db      	uxtb	r3, r3
 800209e:	2b02      	cmp	r3, #2
 80020a0:	d008      	beq.n	80020b4 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	2204      	movs	r2, #4
 80020a6:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	2200      	movs	r2, #0
 80020ac:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80020b0:	2301      	movs	r3, #1
 80020b2:	e020      	b.n	80020f6 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	681a      	ldr	r2, [r3, #0]
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	f022 020e 	bic.w	r2, r2, #14
 80020c2:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	681a      	ldr	r2, [r3, #0]
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f022 0201 	bic.w	r2, r2, #1
 80020d2:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80020dc:	2101      	movs	r1, #1
 80020de:	fa01 f202 	lsl.w	r2, r1, r2
 80020e2:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	2201      	movs	r2, #1
 80020e8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	2200      	movs	r2, #0
 80020f0:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80020f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80020f6:	4618      	mov	r0, r3
 80020f8:	3714      	adds	r7, #20
 80020fa:	46bd      	mov	sp, r7
 80020fc:	bc80      	pop	{r7}
 80020fe:	4770      	bx	lr

08002100 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002100:	b580      	push	{r7, lr}
 8002102:	b084      	sub	sp, #16
 8002104:	af00      	add	r7, sp, #0
 8002106:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002108:	2300      	movs	r3, #0
 800210a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002112:	b2db      	uxtb	r3, r3
 8002114:	2b02      	cmp	r3, #2
 8002116:	d005      	beq.n	8002124 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	2204      	movs	r2, #4
 800211c:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 800211e:	2301      	movs	r3, #1
 8002120:	73fb      	strb	r3, [r7, #15]
 8002122:	e051      	b.n	80021c8 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	681a      	ldr	r2, [r3, #0]
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f022 020e 	bic.w	r2, r2, #14
 8002132:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	681a      	ldr	r2, [r3, #0]
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f022 0201 	bic.w	r2, r2, #1
 8002142:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	4a22      	ldr	r2, [pc, #136]	@ (80021d4 <HAL_DMA_Abort_IT+0xd4>)
 800214a:	4293      	cmp	r3, r2
 800214c:	d029      	beq.n	80021a2 <HAL_DMA_Abort_IT+0xa2>
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	4a21      	ldr	r2, [pc, #132]	@ (80021d8 <HAL_DMA_Abort_IT+0xd8>)
 8002154:	4293      	cmp	r3, r2
 8002156:	d022      	beq.n	800219e <HAL_DMA_Abort_IT+0x9e>
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	4a1f      	ldr	r2, [pc, #124]	@ (80021dc <HAL_DMA_Abort_IT+0xdc>)
 800215e:	4293      	cmp	r3, r2
 8002160:	d01a      	beq.n	8002198 <HAL_DMA_Abort_IT+0x98>
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	4a1e      	ldr	r2, [pc, #120]	@ (80021e0 <HAL_DMA_Abort_IT+0xe0>)
 8002168:	4293      	cmp	r3, r2
 800216a:	d012      	beq.n	8002192 <HAL_DMA_Abort_IT+0x92>
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	4a1c      	ldr	r2, [pc, #112]	@ (80021e4 <HAL_DMA_Abort_IT+0xe4>)
 8002172:	4293      	cmp	r3, r2
 8002174:	d00a      	beq.n	800218c <HAL_DMA_Abort_IT+0x8c>
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	4a1b      	ldr	r2, [pc, #108]	@ (80021e8 <HAL_DMA_Abort_IT+0xe8>)
 800217c:	4293      	cmp	r3, r2
 800217e:	d102      	bne.n	8002186 <HAL_DMA_Abort_IT+0x86>
 8002180:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8002184:	e00e      	b.n	80021a4 <HAL_DMA_Abort_IT+0xa4>
 8002186:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800218a:	e00b      	b.n	80021a4 <HAL_DMA_Abort_IT+0xa4>
 800218c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002190:	e008      	b.n	80021a4 <HAL_DMA_Abort_IT+0xa4>
 8002192:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002196:	e005      	b.n	80021a4 <HAL_DMA_Abort_IT+0xa4>
 8002198:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800219c:	e002      	b.n	80021a4 <HAL_DMA_Abort_IT+0xa4>
 800219e:	2310      	movs	r3, #16
 80021a0:	e000      	b.n	80021a4 <HAL_DMA_Abort_IT+0xa4>
 80021a2:	2301      	movs	r3, #1
 80021a4:	4a11      	ldr	r2, [pc, #68]	@ (80021ec <HAL_DMA_Abort_IT+0xec>)
 80021a6:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	2201      	movs	r2, #1
 80021ac:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	2200      	movs	r2, #0
 80021b4:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d003      	beq.n	80021c8 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80021c4:	6878      	ldr	r0, [r7, #4]
 80021c6:	4798      	blx	r3
    } 
  }
  return status;
 80021c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80021ca:	4618      	mov	r0, r3
 80021cc:	3710      	adds	r7, #16
 80021ce:	46bd      	mov	sp, r7
 80021d0:	bd80      	pop	{r7, pc}
 80021d2:	bf00      	nop
 80021d4:	40020008 	.word	0x40020008
 80021d8:	4002001c 	.word	0x4002001c
 80021dc:	40020030 	.word	0x40020030
 80021e0:	40020044 	.word	0x40020044
 80021e4:	40020058 	.word	0x40020058
 80021e8:	4002006c 	.word	0x4002006c
 80021ec:	40020000 	.word	0x40020000

080021f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80021f0:	b480      	push	{r7}
 80021f2:	b08b      	sub	sp, #44	@ 0x2c
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
 80021f8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80021fa:	2300      	movs	r3, #0
 80021fc:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80021fe:	2300      	movs	r3, #0
 8002200:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002202:	e169      	b.n	80024d8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002204:	2201      	movs	r2, #1
 8002206:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002208:	fa02 f303 	lsl.w	r3, r2, r3
 800220c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800220e:	683b      	ldr	r3, [r7, #0]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	69fa      	ldr	r2, [r7, #28]
 8002214:	4013      	ands	r3, r2
 8002216:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002218:	69ba      	ldr	r2, [r7, #24]
 800221a:	69fb      	ldr	r3, [r7, #28]
 800221c:	429a      	cmp	r2, r3
 800221e:	f040 8158 	bne.w	80024d2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002222:	683b      	ldr	r3, [r7, #0]
 8002224:	685b      	ldr	r3, [r3, #4]
 8002226:	4a9a      	ldr	r2, [pc, #616]	@ (8002490 <HAL_GPIO_Init+0x2a0>)
 8002228:	4293      	cmp	r3, r2
 800222a:	d05e      	beq.n	80022ea <HAL_GPIO_Init+0xfa>
 800222c:	4a98      	ldr	r2, [pc, #608]	@ (8002490 <HAL_GPIO_Init+0x2a0>)
 800222e:	4293      	cmp	r3, r2
 8002230:	d875      	bhi.n	800231e <HAL_GPIO_Init+0x12e>
 8002232:	4a98      	ldr	r2, [pc, #608]	@ (8002494 <HAL_GPIO_Init+0x2a4>)
 8002234:	4293      	cmp	r3, r2
 8002236:	d058      	beq.n	80022ea <HAL_GPIO_Init+0xfa>
 8002238:	4a96      	ldr	r2, [pc, #600]	@ (8002494 <HAL_GPIO_Init+0x2a4>)
 800223a:	4293      	cmp	r3, r2
 800223c:	d86f      	bhi.n	800231e <HAL_GPIO_Init+0x12e>
 800223e:	4a96      	ldr	r2, [pc, #600]	@ (8002498 <HAL_GPIO_Init+0x2a8>)
 8002240:	4293      	cmp	r3, r2
 8002242:	d052      	beq.n	80022ea <HAL_GPIO_Init+0xfa>
 8002244:	4a94      	ldr	r2, [pc, #592]	@ (8002498 <HAL_GPIO_Init+0x2a8>)
 8002246:	4293      	cmp	r3, r2
 8002248:	d869      	bhi.n	800231e <HAL_GPIO_Init+0x12e>
 800224a:	4a94      	ldr	r2, [pc, #592]	@ (800249c <HAL_GPIO_Init+0x2ac>)
 800224c:	4293      	cmp	r3, r2
 800224e:	d04c      	beq.n	80022ea <HAL_GPIO_Init+0xfa>
 8002250:	4a92      	ldr	r2, [pc, #584]	@ (800249c <HAL_GPIO_Init+0x2ac>)
 8002252:	4293      	cmp	r3, r2
 8002254:	d863      	bhi.n	800231e <HAL_GPIO_Init+0x12e>
 8002256:	4a92      	ldr	r2, [pc, #584]	@ (80024a0 <HAL_GPIO_Init+0x2b0>)
 8002258:	4293      	cmp	r3, r2
 800225a:	d046      	beq.n	80022ea <HAL_GPIO_Init+0xfa>
 800225c:	4a90      	ldr	r2, [pc, #576]	@ (80024a0 <HAL_GPIO_Init+0x2b0>)
 800225e:	4293      	cmp	r3, r2
 8002260:	d85d      	bhi.n	800231e <HAL_GPIO_Init+0x12e>
 8002262:	2b12      	cmp	r3, #18
 8002264:	d82a      	bhi.n	80022bc <HAL_GPIO_Init+0xcc>
 8002266:	2b12      	cmp	r3, #18
 8002268:	d859      	bhi.n	800231e <HAL_GPIO_Init+0x12e>
 800226a:	a201      	add	r2, pc, #4	@ (adr r2, 8002270 <HAL_GPIO_Init+0x80>)
 800226c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002270:	080022eb 	.word	0x080022eb
 8002274:	080022c5 	.word	0x080022c5
 8002278:	080022d7 	.word	0x080022d7
 800227c:	08002319 	.word	0x08002319
 8002280:	0800231f 	.word	0x0800231f
 8002284:	0800231f 	.word	0x0800231f
 8002288:	0800231f 	.word	0x0800231f
 800228c:	0800231f 	.word	0x0800231f
 8002290:	0800231f 	.word	0x0800231f
 8002294:	0800231f 	.word	0x0800231f
 8002298:	0800231f 	.word	0x0800231f
 800229c:	0800231f 	.word	0x0800231f
 80022a0:	0800231f 	.word	0x0800231f
 80022a4:	0800231f 	.word	0x0800231f
 80022a8:	0800231f 	.word	0x0800231f
 80022ac:	0800231f 	.word	0x0800231f
 80022b0:	0800231f 	.word	0x0800231f
 80022b4:	080022cd 	.word	0x080022cd
 80022b8:	080022e1 	.word	0x080022e1
 80022bc:	4a79      	ldr	r2, [pc, #484]	@ (80024a4 <HAL_GPIO_Init+0x2b4>)
 80022be:	4293      	cmp	r3, r2
 80022c0:	d013      	beq.n	80022ea <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80022c2:	e02c      	b.n	800231e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80022c4:	683b      	ldr	r3, [r7, #0]
 80022c6:	68db      	ldr	r3, [r3, #12]
 80022c8:	623b      	str	r3, [r7, #32]
          break;
 80022ca:	e029      	b.n	8002320 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80022cc:	683b      	ldr	r3, [r7, #0]
 80022ce:	68db      	ldr	r3, [r3, #12]
 80022d0:	3304      	adds	r3, #4
 80022d2:	623b      	str	r3, [r7, #32]
          break;
 80022d4:	e024      	b.n	8002320 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80022d6:	683b      	ldr	r3, [r7, #0]
 80022d8:	68db      	ldr	r3, [r3, #12]
 80022da:	3308      	adds	r3, #8
 80022dc:	623b      	str	r3, [r7, #32]
          break;
 80022de:	e01f      	b.n	8002320 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80022e0:	683b      	ldr	r3, [r7, #0]
 80022e2:	68db      	ldr	r3, [r3, #12]
 80022e4:	330c      	adds	r3, #12
 80022e6:	623b      	str	r3, [r7, #32]
          break;
 80022e8:	e01a      	b.n	8002320 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80022ea:	683b      	ldr	r3, [r7, #0]
 80022ec:	689b      	ldr	r3, [r3, #8]
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d102      	bne.n	80022f8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80022f2:	2304      	movs	r3, #4
 80022f4:	623b      	str	r3, [r7, #32]
          break;
 80022f6:	e013      	b.n	8002320 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80022f8:	683b      	ldr	r3, [r7, #0]
 80022fa:	689b      	ldr	r3, [r3, #8]
 80022fc:	2b01      	cmp	r3, #1
 80022fe:	d105      	bne.n	800230c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002300:	2308      	movs	r3, #8
 8002302:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	69fa      	ldr	r2, [r7, #28]
 8002308:	611a      	str	r2, [r3, #16]
          break;
 800230a:	e009      	b.n	8002320 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800230c:	2308      	movs	r3, #8
 800230e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	69fa      	ldr	r2, [r7, #28]
 8002314:	615a      	str	r2, [r3, #20]
          break;
 8002316:	e003      	b.n	8002320 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002318:	2300      	movs	r3, #0
 800231a:	623b      	str	r3, [r7, #32]
          break;
 800231c:	e000      	b.n	8002320 <HAL_GPIO_Init+0x130>
          break;
 800231e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002320:	69bb      	ldr	r3, [r7, #24]
 8002322:	2bff      	cmp	r3, #255	@ 0xff
 8002324:	d801      	bhi.n	800232a <HAL_GPIO_Init+0x13a>
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	e001      	b.n	800232e <HAL_GPIO_Init+0x13e>
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	3304      	adds	r3, #4
 800232e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002330:	69bb      	ldr	r3, [r7, #24]
 8002332:	2bff      	cmp	r3, #255	@ 0xff
 8002334:	d802      	bhi.n	800233c <HAL_GPIO_Init+0x14c>
 8002336:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002338:	009b      	lsls	r3, r3, #2
 800233a:	e002      	b.n	8002342 <HAL_GPIO_Init+0x152>
 800233c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800233e:	3b08      	subs	r3, #8
 8002340:	009b      	lsls	r3, r3, #2
 8002342:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002344:	697b      	ldr	r3, [r7, #20]
 8002346:	681a      	ldr	r2, [r3, #0]
 8002348:	210f      	movs	r1, #15
 800234a:	693b      	ldr	r3, [r7, #16]
 800234c:	fa01 f303 	lsl.w	r3, r1, r3
 8002350:	43db      	mvns	r3, r3
 8002352:	401a      	ands	r2, r3
 8002354:	6a39      	ldr	r1, [r7, #32]
 8002356:	693b      	ldr	r3, [r7, #16]
 8002358:	fa01 f303 	lsl.w	r3, r1, r3
 800235c:	431a      	orrs	r2, r3
 800235e:	697b      	ldr	r3, [r7, #20]
 8002360:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002362:	683b      	ldr	r3, [r7, #0]
 8002364:	685b      	ldr	r3, [r3, #4]
 8002366:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800236a:	2b00      	cmp	r3, #0
 800236c:	f000 80b1 	beq.w	80024d2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002370:	4b4d      	ldr	r3, [pc, #308]	@ (80024a8 <HAL_GPIO_Init+0x2b8>)
 8002372:	699b      	ldr	r3, [r3, #24]
 8002374:	4a4c      	ldr	r2, [pc, #304]	@ (80024a8 <HAL_GPIO_Init+0x2b8>)
 8002376:	f043 0301 	orr.w	r3, r3, #1
 800237a:	6193      	str	r3, [r2, #24]
 800237c:	4b4a      	ldr	r3, [pc, #296]	@ (80024a8 <HAL_GPIO_Init+0x2b8>)
 800237e:	699b      	ldr	r3, [r3, #24]
 8002380:	f003 0301 	and.w	r3, r3, #1
 8002384:	60bb      	str	r3, [r7, #8]
 8002386:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002388:	4a48      	ldr	r2, [pc, #288]	@ (80024ac <HAL_GPIO_Init+0x2bc>)
 800238a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800238c:	089b      	lsrs	r3, r3, #2
 800238e:	3302      	adds	r3, #2
 8002390:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002394:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002396:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002398:	f003 0303 	and.w	r3, r3, #3
 800239c:	009b      	lsls	r3, r3, #2
 800239e:	220f      	movs	r2, #15
 80023a0:	fa02 f303 	lsl.w	r3, r2, r3
 80023a4:	43db      	mvns	r3, r3
 80023a6:	68fa      	ldr	r2, [r7, #12]
 80023a8:	4013      	ands	r3, r2
 80023aa:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	4a40      	ldr	r2, [pc, #256]	@ (80024b0 <HAL_GPIO_Init+0x2c0>)
 80023b0:	4293      	cmp	r3, r2
 80023b2:	d013      	beq.n	80023dc <HAL_GPIO_Init+0x1ec>
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	4a3f      	ldr	r2, [pc, #252]	@ (80024b4 <HAL_GPIO_Init+0x2c4>)
 80023b8:	4293      	cmp	r3, r2
 80023ba:	d00d      	beq.n	80023d8 <HAL_GPIO_Init+0x1e8>
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	4a3e      	ldr	r2, [pc, #248]	@ (80024b8 <HAL_GPIO_Init+0x2c8>)
 80023c0:	4293      	cmp	r3, r2
 80023c2:	d007      	beq.n	80023d4 <HAL_GPIO_Init+0x1e4>
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	4a3d      	ldr	r2, [pc, #244]	@ (80024bc <HAL_GPIO_Init+0x2cc>)
 80023c8:	4293      	cmp	r3, r2
 80023ca:	d101      	bne.n	80023d0 <HAL_GPIO_Init+0x1e0>
 80023cc:	2303      	movs	r3, #3
 80023ce:	e006      	b.n	80023de <HAL_GPIO_Init+0x1ee>
 80023d0:	2304      	movs	r3, #4
 80023d2:	e004      	b.n	80023de <HAL_GPIO_Init+0x1ee>
 80023d4:	2302      	movs	r3, #2
 80023d6:	e002      	b.n	80023de <HAL_GPIO_Init+0x1ee>
 80023d8:	2301      	movs	r3, #1
 80023da:	e000      	b.n	80023de <HAL_GPIO_Init+0x1ee>
 80023dc:	2300      	movs	r3, #0
 80023de:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80023e0:	f002 0203 	and.w	r2, r2, #3
 80023e4:	0092      	lsls	r2, r2, #2
 80023e6:	4093      	lsls	r3, r2
 80023e8:	68fa      	ldr	r2, [r7, #12]
 80023ea:	4313      	orrs	r3, r2
 80023ec:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80023ee:	492f      	ldr	r1, [pc, #188]	@ (80024ac <HAL_GPIO_Init+0x2bc>)
 80023f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023f2:	089b      	lsrs	r3, r3, #2
 80023f4:	3302      	adds	r3, #2
 80023f6:	68fa      	ldr	r2, [r7, #12]
 80023f8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80023fc:	683b      	ldr	r3, [r7, #0]
 80023fe:	685b      	ldr	r3, [r3, #4]
 8002400:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002404:	2b00      	cmp	r3, #0
 8002406:	d006      	beq.n	8002416 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002408:	4b2d      	ldr	r3, [pc, #180]	@ (80024c0 <HAL_GPIO_Init+0x2d0>)
 800240a:	689a      	ldr	r2, [r3, #8]
 800240c:	492c      	ldr	r1, [pc, #176]	@ (80024c0 <HAL_GPIO_Init+0x2d0>)
 800240e:	69bb      	ldr	r3, [r7, #24]
 8002410:	4313      	orrs	r3, r2
 8002412:	608b      	str	r3, [r1, #8]
 8002414:	e006      	b.n	8002424 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002416:	4b2a      	ldr	r3, [pc, #168]	@ (80024c0 <HAL_GPIO_Init+0x2d0>)
 8002418:	689a      	ldr	r2, [r3, #8]
 800241a:	69bb      	ldr	r3, [r7, #24]
 800241c:	43db      	mvns	r3, r3
 800241e:	4928      	ldr	r1, [pc, #160]	@ (80024c0 <HAL_GPIO_Init+0x2d0>)
 8002420:	4013      	ands	r3, r2
 8002422:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002424:	683b      	ldr	r3, [r7, #0]
 8002426:	685b      	ldr	r3, [r3, #4]
 8002428:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800242c:	2b00      	cmp	r3, #0
 800242e:	d006      	beq.n	800243e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002430:	4b23      	ldr	r3, [pc, #140]	@ (80024c0 <HAL_GPIO_Init+0x2d0>)
 8002432:	68da      	ldr	r2, [r3, #12]
 8002434:	4922      	ldr	r1, [pc, #136]	@ (80024c0 <HAL_GPIO_Init+0x2d0>)
 8002436:	69bb      	ldr	r3, [r7, #24]
 8002438:	4313      	orrs	r3, r2
 800243a:	60cb      	str	r3, [r1, #12]
 800243c:	e006      	b.n	800244c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800243e:	4b20      	ldr	r3, [pc, #128]	@ (80024c0 <HAL_GPIO_Init+0x2d0>)
 8002440:	68da      	ldr	r2, [r3, #12]
 8002442:	69bb      	ldr	r3, [r7, #24]
 8002444:	43db      	mvns	r3, r3
 8002446:	491e      	ldr	r1, [pc, #120]	@ (80024c0 <HAL_GPIO_Init+0x2d0>)
 8002448:	4013      	ands	r3, r2
 800244a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800244c:	683b      	ldr	r3, [r7, #0]
 800244e:	685b      	ldr	r3, [r3, #4]
 8002450:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002454:	2b00      	cmp	r3, #0
 8002456:	d006      	beq.n	8002466 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002458:	4b19      	ldr	r3, [pc, #100]	@ (80024c0 <HAL_GPIO_Init+0x2d0>)
 800245a:	685a      	ldr	r2, [r3, #4]
 800245c:	4918      	ldr	r1, [pc, #96]	@ (80024c0 <HAL_GPIO_Init+0x2d0>)
 800245e:	69bb      	ldr	r3, [r7, #24]
 8002460:	4313      	orrs	r3, r2
 8002462:	604b      	str	r3, [r1, #4]
 8002464:	e006      	b.n	8002474 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002466:	4b16      	ldr	r3, [pc, #88]	@ (80024c0 <HAL_GPIO_Init+0x2d0>)
 8002468:	685a      	ldr	r2, [r3, #4]
 800246a:	69bb      	ldr	r3, [r7, #24]
 800246c:	43db      	mvns	r3, r3
 800246e:	4914      	ldr	r1, [pc, #80]	@ (80024c0 <HAL_GPIO_Init+0x2d0>)
 8002470:	4013      	ands	r3, r2
 8002472:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002474:	683b      	ldr	r3, [r7, #0]
 8002476:	685b      	ldr	r3, [r3, #4]
 8002478:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800247c:	2b00      	cmp	r3, #0
 800247e:	d021      	beq.n	80024c4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002480:	4b0f      	ldr	r3, [pc, #60]	@ (80024c0 <HAL_GPIO_Init+0x2d0>)
 8002482:	681a      	ldr	r2, [r3, #0]
 8002484:	490e      	ldr	r1, [pc, #56]	@ (80024c0 <HAL_GPIO_Init+0x2d0>)
 8002486:	69bb      	ldr	r3, [r7, #24]
 8002488:	4313      	orrs	r3, r2
 800248a:	600b      	str	r3, [r1, #0]
 800248c:	e021      	b.n	80024d2 <HAL_GPIO_Init+0x2e2>
 800248e:	bf00      	nop
 8002490:	10320000 	.word	0x10320000
 8002494:	10310000 	.word	0x10310000
 8002498:	10220000 	.word	0x10220000
 800249c:	10210000 	.word	0x10210000
 80024a0:	10120000 	.word	0x10120000
 80024a4:	10110000 	.word	0x10110000
 80024a8:	40021000 	.word	0x40021000
 80024ac:	40010000 	.word	0x40010000
 80024b0:	40010800 	.word	0x40010800
 80024b4:	40010c00 	.word	0x40010c00
 80024b8:	40011000 	.word	0x40011000
 80024bc:	40011400 	.word	0x40011400
 80024c0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80024c4:	4b0b      	ldr	r3, [pc, #44]	@ (80024f4 <HAL_GPIO_Init+0x304>)
 80024c6:	681a      	ldr	r2, [r3, #0]
 80024c8:	69bb      	ldr	r3, [r7, #24]
 80024ca:	43db      	mvns	r3, r3
 80024cc:	4909      	ldr	r1, [pc, #36]	@ (80024f4 <HAL_GPIO_Init+0x304>)
 80024ce:	4013      	ands	r3, r2
 80024d0:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80024d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024d4:	3301      	adds	r3, #1
 80024d6:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80024d8:	683b      	ldr	r3, [r7, #0]
 80024da:	681a      	ldr	r2, [r3, #0]
 80024dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024de:	fa22 f303 	lsr.w	r3, r2, r3
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	f47f ae8e 	bne.w	8002204 <HAL_GPIO_Init+0x14>
  }
}
 80024e8:	bf00      	nop
 80024ea:	bf00      	nop
 80024ec:	372c      	adds	r7, #44	@ 0x2c
 80024ee:	46bd      	mov	sp, r7
 80024f0:	bc80      	pop	{r7}
 80024f2:	4770      	bx	lr
 80024f4:	40010400 	.word	0x40010400

080024f8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80024f8:	b580      	push	{r7, lr}
 80024fa:	b084      	sub	sp, #16
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	2b00      	cmp	r3, #0
 8002504:	d101      	bne.n	800250a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002506:	2301      	movs	r3, #1
 8002508:	e12b      	b.n	8002762 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002510:	b2db      	uxtb	r3, r3
 8002512:	2b00      	cmp	r3, #0
 8002514:	d106      	bne.n	8002524 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	2200      	movs	r2, #0
 800251a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800251e:	6878      	ldr	r0, [r7, #4]
 8002520:	f7ff fa30 	bl	8001984 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	2224      	movs	r2, #36	@ 0x24
 8002528:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	681a      	ldr	r2, [r3, #0]
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f022 0201 	bic.w	r2, r2, #1
 800253a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	681a      	ldr	r2, [r3, #0]
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800254a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	681a      	ldr	r2, [r3, #0]
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800255a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800255c:	f001 fbca 	bl	8003cf4 <HAL_RCC_GetPCLK1Freq>
 8002560:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	685b      	ldr	r3, [r3, #4]
 8002566:	4a81      	ldr	r2, [pc, #516]	@ (800276c <HAL_I2C_Init+0x274>)
 8002568:	4293      	cmp	r3, r2
 800256a:	d807      	bhi.n	800257c <HAL_I2C_Init+0x84>
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	4a80      	ldr	r2, [pc, #512]	@ (8002770 <HAL_I2C_Init+0x278>)
 8002570:	4293      	cmp	r3, r2
 8002572:	bf94      	ite	ls
 8002574:	2301      	movls	r3, #1
 8002576:	2300      	movhi	r3, #0
 8002578:	b2db      	uxtb	r3, r3
 800257a:	e006      	b.n	800258a <HAL_I2C_Init+0x92>
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	4a7d      	ldr	r2, [pc, #500]	@ (8002774 <HAL_I2C_Init+0x27c>)
 8002580:	4293      	cmp	r3, r2
 8002582:	bf94      	ite	ls
 8002584:	2301      	movls	r3, #1
 8002586:	2300      	movhi	r3, #0
 8002588:	b2db      	uxtb	r3, r3
 800258a:	2b00      	cmp	r3, #0
 800258c:	d001      	beq.n	8002592 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800258e:	2301      	movs	r3, #1
 8002590:	e0e7      	b.n	8002762 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	4a78      	ldr	r2, [pc, #480]	@ (8002778 <HAL_I2C_Init+0x280>)
 8002596:	fba2 2303 	umull	r2, r3, r2, r3
 800259a:	0c9b      	lsrs	r3, r3, #18
 800259c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	685b      	ldr	r3, [r3, #4]
 80025a4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	68ba      	ldr	r2, [r7, #8]
 80025ae:	430a      	orrs	r2, r1
 80025b0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	6a1b      	ldr	r3, [r3, #32]
 80025b8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	685b      	ldr	r3, [r3, #4]
 80025c0:	4a6a      	ldr	r2, [pc, #424]	@ (800276c <HAL_I2C_Init+0x274>)
 80025c2:	4293      	cmp	r3, r2
 80025c4:	d802      	bhi.n	80025cc <HAL_I2C_Init+0xd4>
 80025c6:	68bb      	ldr	r3, [r7, #8]
 80025c8:	3301      	adds	r3, #1
 80025ca:	e009      	b.n	80025e0 <HAL_I2C_Init+0xe8>
 80025cc:	68bb      	ldr	r3, [r7, #8]
 80025ce:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80025d2:	fb02 f303 	mul.w	r3, r2, r3
 80025d6:	4a69      	ldr	r2, [pc, #420]	@ (800277c <HAL_I2C_Init+0x284>)
 80025d8:	fba2 2303 	umull	r2, r3, r2, r3
 80025dc:	099b      	lsrs	r3, r3, #6
 80025de:	3301      	adds	r3, #1
 80025e0:	687a      	ldr	r2, [r7, #4]
 80025e2:	6812      	ldr	r2, [r2, #0]
 80025e4:	430b      	orrs	r3, r1
 80025e6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	69db      	ldr	r3, [r3, #28]
 80025ee:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80025f2:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	685b      	ldr	r3, [r3, #4]
 80025fa:	495c      	ldr	r1, [pc, #368]	@ (800276c <HAL_I2C_Init+0x274>)
 80025fc:	428b      	cmp	r3, r1
 80025fe:	d819      	bhi.n	8002634 <HAL_I2C_Init+0x13c>
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	1e59      	subs	r1, r3, #1
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	685b      	ldr	r3, [r3, #4]
 8002608:	005b      	lsls	r3, r3, #1
 800260a:	fbb1 f3f3 	udiv	r3, r1, r3
 800260e:	1c59      	adds	r1, r3, #1
 8002610:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002614:	400b      	ands	r3, r1
 8002616:	2b00      	cmp	r3, #0
 8002618:	d00a      	beq.n	8002630 <HAL_I2C_Init+0x138>
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	1e59      	subs	r1, r3, #1
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	685b      	ldr	r3, [r3, #4]
 8002622:	005b      	lsls	r3, r3, #1
 8002624:	fbb1 f3f3 	udiv	r3, r1, r3
 8002628:	3301      	adds	r3, #1
 800262a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800262e:	e051      	b.n	80026d4 <HAL_I2C_Init+0x1dc>
 8002630:	2304      	movs	r3, #4
 8002632:	e04f      	b.n	80026d4 <HAL_I2C_Init+0x1dc>
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	689b      	ldr	r3, [r3, #8]
 8002638:	2b00      	cmp	r3, #0
 800263a:	d111      	bne.n	8002660 <HAL_I2C_Init+0x168>
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	1e58      	subs	r0, r3, #1
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	6859      	ldr	r1, [r3, #4]
 8002644:	460b      	mov	r3, r1
 8002646:	005b      	lsls	r3, r3, #1
 8002648:	440b      	add	r3, r1
 800264a:	fbb0 f3f3 	udiv	r3, r0, r3
 800264e:	3301      	adds	r3, #1
 8002650:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002654:	2b00      	cmp	r3, #0
 8002656:	bf0c      	ite	eq
 8002658:	2301      	moveq	r3, #1
 800265a:	2300      	movne	r3, #0
 800265c:	b2db      	uxtb	r3, r3
 800265e:	e012      	b.n	8002686 <HAL_I2C_Init+0x18e>
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	1e58      	subs	r0, r3, #1
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	6859      	ldr	r1, [r3, #4]
 8002668:	460b      	mov	r3, r1
 800266a:	009b      	lsls	r3, r3, #2
 800266c:	440b      	add	r3, r1
 800266e:	0099      	lsls	r1, r3, #2
 8002670:	440b      	add	r3, r1
 8002672:	fbb0 f3f3 	udiv	r3, r0, r3
 8002676:	3301      	adds	r3, #1
 8002678:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800267c:	2b00      	cmp	r3, #0
 800267e:	bf0c      	ite	eq
 8002680:	2301      	moveq	r3, #1
 8002682:	2300      	movne	r3, #0
 8002684:	b2db      	uxtb	r3, r3
 8002686:	2b00      	cmp	r3, #0
 8002688:	d001      	beq.n	800268e <HAL_I2C_Init+0x196>
 800268a:	2301      	movs	r3, #1
 800268c:	e022      	b.n	80026d4 <HAL_I2C_Init+0x1dc>
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	689b      	ldr	r3, [r3, #8]
 8002692:	2b00      	cmp	r3, #0
 8002694:	d10e      	bne.n	80026b4 <HAL_I2C_Init+0x1bc>
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	1e58      	subs	r0, r3, #1
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	6859      	ldr	r1, [r3, #4]
 800269e:	460b      	mov	r3, r1
 80026a0:	005b      	lsls	r3, r3, #1
 80026a2:	440b      	add	r3, r1
 80026a4:	fbb0 f3f3 	udiv	r3, r0, r3
 80026a8:	3301      	adds	r3, #1
 80026aa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80026ae:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80026b2:	e00f      	b.n	80026d4 <HAL_I2C_Init+0x1dc>
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	1e58      	subs	r0, r3, #1
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	6859      	ldr	r1, [r3, #4]
 80026bc:	460b      	mov	r3, r1
 80026be:	009b      	lsls	r3, r3, #2
 80026c0:	440b      	add	r3, r1
 80026c2:	0099      	lsls	r1, r3, #2
 80026c4:	440b      	add	r3, r1
 80026c6:	fbb0 f3f3 	udiv	r3, r0, r3
 80026ca:	3301      	adds	r3, #1
 80026cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80026d0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80026d4:	6879      	ldr	r1, [r7, #4]
 80026d6:	6809      	ldr	r1, [r1, #0]
 80026d8:	4313      	orrs	r3, r2
 80026da:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	69da      	ldr	r2, [r3, #28]
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	6a1b      	ldr	r3, [r3, #32]
 80026ee:	431a      	orrs	r2, r3
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	430a      	orrs	r2, r1
 80026f6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	689b      	ldr	r3, [r3, #8]
 80026fe:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8002702:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002706:	687a      	ldr	r2, [r7, #4]
 8002708:	6911      	ldr	r1, [r2, #16]
 800270a:	687a      	ldr	r2, [r7, #4]
 800270c:	68d2      	ldr	r2, [r2, #12]
 800270e:	4311      	orrs	r1, r2
 8002710:	687a      	ldr	r2, [r7, #4]
 8002712:	6812      	ldr	r2, [r2, #0]
 8002714:	430b      	orrs	r3, r1
 8002716:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	68db      	ldr	r3, [r3, #12]
 800271e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	695a      	ldr	r2, [r3, #20]
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	699b      	ldr	r3, [r3, #24]
 800272a:	431a      	orrs	r2, r3
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	430a      	orrs	r2, r1
 8002732:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	681a      	ldr	r2, [r3, #0]
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f042 0201 	orr.w	r2, r2, #1
 8002742:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	2200      	movs	r2, #0
 8002748:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	2220      	movs	r2, #32
 800274e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	2200      	movs	r2, #0
 8002756:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	2200      	movs	r2, #0
 800275c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002760:	2300      	movs	r3, #0
}
 8002762:	4618      	mov	r0, r3
 8002764:	3710      	adds	r7, #16
 8002766:	46bd      	mov	sp, r7
 8002768:	bd80      	pop	{r7, pc}
 800276a:	bf00      	nop
 800276c:	000186a0 	.word	0x000186a0
 8002770:	001e847f 	.word	0x001e847f
 8002774:	003d08ff 	.word	0x003d08ff
 8002778:	431bde83 	.word	0x431bde83
 800277c:	10624dd3 	.word	0x10624dd3

08002780 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002780:	b580      	push	{r7, lr}
 8002782:	b088      	sub	sp, #32
 8002784:	af02      	add	r7, sp, #8
 8002786:	60f8      	str	r0, [r7, #12]
 8002788:	607a      	str	r2, [r7, #4]
 800278a:	461a      	mov	r2, r3
 800278c:	460b      	mov	r3, r1
 800278e:	817b      	strh	r3, [r7, #10]
 8002790:	4613      	mov	r3, r2
 8002792:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002794:	f7ff fb6c 	bl	8001e70 <HAL_GetTick>
 8002798:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80027a0:	b2db      	uxtb	r3, r3
 80027a2:	2b20      	cmp	r3, #32
 80027a4:	f040 80e0 	bne.w	8002968 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80027a8:	697b      	ldr	r3, [r7, #20]
 80027aa:	9300      	str	r3, [sp, #0]
 80027ac:	2319      	movs	r3, #25
 80027ae:	2201      	movs	r2, #1
 80027b0:	4970      	ldr	r1, [pc, #448]	@ (8002974 <HAL_I2C_Master_Transmit+0x1f4>)
 80027b2:	68f8      	ldr	r0, [r7, #12]
 80027b4:	f000 fc9e 	bl	80030f4 <I2C_WaitOnFlagUntilTimeout>
 80027b8:	4603      	mov	r3, r0
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d001      	beq.n	80027c2 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80027be:	2302      	movs	r3, #2
 80027c0:	e0d3      	b.n	800296a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80027c8:	2b01      	cmp	r3, #1
 80027ca:	d101      	bne.n	80027d0 <HAL_I2C_Master_Transmit+0x50>
 80027cc:	2302      	movs	r3, #2
 80027ce:	e0cc      	b.n	800296a <HAL_I2C_Master_Transmit+0x1ea>
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	2201      	movs	r2, #1
 80027d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f003 0301 	and.w	r3, r3, #1
 80027e2:	2b01      	cmp	r3, #1
 80027e4:	d007      	beq.n	80027f6 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	681a      	ldr	r2, [r3, #0]
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f042 0201 	orr.w	r2, r2, #1
 80027f4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	681a      	ldr	r2, [r3, #0]
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002804:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	2221      	movs	r2, #33	@ 0x21
 800280a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	2210      	movs	r2, #16
 8002812:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	2200      	movs	r2, #0
 800281a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	687a      	ldr	r2, [r7, #4]
 8002820:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	893a      	ldrh	r2, [r7, #8]
 8002826:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800282c:	b29a      	uxth	r2, r3
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	4a50      	ldr	r2, [pc, #320]	@ (8002978 <HAL_I2C_Master_Transmit+0x1f8>)
 8002836:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002838:	8979      	ldrh	r1, [r7, #10]
 800283a:	697b      	ldr	r3, [r7, #20]
 800283c:	6a3a      	ldr	r2, [r7, #32]
 800283e:	68f8      	ldr	r0, [r7, #12]
 8002840:	f000 fb08 	bl	8002e54 <I2C_MasterRequestWrite>
 8002844:	4603      	mov	r3, r0
 8002846:	2b00      	cmp	r3, #0
 8002848:	d001      	beq.n	800284e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800284a:	2301      	movs	r3, #1
 800284c:	e08d      	b.n	800296a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800284e:	2300      	movs	r3, #0
 8002850:	613b      	str	r3, [r7, #16]
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	695b      	ldr	r3, [r3, #20]
 8002858:	613b      	str	r3, [r7, #16]
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	699b      	ldr	r3, [r3, #24]
 8002860:	613b      	str	r3, [r7, #16]
 8002862:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002864:	e066      	b.n	8002934 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002866:	697a      	ldr	r2, [r7, #20]
 8002868:	6a39      	ldr	r1, [r7, #32]
 800286a:	68f8      	ldr	r0, [r7, #12]
 800286c:	f000 fd5c 	bl	8003328 <I2C_WaitOnTXEFlagUntilTimeout>
 8002870:	4603      	mov	r3, r0
 8002872:	2b00      	cmp	r3, #0
 8002874:	d00d      	beq.n	8002892 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800287a:	2b04      	cmp	r3, #4
 800287c:	d107      	bne.n	800288e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	681a      	ldr	r2, [r3, #0]
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800288c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800288e:	2301      	movs	r3, #1
 8002890:	e06b      	b.n	800296a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002896:	781a      	ldrb	r2, [r3, #0]
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028a2:	1c5a      	adds	r2, r3, #1
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80028ac:	b29b      	uxth	r3, r3
 80028ae:	3b01      	subs	r3, #1
 80028b0:	b29a      	uxth	r2, r3
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80028ba:	3b01      	subs	r3, #1
 80028bc:	b29a      	uxth	r2, r3
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	695b      	ldr	r3, [r3, #20]
 80028c8:	f003 0304 	and.w	r3, r3, #4
 80028cc:	2b04      	cmp	r3, #4
 80028ce:	d11b      	bne.n	8002908 <HAL_I2C_Master_Transmit+0x188>
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d017      	beq.n	8002908 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028dc:	781a      	ldrb	r2, [r3, #0]
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028e8:	1c5a      	adds	r2, r3, #1
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80028f2:	b29b      	uxth	r3, r3
 80028f4:	3b01      	subs	r3, #1
 80028f6:	b29a      	uxth	r2, r3
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002900:	3b01      	subs	r3, #1
 8002902:	b29a      	uxth	r2, r3
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002908:	697a      	ldr	r2, [r7, #20]
 800290a:	6a39      	ldr	r1, [r7, #32]
 800290c:	68f8      	ldr	r0, [r7, #12]
 800290e:	f000 fd53 	bl	80033b8 <I2C_WaitOnBTFFlagUntilTimeout>
 8002912:	4603      	mov	r3, r0
 8002914:	2b00      	cmp	r3, #0
 8002916:	d00d      	beq.n	8002934 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800291c:	2b04      	cmp	r3, #4
 800291e:	d107      	bne.n	8002930 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	681a      	ldr	r2, [r3, #0]
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800292e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002930:	2301      	movs	r3, #1
 8002932:	e01a      	b.n	800296a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002938:	2b00      	cmp	r3, #0
 800293a:	d194      	bne.n	8002866 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	681a      	ldr	r2, [r3, #0]
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800294a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	2220      	movs	r2, #32
 8002950:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	2200      	movs	r2, #0
 8002958:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	2200      	movs	r2, #0
 8002960:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002964:	2300      	movs	r3, #0
 8002966:	e000      	b.n	800296a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002968:	2302      	movs	r3, #2
  }
}
 800296a:	4618      	mov	r0, r3
 800296c:	3718      	adds	r7, #24
 800296e:	46bd      	mov	sp, r7
 8002970:	bd80      	pop	{r7, pc}
 8002972:	bf00      	nop
 8002974:	00100002 	.word	0x00100002
 8002978:	ffff0000 	.word	0xffff0000

0800297c <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800297c:	b580      	push	{r7, lr}
 800297e:	b08c      	sub	sp, #48	@ 0x30
 8002980:	af02      	add	r7, sp, #8
 8002982:	60f8      	str	r0, [r7, #12]
 8002984:	607a      	str	r2, [r7, #4]
 8002986:	461a      	mov	r2, r3
 8002988:	460b      	mov	r3, r1
 800298a:	817b      	strh	r3, [r7, #10]
 800298c:	4613      	mov	r3, r2
 800298e:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8002990:	2300      	movs	r3, #0
 8002992:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002994:	f7ff fa6c 	bl	8001e70 <HAL_GetTick>
 8002998:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80029a0:	b2db      	uxtb	r3, r3
 80029a2:	2b20      	cmp	r3, #32
 80029a4:	f040 824b 	bne.w	8002e3e <HAL_I2C_Master_Receive+0x4c2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80029a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029aa:	9300      	str	r3, [sp, #0]
 80029ac:	2319      	movs	r3, #25
 80029ae:	2201      	movs	r2, #1
 80029b0:	497f      	ldr	r1, [pc, #508]	@ (8002bb0 <HAL_I2C_Master_Receive+0x234>)
 80029b2:	68f8      	ldr	r0, [r7, #12]
 80029b4:	f000 fb9e 	bl	80030f4 <I2C_WaitOnFlagUntilTimeout>
 80029b8:	4603      	mov	r3, r0
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d001      	beq.n	80029c2 <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 80029be:	2302      	movs	r3, #2
 80029c0:	e23e      	b.n	8002e40 <HAL_I2C_Master_Receive+0x4c4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80029c8:	2b01      	cmp	r3, #1
 80029ca:	d101      	bne.n	80029d0 <HAL_I2C_Master_Receive+0x54>
 80029cc:	2302      	movs	r3, #2
 80029ce:	e237      	b.n	8002e40 <HAL_I2C_Master_Receive+0x4c4>
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	2201      	movs	r2, #1
 80029d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f003 0301 	and.w	r3, r3, #1
 80029e2:	2b01      	cmp	r3, #1
 80029e4:	d007      	beq.n	80029f6 <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	681a      	ldr	r2, [r3, #0]
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f042 0201 	orr.w	r2, r2, #1
 80029f4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	681a      	ldr	r2, [r3, #0]
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002a04:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	2222      	movs	r2, #34	@ 0x22
 8002a0a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	2210      	movs	r2, #16
 8002a12:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	2200      	movs	r2, #0
 8002a1a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	687a      	ldr	r2, [r7, #4]
 8002a20:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	893a      	ldrh	r2, [r7, #8]
 8002a26:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a2c:	b29a      	uxth	r2, r3
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	4a5f      	ldr	r2, [pc, #380]	@ (8002bb4 <HAL_I2C_Master_Receive+0x238>)
 8002a36:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002a38:	8979      	ldrh	r1, [r7, #10]
 8002a3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a3c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002a3e:	68f8      	ldr	r0, [r7, #12]
 8002a40:	f000 fa8a 	bl	8002f58 <I2C_MasterRequestRead>
 8002a44:	4603      	mov	r3, r0
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d001      	beq.n	8002a4e <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 8002a4a:	2301      	movs	r3, #1
 8002a4c:	e1f8      	b.n	8002e40 <HAL_I2C_Master_Receive+0x4c4>
    }

    if (hi2c->XferSize == 0U)
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d113      	bne.n	8002a7e <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002a56:	2300      	movs	r3, #0
 8002a58:	61fb      	str	r3, [r7, #28]
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	695b      	ldr	r3, [r3, #20]
 8002a60:	61fb      	str	r3, [r7, #28]
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	699b      	ldr	r3, [r3, #24]
 8002a68:	61fb      	str	r3, [r7, #28]
 8002a6a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	681a      	ldr	r2, [r3, #0]
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002a7a:	601a      	str	r2, [r3, #0]
 8002a7c:	e1cc      	b.n	8002e18 <HAL_I2C_Master_Receive+0x49c>
    }
    else if (hi2c->XferSize == 1U)
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a82:	2b01      	cmp	r3, #1
 8002a84:	d11e      	bne.n	8002ac4 <HAL_I2C_Master_Receive+0x148>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	681a      	ldr	r2, [r3, #0]
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002a94:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002a96:	b672      	cpsid	i
}
 8002a98:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002a9a:	2300      	movs	r3, #0
 8002a9c:	61bb      	str	r3, [r7, #24]
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	695b      	ldr	r3, [r3, #20]
 8002aa4:	61bb      	str	r3, [r7, #24]
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	699b      	ldr	r3, [r3, #24]
 8002aac:	61bb      	str	r3, [r7, #24]
 8002aae:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	681a      	ldr	r2, [r3, #0]
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002abe:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002ac0:	b662      	cpsie	i
}
 8002ac2:	e035      	b.n	8002b30 <HAL_I2C_Master_Receive+0x1b4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ac8:	2b02      	cmp	r3, #2
 8002aca:	d11e      	bne.n	8002b0a <HAL_I2C_Master_Receive+0x18e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	681a      	ldr	r2, [r3, #0]
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002ada:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002adc:	b672      	cpsid	i
}
 8002ade:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002ae0:	2300      	movs	r3, #0
 8002ae2:	617b      	str	r3, [r7, #20]
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	695b      	ldr	r3, [r3, #20]
 8002aea:	617b      	str	r3, [r7, #20]
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	699b      	ldr	r3, [r3, #24]
 8002af2:	617b      	str	r3, [r7, #20]
 8002af4:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	681a      	ldr	r2, [r3, #0]
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002b04:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002b06:	b662      	cpsie	i
}
 8002b08:	e012      	b.n	8002b30 <HAL_I2C_Master_Receive+0x1b4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	681a      	ldr	r2, [r3, #0]
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002b18:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b1a:	2300      	movs	r3, #0
 8002b1c:	613b      	str	r3, [r7, #16]
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	695b      	ldr	r3, [r3, #20]
 8002b24:	613b      	str	r3, [r7, #16]
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	699b      	ldr	r3, [r3, #24]
 8002b2c:	613b      	str	r3, [r7, #16]
 8002b2e:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8002b30:	e172      	b.n	8002e18 <HAL_I2C_Master_Receive+0x49c>
    {
      if (hi2c->XferSize <= 3U)
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b36:	2b03      	cmp	r3, #3
 8002b38:	f200 811f 	bhi.w	8002d7a <HAL_I2C_Master_Receive+0x3fe>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b40:	2b01      	cmp	r3, #1
 8002b42:	d123      	bne.n	8002b8c <HAL_I2C_Master_Receive+0x210>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002b44:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002b46:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8002b48:	68f8      	ldr	r0, [r7, #12]
 8002b4a:	f000 fc7d 	bl	8003448 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002b4e:	4603      	mov	r3, r0
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d001      	beq.n	8002b58 <HAL_I2C_Master_Receive+0x1dc>
          {
            return HAL_ERROR;
 8002b54:	2301      	movs	r3, #1
 8002b56:	e173      	b.n	8002e40 <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	691a      	ldr	r2, [r3, #16]
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b62:	b2d2      	uxtb	r2, r2
 8002b64:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b6a:	1c5a      	adds	r2, r3, #1
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b74:	3b01      	subs	r3, #1
 8002b76:	b29a      	uxth	r2, r3
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b80:	b29b      	uxth	r3, r3
 8002b82:	3b01      	subs	r3, #1
 8002b84:	b29a      	uxth	r2, r3
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002b8a:	e145      	b.n	8002e18 <HAL_I2C_Master_Receive+0x49c>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b90:	2b02      	cmp	r3, #2
 8002b92:	d152      	bne.n	8002c3a <HAL_I2C_Master_Receive+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002b94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b96:	9300      	str	r3, [sp, #0]
 8002b98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b9a:	2200      	movs	r2, #0
 8002b9c:	4906      	ldr	r1, [pc, #24]	@ (8002bb8 <HAL_I2C_Master_Receive+0x23c>)
 8002b9e:	68f8      	ldr	r0, [r7, #12]
 8002ba0:	f000 faa8 	bl	80030f4 <I2C_WaitOnFlagUntilTimeout>
 8002ba4:	4603      	mov	r3, r0
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d008      	beq.n	8002bbc <HAL_I2C_Master_Receive+0x240>
          {
            return HAL_ERROR;
 8002baa:	2301      	movs	r3, #1
 8002bac:	e148      	b.n	8002e40 <HAL_I2C_Master_Receive+0x4c4>
 8002bae:	bf00      	nop
 8002bb0:	00100002 	.word	0x00100002
 8002bb4:	ffff0000 	.word	0xffff0000
 8002bb8:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8002bbc:	b672      	cpsid	i
}
 8002bbe:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	681a      	ldr	r2, [r3, #0]
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002bce:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	691a      	ldr	r2, [r3, #16]
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bda:	b2d2      	uxtb	r2, r2
 8002bdc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002be2:	1c5a      	adds	r2, r3, #1
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002bec:	3b01      	subs	r3, #1
 8002bee:	b29a      	uxth	r2, r3
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002bf8:	b29b      	uxth	r3, r3
 8002bfa:	3b01      	subs	r3, #1
 8002bfc:	b29a      	uxth	r2, r3
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8002c02:	b662      	cpsie	i
}
 8002c04:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	691a      	ldr	r2, [r3, #16]
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c10:	b2d2      	uxtb	r2, r2
 8002c12:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c18:	1c5a      	adds	r2, r3, #1
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c22:	3b01      	subs	r3, #1
 8002c24:	b29a      	uxth	r2, r3
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c2e:	b29b      	uxth	r3, r3
 8002c30:	3b01      	subs	r3, #1
 8002c32:	b29a      	uxth	r2, r3
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002c38:	e0ee      	b.n	8002e18 <HAL_I2C_Master_Receive+0x49c>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002c3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c3c:	9300      	str	r3, [sp, #0]
 8002c3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c40:	2200      	movs	r2, #0
 8002c42:	4981      	ldr	r1, [pc, #516]	@ (8002e48 <HAL_I2C_Master_Receive+0x4cc>)
 8002c44:	68f8      	ldr	r0, [r7, #12]
 8002c46:	f000 fa55 	bl	80030f4 <I2C_WaitOnFlagUntilTimeout>
 8002c4a:	4603      	mov	r3, r0
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d001      	beq.n	8002c54 <HAL_I2C_Master_Receive+0x2d8>
          {
            return HAL_ERROR;
 8002c50:	2301      	movs	r3, #1
 8002c52:	e0f5      	b.n	8002e40 <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	681a      	ldr	r2, [r3, #0]
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002c62:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002c64:	b672      	cpsid	i
}
 8002c66:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	691a      	ldr	r2, [r3, #16]
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c72:	b2d2      	uxtb	r2, r2
 8002c74:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c7a:	1c5a      	adds	r2, r3, #1
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c84:	3b01      	subs	r3, #1
 8002c86:	b29a      	uxth	r2, r3
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c90:	b29b      	uxth	r3, r3
 8002c92:	3b01      	subs	r3, #1
 8002c94:	b29a      	uxth	r2, r3
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8002c9a:	4b6c      	ldr	r3, [pc, #432]	@ (8002e4c <HAL_I2C_Master_Receive+0x4d0>)
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	08db      	lsrs	r3, r3, #3
 8002ca0:	4a6b      	ldr	r2, [pc, #428]	@ (8002e50 <HAL_I2C_Master_Receive+0x4d4>)
 8002ca2:	fba2 2303 	umull	r2, r3, r2, r3
 8002ca6:	0a1a      	lsrs	r2, r3, #8
 8002ca8:	4613      	mov	r3, r2
 8002caa:	009b      	lsls	r3, r3, #2
 8002cac:	4413      	add	r3, r2
 8002cae:	00da      	lsls	r2, r3, #3
 8002cb0:	1ad3      	subs	r3, r2, r3
 8002cb2:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8002cb4:	6a3b      	ldr	r3, [r7, #32]
 8002cb6:	3b01      	subs	r3, #1
 8002cb8:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8002cba:	6a3b      	ldr	r3, [r7, #32]
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d118      	bne.n	8002cf2 <HAL_I2C_Master_Receive+0x376>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	2200      	movs	r2, #0
 8002cc4:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	2220      	movs	r2, #32
 8002cca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cda:	f043 0220 	orr.w	r2, r3, #32
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8002ce2:	b662      	cpsie	i
}
 8002ce4:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	2200      	movs	r2, #0
 8002cea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 8002cee:	2301      	movs	r3, #1
 8002cf0:	e0a6      	b.n	8002e40 <HAL_I2C_Master_Receive+0x4c4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	695b      	ldr	r3, [r3, #20]
 8002cf8:	f003 0304 	and.w	r3, r3, #4
 8002cfc:	2b04      	cmp	r3, #4
 8002cfe:	d1d9      	bne.n	8002cb4 <HAL_I2C_Master_Receive+0x338>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	681a      	ldr	r2, [r3, #0]
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002d0e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	691a      	ldr	r2, [r3, #16]
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d1a:	b2d2      	uxtb	r2, r2
 8002d1c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d22:	1c5a      	adds	r2, r3, #1
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d2c:	3b01      	subs	r3, #1
 8002d2e:	b29a      	uxth	r2, r3
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d38:	b29b      	uxth	r3, r3
 8002d3a:	3b01      	subs	r3, #1
 8002d3c:	b29a      	uxth	r2, r3
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8002d42:	b662      	cpsie	i
}
 8002d44:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	691a      	ldr	r2, [r3, #16]
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d50:	b2d2      	uxtb	r2, r2
 8002d52:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d58:	1c5a      	adds	r2, r3, #1
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d62:	3b01      	subs	r3, #1
 8002d64:	b29a      	uxth	r2, r3
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d6e:	b29b      	uxth	r3, r3
 8002d70:	3b01      	subs	r3, #1
 8002d72:	b29a      	uxth	r2, r3
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002d78:	e04e      	b.n	8002e18 <HAL_I2C_Master_Receive+0x49c>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002d7a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002d7c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8002d7e:	68f8      	ldr	r0, [r7, #12]
 8002d80:	f000 fb62 	bl	8003448 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002d84:	4603      	mov	r3, r0
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d001      	beq.n	8002d8e <HAL_I2C_Master_Receive+0x412>
        {
          return HAL_ERROR;
 8002d8a:	2301      	movs	r3, #1
 8002d8c:	e058      	b.n	8002e40 <HAL_I2C_Master_Receive+0x4c4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	691a      	ldr	r2, [r3, #16]
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d98:	b2d2      	uxtb	r2, r2
 8002d9a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002da0:	1c5a      	adds	r2, r3, #1
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002daa:	3b01      	subs	r3, #1
 8002dac:	b29a      	uxth	r2, r3
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002db6:	b29b      	uxth	r3, r3
 8002db8:	3b01      	subs	r3, #1
 8002dba:	b29a      	uxth	r2, r3
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	695b      	ldr	r3, [r3, #20]
 8002dc6:	f003 0304 	and.w	r3, r3, #4
 8002dca:	2b04      	cmp	r3, #4
 8002dcc:	d124      	bne.n	8002e18 <HAL_I2C_Master_Receive+0x49c>
        {

          if (hi2c->XferSize == 3U)
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002dd2:	2b03      	cmp	r3, #3
 8002dd4:	d107      	bne.n	8002de6 <HAL_I2C_Master_Receive+0x46a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	681a      	ldr	r2, [r3, #0]
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002de4:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	691a      	ldr	r2, [r3, #16]
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002df0:	b2d2      	uxtb	r2, r2
 8002df2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002df8:	1c5a      	adds	r2, r3, #1
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e02:	3b01      	subs	r3, #1
 8002e04:	b29a      	uxth	r2, r3
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e0e:	b29b      	uxth	r3, r3
 8002e10:	3b01      	subs	r3, #1
 8002e12:	b29a      	uxth	r2, r3
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	f47f ae88 	bne.w	8002b32 <HAL_I2C_Master_Receive+0x1b6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	2220      	movs	r2, #32
 8002e26:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	2200      	movs	r2, #0
 8002e2e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	2200      	movs	r2, #0
 8002e36:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002e3a:	2300      	movs	r3, #0
 8002e3c:	e000      	b.n	8002e40 <HAL_I2C_Master_Receive+0x4c4>
  }
  else
  {
    return HAL_BUSY;
 8002e3e:	2302      	movs	r3, #2
  }
}
 8002e40:	4618      	mov	r0, r3
 8002e42:	3728      	adds	r7, #40	@ 0x28
 8002e44:	46bd      	mov	sp, r7
 8002e46:	bd80      	pop	{r7, pc}
 8002e48:	00010004 	.word	0x00010004
 8002e4c:	20000010 	.word	0x20000010
 8002e50:	14f8b589 	.word	0x14f8b589

08002e54 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002e54:	b580      	push	{r7, lr}
 8002e56:	b088      	sub	sp, #32
 8002e58:	af02      	add	r7, sp, #8
 8002e5a:	60f8      	str	r0, [r7, #12]
 8002e5c:	607a      	str	r2, [r7, #4]
 8002e5e:	603b      	str	r3, [r7, #0]
 8002e60:	460b      	mov	r3, r1
 8002e62:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e68:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002e6a:	697b      	ldr	r3, [r7, #20]
 8002e6c:	2b08      	cmp	r3, #8
 8002e6e:	d006      	beq.n	8002e7e <I2C_MasterRequestWrite+0x2a>
 8002e70:	697b      	ldr	r3, [r7, #20]
 8002e72:	2b01      	cmp	r3, #1
 8002e74:	d003      	beq.n	8002e7e <I2C_MasterRequestWrite+0x2a>
 8002e76:	697b      	ldr	r3, [r7, #20]
 8002e78:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002e7c:	d108      	bne.n	8002e90 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	681a      	ldr	r2, [r3, #0]
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002e8c:	601a      	str	r2, [r3, #0]
 8002e8e:	e00b      	b.n	8002ea8 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e94:	2b12      	cmp	r3, #18
 8002e96:	d107      	bne.n	8002ea8 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	681a      	ldr	r2, [r3, #0]
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002ea6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002ea8:	683b      	ldr	r3, [r7, #0]
 8002eaa:	9300      	str	r3, [sp, #0]
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	2200      	movs	r2, #0
 8002eb0:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002eb4:	68f8      	ldr	r0, [r7, #12]
 8002eb6:	f000 f91d 	bl	80030f4 <I2C_WaitOnFlagUntilTimeout>
 8002eba:	4603      	mov	r3, r0
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d00d      	beq.n	8002edc <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002eca:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002ece:	d103      	bne.n	8002ed8 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002ed6:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002ed8:	2303      	movs	r3, #3
 8002eda:	e035      	b.n	8002f48 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	691b      	ldr	r3, [r3, #16]
 8002ee0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002ee4:	d108      	bne.n	8002ef8 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002ee6:	897b      	ldrh	r3, [r7, #10]
 8002ee8:	b2db      	uxtb	r3, r3
 8002eea:	461a      	mov	r2, r3
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002ef4:	611a      	str	r2, [r3, #16]
 8002ef6:	e01b      	b.n	8002f30 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002ef8:	897b      	ldrh	r3, [r7, #10]
 8002efa:	11db      	asrs	r3, r3, #7
 8002efc:	b2db      	uxtb	r3, r3
 8002efe:	f003 0306 	and.w	r3, r3, #6
 8002f02:	b2db      	uxtb	r3, r3
 8002f04:	f063 030f 	orn	r3, r3, #15
 8002f08:	b2da      	uxtb	r2, r3
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002f10:	683b      	ldr	r3, [r7, #0]
 8002f12:	687a      	ldr	r2, [r7, #4]
 8002f14:	490e      	ldr	r1, [pc, #56]	@ (8002f50 <I2C_MasterRequestWrite+0xfc>)
 8002f16:	68f8      	ldr	r0, [r7, #12]
 8002f18:	f000 f966 	bl	80031e8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002f1c:	4603      	mov	r3, r0
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d001      	beq.n	8002f26 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002f22:	2301      	movs	r3, #1
 8002f24:	e010      	b.n	8002f48 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002f26:	897b      	ldrh	r3, [r7, #10]
 8002f28:	b2da      	uxtb	r2, r3
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002f30:	683b      	ldr	r3, [r7, #0]
 8002f32:	687a      	ldr	r2, [r7, #4]
 8002f34:	4907      	ldr	r1, [pc, #28]	@ (8002f54 <I2C_MasterRequestWrite+0x100>)
 8002f36:	68f8      	ldr	r0, [r7, #12]
 8002f38:	f000 f956 	bl	80031e8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002f3c:	4603      	mov	r3, r0
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d001      	beq.n	8002f46 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002f42:	2301      	movs	r3, #1
 8002f44:	e000      	b.n	8002f48 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002f46:	2300      	movs	r3, #0
}
 8002f48:	4618      	mov	r0, r3
 8002f4a:	3718      	adds	r7, #24
 8002f4c:	46bd      	mov	sp, r7
 8002f4e:	bd80      	pop	{r7, pc}
 8002f50:	00010008 	.word	0x00010008
 8002f54:	00010002 	.word	0x00010002

08002f58 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002f58:	b580      	push	{r7, lr}
 8002f5a:	b088      	sub	sp, #32
 8002f5c:	af02      	add	r7, sp, #8
 8002f5e:	60f8      	str	r0, [r7, #12]
 8002f60:	607a      	str	r2, [r7, #4]
 8002f62:	603b      	str	r3, [r7, #0]
 8002f64:	460b      	mov	r3, r1
 8002f66:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f6c:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	681a      	ldr	r2, [r3, #0]
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002f7c:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002f7e:	697b      	ldr	r3, [r7, #20]
 8002f80:	2b08      	cmp	r3, #8
 8002f82:	d006      	beq.n	8002f92 <I2C_MasterRequestRead+0x3a>
 8002f84:	697b      	ldr	r3, [r7, #20]
 8002f86:	2b01      	cmp	r3, #1
 8002f88:	d003      	beq.n	8002f92 <I2C_MasterRequestRead+0x3a>
 8002f8a:	697b      	ldr	r3, [r7, #20]
 8002f8c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002f90:	d108      	bne.n	8002fa4 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	681a      	ldr	r2, [r3, #0]
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002fa0:	601a      	str	r2, [r3, #0]
 8002fa2:	e00b      	b.n	8002fbc <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fa8:	2b11      	cmp	r3, #17
 8002faa:	d107      	bne.n	8002fbc <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	681a      	ldr	r2, [r3, #0]
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002fba:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002fbc:	683b      	ldr	r3, [r7, #0]
 8002fbe:	9300      	str	r3, [sp, #0]
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	2200      	movs	r2, #0
 8002fc4:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002fc8:	68f8      	ldr	r0, [r7, #12]
 8002fca:	f000 f893 	bl	80030f4 <I2C_WaitOnFlagUntilTimeout>
 8002fce:	4603      	mov	r3, r0
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d00d      	beq.n	8002ff0 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002fde:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002fe2:	d103      	bne.n	8002fec <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002fea:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002fec:	2303      	movs	r3, #3
 8002fee:	e079      	b.n	80030e4 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	691b      	ldr	r3, [r3, #16]
 8002ff4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002ff8:	d108      	bne.n	800300c <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002ffa:	897b      	ldrh	r3, [r7, #10]
 8002ffc:	b2db      	uxtb	r3, r3
 8002ffe:	f043 0301 	orr.w	r3, r3, #1
 8003002:	b2da      	uxtb	r2, r3
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	611a      	str	r2, [r3, #16]
 800300a:	e05f      	b.n	80030cc <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800300c:	897b      	ldrh	r3, [r7, #10]
 800300e:	11db      	asrs	r3, r3, #7
 8003010:	b2db      	uxtb	r3, r3
 8003012:	f003 0306 	and.w	r3, r3, #6
 8003016:	b2db      	uxtb	r3, r3
 8003018:	f063 030f 	orn	r3, r3, #15
 800301c:	b2da      	uxtb	r2, r3
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003024:	683b      	ldr	r3, [r7, #0]
 8003026:	687a      	ldr	r2, [r7, #4]
 8003028:	4930      	ldr	r1, [pc, #192]	@ (80030ec <I2C_MasterRequestRead+0x194>)
 800302a:	68f8      	ldr	r0, [r7, #12]
 800302c:	f000 f8dc 	bl	80031e8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003030:	4603      	mov	r3, r0
 8003032:	2b00      	cmp	r3, #0
 8003034:	d001      	beq.n	800303a <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8003036:	2301      	movs	r3, #1
 8003038:	e054      	b.n	80030e4 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800303a:	897b      	ldrh	r3, [r7, #10]
 800303c:	b2da      	uxtb	r2, r3
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003044:	683b      	ldr	r3, [r7, #0]
 8003046:	687a      	ldr	r2, [r7, #4]
 8003048:	4929      	ldr	r1, [pc, #164]	@ (80030f0 <I2C_MasterRequestRead+0x198>)
 800304a:	68f8      	ldr	r0, [r7, #12]
 800304c:	f000 f8cc 	bl	80031e8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003050:	4603      	mov	r3, r0
 8003052:	2b00      	cmp	r3, #0
 8003054:	d001      	beq.n	800305a <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8003056:	2301      	movs	r3, #1
 8003058:	e044      	b.n	80030e4 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800305a:	2300      	movs	r3, #0
 800305c:	613b      	str	r3, [r7, #16]
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	695b      	ldr	r3, [r3, #20]
 8003064:	613b      	str	r3, [r7, #16]
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	699b      	ldr	r3, [r3, #24]
 800306c:	613b      	str	r3, [r7, #16]
 800306e:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	681a      	ldr	r2, [r3, #0]
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800307e:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003080:	683b      	ldr	r3, [r7, #0]
 8003082:	9300      	str	r3, [sp, #0]
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	2200      	movs	r2, #0
 8003088:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800308c:	68f8      	ldr	r0, [r7, #12]
 800308e:	f000 f831 	bl	80030f4 <I2C_WaitOnFlagUntilTimeout>
 8003092:	4603      	mov	r3, r0
 8003094:	2b00      	cmp	r3, #0
 8003096:	d00d      	beq.n	80030b4 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80030a2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80030a6:	d103      	bne.n	80030b0 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80030ae:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 80030b0:	2303      	movs	r3, #3
 80030b2:	e017      	b.n	80030e4 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80030b4:	897b      	ldrh	r3, [r7, #10]
 80030b6:	11db      	asrs	r3, r3, #7
 80030b8:	b2db      	uxtb	r3, r3
 80030ba:	f003 0306 	and.w	r3, r3, #6
 80030be:	b2db      	uxtb	r3, r3
 80030c0:	f063 030e 	orn	r3, r3, #14
 80030c4:	b2da      	uxtb	r2, r3
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80030cc:	683b      	ldr	r3, [r7, #0]
 80030ce:	687a      	ldr	r2, [r7, #4]
 80030d0:	4907      	ldr	r1, [pc, #28]	@ (80030f0 <I2C_MasterRequestRead+0x198>)
 80030d2:	68f8      	ldr	r0, [r7, #12]
 80030d4:	f000 f888 	bl	80031e8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80030d8:	4603      	mov	r3, r0
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d001      	beq.n	80030e2 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 80030de:	2301      	movs	r3, #1
 80030e0:	e000      	b.n	80030e4 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 80030e2:	2300      	movs	r3, #0
}
 80030e4:	4618      	mov	r0, r3
 80030e6:	3718      	adds	r7, #24
 80030e8:	46bd      	mov	sp, r7
 80030ea:	bd80      	pop	{r7, pc}
 80030ec:	00010008 	.word	0x00010008
 80030f0:	00010002 	.word	0x00010002

080030f4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80030f4:	b580      	push	{r7, lr}
 80030f6:	b084      	sub	sp, #16
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	60f8      	str	r0, [r7, #12]
 80030fc:	60b9      	str	r1, [r7, #8]
 80030fe:	603b      	str	r3, [r7, #0]
 8003100:	4613      	mov	r3, r2
 8003102:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003104:	e048      	b.n	8003198 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003106:	683b      	ldr	r3, [r7, #0]
 8003108:	f1b3 3fff 	cmp.w	r3, #4294967295
 800310c:	d044      	beq.n	8003198 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800310e:	f7fe feaf 	bl	8001e70 <HAL_GetTick>
 8003112:	4602      	mov	r2, r0
 8003114:	69bb      	ldr	r3, [r7, #24]
 8003116:	1ad3      	subs	r3, r2, r3
 8003118:	683a      	ldr	r2, [r7, #0]
 800311a:	429a      	cmp	r2, r3
 800311c:	d302      	bcc.n	8003124 <I2C_WaitOnFlagUntilTimeout+0x30>
 800311e:	683b      	ldr	r3, [r7, #0]
 8003120:	2b00      	cmp	r3, #0
 8003122:	d139      	bne.n	8003198 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003124:	68bb      	ldr	r3, [r7, #8]
 8003126:	0c1b      	lsrs	r3, r3, #16
 8003128:	b2db      	uxtb	r3, r3
 800312a:	2b01      	cmp	r3, #1
 800312c:	d10d      	bne.n	800314a <I2C_WaitOnFlagUntilTimeout+0x56>
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	695b      	ldr	r3, [r3, #20]
 8003134:	43da      	mvns	r2, r3
 8003136:	68bb      	ldr	r3, [r7, #8]
 8003138:	4013      	ands	r3, r2
 800313a:	b29b      	uxth	r3, r3
 800313c:	2b00      	cmp	r3, #0
 800313e:	bf0c      	ite	eq
 8003140:	2301      	moveq	r3, #1
 8003142:	2300      	movne	r3, #0
 8003144:	b2db      	uxtb	r3, r3
 8003146:	461a      	mov	r2, r3
 8003148:	e00c      	b.n	8003164 <I2C_WaitOnFlagUntilTimeout+0x70>
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	699b      	ldr	r3, [r3, #24]
 8003150:	43da      	mvns	r2, r3
 8003152:	68bb      	ldr	r3, [r7, #8]
 8003154:	4013      	ands	r3, r2
 8003156:	b29b      	uxth	r3, r3
 8003158:	2b00      	cmp	r3, #0
 800315a:	bf0c      	ite	eq
 800315c:	2301      	moveq	r3, #1
 800315e:	2300      	movne	r3, #0
 8003160:	b2db      	uxtb	r3, r3
 8003162:	461a      	mov	r2, r3
 8003164:	79fb      	ldrb	r3, [r7, #7]
 8003166:	429a      	cmp	r2, r3
 8003168:	d116      	bne.n	8003198 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	2200      	movs	r2, #0
 800316e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	2220      	movs	r2, #32
 8003174:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	2200      	movs	r2, #0
 800317c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003184:	f043 0220 	orr.w	r2, r3, #32
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	2200      	movs	r2, #0
 8003190:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003194:	2301      	movs	r3, #1
 8003196:	e023      	b.n	80031e0 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003198:	68bb      	ldr	r3, [r7, #8]
 800319a:	0c1b      	lsrs	r3, r3, #16
 800319c:	b2db      	uxtb	r3, r3
 800319e:	2b01      	cmp	r3, #1
 80031a0:	d10d      	bne.n	80031be <I2C_WaitOnFlagUntilTimeout+0xca>
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	695b      	ldr	r3, [r3, #20]
 80031a8:	43da      	mvns	r2, r3
 80031aa:	68bb      	ldr	r3, [r7, #8]
 80031ac:	4013      	ands	r3, r2
 80031ae:	b29b      	uxth	r3, r3
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	bf0c      	ite	eq
 80031b4:	2301      	moveq	r3, #1
 80031b6:	2300      	movne	r3, #0
 80031b8:	b2db      	uxtb	r3, r3
 80031ba:	461a      	mov	r2, r3
 80031bc:	e00c      	b.n	80031d8 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	699b      	ldr	r3, [r3, #24]
 80031c4:	43da      	mvns	r2, r3
 80031c6:	68bb      	ldr	r3, [r7, #8]
 80031c8:	4013      	ands	r3, r2
 80031ca:	b29b      	uxth	r3, r3
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	bf0c      	ite	eq
 80031d0:	2301      	moveq	r3, #1
 80031d2:	2300      	movne	r3, #0
 80031d4:	b2db      	uxtb	r3, r3
 80031d6:	461a      	mov	r2, r3
 80031d8:	79fb      	ldrb	r3, [r7, #7]
 80031da:	429a      	cmp	r2, r3
 80031dc:	d093      	beq.n	8003106 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80031de:	2300      	movs	r3, #0
}
 80031e0:	4618      	mov	r0, r3
 80031e2:	3710      	adds	r7, #16
 80031e4:	46bd      	mov	sp, r7
 80031e6:	bd80      	pop	{r7, pc}

080031e8 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80031e8:	b580      	push	{r7, lr}
 80031ea:	b084      	sub	sp, #16
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	60f8      	str	r0, [r7, #12]
 80031f0:	60b9      	str	r1, [r7, #8]
 80031f2:	607a      	str	r2, [r7, #4]
 80031f4:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80031f6:	e071      	b.n	80032dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	695b      	ldr	r3, [r3, #20]
 80031fe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003202:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003206:	d123      	bne.n	8003250 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	681a      	ldr	r2, [r3, #0]
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003216:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003220:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	2200      	movs	r2, #0
 8003226:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	2220      	movs	r2, #32
 800322c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	2200      	movs	r2, #0
 8003234:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800323c:	f043 0204 	orr.w	r2, r3, #4
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	2200      	movs	r2, #0
 8003248:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800324c:	2301      	movs	r3, #1
 800324e:	e067      	b.n	8003320 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003256:	d041      	beq.n	80032dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003258:	f7fe fe0a 	bl	8001e70 <HAL_GetTick>
 800325c:	4602      	mov	r2, r0
 800325e:	683b      	ldr	r3, [r7, #0]
 8003260:	1ad3      	subs	r3, r2, r3
 8003262:	687a      	ldr	r2, [r7, #4]
 8003264:	429a      	cmp	r2, r3
 8003266:	d302      	bcc.n	800326e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	2b00      	cmp	r3, #0
 800326c:	d136      	bne.n	80032dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800326e:	68bb      	ldr	r3, [r7, #8]
 8003270:	0c1b      	lsrs	r3, r3, #16
 8003272:	b2db      	uxtb	r3, r3
 8003274:	2b01      	cmp	r3, #1
 8003276:	d10c      	bne.n	8003292 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	695b      	ldr	r3, [r3, #20]
 800327e:	43da      	mvns	r2, r3
 8003280:	68bb      	ldr	r3, [r7, #8]
 8003282:	4013      	ands	r3, r2
 8003284:	b29b      	uxth	r3, r3
 8003286:	2b00      	cmp	r3, #0
 8003288:	bf14      	ite	ne
 800328a:	2301      	movne	r3, #1
 800328c:	2300      	moveq	r3, #0
 800328e:	b2db      	uxtb	r3, r3
 8003290:	e00b      	b.n	80032aa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	699b      	ldr	r3, [r3, #24]
 8003298:	43da      	mvns	r2, r3
 800329a:	68bb      	ldr	r3, [r7, #8]
 800329c:	4013      	ands	r3, r2
 800329e:	b29b      	uxth	r3, r3
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	bf14      	ite	ne
 80032a4:	2301      	movne	r3, #1
 80032a6:	2300      	moveq	r3, #0
 80032a8:	b2db      	uxtb	r3, r3
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d016      	beq.n	80032dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	2200      	movs	r2, #0
 80032b2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	2220      	movs	r2, #32
 80032b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	2200      	movs	r2, #0
 80032c0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032c8:	f043 0220 	orr.w	r2, r3, #32
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	2200      	movs	r2, #0
 80032d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80032d8:	2301      	movs	r3, #1
 80032da:	e021      	b.n	8003320 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80032dc:	68bb      	ldr	r3, [r7, #8]
 80032de:	0c1b      	lsrs	r3, r3, #16
 80032e0:	b2db      	uxtb	r3, r3
 80032e2:	2b01      	cmp	r3, #1
 80032e4:	d10c      	bne.n	8003300 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	695b      	ldr	r3, [r3, #20]
 80032ec:	43da      	mvns	r2, r3
 80032ee:	68bb      	ldr	r3, [r7, #8]
 80032f0:	4013      	ands	r3, r2
 80032f2:	b29b      	uxth	r3, r3
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	bf14      	ite	ne
 80032f8:	2301      	movne	r3, #1
 80032fa:	2300      	moveq	r3, #0
 80032fc:	b2db      	uxtb	r3, r3
 80032fe:	e00b      	b.n	8003318 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	699b      	ldr	r3, [r3, #24]
 8003306:	43da      	mvns	r2, r3
 8003308:	68bb      	ldr	r3, [r7, #8]
 800330a:	4013      	ands	r3, r2
 800330c:	b29b      	uxth	r3, r3
 800330e:	2b00      	cmp	r3, #0
 8003310:	bf14      	ite	ne
 8003312:	2301      	movne	r3, #1
 8003314:	2300      	moveq	r3, #0
 8003316:	b2db      	uxtb	r3, r3
 8003318:	2b00      	cmp	r3, #0
 800331a:	f47f af6d 	bne.w	80031f8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800331e:	2300      	movs	r3, #0
}
 8003320:	4618      	mov	r0, r3
 8003322:	3710      	adds	r7, #16
 8003324:	46bd      	mov	sp, r7
 8003326:	bd80      	pop	{r7, pc}

08003328 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003328:	b580      	push	{r7, lr}
 800332a:	b084      	sub	sp, #16
 800332c:	af00      	add	r7, sp, #0
 800332e:	60f8      	str	r0, [r7, #12]
 8003330:	60b9      	str	r1, [r7, #8]
 8003332:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003334:	e034      	b.n	80033a0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003336:	68f8      	ldr	r0, [r7, #12]
 8003338:	f000 f8e3 	bl	8003502 <I2C_IsAcknowledgeFailed>
 800333c:	4603      	mov	r3, r0
 800333e:	2b00      	cmp	r3, #0
 8003340:	d001      	beq.n	8003346 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003342:	2301      	movs	r3, #1
 8003344:	e034      	b.n	80033b0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003346:	68bb      	ldr	r3, [r7, #8]
 8003348:	f1b3 3fff 	cmp.w	r3, #4294967295
 800334c:	d028      	beq.n	80033a0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800334e:	f7fe fd8f 	bl	8001e70 <HAL_GetTick>
 8003352:	4602      	mov	r2, r0
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	1ad3      	subs	r3, r2, r3
 8003358:	68ba      	ldr	r2, [r7, #8]
 800335a:	429a      	cmp	r2, r3
 800335c:	d302      	bcc.n	8003364 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800335e:	68bb      	ldr	r3, [r7, #8]
 8003360:	2b00      	cmp	r3, #0
 8003362:	d11d      	bne.n	80033a0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	695b      	ldr	r3, [r3, #20]
 800336a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800336e:	2b80      	cmp	r3, #128	@ 0x80
 8003370:	d016      	beq.n	80033a0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	2200      	movs	r2, #0
 8003376:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	2220      	movs	r2, #32
 800337c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	2200      	movs	r2, #0
 8003384:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800338c:	f043 0220 	orr.w	r2, r3, #32
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	2200      	movs	r2, #0
 8003398:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800339c:	2301      	movs	r3, #1
 800339e:	e007      	b.n	80033b0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	695b      	ldr	r3, [r3, #20]
 80033a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80033aa:	2b80      	cmp	r3, #128	@ 0x80
 80033ac:	d1c3      	bne.n	8003336 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80033ae:	2300      	movs	r3, #0
}
 80033b0:	4618      	mov	r0, r3
 80033b2:	3710      	adds	r7, #16
 80033b4:	46bd      	mov	sp, r7
 80033b6:	bd80      	pop	{r7, pc}

080033b8 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80033b8:	b580      	push	{r7, lr}
 80033ba:	b084      	sub	sp, #16
 80033bc:	af00      	add	r7, sp, #0
 80033be:	60f8      	str	r0, [r7, #12]
 80033c0:	60b9      	str	r1, [r7, #8]
 80033c2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80033c4:	e034      	b.n	8003430 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80033c6:	68f8      	ldr	r0, [r7, #12]
 80033c8:	f000 f89b 	bl	8003502 <I2C_IsAcknowledgeFailed>
 80033cc:	4603      	mov	r3, r0
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d001      	beq.n	80033d6 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80033d2:	2301      	movs	r3, #1
 80033d4:	e034      	b.n	8003440 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80033d6:	68bb      	ldr	r3, [r7, #8]
 80033d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033dc:	d028      	beq.n	8003430 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80033de:	f7fe fd47 	bl	8001e70 <HAL_GetTick>
 80033e2:	4602      	mov	r2, r0
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	1ad3      	subs	r3, r2, r3
 80033e8:	68ba      	ldr	r2, [r7, #8]
 80033ea:	429a      	cmp	r2, r3
 80033ec:	d302      	bcc.n	80033f4 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80033ee:	68bb      	ldr	r3, [r7, #8]
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d11d      	bne.n	8003430 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	695b      	ldr	r3, [r3, #20]
 80033fa:	f003 0304 	and.w	r3, r3, #4
 80033fe:	2b04      	cmp	r3, #4
 8003400:	d016      	beq.n	8003430 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	2200      	movs	r2, #0
 8003406:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	2220      	movs	r2, #32
 800340c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	2200      	movs	r2, #0
 8003414:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800341c:	f043 0220 	orr.w	r2, r3, #32
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	2200      	movs	r2, #0
 8003428:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800342c:	2301      	movs	r3, #1
 800342e:	e007      	b.n	8003440 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	695b      	ldr	r3, [r3, #20]
 8003436:	f003 0304 	and.w	r3, r3, #4
 800343a:	2b04      	cmp	r3, #4
 800343c:	d1c3      	bne.n	80033c6 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800343e:	2300      	movs	r3, #0
}
 8003440:	4618      	mov	r0, r3
 8003442:	3710      	adds	r7, #16
 8003444:	46bd      	mov	sp, r7
 8003446:	bd80      	pop	{r7, pc}

08003448 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003448:	b580      	push	{r7, lr}
 800344a:	b084      	sub	sp, #16
 800344c:	af00      	add	r7, sp, #0
 800344e:	60f8      	str	r0, [r7, #12]
 8003450:	60b9      	str	r1, [r7, #8]
 8003452:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003454:	e049      	b.n	80034ea <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	695b      	ldr	r3, [r3, #20]
 800345c:	f003 0310 	and.w	r3, r3, #16
 8003460:	2b10      	cmp	r3, #16
 8003462:	d119      	bne.n	8003498 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	f06f 0210 	mvn.w	r2, #16
 800346c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	2200      	movs	r2, #0
 8003472:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	2220      	movs	r2, #32
 8003478:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	2200      	movs	r2, #0
 8003480:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	2200      	movs	r2, #0
 8003490:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003494:	2301      	movs	r3, #1
 8003496:	e030      	b.n	80034fa <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003498:	f7fe fcea 	bl	8001e70 <HAL_GetTick>
 800349c:	4602      	mov	r2, r0
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	1ad3      	subs	r3, r2, r3
 80034a2:	68ba      	ldr	r2, [r7, #8]
 80034a4:	429a      	cmp	r2, r3
 80034a6:	d302      	bcc.n	80034ae <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80034a8:	68bb      	ldr	r3, [r7, #8]
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d11d      	bne.n	80034ea <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	695b      	ldr	r3, [r3, #20]
 80034b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80034b8:	2b40      	cmp	r3, #64	@ 0x40
 80034ba:	d016      	beq.n	80034ea <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	2200      	movs	r2, #0
 80034c0:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	2220      	movs	r2, #32
 80034c6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	2200      	movs	r2, #0
 80034ce:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034d6:	f043 0220 	orr.w	r2, r3, #32
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	2200      	movs	r2, #0
 80034e2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80034e6:	2301      	movs	r3, #1
 80034e8:	e007      	b.n	80034fa <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	695b      	ldr	r3, [r3, #20]
 80034f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80034f4:	2b40      	cmp	r3, #64	@ 0x40
 80034f6:	d1ae      	bne.n	8003456 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80034f8:	2300      	movs	r3, #0
}
 80034fa:	4618      	mov	r0, r3
 80034fc:	3710      	adds	r7, #16
 80034fe:	46bd      	mov	sp, r7
 8003500:	bd80      	pop	{r7, pc}

08003502 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003502:	b480      	push	{r7}
 8003504:	b083      	sub	sp, #12
 8003506:	af00      	add	r7, sp, #0
 8003508:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	695b      	ldr	r3, [r3, #20]
 8003510:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003514:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003518:	d11b      	bne.n	8003552 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003522:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	2200      	movs	r2, #0
 8003528:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	2220      	movs	r2, #32
 800352e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	2200      	movs	r2, #0
 8003536:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800353e:	f043 0204 	orr.w	r2, r3, #4
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	2200      	movs	r2, #0
 800354a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800354e:	2301      	movs	r3, #1
 8003550:	e000      	b.n	8003554 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003552:	2300      	movs	r3, #0
}
 8003554:	4618      	mov	r0, r3
 8003556:	370c      	adds	r7, #12
 8003558:	46bd      	mov	sp, r7
 800355a:	bc80      	pop	{r7}
 800355c:	4770      	bx	lr
	...

08003560 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003560:	b580      	push	{r7, lr}
 8003562:	b086      	sub	sp, #24
 8003564:	af00      	add	r7, sp, #0
 8003566:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	2b00      	cmp	r3, #0
 800356c:	d101      	bne.n	8003572 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800356e:	2301      	movs	r3, #1
 8003570:	e272      	b.n	8003a58 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	f003 0301 	and.w	r3, r3, #1
 800357a:	2b00      	cmp	r3, #0
 800357c:	f000 8087 	beq.w	800368e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003580:	4b92      	ldr	r3, [pc, #584]	@ (80037cc <HAL_RCC_OscConfig+0x26c>)
 8003582:	685b      	ldr	r3, [r3, #4]
 8003584:	f003 030c 	and.w	r3, r3, #12
 8003588:	2b04      	cmp	r3, #4
 800358a:	d00c      	beq.n	80035a6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800358c:	4b8f      	ldr	r3, [pc, #572]	@ (80037cc <HAL_RCC_OscConfig+0x26c>)
 800358e:	685b      	ldr	r3, [r3, #4]
 8003590:	f003 030c 	and.w	r3, r3, #12
 8003594:	2b08      	cmp	r3, #8
 8003596:	d112      	bne.n	80035be <HAL_RCC_OscConfig+0x5e>
 8003598:	4b8c      	ldr	r3, [pc, #560]	@ (80037cc <HAL_RCC_OscConfig+0x26c>)
 800359a:	685b      	ldr	r3, [r3, #4]
 800359c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80035a0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80035a4:	d10b      	bne.n	80035be <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80035a6:	4b89      	ldr	r3, [pc, #548]	@ (80037cc <HAL_RCC_OscConfig+0x26c>)
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d06c      	beq.n	800368c <HAL_RCC_OscConfig+0x12c>
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	685b      	ldr	r3, [r3, #4]
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d168      	bne.n	800368c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80035ba:	2301      	movs	r3, #1
 80035bc:	e24c      	b.n	8003a58 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	685b      	ldr	r3, [r3, #4]
 80035c2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80035c6:	d106      	bne.n	80035d6 <HAL_RCC_OscConfig+0x76>
 80035c8:	4b80      	ldr	r3, [pc, #512]	@ (80037cc <HAL_RCC_OscConfig+0x26c>)
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	4a7f      	ldr	r2, [pc, #508]	@ (80037cc <HAL_RCC_OscConfig+0x26c>)
 80035ce:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80035d2:	6013      	str	r3, [r2, #0]
 80035d4:	e02e      	b.n	8003634 <HAL_RCC_OscConfig+0xd4>
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	685b      	ldr	r3, [r3, #4]
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d10c      	bne.n	80035f8 <HAL_RCC_OscConfig+0x98>
 80035de:	4b7b      	ldr	r3, [pc, #492]	@ (80037cc <HAL_RCC_OscConfig+0x26c>)
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	4a7a      	ldr	r2, [pc, #488]	@ (80037cc <HAL_RCC_OscConfig+0x26c>)
 80035e4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80035e8:	6013      	str	r3, [r2, #0]
 80035ea:	4b78      	ldr	r3, [pc, #480]	@ (80037cc <HAL_RCC_OscConfig+0x26c>)
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	4a77      	ldr	r2, [pc, #476]	@ (80037cc <HAL_RCC_OscConfig+0x26c>)
 80035f0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80035f4:	6013      	str	r3, [r2, #0]
 80035f6:	e01d      	b.n	8003634 <HAL_RCC_OscConfig+0xd4>
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	685b      	ldr	r3, [r3, #4]
 80035fc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003600:	d10c      	bne.n	800361c <HAL_RCC_OscConfig+0xbc>
 8003602:	4b72      	ldr	r3, [pc, #456]	@ (80037cc <HAL_RCC_OscConfig+0x26c>)
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	4a71      	ldr	r2, [pc, #452]	@ (80037cc <HAL_RCC_OscConfig+0x26c>)
 8003608:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800360c:	6013      	str	r3, [r2, #0]
 800360e:	4b6f      	ldr	r3, [pc, #444]	@ (80037cc <HAL_RCC_OscConfig+0x26c>)
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	4a6e      	ldr	r2, [pc, #440]	@ (80037cc <HAL_RCC_OscConfig+0x26c>)
 8003614:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003618:	6013      	str	r3, [r2, #0]
 800361a:	e00b      	b.n	8003634 <HAL_RCC_OscConfig+0xd4>
 800361c:	4b6b      	ldr	r3, [pc, #428]	@ (80037cc <HAL_RCC_OscConfig+0x26c>)
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	4a6a      	ldr	r2, [pc, #424]	@ (80037cc <HAL_RCC_OscConfig+0x26c>)
 8003622:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003626:	6013      	str	r3, [r2, #0]
 8003628:	4b68      	ldr	r3, [pc, #416]	@ (80037cc <HAL_RCC_OscConfig+0x26c>)
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	4a67      	ldr	r2, [pc, #412]	@ (80037cc <HAL_RCC_OscConfig+0x26c>)
 800362e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003632:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	685b      	ldr	r3, [r3, #4]
 8003638:	2b00      	cmp	r3, #0
 800363a:	d013      	beq.n	8003664 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800363c:	f7fe fc18 	bl	8001e70 <HAL_GetTick>
 8003640:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003642:	e008      	b.n	8003656 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003644:	f7fe fc14 	bl	8001e70 <HAL_GetTick>
 8003648:	4602      	mov	r2, r0
 800364a:	693b      	ldr	r3, [r7, #16]
 800364c:	1ad3      	subs	r3, r2, r3
 800364e:	2b64      	cmp	r3, #100	@ 0x64
 8003650:	d901      	bls.n	8003656 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003652:	2303      	movs	r3, #3
 8003654:	e200      	b.n	8003a58 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003656:	4b5d      	ldr	r3, [pc, #372]	@ (80037cc <HAL_RCC_OscConfig+0x26c>)
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800365e:	2b00      	cmp	r3, #0
 8003660:	d0f0      	beq.n	8003644 <HAL_RCC_OscConfig+0xe4>
 8003662:	e014      	b.n	800368e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003664:	f7fe fc04 	bl	8001e70 <HAL_GetTick>
 8003668:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800366a:	e008      	b.n	800367e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800366c:	f7fe fc00 	bl	8001e70 <HAL_GetTick>
 8003670:	4602      	mov	r2, r0
 8003672:	693b      	ldr	r3, [r7, #16]
 8003674:	1ad3      	subs	r3, r2, r3
 8003676:	2b64      	cmp	r3, #100	@ 0x64
 8003678:	d901      	bls.n	800367e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800367a:	2303      	movs	r3, #3
 800367c:	e1ec      	b.n	8003a58 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800367e:	4b53      	ldr	r3, [pc, #332]	@ (80037cc <HAL_RCC_OscConfig+0x26c>)
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003686:	2b00      	cmp	r3, #0
 8003688:	d1f0      	bne.n	800366c <HAL_RCC_OscConfig+0x10c>
 800368a:	e000      	b.n	800368e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800368c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f003 0302 	and.w	r3, r3, #2
 8003696:	2b00      	cmp	r3, #0
 8003698:	d063      	beq.n	8003762 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800369a:	4b4c      	ldr	r3, [pc, #304]	@ (80037cc <HAL_RCC_OscConfig+0x26c>)
 800369c:	685b      	ldr	r3, [r3, #4]
 800369e:	f003 030c 	and.w	r3, r3, #12
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d00b      	beq.n	80036be <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80036a6:	4b49      	ldr	r3, [pc, #292]	@ (80037cc <HAL_RCC_OscConfig+0x26c>)
 80036a8:	685b      	ldr	r3, [r3, #4]
 80036aa:	f003 030c 	and.w	r3, r3, #12
 80036ae:	2b08      	cmp	r3, #8
 80036b0:	d11c      	bne.n	80036ec <HAL_RCC_OscConfig+0x18c>
 80036b2:	4b46      	ldr	r3, [pc, #280]	@ (80037cc <HAL_RCC_OscConfig+0x26c>)
 80036b4:	685b      	ldr	r3, [r3, #4]
 80036b6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d116      	bne.n	80036ec <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80036be:	4b43      	ldr	r3, [pc, #268]	@ (80037cc <HAL_RCC_OscConfig+0x26c>)
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f003 0302 	and.w	r3, r3, #2
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d005      	beq.n	80036d6 <HAL_RCC_OscConfig+0x176>
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	691b      	ldr	r3, [r3, #16]
 80036ce:	2b01      	cmp	r3, #1
 80036d0:	d001      	beq.n	80036d6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80036d2:	2301      	movs	r3, #1
 80036d4:	e1c0      	b.n	8003a58 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80036d6:	4b3d      	ldr	r3, [pc, #244]	@ (80037cc <HAL_RCC_OscConfig+0x26c>)
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	695b      	ldr	r3, [r3, #20]
 80036e2:	00db      	lsls	r3, r3, #3
 80036e4:	4939      	ldr	r1, [pc, #228]	@ (80037cc <HAL_RCC_OscConfig+0x26c>)
 80036e6:	4313      	orrs	r3, r2
 80036e8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80036ea:	e03a      	b.n	8003762 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	691b      	ldr	r3, [r3, #16]
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d020      	beq.n	8003736 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80036f4:	4b36      	ldr	r3, [pc, #216]	@ (80037d0 <HAL_RCC_OscConfig+0x270>)
 80036f6:	2201      	movs	r2, #1
 80036f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036fa:	f7fe fbb9 	bl	8001e70 <HAL_GetTick>
 80036fe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003700:	e008      	b.n	8003714 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003702:	f7fe fbb5 	bl	8001e70 <HAL_GetTick>
 8003706:	4602      	mov	r2, r0
 8003708:	693b      	ldr	r3, [r7, #16]
 800370a:	1ad3      	subs	r3, r2, r3
 800370c:	2b02      	cmp	r3, #2
 800370e:	d901      	bls.n	8003714 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003710:	2303      	movs	r3, #3
 8003712:	e1a1      	b.n	8003a58 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003714:	4b2d      	ldr	r3, [pc, #180]	@ (80037cc <HAL_RCC_OscConfig+0x26c>)
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	f003 0302 	and.w	r3, r3, #2
 800371c:	2b00      	cmp	r3, #0
 800371e:	d0f0      	beq.n	8003702 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003720:	4b2a      	ldr	r3, [pc, #168]	@ (80037cc <HAL_RCC_OscConfig+0x26c>)
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	695b      	ldr	r3, [r3, #20]
 800372c:	00db      	lsls	r3, r3, #3
 800372e:	4927      	ldr	r1, [pc, #156]	@ (80037cc <HAL_RCC_OscConfig+0x26c>)
 8003730:	4313      	orrs	r3, r2
 8003732:	600b      	str	r3, [r1, #0]
 8003734:	e015      	b.n	8003762 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003736:	4b26      	ldr	r3, [pc, #152]	@ (80037d0 <HAL_RCC_OscConfig+0x270>)
 8003738:	2200      	movs	r2, #0
 800373a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800373c:	f7fe fb98 	bl	8001e70 <HAL_GetTick>
 8003740:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003742:	e008      	b.n	8003756 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003744:	f7fe fb94 	bl	8001e70 <HAL_GetTick>
 8003748:	4602      	mov	r2, r0
 800374a:	693b      	ldr	r3, [r7, #16]
 800374c:	1ad3      	subs	r3, r2, r3
 800374e:	2b02      	cmp	r3, #2
 8003750:	d901      	bls.n	8003756 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003752:	2303      	movs	r3, #3
 8003754:	e180      	b.n	8003a58 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003756:	4b1d      	ldr	r3, [pc, #116]	@ (80037cc <HAL_RCC_OscConfig+0x26c>)
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f003 0302 	and.w	r3, r3, #2
 800375e:	2b00      	cmp	r3, #0
 8003760:	d1f0      	bne.n	8003744 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f003 0308 	and.w	r3, r3, #8
 800376a:	2b00      	cmp	r3, #0
 800376c:	d03a      	beq.n	80037e4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	699b      	ldr	r3, [r3, #24]
 8003772:	2b00      	cmp	r3, #0
 8003774:	d019      	beq.n	80037aa <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003776:	4b17      	ldr	r3, [pc, #92]	@ (80037d4 <HAL_RCC_OscConfig+0x274>)
 8003778:	2201      	movs	r2, #1
 800377a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800377c:	f7fe fb78 	bl	8001e70 <HAL_GetTick>
 8003780:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003782:	e008      	b.n	8003796 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003784:	f7fe fb74 	bl	8001e70 <HAL_GetTick>
 8003788:	4602      	mov	r2, r0
 800378a:	693b      	ldr	r3, [r7, #16]
 800378c:	1ad3      	subs	r3, r2, r3
 800378e:	2b02      	cmp	r3, #2
 8003790:	d901      	bls.n	8003796 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003792:	2303      	movs	r3, #3
 8003794:	e160      	b.n	8003a58 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003796:	4b0d      	ldr	r3, [pc, #52]	@ (80037cc <HAL_RCC_OscConfig+0x26c>)
 8003798:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800379a:	f003 0302 	and.w	r3, r3, #2
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d0f0      	beq.n	8003784 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80037a2:	2001      	movs	r0, #1
 80037a4:	f000 fafe 	bl	8003da4 <RCC_Delay>
 80037a8:	e01c      	b.n	80037e4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80037aa:	4b0a      	ldr	r3, [pc, #40]	@ (80037d4 <HAL_RCC_OscConfig+0x274>)
 80037ac:	2200      	movs	r2, #0
 80037ae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80037b0:	f7fe fb5e 	bl	8001e70 <HAL_GetTick>
 80037b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80037b6:	e00f      	b.n	80037d8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80037b8:	f7fe fb5a 	bl	8001e70 <HAL_GetTick>
 80037bc:	4602      	mov	r2, r0
 80037be:	693b      	ldr	r3, [r7, #16]
 80037c0:	1ad3      	subs	r3, r2, r3
 80037c2:	2b02      	cmp	r3, #2
 80037c4:	d908      	bls.n	80037d8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80037c6:	2303      	movs	r3, #3
 80037c8:	e146      	b.n	8003a58 <HAL_RCC_OscConfig+0x4f8>
 80037ca:	bf00      	nop
 80037cc:	40021000 	.word	0x40021000
 80037d0:	42420000 	.word	0x42420000
 80037d4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80037d8:	4b92      	ldr	r3, [pc, #584]	@ (8003a24 <HAL_RCC_OscConfig+0x4c4>)
 80037da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037dc:	f003 0302 	and.w	r3, r3, #2
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d1e9      	bne.n	80037b8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	f003 0304 	and.w	r3, r3, #4
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	f000 80a6 	beq.w	800393e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80037f2:	2300      	movs	r3, #0
 80037f4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80037f6:	4b8b      	ldr	r3, [pc, #556]	@ (8003a24 <HAL_RCC_OscConfig+0x4c4>)
 80037f8:	69db      	ldr	r3, [r3, #28]
 80037fa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d10d      	bne.n	800381e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003802:	4b88      	ldr	r3, [pc, #544]	@ (8003a24 <HAL_RCC_OscConfig+0x4c4>)
 8003804:	69db      	ldr	r3, [r3, #28]
 8003806:	4a87      	ldr	r2, [pc, #540]	@ (8003a24 <HAL_RCC_OscConfig+0x4c4>)
 8003808:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800380c:	61d3      	str	r3, [r2, #28]
 800380e:	4b85      	ldr	r3, [pc, #532]	@ (8003a24 <HAL_RCC_OscConfig+0x4c4>)
 8003810:	69db      	ldr	r3, [r3, #28]
 8003812:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003816:	60bb      	str	r3, [r7, #8]
 8003818:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800381a:	2301      	movs	r3, #1
 800381c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800381e:	4b82      	ldr	r3, [pc, #520]	@ (8003a28 <HAL_RCC_OscConfig+0x4c8>)
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003826:	2b00      	cmp	r3, #0
 8003828:	d118      	bne.n	800385c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800382a:	4b7f      	ldr	r3, [pc, #508]	@ (8003a28 <HAL_RCC_OscConfig+0x4c8>)
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	4a7e      	ldr	r2, [pc, #504]	@ (8003a28 <HAL_RCC_OscConfig+0x4c8>)
 8003830:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003834:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003836:	f7fe fb1b 	bl	8001e70 <HAL_GetTick>
 800383a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800383c:	e008      	b.n	8003850 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800383e:	f7fe fb17 	bl	8001e70 <HAL_GetTick>
 8003842:	4602      	mov	r2, r0
 8003844:	693b      	ldr	r3, [r7, #16]
 8003846:	1ad3      	subs	r3, r2, r3
 8003848:	2b64      	cmp	r3, #100	@ 0x64
 800384a:	d901      	bls.n	8003850 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800384c:	2303      	movs	r3, #3
 800384e:	e103      	b.n	8003a58 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003850:	4b75      	ldr	r3, [pc, #468]	@ (8003a28 <HAL_RCC_OscConfig+0x4c8>)
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003858:	2b00      	cmp	r3, #0
 800385a:	d0f0      	beq.n	800383e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	68db      	ldr	r3, [r3, #12]
 8003860:	2b01      	cmp	r3, #1
 8003862:	d106      	bne.n	8003872 <HAL_RCC_OscConfig+0x312>
 8003864:	4b6f      	ldr	r3, [pc, #444]	@ (8003a24 <HAL_RCC_OscConfig+0x4c4>)
 8003866:	6a1b      	ldr	r3, [r3, #32]
 8003868:	4a6e      	ldr	r2, [pc, #440]	@ (8003a24 <HAL_RCC_OscConfig+0x4c4>)
 800386a:	f043 0301 	orr.w	r3, r3, #1
 800386e:	6213      	str	r3, [r2, #32]
 8003870:	e02d      	b.n	80038ce <HAL_RCC_OscConfig+0x36e>
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	68db      	ldr	r3, [r3, #12]
 8003876:	2b00      	cmp	r3, #0
 8003878:	d10c      	bne.n	8003894 <HAL_RCC_OscConfig+0x334>
 800387a:	4b6a      	ldr	r3, [pc, #424]	@ (8003a24 <HAL_RCC_OscConfig+0x4c4>)
 800387c:	6a1b      	ldr	r3, [r3, #32]
 800387e:	4a69      	ldr	r2, [pc, #420]	@ (8003a24 <HAL_RCC_OscConfig+0x4c4>)
 8003880:	f023 0301 	bic.w	r3, r3, #1
 8003884:	6213      	str	r3, [r2, #32]
 8003886:	4b67      	ldr	r3, [pc, #412]	@ (8003a24 <HAL_RCC_OscConfig+0x4c4>)
 8003888:	6a1b      	ldr	r3, [r3, #32]
 800388a:	4a66      	ldr	r2, [pc, #408]	@ (8003a24 <HAL_RCC_OscConfig+0x4c4>)
 800388c:	f023 0304 	bic.w	r3, r3, #4
 8003890:	6213      	str	r3, [r2, #32]
 8003892:	e01c      	b.n	80038ce <HAL_RCC_OscConfig+0x36e>
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	68db      	ldr	r3, [r3, #12]
 8003898:	2b05      	cmp	r3, #5
 800389a:	d10c      	bne.n	80038b6 <HAL_RCC_OscConfig+0x356>
 800389c:	4b61      	ldr	r3, [pc, #388]	@ (8003a24 <HAL_RCC_OscConfig+0x4c4>)
 800389e:	6a1b      	ldr	r3, [r3, #32]
 80038a0:	4a60      	ldr	r2, [pc, #384]	@ (8003a24 <HAL_RCC_OscConfig+0x4c4>)
 80038a2:	f043 0304 	orr.w	r3, r3, #4
 80038a6:	6213      	str	r3, [r2, #32]
 80038a8:	4b5e      	ldr	r3, [pc, #376]	@ (8003a24 <HAL_RCC_OscConfig+0x4c4>)
 80038aa:	6a1b      	ldr	r3, [r3, #32]
 80038ac:	4a5d      	ldr	r2, [pc, #372]	@ (8003a24 <HAL_RCC_OscConfig+0x4c4>)
 80038ae:	f043 0301 	orr.w	r3, r3, #1
 80038b2:	6213      	str	r3, [r2, #32]
 80038b4:	e00b      	b.n	80038ce <HAL_RCC_OscConfig+0x36e>
 80038b6:	4b5b      	ldr	r3, [pc, #364]	@ (8003a24 <HAL_RCC_OscConfig+0x4c4>)
 80038b8:	6a1b      	ldr	r3, [r3, #32]
 80038ba:	4a5a      	ldr	r2, [pc, #360]	@ (8003a24 <HAL_RCC_OscConfig+0x4c4>)
 80038bc:	f023 0301 	bic.w	r3, r3, #1
 80038c0:	6213      	str	r3, [r2, #32]
 80038c2:	4b58      	ldr	r3, [pc, #352]	@ (8003a24 <HAL_RCC_OscConfig+0x4c4>)
 80038c4:	6a1b      	ldr	r3, [r3, #32]
 80038c6:	4a57      	ldr	r2, [pc, #348]	@ (8003a24 <HAL_RCC_OscConfig+0x4c4>)
 80038c8:	f023 0304 	bic.w	r3, r3, #4
 80038cc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	68db      	ldr	r3, [r3, #12]
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d015      	beq.n	8003902 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80038d6:	f7fe facb 	bl	8001e70 <HAL_GetTick>
 80038da:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80038dc:	e00a      	b.n	80038f4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80038de:	f7fe fac7 	bl	8001e70 <HAL_GetTick>
 80038e2:	4602      	mov	r2, r0
 80038e4:	693b      	ldr	r3, [r7, #16]
 80038e6:	1ad3      	subs	r3, r2, r3
 80038e8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80038ec:	4293      	cmp	r3, r2
 80038ee:	d901      	bls.n	80038f4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80038f0:	2303      	movs	r3, #3
 80038f2:	e0b1      	b.n	8003a58 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80038f4:	4b4b      	ldr	r3, [pc, #300]	@ (8003a24 <HAL_RCC_OscConfig+0x4c4>)
 80038f6:	6a1b      	ldr	r3, [r3, #32]
 80038f8:	f003 0302 	and.w	r3, r3, #2
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d0ee      	beq.n	80038de <HAL_RCC_OscConfig+0x37e>
 8003900:	e014      	b.n	800392c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003902:	f7fe fab5 	bl	8001e70 <HAL_GetTick>
 8003906:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003908:	e00a      	b.n	8003920 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800390a:	f7fe fab1 	bl	8001e70 <HAL_GetTick>
 800390e:	4602      	mov	r2, r0
 8003910:	693b      	ldr	r3, [r7, #16]
 8003912:	1ad3      	subs	r3, r2, r3
 8003914:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003918:	4293      	cmp	r3, r2
 800391a:	d901      	bls.n	8003920 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800391c:	2303      	movs	r3, #3
 800391e:	e09b      	b.n	8003a58 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003920:	4b40      	ldr	r3, [pc, #256]	@ (8003a24 <HAL_RCC_OscConfig+0x4c4>)
 8003922:	6a1b      	ldr	r3, [r3, #32]
 8003924:	f003 0302 	and.w	r3, r3, #2
 8003928:	2b00      	cmp	r3, #0
 800392a:	d1ee      	bne.n	800390a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800392c:	7dfb      	ldrb	r3, [r7, #23]
 800392e:	2b01      	cmp	r3, #1
 8003930:	d105      	bne.n	800393e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003932:	4b3c      	ldr	r3, [pc, #240]	@ (8003a24 <HAL_RCC_OscConfig+0x4c4>)
 8003934:	69db      	ldr	r3, [r3, #28]
 8003936:	4a3b      	ldr	r2, [pc, #236]	@ (8003a24 <HAL_RCC_OscConfig+0x4c4>)
 8003938:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800393c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	69db      	ldr	r3, [r3, #28]
 8003942:	2b00      	cmp	r3, #0
 8003944:	f000 8087 	beq.w	8003a56 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003948:	4b36      	ldr	r3, [pc, #216]	@ (8003a24 <HAL_RCC_OscConfig+0x4c4>)
 800394a:	685b      	ldr	r3, [r3, #4]
 800394c:	f003 030c 	and.w	r3, r3, #12
 8003950:	2b08      	cmp	r3, #8
 8003952:	d061      	beq.n	8003a18 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	69db      	ldr	r3, [r3, #28]
 8003958:	2b02      	cmp	r3, #2
 800395a:	d146      	bne.n	80039ea <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800395c:	4b33      	ldr	r3, [pc, #204]	@ (8003a2c <HAL_RCC_OscConfig+0x4cc>)
 800395e:	2200      	movs	r2, #0
 8003960:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003962:	f7fe fa85 	bl	8001e70 <HAL_GetTick>
 8003966:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003968:	e008      	b.n	800397c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800396a:	f7fe fa81 	bl	8001e70 <HAL_GetTick>
 800396e:	4602      	mov	r2, r0
 8003970:	693b      	ldr	r3, [r7, #16]
 8003972:	1ad3      	subs	r3, r2, r3
 8003974:	2b02      	cmp	r3, #2
 8003976:	d901      	bls.n	800397c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003978:	2303      	movs	r3, #3
 800397a:	e06d      	b.n	8003a58 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800397c:	4b29      	ldr	r3, [pc, #164]	@ (8003a24 <HAL_RCC_OscConfig+0x4c4>)
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003984:	2b00      	cmp	r3, #0
 8003986:	d1f0      	bne.n	800396a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	6a1b      	ldr	r3, [r3, #32]
 800398c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003990:	d108      	bne.n	80039a4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003992:	4b24      	ldr	r3, [pc, #144]	@ (8003a24 <HAL_RCC_OscConfig+0x4c4>)
 8003994:	685b      	ldr	r3, [r3, #4]
 8003996:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	689b      	ldr	r3, [r3, #8]
 800399e:	4921      	ldr	r1, [pc, #132]	@ (8003a24 <HAL_RCC_OscConfig+0x4c4>)
 80039a0:	4313      	orrs	r3, r2
 80039a2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80039a4:	4b1f      	ldr	r3, [pc, #124]	@ (8003a24 <HAL_RCC_OscConfig+0x4c4>)
 80039a6:	685b      	ldr	r3, [r3, #4]
 80039a8:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	6a19      	ldr	r1, [r3, #32]
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039b4:	430b      	orrs	r3, r1
 80039b6:	491b      	ldr	r1, [pc, #108]	@ (8003a24 <HAL_RCC_OscConfig+0x4c4>)
 80039b8:	4313      	orrs	r3, r2
 80039ba:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80039bc:	4b1b      	ldr	r3, [pc, #108]	@ (8003a2c <HAL_RCC_OscConfig+0x4cc>)
 80039be:	2201      	movs	r2, #1
 80039c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039c2:	f7fe fa55 	bl	8001e70 <HAL_GetTick>
 80039c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80039c8:	e008      	b.n	80039dc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80039ca:	f7fe fa51 	bl	8001e70 <HAL_GetTick>
 80039ce:	4602      	mov	r2, r0
 80039d0:	693b      	ldr	r3, [r7, #16]
 80039d2:	1ad3      	subs	r3, r2, r3
 80039d4:	2b02      	cmp	r3, #2
 80039d6:	d901      	bls.n	80039dc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80039d8:	2303      	movs	r3, #3
 80039da:	e03d      	b.n	8003a58 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80039dc:	4b11      	ldr	r3, [pc, #68]	@ (8003a24 <HAL_RCC_OscConfig+0x4c4>)
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d0f0      	beq.n	80039ca <HAL_RCC_OscConfig+0x46a>
 80039e8:	e035      	b.n	8003a56 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80039ea:	4b10      	ldr	r3, [pc, #64]	@ (8003a2c <HAL_RCC_OscConfig+0x4cc>)
 80039ec:	2200      	movs	r2, #0
 80039ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039f0:	f7fe fa3e 	bl	8001e70 <HAL_GetTick>
 80039f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80039f6:	e008      	b.n	8003a0a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80039f8:	f7fe fa3a 	bl	8001e70 <HAL_GetTick>
 80039fc:	4602      	mov	r2, r0
 80039fe:	693b      	ldr	r3, [r7, #16]
 8003a00:	1ad3      	subs	r3, r2, r3
 8003a02:	2b02      	cmp	r3, #2
 8003a04:	d901      	bls.n	8003a0a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003a06:	2303      	movs	r3, #3
 8003a08:	e026      	b.n	8003a58 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003a0a:	4b06      	ldr	r3, [pc, #24]	@ (8003a24 <HAL_RCC_OscConfig+0x4c4>)
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d1f0      	bne.n	80039f8 <HAL_RCC_OscConfig+0x498>
 8003a16:	e01e      	b.n	8003a56 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	69db      	ldr	r3, [r3, #28]
 8003a1c:	2b01      	cmp	r3, #1
 8003a1e:	d107      	bne.n	8003a30 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003a20:	2301      	movs	r3, #1
 8003a22:	e019      	b.n	8003a58 <HAL_RCC_OscConfig+0x4f8>
 8003a24:	40021000 	.word	0x40021000
 8003a28:	40007000 	.word	0x40007000
 8003a2c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003a30:	4b0b      	ldr	r3, [pc, #44]	@ (8003a60 <HAL_RCC_OscConfig+0x500>)
 8003a32:	685b      	ldr	r3, [r3, #4]
 8003a34:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	6a1b      	ldr	r3, [r3, #32]
 8003a40:	429a      	cmp	r2, r3
 8003a42:	d106      	bne.n	8003a52 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a4e:	429a      	cmp	r2, r3
 8003a50:	d001      	beq.n	8003a56 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003a52:	2301      	movs	r3, #1
 8003a54:	e000      	b.n	8003a58 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003a56:	2300      	movs	r3, #0
}
 8003a58:	4618      	mov	r0, r3
 8003a5a:	3718      	adds	r7, #24
 8003a5c:	46bd      	mov	sp, r7
 8003a5e:	bd80      	pop	{r7, pc}
 8003a60:	40021000 	.word	0x40021000

08003a64 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003a64:	b580      	push	{r7, lr}
 8003a66:	b084      	sub	sp, #16
 8003a68:	af00      	add	r7, sp, #0
 8003a6a:	6078      	str	r0, [r7, #4]
 8003a6c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d101      	bne.n	8003a78 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003a74:	2301      	movs	r3, #1
 8003a76:	e0d0      	b.n	8003c1a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003a78:	4b6a      	ldr	r3, [pc, #424]	@ (8003c24 <HAL_RCC_ClockConfig+0x1c0>)
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	f003 0307 	and.w	r3, r3, #7
 8003a80:	683a      	ldr	r2, [r7, #0]
 8003a82:	429a      	cmp	r2, r3
 8003a84:	d910      	bls.n	8003aa8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a86:	4b67      	ldr	r3, [pc, #412]	@ (8003c24 <HAL_RCC_ClockConfig+0x1c0>)
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	f023 0207 	bic.w	r2, r3, #7
 8003a8e:	4965      	ldr	r1, [pc, #404]	@ (8003c24 <HAL_RCC_ClockConfig+0x1c0>)
 8003a90:	683b      	ldr	r3, [r7, #0]
 8003a92:	4313      	orrs	r3, r2
 8003a94:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a96:	4b63      	ldr	r3, [pc, #396]	@ (8003c24 <HAL_RCC_ClockConfig+0x1c0>)
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f003 0307 	and.w	r3, r3, #7
 8003a9e:	683a      	ldr	r2, [r7, #0]
 8003aa0:	429a      	cmp	r2, r3
 8003aa2:	d001      	beq.n	8003aa8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003aa4:	2301      	movs	r3, #1
 8003aa6:	e0b8      	b.n	8003c1a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	f003 0302 	and.w	r3, r3, #2
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d020      	beq.n	8003af6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	f003 0304 	and.w	r3, r3, #4
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d005      	beq.n	8003acc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003ac0:	4b59      	ldr	r3, [pc, #356]	@ (8003c28 <HAL_RCC_ClockConfig+0x1c4>)
 8003ac2:	685b      	ldr	r3, [r3, #4]
 8003ac4:	4a58      	ldr	r2, [pc, #352]	@ (8003c28 <HAL_RCC_ClockConfig+0x1c4>)
 8003ac6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003aca:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f003 0308 	and.w	r3, r3, #8
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d005      	beq.n	8003ae4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003ad8:	4b53      	ldr	r3, [pc, #332]	@ (8003c28 <HAL_RCC_ClockConfig+0x1c4>)
 8003ada:	685b      	ldr	r3, [r3, #4]
 8003adc:	4a52      	ldr	r2, [pc, #328]	@ (8003c28 <HAL_RCC_ClockConfig+0x1c4>)
 8003ade:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8003ae2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003ae4:	4b50      	ldr	r3, [pc, #320]	@ (8003c28 <HAL_RCC_ClockConfig+0x1c4>)
 8003ae6:	685b      	ldr	r3, [r3, #4]
 8003ae8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	689b      	ldr	r3, [r3, #8]
 8003af0:	494d      	ldr	r1, [pc, #308]	@ (8003c28 <HAL_RCC_ClockConfig+0x1c4>)
 8003af2:	4313      	orrs	r3, r2
 8003af4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f003 0301 	and.w	r3, r3, #1
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d040      	beq.n	8003b84 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	685b      	ldr	r3, [r3, #4]
 8003b06:	2b01      	cmp	r3, #1
 8003b08:	d107      	bne.n	8003b1a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b0a:	4b47      	ldr	r3, [pc, #284]	@ (8003c28 <HAL_RCC_ClockConfig+0x1c4>)
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d115      	bne.n	8003b42 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b16:	2301      	movs	r3, #1
 8003b18:	e07f      	b.n	8003c1a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	685b      	ldr	r3, [r3, #4]
 8003b1e:	2b02      	cmp	r3, #2
 8003b20:	d107      	bne.n	8003b32 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b22:	4b41      	ldr	r3, [pc, #260]	@ (8003c28 <HAL_RCC_ClockConfig+0x1c4>)
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d109      	bne.n	8003b42 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b2e:	2301      	movs	r3, #1
 8003b30:	e073      	b.n	8003c1a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b32:	4b3d      	ldr	r3, [pc, #244]	@ (8003c28 <HAL_RCC_ClockConfig+0x1c4>)
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f003 0302 	and.w	r3, r3, #2
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d101      	bne.n	8003b42 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b3e:	2301      	movs	r3, #1
 8003b40:	e06b      	b.n	8003c1a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003b42:	4b39      	ldr	r3, [pc, #228]	@ (8003c28 <HAL_RCC_ClockConfig+0x1c4>)
 8003b44:	685b      	ldr	r3, [r3, #4]
 8003b46:	f023 0203 	bic.w	r2, r3, #3
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	685b      	ldr	r3, [r3, #4]
 8003b4e:	4936      	ldr	r1, [pc, #216]	@ (8003c28 <HAL_RCC_ClockConfig+0x1c4>)
 8003b50:	4313      	orrs	r3, r2
 8003b52:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003b54:	f7fe f98c 	bl	8001e70 <HAL_GetTick>
 8003b58:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b5a:	e00a      	b.n	8003b72 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b5c:	f7fe f988 	bl	8001e70 <HAL_GetTick>
 8003b60:	4602      	mov	r2, r0
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	1ad3      	subs	r3, r2, r3
 8003b66:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003b6a:	4293      	cmp	r3, r2
 8003b6c:	d901      	bls.n	8003b72 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003b6e:	2303      	movs	r3, #3
 8003b70:	e053      	b.n	8003c1a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b72:	4b2d      	ldr	r3, [pc, #180]	@ (8003c28 <HAL_RCC_ClockConfig+0x1c4>)
 8003b74:	685b      	ldr	r3, [r3, #4]
 8003b76:	f003 020c 	and.w	r2, r3, #12
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	685b      	ldr	r3, [r3, #4]
 8003b7e:	009b      	lsls	r3, r3, #2
 8003b80:	429a      	cmp	r2, r3
 8003b82:	d1eb      	bne.n	8003b5c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003b84:	4b27      	ldr	r3, [pc, #156]	@ (8003c24 <HAL_RCC_ClockConfig+0x1c0>)
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	f003 0307 	and.w	r3, r3, #7
 8003b8c:	683a      	ldr	r2, [r7, #0]
 8003b8e:	429a      	cmp	r2, r3
 8003b90:	d210      	bcs.n	8003bb4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b92:	4b24      	ldr	r3, [pc, #144]	@ (8003c24 <HAL_RCC_ClockConfig+0x1c0>)
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	f023 0207 	bic.w	r2, r3, #7
 8003b9a:	4922      	ldr	r1, [pc, #136]	@ (8003c24 <HAL_RCC_ClockConfig+0x1c0>)
 8003b9c:	683b      	ldr	r3, [r7, #0]
 8003b9e:	4313      	orrs	r3, r2
 8003ba0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ba2:	4b20      	ldr	r3, [pc, #128]	@ (8003c24 <HAL_RCC_ClockConfig+0x1c0>)
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	f003 0307 	and.w	r3, r3, #7
 8003baa:	683a      	ldr	r2, [r7, #0]
 8003bac:	429a      	cmp	r2, r3
 8003bae:	d001      	beq.n	8003bb4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003bb0:	2301      	movs	r3, #1
 8003bb2:	e032      	b.n	8003c1a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	f003 0304 	and.w	r3, r3, #4
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d008      	beq.n	8003bd2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003bc0:	4b19      	ldr	r3, [pc, #100]	@ (8003c28 <HAL_RCC_ClockConfig+0x1c4>)
 8003bc2:	685b      	ldr	r3, [r3, #4]
 8003bc4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	68db      	ldr	r3, [r3, #12]
 8003bcc:	4916      	ldr	r1, [pc, #88]	@ (8003c28 <HAL_RCC_ClockConfig+0x1c4>)
 8003bce:	4313      	orrs	r3, r2
 8003bd0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f003 0308 	and.w	r3, r3, #8
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d009      	beq.n	8003bf2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003bde:	4b12      	ldr	r3, [pc, #72]	@ (8003c28 <HAL_RCC_ClockConfig+0x1c4>)
 8003be0:	685b      	ldr	r3, [r3, #4]
 8003be2:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	691b      	ldr	r3, [r3, #16]
 8003bea:	00db      	lsls	r3, r3, #3
 8003bec:	490e      	ldr	r1, [pc, #56]	@ (8003c28 <HAL_RCC_ClockConfig+0x1c4>)
 8003bee:	4313      	orrs	r3, r2
 8003bf0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003bf2:	f000 f821 	bl	8003c38 <HAL_RCC_GetSysClockFreq>
 8003bf6:	4602      	mov	r2, r0
 8003bf8:	4b0b      	ldr	r3, [pc, #44]	@ (8003c28 <HAL_RCC_ClockConfig+0x1c4>)
 8003bfa:	685b      	ldr	r3, [r3, #4]
 8003bfc:	091b      	lsrs	r3, r3, #4
 8003bfe:	f003 030f 	and.w	r3, r3, #15
 8003c02:	490a      	ldr	r1, [pc, #40]	@ (8003c2c <HAL_RCC_ClockConfig+0x1c8>)
 8003c04:	5ccb      	ldrb	r3, [r1, r3]
 8003c06:	fa22 f303 	lsr.w	r3, r2, r3
 8003c0a:	4a09      	ldr	r2, [pc, #36]	@ (8003c30 <HAL_RCC_ClockConfig+0x1cc>)
 8003c0c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003c0e:	4b09      	ldr	r3, [pc, #36]	@ (8003c34 <HAL_RCC_ClockConfig+0x1d0>)
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	4618      	mov	r0, r3
 8003c14:	f7fd ff76 	bl	8001b04 <HAL_InitTick>

  return HAL_OK;
 8003c18:	2300      	movs	r3, #0
}
 8003c1a:	4618      	mov	r0, r3
 8003c1c:	3710      	adds	r7, #16
 8003c1e:	46bd      	mov	sp, r7
 8003c20:	bd80      	pop	{r7, pc}
 8003c22:	bf00      	nop
 8003c24:	40022000 	.word	0x40022000
 8003c28:	40021000 	.word	0x40021000
 8003c2c:	0800b414 	.word	0x0800b414
 8003c30:	20000010 	.word	0x20000010
 8003c34:	20000014 	.word	0x20000014

08003c38 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003c38:	b480      	push	{r7}
 8003c3a:	b087      	sub	sp, #28
 8003c3c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003c3e:	2300      	movs	r3, #0
 8003c40:	60fb      	str	r3, [r7, #12]
 8003c42:	2300      	movs	r3, #0
 8003c44:	60bb      	str	r3, [r7, #8]
 8003c46:	2300      	movs	r3, #0
 8003c48:	617b      	str	r3, [r7, #20]
 8003c4a:	2300      	movs	r3, #0
 8003c4c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003c4e:	2300      	movs	r3, #0
 8003c50:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003c52:	4b1e      	ldr	r3, [pc, #120]	@ (8003ccc <HAL_RCC_GetSysClockFreq+0x94>)
 8003c54:	685b      	ldr	r3, [r3, #4]
 8003c56:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	f003 030c 	and.w	r3, r3, #12
 8003c5e:	2b04      	cmp	r3, #4
 8003c60:	d002      	beq.n	8003c68 <HAL_RCC_GetSysClockFreq+0x30>
 8003c62:	2b08      	cmp	r3, #8
 8003c64:	d003      	beq.n	8003c6e <HAL_RCC_GetSysClockFreq+0x36>
 8003c66:	e027      	b.n	8003cb8 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003c68:	4b19      	ldr	r3, [pc, #100]	@ (8003cd0 <HAL_RCC_GetSysClockFreq+0x98>)
 8003c6a:	613b      	str	r3, [r7, #16]
      break;
 8003c6c:	e027      	b.n	8003cbe <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	0c9b      	lsrs	r3, r3, #18
 8003c72:	f003 030f 	and.w	r3, r3, #15
 8003c76:	4a17      	ldr	r2, [pc, #92]	@ (8003cd4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003c78:	5cd3      	ldrb	r3, [r2, r3]
 8003c7a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d010      	beq.n	8003ca8 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003c86:	4b11      	ldr	r3, [pc, #68]	@ (8003ccc <HAL_RCC_GetSysClockFreq+0x94>)
 8003c88:	685b      	ldr	r3, [r3, #4]
 8003c8a:	0c5b      	lsrs	r3, r3, #17
 8003c8c:	f003 0301 	and.w	r3, r3, #1
 8003c90:	4a11      	ldr	r2, [pc, #68]	@ (8003cd8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003c92:	5cd3      	ldrb	r3, [r2, r3]
 8003c94:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	4a0d      	ldr	r2, [pc, #52]	@ (8003cd0 <HAL_RCC_GetSysClockFreq+0x98>)
 8003c9a:	fb03 f202 	mul.w	r2, r3, r2
 8003c9e:	68bb      	ldr	r3, [r7, #8]
 8003ca0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ca4:	617b      	str	r3, [r7, #20]
 8003ca6:	e004      	b.n	8003cb2 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	4a0c      	ldr	r2, [pc, #48]	@ (8003cdc <HAL_RCC_GetSysClockFreq+0xa4>)
 8003cac:	fb02 f303 	mul.w	r3, r2, r3
 8003cb0:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8003cb2:	697b      	ldr	r3, [r7, #20]
 8003cb4:	613b      	str	r3, [r7, #16]
      break;
 8003cb6:	e002      	b.n	8003cbe <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003cb8:	4b05      	ldr	r3, [pc, #20]	@ (8003cd0 <HAL_RCC_GetSysClockFreq+0x98>)
 8003cba:	613b      	str	r3, [r7, #16]
      break;
 8003cbc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003cbe:	693b      	ldr	r3, [r7, #16]
}
 8003cc0:	4618      	mov	r0, r3
 8003cc2:	371c      	adds	r7, #28
 8003cc4:	46bd      	mov	sp, r7
 8003cc6:	bc80      	pop	{r7}
 8003cc8:	4770      	bx	lr
 8003cca:	bf00      	nop
 8003ccc:	40021000 	.word	0x40021000
 8003cd0:	007a1200 	.word	0x007a1200
 8003cd4:	0800b42c 	.word	0x0800b42c
 8003cd8:	0800b43c 	.word	0x0800b43c
 8003cdc:	003d0900 	.word	0x003d0900

08003ce0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003ce0:	b480      	push	{r7}
 8003ce2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003ce4:	4b02      	ldr	r3, [pc, #8]	@ (8003cf0 <HAL_RCC_GetHCLKFreq+0x10>)
 8003ce6:	681b      	ldr	r3, [r3, #0]
}
 8003ce8:	4618      	mov	r0, r3
 8003cea:	46bd      	mov	sp, r7
 8003cec:	bc80      	pop	{r7}
 8003cee:	4770      	bx	lr
 8003cf0:	20000010 	.word	0x20000010

08003cf4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003cf4:	b580      	push	{r7, lr}
 8003cf6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003cf8:	f7ff fff2 	bl	8003ce0 <HAL_RCC_GetHCLKFreq>
 8003cfc:	4602      	mov	r2, r0
 8003cfe:	4b05      	ldr	r3, [pc, #20]	@ (8003d14 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003d00:	685b      	ldr	r3, [r3, #4]
 8003d02:	0a1b      	lsrs	r3, r3, #8
 8003d04:	f003 0307 	and.w	r3, r3, #7
 8003d08:	4903      	ldr	r1, [pc, #12]	@ (8003d18 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003d0a:	5ccb      	ldrb	r3, [r1, r3]
 8003d0c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003d10:	4618      	mov	r0, r3
 8003d12:	bd80      	pop	{r7, pc}
 8003d14:	40021000 	.word	0x40021000
 8003d18:	0800b424 	.word	0x0800b424

08003d1c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003d1c:	b580      	push	{r7, lr}
 8003d1e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003d20:	f7ff ffde 	bl	8003ce0 <HAL_RCC_GetHCLKFreq>
 8003d24:	4602      	mov	r2, r0
 8003d26:	4b05      	ldr	r3, [pc, #20]	@ (8003d3c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003d28:	685b      	ldr	r3, [r3, #4]
 8003d2a:	0adb      	lsrs	r3, r3, #11
 8003d2c:	f003 0307 	and.w	r3, r3, #7
 8003d30:	4903      	ldr	r1, [pc, #12]	@ (8003d40 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003d32:	5ccb      	ldrb	r3, [r1, r3]
 8003d34:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003d38:	4618      	mov	r0, r3
 8003d3a:	bd80      	pop	{r7, pc}
 8003d3c:	40021000 	.word	0x40021000
 8003d40:	0800b424 	.word	0x0800b424

08003d44 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003d44:	b480      	push	{r7}
 8003d46:	b083      	sub	sp, #12
 8003d48:	af00      	add	r7, sp, #0
 8003d4a:	6078      	str	r0, [r7, #4]
 8003d4c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	220f      	movs	r2, #15
 8003d52:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003d54:	4b11      	ldr	r3, [pc, #68]	@ (8003d9c <HAL_RCC_GetClockConfig+0x58>)
 8003d56:	685b      	ldr	r3, [r3, #4]
 8003d58:	f003 0203 	and.w	r2, r3, #3
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003d60:	4b0e      	ldr	r3, [pc, #56]	@ (8003d9c <HAL_RCC_GetClockConfig+0x58>)
 8003d62:	685b      	ldr	r3, [r3, #4]
 8003d64:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003d6c:	4b0b      	ldr	r3, [pc, #44]	@ (8003d9c <HAL_RCC_GetClockConfig+0x58>)
 8003d6e:	685b      	ldr	r3, [r3, #4]
 8003d70:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8003d78:	4b08      	ldr	r3, [pc, #32]	@ (8003d9c <HAL_RCC_GetClockConfig+0x58>)
 8003d7a:	685b      	ldr	r3, [r3, #4]
 8003d7c:	08db      	lsrs	r3, r3, #3
 8003d7e:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003d86:	4b06      	ldr	r3, [pc, #24]	@ (8003da0 <HAL_RCC_GetClockConfig+0x5c>)
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	f003 0207 	and.w	r2, r3, #7
 8003d8e:	683b      	ldr	r3, [r7, #0]
 8003d90:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8003d92:	bf00      	nop
 8003d94:	370c      	adds	r7, #12
 8003d96:	46bd      	mov	sp, r7
 8003d98:	bc80      	pop	{r7}
 8003d9a:	4770      	bx	lr
 8003d9c:	40021000 	.word	0x40021000
 8003da0:	40022000 	.word	0x40022000

08003da4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003da4:	b480      	push	{r7}
 8003da6:	b085      	sub	sp, #20
 8003da8:	af00      	add	r7, sp, #0
 8003daa:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003dac:	4b0a      	ldr	r3, [pc, #40]	@ (8003dd8 <RCC_Delay+0x34>)
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	4a0a      	ldr	r2, [pc, #40]	@ (8003ddc <RCC_Delay+0x38>)
 8003db2:	fba2 2303 	umull	r2, r3, r2, r3
 8003db6:	0a5b      	lsrs	r3, r3, #9
 8003db8:	687a      	ldr	r2, [r7, #4]
 8003dba:	fb02 f303 	mul.w	r3, r2, r3
 8003dbe:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003dc0:	bf00      	nop
  }
  while (Delay --);
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	1e5a      	subs	r2, r3, #1
 8003dc6:	60fa      	str	r2, [r7, #12]
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d1f9      	bne.n	8003dc0 <RCC_Delay+0x1c>
}
 8003dcc:	bf00      	nop
 8003dce:	bf00      	nop
 8003dd0:	3714      	adds	r7, #20
 8003dd2:	46bd      	mov	sp, r7
 8003dd4:	bc80      	pop	{r7}
 8003dd6:	4770      	bx	lr
 8003dd8:	20000010 	.word	0x20000010
 8003ddc:	10624dd3 	.word	0x10624dd3

08003de0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003de0:	b580      	push	{r7, lr}
 8003de2:	b082      	sub	sp, #8
 8003de4:	af00      	add	r7, sp, #0
 8003de6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d101      	bne.n	8003df2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003dee:	2301      	movs	r3, #1
 8003df0:	e041      	b.n	8003e76 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003df8:	b2db      	uxtb	r3, r3
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d106      	bne.n	8003e0c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	2200      	movs	r2, #0
 8003e02:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003e06:	6878      	ldr	r0, [r7, #4]
 8003e08:	f000 f839 	bl	8003e7e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	2202      	movs	r2, #2
 8003e10:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681a      	ldr	r2, [r3, #0]
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	3304      	adds	r3, #4
 8003e1c:	4619      	mov	r1, r3
 8003e1e:	4610      	mov	r0, r2
 8003e20:	f000 f99c 	bl	800415c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	2201      	movs	r2, #1
 8003e28:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	2201      	movs	r2, #1
 8003e30:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	2201      	movs	r2, #1
 8003e38:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	2201      	movs	r2, #1
 8003e40:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	2201      	movs	r2, #1
 8003e48:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	2201      	movs	r2, #1
 8003e50:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	2201      	movs	r2, #1
 8003e58:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	2201      	movs	r2, #1
 8003e60:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	2201      	movs	r2, #1
 8003e68:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	2201      	movs	r2, #1
 8003e70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003e74:	2300      	movs	r3, #0
}
 8003e76:	4618      	mov	r0, r3
 8003e78:	3708      	adds	r7, #8
 8003e7a:	46bd      	mov	sp, r7
 8003e7c:	bd80      	pop	{r7, pc}

08003e7e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003e7e:	b480      	push	{r7}
 8003e80:	b083      	sub	sp, #12
 8003e82:	af00      	add	r7, sp, #0
 8003e84:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003e86:	bf00      	nop
 8003e88:	370c      	adds	r7, #12
 8003e8a:	46bd      	mov	sp, r7
 8003e8c:	bc80      	pop	{r7}
 8003e8e:	4770      	bx	lr

08003e90 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003e90:	b480      	push	{r7}
 8003e92:	b085      	sub	sp, #20
 8003e94:	af00      	add	r7, sp, #0
 8003e96:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003e9e:	b2db      	uxtb	r3, r3
 8003ea0:	2b01      	cmp	r3, #1
 8003ea2:	d001      	beq.n	8003ea8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003ea4:	2301      	movs	r3, #1
 8003ea6:	e03a      	b.n	8003f1e <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	2202      	movs	r2, #2
 8003eac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	68da      	ldr	r2, [r3, #12]
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	f042 0201 	orr.w	r2, r2, #1
 8003ebe:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	4a18      	ldr	r2, [pc, #96]	@ (8003f28 <HAL_TIM_Base_Start_IT+0x98>)
 8003ec6:	4293      	cmp	r3, r2
 8003ec8:	d00e      	beq.n	8003ee8 <HAL_TIM_Base_Start_IT+0x58>
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003ed2:	d009      	beq.n	8003ee8 <HAL_TIM_Base_Start_IT+0x58>
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	4a14      	ldr	r2, [pc, #80]	@ (8003f2c <HAL_TIM_Base_Start_IT+0x9c>)
 8003eda:	4293      	cmp	r3, r2
 8003edc:	d004      	beq.n	8003ee8 <HAL_TIM_Base_Start_IT+0x58>
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	4a13      	ldr	r2, [pc, #76]	@ (8003f30 <HAL_TIM_Base_Start_IT+0xa0>)
 8003ee4:	4293      	cmp	r3, r2
 8003ee6:	d111      	bne.n	8003f0c <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	689b      	ldr	r3, [r3, #8]
 8003eee:	f003 0307 	and.w	r3, r3, #7
 8003ef2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	2b06      	cmp	r3, #6
 8003ef8:	d010      	beq.n	8003f1c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	681a      	ldr	r2, [r3, #0]
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	f042 0201 	orr.w	r2, r2, #1
 8003f08:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f0a:	e007      	b.n	8003f1c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	681a      	ldr	r2, [r3, #0]
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	f042 0201 	orr.w	r2, r2, #1
 8003f1a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003f1c:	2300      	movs	r3, #0
}
 8003f1e:	4618      	mov	r0, r3
 8003f20:	3714      	adds	r7, #20
 8003f22:	46bd      	mov	sp, r7
 8003f24:	bc80      	pop	{r7}
 8003f26:	4770      	bx	lr
 8003f28:	40012c00 	.word	0x40012c00
 8003f2c:	40000400 	.word	0x40000400
 8003f30:	40000800 	.word	0x40000800

08003f34 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003f34:	b580      	push	{r7, lr}
 8003f36:	b084      	sub	sp, #16
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	68db      	ldr	r3, [r3, #12]
 8003f42:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	691b      	ldr	r3, [r3, #16]
 8003f4a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003f4c:	68bb      	ldr	r3, [r7, #8]
 8003f4e:	f003 0302 	and.w	r3, r3, #2
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d020      	beq.n	8003f98 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	f003 0302 	and.w	r3, r3, #2
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d01b      	beq.n	8003f98 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	f06f 0202 	mvn.w	r2, #2
 8003f68:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	2201      	movs	r2, #1
 8003f6e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	699b      	ldr	r3, [r3, #24]
 8003f76:	f003 0303 	and.w	r3, r3, #3
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d003      	beq.n	8003f86 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003f7e:	6878      	ldr	r0, [r7, #4]
 8003f80:	f000 f8d1 	bl	8004126 <HAL_TIM_IC_CaptureCallback>
 8003f84:	e005      	b.n	8003f92 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f86:	6878      	ldr	r0, [r7, #4]
 8003f88:	f000 f8c4 	bl	8004114 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f8c:	6878      	ldr	r0, [r7, #4]
 8003f8e:	f000 f8d3 	bl	8004138 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	2200      	movs	r2, #0
 8003f96:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003f98:	68bb      	ldr	r3, [r7, #8]
 8003f9a:	f003 0304 	and.w	r3, r3, #4
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d020      	beq.n	8003fe4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	f003 0304 	and.w	r3, r3, #4
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d01b      	beq.n	8003fe4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	f06f 0204 	mvn.w	r2, #4
 8003fb4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	2202      	movs	r2, #2
 8003fba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	699b      	ldr	r3, [r3, #24]
 8003fc2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d003      	beq.n	8003fd2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003fca:	6878      	ldr	r0, [r7, #4]
 8003fcc:	f000 f8ab 	bl	8004126 <HAL_TIM_IC_CaptureCallback>
 8003fd0:	e005      	b.n	8003fde <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003fd2:	6878      	ldr	r0, [r7, #4]
 8003fd4:	f000 f89e 	bl	8004114 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003fd8:	6878      	ldr	r0, [r7, #4]
 8003fda:	f000 f8ad 	bl	8004138 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	2200      	movs	r2, #0
 8003fe2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003fe4:	68bb      	ldr	r3, [r7, #8]
 8003fe6:	f003 0308 	and.w	r3, r3, #8
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d020      	beq.n	8004030 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	f003 0308 	and.w	r3, r3, #8
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d01b      	beq.n	8004030 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	f06f 0208 	mvn.w	r2, #8
 8004000:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	2204      	movs	r2, #4
 8004006:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	69db      	ldr	r3, [r3, #28]
 800400e:	f003 0303 	and.w	r3, r3, #3
 8004012:	2b00      	cmp	r3, #0
 8004014:	d003      	beq.n	800401e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004016:	6878      	ldr	r0, [r7, #4]
 8004018:	f000 f885 	bl	8004126 <HAL_TIM_IC_CaptureCallback>
 800401c:	e005      	b.n	800402a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800401e:	6878      	ldr	r0, [r7, #4]
 8004020:	f000 f878 	bl	8004114 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004024:	6878      	ldr	r0, [r7, #4]
 8004026:	f000 f887 	bl	8004138 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	2200      	movs	r2, #0
 800402e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004030:	68bb      	ldr	r3, [r7, #8]
 8004032:	f003 0310 	and.w	r3, r3, #16
 8004036:	2b00      	cmp	r3, #0
 8004038:	d020      	beq.n	800407c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	f003 0310 	and.w	r3, r3, #16
 8004040:	2b00      	cmp	r3, #0
 8004042:	d01b      	beq.n	800407c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	f06f 0210 	mvn.w	r2, #16
 800404c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	2208      	movs	r2, #8
 8004052:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	69db      	ldr	r3, [r3, #28]
 800405a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800405e:	2b00      	cmp	r3, #0
 8004060:	d003      	beq.n	800406a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004062:	6878      	ldr	r0, [r7, #4]
 8004064:	f000 f85f 	bl	8004126 <HAL_TIM_IC_CaptureCallback>
 8004068:	e005      	b.n	8004076 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800406a:	6878      	ldr	r0, [r7, #4]
 800406c:	f000 f852 	bl	8004114 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004070:	6878      	ldr	r0, [r7, #4]
 8004072:	f000 f861 	bl	8004138 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	2200      	movs	r2, #0
 800407a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800407c:	68bb      	ldr	r3, [r7, #8]
 800407e:	f003 0301 	and.w	r3, r3, #1
 8004082:	2b00      	cmp	r3, #0
 8004084:	d00c      	beq.n	80040a0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	f003 0301 	and.w	r3, r3, #1
 800408c:	2b00      	cmp	r3, #0
 800408e:	d007      	beq.n	80040a0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	f06f 0201 	mvn.w	r2, #1
 8004098:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800409a:	6878      	ldr	r0, [r7, #4]
 800409c:	f7fd fc22 	bl	80018e4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80040a0:	68bb      	ldr	r3, [r7, #8]
 80040a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d00c      	beq.n	80040c4 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d007      	beq.n	80040c4 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80040bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80040be:	6878      	ldr	r0, [r7, #4]
 80040c0:	f000 f8c3 	bl	800424a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80040c4:	68bb      	ldr	r3, [r7, #8]
 80040c6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d00c      	beq.n	80040e8 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d007      	beq.n	80040e8 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80040e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80040e2:	6878      	ldr	r0, [r7, #4]
 80040e4:	f000 f831 	bl	800414a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80040e8:	68bb      	ldr	r3, [r7, #8]
 80040ea:	f003 0320 	and.w	r3, r3, #32
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d00c      	beq.n	800410c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	f003 0320 	and.w	r3, r3, #32
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d007      	beq.n	800410c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	f06f 0220 	mvn.w	r2, #32
 8004104:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004106:	6878      	ldr	r0, [r7, #4]
 8004108:	f000 f896 	bl	8004238 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800410c:	bf00      	nop
 800410e:	3710      	adds	r7, #16
 8004110:	46bd      	mov	sp, r7
 8004112:	bd80      	pop	{r7, pc}

08004114 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004114:	b480      	push	{r7}
 8004116:	b083      	sub	sp, #12
 8004118:	af00      	add	r7, sp, #0
 800411a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800411c:	bf00      	nop
 800411e:	370c      	adds	r7, #12
 8004120:	46bd      	mov	sp, r7
 8004122:	bc80      	pop	{r7}
 8004124:	4770      	bx	lr

08004126 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004126:	b480      	push	{r7}
 8004128:	b083      	sub	sp, #12
 800412a:	af00      	add	r7, sp, #0
 800412c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800412e:	bf00      	nop
 8004130:	370c      	adds	r7, #12
 8004132:	46bd      	mov	sp, r7
 8004134:	bc80      	pop	{r7}
 8004136:	4770      	bx	lr

08004138 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004138:	b480      	push	{r7}
 800413a:	b083      	sub	sp, #12
 800413c:	af00      	add	r7, sp, #0
 800413e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004140:	bf00      	nop
 8004142:	370c      	adds	r7, #12
 8004144:	46bd      	mov	sp, r7
 8004146:	bc80      	pop	{r7}
 8004148:	4770      	bx	lr

0800414a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800414a:	b480      	push	{r7}
 800414c:	b083      	sub	sp, #12
 800414e:	af00      	add	r7, sp, #0
 8004150:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004152:	bf00      	nop
 8004154:	370c      	adds	r7, #12
 8004156:	46bd      	mov	sp, r7
 8004158:	bc80      	pop	{r7}
 800415a:	4770      	bx	lr

0800415c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800415c:	b480      	push	{r7}
 800415e:	b085      	sub	sp, #20
 8004160:	af00      	add	r7, sp, #0
 8004162:	6078      	str	r0, [r7, #4]
 8004164:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	4a2f      	ldr	r2, [pc, #188]	@ (800422c <TIM_Base_SetConfig+0xd0>)
 8004170:	4293      	cmp	r3, r2
 8004172:	d00b      	beq.n	800418c <TIM_Base_SetConfig+0x30>
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800417a:	d007      	beq.n	800418c <TIM_Base_SetConfig+0x30>
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	4a2c      	ldr	r2, [pc, #176]	@ (8004230 <TIM_Base_SetConfig+0xd4>)
 8004180:	4293      	cmp	r3, r2
 8004182:	d003      	beq.n	800418c <TIM_Base_SetConfig+0x30>
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	4a2b      	ldr	r2, [pc, #172]	@ (8004234 <TIM_Base_SetConfig+0xd8>)
 8004188:	4293      	cmp	r3, r2
 800418a:	d108      	bne.n	800419e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004192:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004194:	683b      	ldr	r3, [r7, #0]
 8004196:	685b      	ldr	r3, [r3, #4]
 8004198:	68fa      	ldr	r2, [r7, #12]
 800419a:	4313      	orrs	r3, r2
 800419c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	4a22      	ldr	r2, [pc, #136]	@ (800422c <TIM_Base_SetConfig+0xd0>)
 80041a2:	4293      	cmp	r3, r2
 80041a4:	d00b      	beq.n	80041be <TIM_Base_SetConfig+0x62>
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80041ac:	d007      	beq.n	80041be <TIM_Base_SetConfig+0x62>
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	4a1f      	ldr	r2, [pc, #124]	@ (8004230 <TIM_Base_SetConfig+0xd4>)
 80041b2:	4293      	cmp	r3, r2
 80041b4:	d003      	beq.n	80041be <TIM_Base_SetConfig+0x62>
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	4a1e      	ldr	r2, [pc, #120]	@ (8004234 <TIM_Base_SetConfig+0xd8>)
 80041ba:	4293      	cmp	r3, r2
 80041bc:	d108      	bne.n	80041d0 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80041c4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80041c6:	683b      	ldr	r3, [r7, #0]
 80041c8:	68db      	ldr	r3, [r3, #12]
 80041ca:	68fa      	ldr	r2, [r7, #12]
 80041cc:	4313      	orrs	r3, r2
 80041ce:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80041d6:	683b      	ldr	r3, [r7, #0]
 80041d8:	695b      	ldr	r3, [r3, #20]
 80041da:	4313      	orrs	r3, r2
 80041dc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	68fa      	ldr	r2, [r7, #12]
 80041e2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80041e4:	683b      	ldr	r3, [r7, #0]
 80041e6:	689a      	ldr	r2, [r3, #8]
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80041ec:	683b      	ldr	r3, [r7, #0]
 80041ee:	681a      	ldr	r2, [r3, #0]
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	4a0d      	ldr	r2, [pc, #52]	@ (800422c <TIM_Base_SetConfig+0xd0>)
 80041f8:	4293      	cmp	r3, r2
 80041fa:	d103      	bne.n	8004204 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80041fc:	683b      	ldr	r3, [r7, #0]
 80041fe:	691a      	ldr	r2, [r3, #16]
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	2201      	movs	r2, #1
 8004208:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	691b      	ldr	r3, [r3, #16]
 800420e:	f003 0301 	and.w	r3, r3, #1
 8004212:	2b00      	cmp	r3, #0
 8004214:	d005      	beq.n	8004222 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	691b      	ldr	r3, [r3, #16]
 800421a:	f023 0201 	bic.w	r2, r3, #1
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	611a      	str	r2, [r3, #16]
  }
}
 8004222:	bf00      	nop
 8004224:	3714      	adds	r7, #20
 8004226:	46bd      	mov	sp, r7
 8004228:	bc80      	pop	{r7}
 800422a:	4770      	bx	lr
 800422c:	40012c00 	.word	0x40012c00
 8004230:	40000400 	.word	0x40000400
 8004234:	40000800 	.word	0x40000800

08004238 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004238:	b480      	push	{r7}
 800423a:	b083      	sub	sp, #12
 800423c:	af00      	add	r7, sp, #0
 800423e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004240:	bf00      	nop
 8004242:	370c      	adds	r7, #12
 8004244:	46bd      	mov	sp, r7
 8004246:	bc80      	pop	{r7}
 8004248:	4770      	bx	lr

0800424a <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800424a:	b480      	push	{r7}
 800424c:	b083      	sub	sp, #12
 800424e:	af00      	add	r7, sp, #0
 8004250:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004252:	bf00      	nop
 8004254:	370c      	adds	r7, #12
 8004256:	46bd      	mov	sp, r7
 8004258:	bc80      	pop	{r7}
 800425a:	4770      	bx	lr

0800425c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800425c:	b580      	push	{r7, lr}
 800425e:	b082      	sub	sp, #8
 8004260:	af00      	add	r7, sp, #0
 8004262:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	2b00      	cmp	r3, #0
 8004268:	d101      	bne.n	800426e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800426a:	2301      	movs	r3, #1
 800426c:	e042      	b.n	80042f4 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004274:	b2db      	uxtb	r3, r3
 8004276:	2b00      	cmp	r3, #0
 8004278:	d106      	bne.n	8004288 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	2200      	movs	r2, #0
 800427e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004282:	6878      	ldr	r0, [r7, #4]
 8004284:	f7fd fbea 	bl	8001a5c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	2224      	movs	r2, #36	@ 0x24
 800428c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	68da      	ldr	r2, [r3, #12]
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800429e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80042a0:	6878      	ldr	r0, [r7, #4]
 80042a2:	f000 fdb7 	bl	8004e14 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	691a      	ldr	r2, [r3, #16]
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80042b4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	695a      	ldr	r2, [r3, #20]
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80042c4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	68da      	ldr	r2, [r3, #12]
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80042d4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	2200      	movs	r2, #0
 80042da:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	2220      	movs	r2, #32
 80042e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	2220      	movs	r2, #32
 80042e8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	2200      	movs	r2, #0
 80042f0:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80042f2:	2300      	movs	r3, #0
}
 80042f4:	4618      	mov	r0, r3
 80042f6:	3708      	adds	r7, #8
 80042f8:	46bd      	mov	sp, r7
 80042fa:	bd80      	pop	{r7, pc}

080042fc <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80042fc:	b580      	push	{r7, lr}
 80042fe:	b08a      	sub	sp, #40	@ 0x28
 8004300:	af02      	add	r7, sp, #8
 8004302:	60f8      	str	r0, [r7, #12]
 8004304:	60b9      	str	r1, [r7, #8]
 8004306:	603b      	str	r3, [r7, #0]
 8004308:	4613      	mov	r3, r2
 800430a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800430c:	2300      	movs	r3, #0
 800430e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004316:	b2db      	uxtb	r3, r3
 8004318:	2b20      	cmp	r3, #32
 800431a:	d175      	bne.n	8004408 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800431c:	68bb      	ldr	r3, [r7, #8]
 800431e:	2b00      	cmp	r3, #0
 8004320:	d002      	beq.n	8004328 <HAL_UART_Transmit+0x2c>
 8004322:	88fb      	ldrh	r3, [r7, #6]
 8004324:	2b00      	cmp	r3, #0
 8004326:	d101      	bne.n	800432c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004328:	2301      	movs	r3, #1
 800432a:	e06e      	b.n	800440a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	2200      	movs	r2, #0
 8004330:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	2221      	movs	r2, #33	@ 0x21
 8004336:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800433a:	f7fd fd99 	bl	8001e70 <HAL_GetTick>
 800433e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	88fa      	ldrh	r2, [r7, #6]
 8004344:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	88fa      	ldrh	r2, [r7, #6]
 800434a:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	689b      	ldr	r3, [r3, #8]
 8004350:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004354:	d108      	bne.n	8004368 <HAL_UART_Transmit+0x6c>
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	691b      	ldr	r3, [r3, #16]
 800435a:	2b00      	cmp	r3, #0
 800435c:	d104      	bne.n	8004368 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800435e:	2300      	movs	r3, #0
 8004360:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004362:	68bb      	ldr	r3, [r7, #8]
 8004364:	61bb      	str	r3, [r7, #24]
 8004366:	e003      	b.n	8004370 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004368:	68bb      	ldr	r3, [r7, #8]
 800436a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800436c:	2300      	movs	r3, #0
 800436e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004370:	e02e      	b.n	80043d0 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004372:	683b      	ldr	r3, [r7, #0]
 8004374:	9300      	str	r3, [sp, #0]
 8004376:	697b      	ldr	r3, [r7, #20]
 8004378:	2200      	movs	r2, #0
 800437a:	2180      	movs	r1, #128	@ 0x80
 800437c:	68f8      	ldr	r0, [r7, #12]
 800437e:	f000 fb1c 	bl	80049ba <UART_WaitOnFlagUntilTimeout>
 8004382:	4603      	mov	r3, r0
 8004384:	2b00      	cmp	r3, #0
 8004386:	d005      	beq.n	8004394 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	2220      	movs	r2, #32
 800438c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8004390:	2303      	movs	r3, #3
 8004392:	e03a      	b.n	800440a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8004394:	69fb      	ldr	r3, [r7, #28]
 8004396:	2b00      	cmp	r3, #0
 8004398:	d10b      	bne.n	80043b2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800439a:	69bb      	ldr	r3, [r7, #24]
 800439c:	881b      	ldrh	r3, [r3, #0]
 800439e:	461a      	mov	r2, r3
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80043a8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80043aa:	69bb      	ldr	r3, [r7, #24]
 80043ac:	3302      	adds	r3, #2
 80043ae:	61bb      	str	r3, [r7, #24]
 80043b0:	e007      	b.n	80043c2 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80043b2:	69fb      	ldr	r3, [r7, #28]
 80043b4:	781a      	ldrb	r2, [r3, #0]
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80043bc:	69fb      	ldr	r3, [r7, #28]
 80043be:	3301      	adds	r3, #1
 80043c0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80043c6:	b29b      	uxth	r3, r3
 80043c8:	3b01      	subs	r3, #1
 80043ca:	b29a      	uxth	r2, r3
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80043d4:	b29b      	uxth	r3, r3
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d1cb      	bne.n	8004372 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80043da:	683b      	ldr	r3, [r7, #0]
 80043dc:	9300      	str	r3, [sp, #0]
 80043de:	697b      	ldr	r3, [r7, #20]
 80043e0:	2200      	movs	r2, #0
 80043e2:	2140      	movs	r1, #64	@ 0x40
 80043e4:	68f8      	ldr	r0, [r7, #12]
 80043e6:	f000 fae8 	bl	80049ba <UART_WaitOnFlagUntilTimeout>
 80043ea:	4603      	mov	r3, r0
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d005      	beq.n	80043fc <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	2220      	movs	r2, #32
 80043f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80043f8:	2303      	movs	r3, #3
 80043fa:	e006      	b.n	800440a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	2220      	movs	r2, #32
 8004400:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8004404:	2300      	movs	r3, #0
 8004406:	e000      	b.n	800440a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8004408:	2302      	movs	r3, #2
  }
}
 800440a:	4618      	mov	r0, r3
 800440c:	3720      	adds	r7, #32
 800440e:	46bd      	mov	sp, r7
 8004410:	bd80      	pop	{r7, pc}

08004412 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004412:	b580      	push	{r7, lr}
 8004414:	b084      	sub	sp, #16
 8004416:	af00      	add	r7, sp, #0
 8004418:	60f8      	str	r0, [r7, #12]
 800441a:	60b9      	str	r1, [r7, #8]
 800441c:	4613      	mov	r3, r2
 800441e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004426:	b2db      	uxtb	r3, r3
 8004428:	2b20      	cmp	r3, #32
 800442a:	d112      	bne.n	8004452 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 800442c:	68bb      	ldr	r3, [r7, #8]
 800442e:	2b00      	cmp	r3, #0
 8004430:	d002      	beq.n	8004438 <HAL_UART_Receive_IT+0x26>
 8004432:	88fb      	ldrh	r3, [r7, #6]
 8004434:	2b00      	cmp	r3, #0
 8004436:	d101      	bne.n	800443c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004438:	2301      	movs	r3, #1
 800443a:	e00b      	b.n	8004454 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	2200      	movs	r2, #0
 8004440:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004442:	88fb      	ldrh	r3, [r7, #6]
 8004444:	461a      	mov	r2, r3
 8004446:	68b9      	ldr	r1, [r7, #8]
 8004448:	68f8      	ldr	r0, [r7, #12]
 800444a:	f000 fb0f 	bl	8004a6c <UART_Start_Receive_IT>
 800444e:	4603      	mov	r3, r0
 8004450:	e000      	b.n	8004454 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8004452:	2302      	movs	r3, #2
  }
}
 8004454:	4618      	mov	r0, r3
 8004456:	3710      	adds	r7, #16
 8004458:	46bd      	mov	sp, r7
 800445a:	bd80      	pop	{r7, pc}

0800445c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800445c:	b580      	push	{r7, lr}
 800445e:	b0ba      	sub	sp, #232	@ 0xe8
 8004460:	af00      	add	r7, sp, #0
 8004462:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	68db      	ldr	r3, [r3, #12]
 8004474:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	695b      	ldr	r3, [r3, #20]
 800447e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8004482:	2300      	movs	r3, #0
 8004484:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8004488:	2300      	movs	r3, #0
 800448a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800448e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004492:	f003 030f 	and.w	r3, r3, #15
 8004496:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800449a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d10f      	bne.n	80044c2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80044a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80044a6:	f003 0320 	and.w	r3, r3, #32
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d009      	beq.n	80044c2 <HAL_UART_IRQHandler+0x66>
 80044ae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80044b2:	f003 0320 	and.w	r3, r3, #32
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d003      	beq.n	80044c2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80044ba:	6878      	ldr	r0, [r7, #4]
 80044bc:	f000 fbec 	bl	8004c98 <UART_Receive_IT>
      return;
 80044c0:	e25b      	b.n	800497a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80044c2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	f000 80de 	beq.w	8004688 <HAL_UART_IRQHandler+0x22c>
 80044cc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80044d0:	f003 0301 	and.w	r3, r3, #1
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d106      	bne.n	80044e6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80044d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80044dc:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	f000 80d1 	beq.w	8004688 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80044e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80044ea:	f003 0301 	and.w	r3, r3, #1
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d00b      	beq.n	800450a <HAL_UART_IRQHandler+0xae>
 80044f2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80044f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d005      	beq.n	800450a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004502:	f043 0201 	orr.w	r2, r3, #1
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800450a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800450e:	f003 0304 	and.w	r3, r3, #4
 8004512:	2b00      	cmp	r3, #0
 8004514:	d00b      	beq.n	800452e <HAL_UART_IRQHandler+0xd2>
 8004516:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800451a:	f003 0301 	and.w	r3, r3, #1
 800451e:	2b00      	cmp	r3, #0
 8004520:	d005      	beq.n	800452e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004526:	f043 0202 	orr.w	r2, r3, #2
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800452e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004532:	f003 0302 	and.w	r3, r3, #2
 8004536:	2b00      	cmp	r3, #0
 8004538:	d00b      	beq.n	8004552 <HAL_UART_IRQHandler+0xf6>
 800453a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800453e:	f003 0301 	and.w	r3, r3, #1
 8004542:	2b00      	cmp	r3, #0
 8004544:	d005      	beq.n	8004552 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800454a:	f043 0204 	orr.w	r2, r3, #4
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004552:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004556:	f003 0308 	and.w	r3, r3, #8
 800455a:	2b00      	cmp	r3, #0
 800455c:	d011      	beq.n	8004582 <HAL_UART_IRQHandler+0x126>
 800455e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004562:	f003 0320 	and.w	r3, r3, #32
 8004566:	2b00      	cmp	r3, #0
 8004568:	d105      	bne.n	8004576 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800456a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800456e:	f003 0301 	and.w	r3, r3, #1
 8004572:	2b00      	cmp	r3, #0
 8004574:	d005      	beq.n	8004582 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800457a:	f043 0208 	orr.w	r2, r3, #8
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004586:	2b00      	cmp	r3, #0
 8004588:	f000 81f2 	beq.w	8004970 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800458c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004590:	f003 0320 	and.w	r3, r3, #32
 8004594:	2b00      	cmp	r3, #0
 8004596:	d008      	beq.n	80045aa <HAL_UART_IRQHandler+0x14e>
 8004598:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800459c:	f003 0320 	and.w	r3, r3, #32
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d002      	beq.n	80045aa <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80045a4:	6878      	ldr	r0, [r7, #4]
 80045a6:	f000 fb77 	bl	8004c98 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	695b      	ldr	r3, [r3, #20]
 80045b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	bf14      	ite	ne
 80045b8:	2301      	movne	r3, #1
 80045ba:	2300      	moveq	r3, #0
 80045bc:	b2db      	uxtb	r3, r3
 80045be:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80045c6:	f003 0308 	and.w	r3, r3, #8
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d103      	bne.n	80045d6 <HAL_UART_IRQHandler+0x17a>
 80045ce:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d04f      	beq.n	8004676 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80045d6:	6878      	ldr	r0, [r7, #4]
 80045d8:	f000 fa81 	bl	8004ade <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	695b      	ldr	r3, [r3, #20]
 80045e2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d041      	beq.n	800466e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	3314      	adds	r3, #20
 80045f0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045f4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80045f8:	e853 3f00 	ldrex	r3, [r3]
 80045fc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8004600:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004604:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004608:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	3314      	adds	r3, #20
 8004612:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8004616:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800461a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800461e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8004622:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8004626:	e841 2300 	strex	r3, r2, [r1]
 800462a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800462e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004632:	2b00      	cmp	r3, #0
 8004634:	d1d9      	bne.n	80045ea <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800463a:	2b00      	cmp	r3, #0
 800463c:	d013      	beq.n	8004666 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004642:	4a7e      	ldr	r2, [pc, #504]	@ (800483c <HAL_UART_IRQHandler+0x3e0>)
 8004644:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800464a:	4618      	mov	r0, r3
 800464c:	f7fd fd58 	bl	8002100 <HAL_DMA_Abort_IT>
 8004650:	4603      	mov	r3, r0
 8004652:	2b00      	cmp	r3, #0
 8004654:	d016      	beq.n	8004684 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800465a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800465c:	687a      	ldr	r2, [r7, #4]
 800465e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004660:	4610      	mov	r0, r2
 8004662:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004664:	e00e      	b.n	8004684 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004666:	6878      	ldr	r0, [r7, #4]
 8004668:	f000 f993 	bl	8004992 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800466c:	e00a      	b.n	8004684 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800466e:	6878      	ldr	r0, [r7, #4]
 8004670:	f000 f98f 	bl	8004992 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004674:	e006      	b.n	8004684 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004676:	6878      	ldr	r0, [r7, #4]
 8004678:	f000 f98b 	bl	8004992 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	2200      	movs	r2, #0
 8004680:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8004682:	e175      	b.n	8004970 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004684:	bf00      	nop
    return;
 8004686:	e173      	b.n	8004970 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800468c:	2b01      	cmp	r3, #1
 800468e:	f040 814f 	bne.w	8004930 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004692:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004696:	f003 0310 	and.w	r3, r3, #16
 800469a:	2b00      	cmp	r3, #0
 800469c:	f000 8148 	beq.w	8004930 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80046a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80046a4:	f003 0310 	and.w	r3, r3, #16
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	f000 8141 	beq.w	8004930 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80046ae:	2300      	movs	r3, #0
 80046b0:	60bb      	str	r3, [r7, #8]
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	60bb      	str	r3, [r7, #8]
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	685b      	ldr	r3, [r3, #4]
 80046c0:	60bb      	str	r3, [r7, #8]
 80046c2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	695b      	ldr	r3, [r3, #20]
 80046ca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	f000 80b6 	beq.w	8004840 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	685b      	ldr	r3, [r3, #4]
 80046dc:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80046e0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	f000 8145 	beq.w	8004974 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80046ee:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80046f2:	429a      	cmp	r2, r3
 80046f4:	f080 813e 	bcs.w	8004974 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80046fe:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004704:	699b      	ldr	r3, [r3, #24]
 8004706:	2b20      	cmp	r3, #32
 8004708:	f000 8088 	beq.w	800481c <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	330c      	adds	r3, #12
 8004712:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004716:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800471a:	e853 3f00 	ldrex	r3, [r3]
 800471e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8004722:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004726:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800472a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	330c      	adds	r3, #12
 8004734:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8004738:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800473c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004740:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8004744:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8004748:	e841 2300 	strex	r3, r2, [r1]
 800474c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8004750:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004754:	2b00      	cmp	r3, #0
 8004756:	d1d9      	bne.n	800470c <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	3314      	adds	r3, #20
 800475e:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004760:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004762:	e853 3f00 	ldrex	r3, [r3]
 8004766:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8004768:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800476a:	f023 0301 	bic.w	r3, r3, #1
 800476e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	3314      	adds	r3, #20
 8004778:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800477c:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8004780:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004782:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8004784:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8004788:	e841 2300 	strex	r3, r2, [r1]
 800478c:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800478e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004790:	2b00      	cmp	r3, #0
 8004792:	d1e1      	bne.n	8004758 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	3314      	adds	r3, #20
 800479a:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800479c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800479e:	e853 3f00 	ldrex	r3, [r3]
 80047a2:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80047a4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80047a6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80047aa:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	3314      	adds	r3, #20
 80047b4:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80047b8:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80047ba:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047bc:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80047be:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80047c0:	e841 2300 	strex	r3, r2, [r1]
 80047c4:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80047c6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d1e3      	bne.n	8004794 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	2220      	movs	r2, #32
 80047d0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	2200      	movs	r2, #0
 80047d8:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	330c      	adds	r3, #12
 80047e0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047e2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80047e4:	e853 3f00 	ldrex	r3, [r3]
 80047e8:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80047ea:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80047ec:	f023 0310 	bic.w	r3, r3, #16
 80047f0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	330c      	adds	r3, #12
 80047fa:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80047fe:	65ba      	str	r2, [r7, #88]	@ 0x58
 8004800:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004802:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004804:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004806:	e841 2300 	strex	r3, r2, [r1]
 800480a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800480c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800480e:	2b00      	cmp	r3, #0
 8004810:	d1e3      	bne.n	80047da <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004816:	4618      	mov	r0, r3
 8004818:	f7fd fc37 	bl	800208a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	2202      	movs	r2, #2
 8004820:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800482a:	b29b      	uxth	r3, r3
 800482c:	1ad3      	subs	r3, r2, r3
 800482e:	b29b      	uxth	r3, r3
 8004830:	4619      	mov	r1, r3
 8004832:	6878      	ldr	r0, [r7, #4]
 8004834:	f000 f8b6 	bl	80049a4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004838:	e09c      	b.n	8004974 <HAL_UART_IRQHandler+0x518>
 800483a:	bf00      	nop
 800483c:	08004ba3 	.word	0x08004ba3
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004848:	b29b      	uxth	r3, r3
 800484a:	1ad3      	subs	r3, r2, r3
 800484c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004854:	b29b      	uxth	r3, r3
 8004856:	2b00      	cmp	r3, #0
 8004858:	f000 808e 	beq.w	8004978 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800485c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004860:	2b00      	cmp	r3, #0
 8004862:	f000 8089 	beq.w	8004978 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	330c      	adds	r3, #12
 800486c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800486e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004870:	e853 3f00 	ldrex	r3, [r3]
 8004874:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004876:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004878:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800487c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	330c      	adds	r3, #12
 8004886:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800488a:	647a      	str	r2, [r7, #68]	@ 0x44
 800488c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800488e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004890:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004892:	e841 2300 	strex	r3, r2, [r1]
 8004896:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004898:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800489a:	2b00      	cmp	r3, #0
 800489c:	d1e3      	bne.n	8004866 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	3314      	adds	r3, #20
 80048a4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048a8:	e853 3f00 	ldrex	r3, [r3]
 80048ac:	623b      	str	r3, [r7, #32]
   return(result);
 80048ae:	6a3b      	ldr	r3, [r7, #32]
 80048b0:	f023 0301 	bic.w	r3, r3, #1
 80048b4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	3314      	adds	r3, #20
 80048be:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80048c2:	633a      	str	r2, [r7, #48]	@ 0x30
 80048c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048c6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80048c8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80048ca:	e841 2300 	strex	r3, r2, [r1]
 80048ce:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80048d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d1e3      	bne.n	800489e <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	2220      	movs	r2, #32
 80048da:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	2200      	movs	r2, #0
 80048e2:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	330c      	adds	r3, #12
 80048ea:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048ec:	693b      	ldr	r3, [r7, #16]
 80048ee:	e853 3f00 	ldrex	r3, [r3]
 80048f2:	60fb      	str	r3, [r7, #12]
   return(result);
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	f023 0310 	bic.w	r3, r3, #16
 80048fa:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	330c      	adds	r3, #12
 8004904:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8004908:	61fa      	str	r2, [r7, #28]
 800490a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800490c:	69b9      	ldr	r1, [r7, #24]
 800490e:	69fa      	ldr	r2, [r7, #28]
 8004910:	e841 2300 	strex	r3, r2, [r1]
 8004914:	617b      	str	r3, [r7, #20]
   return(result);
 8004916:	697b      	ldr	r3, [r7, #20]
 8004918:	2b00      	cmp	r3, #0
 800491a:	d1e3      	bne.n	80048e4 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	2202      	movs	r2, #2
 8004920:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004922:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004926:	4619      	mov	r1, r3
 8004928:	6878      	ldr	r0, [r7, #4]
 800492a:	f000 f83b 	bl	80049a4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800492e:	e023      	b.n	8004978 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004930:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004934:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004938:	2b00      	cmp	r3, #0
 800493a:	d009      	beq.n	8004950 <HAL_UART_IRQHandler+0x4f4>
 800493c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004940:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004944:	2b00      	cmp	r3, #0
 8004946:	d003      	beq.n	8004950 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8004948:	6878      	ldr	r0, [r7, #4]
 800494a:	f000 f93e 	bl	8004bca <UART_Transmit_IT>
    return;
 800494e:	e014      	b.n	800497a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004950:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004954:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004958:	2b00      	cmp	r3, #0
 800495a:	d00e      	beq.n	800497a <HAL_UART_IRQHandler+0x51e>
 800495c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004960:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004964:	2b00      	cmp	r3, #0
 8004966:	d008      	beq.n	800497a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8004968:	6878      	ldr	r0, [r7, #4]
 800496a:	f000 f97d 	bl	8004c68 <UART_EndTransmit_IT>
    return;
 800496e:	e004      	b.n	800497a <HAL_UART_IRQHandler+0x51e>
    return;
 8004970:	bf00      	nop
 8004972:	e002      	b.n	800497a <HAL_UART_IRQHandler+0x51e>
      return;
 8004974:	bf00      	nop
 8004976:	e000      	b.n	800497a <HAL_UART_IRQHandler+0x51e>
      return;
 8004978:	bf00      	nop
  }
}
 800497a:	37e8      	adds	r7, #232	@ 0xe8
 800497c:	46bd      	mov	sp, r7
 800497e:	bd80      	pop	{r7, pc}

08004980 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004980:	b480      	push	{r7}
 8004982:	b083      	sub	sp, #12
 8004984:	af00      	add	r7, sp, #0
 8004986:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004988:	bf00      	nop
 800498a:	370c      	adds	r7, #12
 800498c:	46bd      	mov	sp, r7
 800498e:	bc80      	pop	{r7}
 8004990:	4770      	bx	lr

08004992 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004992:	b480      	push	{r7}
 8004994:	b083      	sub	sp, #12
 8004996:	af00      	add	r7, sp, #0
 8004998:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800499a:	bf00      	nop
 800499c:	370c      	adds	r7, #12
 800499e:	46bd      	mov	sp, r7
 80049a0:	bc80      	pop	{r7}
 80049a2:	4770      	bx	lr

080049a4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80049a4:	b480      	push	{r7}
 80049a6:	b083      	sub	sp, #12
 80049a8:	af00      	add	r7, sp, #0
 80049aa:	6078      	str	r0, [r7, #4]
 80049ac:	460b      	mov	r3, r1
 80049ae:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80049b0:	bf00      	nop
 80049b2:	370c      	adds	r7, #12
 80049b4:	46bd      	mov	sp, r7
 80049b6:	bc80      	pop	{r7}
 80049b8:	4770      	bx	lr

080049ba <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80049ba:	b580      	push	{r7, lr}
 80049bc:	b086      	sub	sp, #24
 80049be:	af00      	add	r7, sp, #0
 80049c0:	60f8      	str	r0, [r7, #12]
 80049c2:	60b9      	str	r1, [r7, #8]
 80049c4:	603b      	str	r3, [r7, #0]
 80049c6:	4613      	mov	r3, r2
 80049c8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80049ca:	e03b      	b.n	8004a44 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80049cc:	6a3b      	ldr	r3, [r7, #32]
 80049ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049d2:	d037      	beq.n	8004a44 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80049d4:	f7fd fa4c 	bl	8001e70 <HAL_GetTick>
 80049d8:	4602      	mov	r2, r0
 80049da:	683b      	ldr	r3, [r7, #0]
 80049dc:	1ad3      	subs	r3, r2, r3
 80049de:	6a3a      	ldr	r2, [r7, #32]
 80049e0:	429a      	cmp	r2, r3
 80049e2:	d302      	bcc.n	80049ea <UART_WaitOnFlagUntilTimeout+0x30>
 80049e4:	6a3b      	ldr	r3, [r7, #32]
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d101      	bne.n	80049ee <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80049ea:	2303      	movs	r3, #3
 80049ec:	e03a      	b.n	8004a64 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	68db      	ldr	r3, [r3, #12]
 80049f4:	f003 0304 	and.w	r3, r3, #4
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d023      	beq.n	8004a44 <UART_WaitOnFlagUntilTimeout+0x8a>
 80049fc:	68bb      	ldr	r3, [r7, #8]
 80049fe:	2b80      	cmp	r3, #128	@ 0x80
 8004a00:	d020      	beq.n	8004a44 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004a02:	68bb      	ldr	r3, [r7, #8]
 8004a04:	2b40      	cmp	r3, #64	@ 0x40
 8004a06:	d01d      	beq.n	8004a44 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	f003 0308 	and.w	r3, r3, #8
 8004a12:	2b08      	cmp	r3, #8
 8004a14:	d116      	bne.n	8004a44 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8004a16:	2300      	movs	r3, #0
 8004a18:	617b      	str	r3, [r7, #20]
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	617b      	str	r3, [r7, #20]
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	685b      	ldr	r3, [r3, #4]
 8004a28:	617b      	str	r3, [r7, #20]
 8004a2a:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004a2c:	68f8      	ldr	r0, [r7, #12]
 8004a2e:	f000 f856 	bl	8004ade <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	2208      	movs	r2, #8
 8004a36:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	2200      	movs	r2, #0
 8004a3c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8004a40:	2301      	movs	r3, #1
 8004a42:	e00f      	b.n	8004a64 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	681a      	ldr	r2, [r3, #0]
 8004a4a:	68bb      	ldr	r3, [r7, #8]
 8004a4c:	4013      	ands	r3, r2
 8004a4e:	68ba      	ldr	r2, [r7, #8]
 8004a50:	429a      	cmp	r2, r3
 8004a52:	bf0c      	ite	eq
 8004a54:	2301      	moveq	r3, #1
 8004a56:	2300      	movne	r3, #0
 8004a58:	b2db      	uxtb	r3, r3
 8004a5a:	461a      	mov	r2, r3
 8004a5c:	79fb      	ldrb	r3, [r7, #7]
 8004a5e:	429a      	cmp	r2, r3
 8004a60:	d0b4      	beq.n	80049cc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004a62:	2300      	movs	r3, #0
}
 8004a64:	4618      	mov	r0, r3
 8004a66:	3718      	adds	r7, #24
 8004a68:	46bd      	mov	sp, r7
 8004a6a:	bd80      	pop	{r7, pc}

08004a6c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004a6c:	b480      	push	{r7}
 8004a6e:	b085      	sub	sp, #20
 8004a70:	af00      	add	r7, sp, #0
 8004a72:	60f8      	str	r0, [r7, #12]
 8004a74:	60b9      	str	r1, [r7, #8]
 8004a76:	4613      	mov	r3, r2
 8004a78:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	68ba      	ldr	r2, [r7, #8]
 8004a7e:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	88fa      	ldrh	r2, [r7, #6]
 8004a84:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	88fa      	ldrh	r2, [r7, #6]
 8004a8a:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	2200      	movs	r2, #0
 8004a90:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	2222      	movs	r2, #34	@ 0x22
 8004a96:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	691b      	ldr	r3, [r3, #16]
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d007      	beq.n	8004ab2 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	68da      	ldr	r2, [r3, #12]
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004ab0:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	695a      	ldr	r2, [r3, #20]
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	f042 0201 	orr.w	r2, r2, #1
 8004ac0:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	68da      	ldr	r2, [r3, #12]
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	f042 0220 	orr.w	r2, r2, #32
 8004ad0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004ad2:	2300      	movs	r3, #0
}
 8004ad4:	4618      	mov	r0, r3
 8004ad6:	3714      	adds	r7, #20
 8004ad8:	46bd      	mov	sp, r7
 8004ada:	bc80      	pop	{r7}
 8004adc:	4770      	bx	lr

08004ade <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004ade:	b480      	push	{r7}
 8004ae0:	b095      	sub	sp, #84	@ 0x54
 8004ae2:	af00      	add	r7, sp, #0
 8004ae4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	330c      	adds	r3, #12
 8004aec:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004aee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004af0:	e853 3f00 	ldrex	r3, [r3]
 8004af4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004af6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004af8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004afc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	330c      	adds	r3, #12
 8004b04:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004b06:	643a      	str	r2, [r7, #64]	@ 0x40
 8004b08:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b0a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004b0c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004b0e:	e841 2300 	strex	r3, r2, [r1]
 8004b12:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004b14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d1e5      	bne.n	8004ae6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	3314      	adds	r3, #20
 8004b20:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b22:	6a3b      	ldr	r3, [r7, #32]
 8004b24:	e853 3f00 	ldrex	r3, [r3]
 8004b28:	61fb      	str	r3, [r7, #28]
   return(result);
 8004b2a:	69fb      	ldr	r3, [r7, #28]
 8004b2c:	f023 0301 	bic.w	r3, r3, #1
 8004b30:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	3314      	adds	r3, #20
 8004b38:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004b3a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004b3c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b3e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004b40:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004b42:	e841 2300 	strex	r3, r2, [r1]
 8004b46:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004b48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d1e5      	bne.n	8004b1a <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b52:	2b01      	cmp	r3, #1
 8004b54:	d119      	bne.n	8004b8a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	330c      	adds	r3, #12
 8004b5c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	e853 3f00 	ldrex	r3, [r3]
 8004b64:	60bb      	str	r3, [r7, #8]
   return(result);
 8004b66:	68bb      	ldr	r3, [r7, #8]
 8004b68:	f023 0310 	bic.w	r3, r3, #16
 8004b6c:	647b      	str	r3, [r7, #68]	@ 0x44
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	330c      	adds	r3, #12
 8004b74:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004b76:	61ba      	str	r2, [r7, #24]
 8004b78:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b7a:	6979      	ldr	r1, [r7, #20]
 8004b7c:	69ba      	ldr	r2, [r7, #24]
 8004b7e:	e841 2300 	strex	r3, r2, [r1]
 8004b82:	613b      	str	r3, [r7, #16]
   return(result);
 8004b84:	693b      	ldr	r3, [r7, #16]
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d1e5      	bne.n	8004b56 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	2220      	movs	r2, #32
 8004b8e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	2200      	movs	r2, #0
 8004b96:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8004b98:	bf00      	nop
 8004b9a:	3754      	adds	r7, #84	@ 0x54
 8004b9c:	46bd      	mov	sp, r7
 8004b9e:	bc80      	pop	{r7}
 8004ba0:	4770      	bx	lr

08004ba2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004ba2:	b580      	push	{r7, lr}
 8004ba4:	b084      	sub	sp, #16
 8004ba6:	af00      	add	r7, sp, #0
 8004ba8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bae:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	2200      	movs	r2, #0
 8004bb4:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	2200      	movs	r2, #0
 8004bba:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004bbc:	68f8      	ldr	r0, [r7, #12]
 8004bbe:	f7ff fee8 	bl	8004992 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004bc2:	bf00      	nop
 8004bc4:	3710      	adds	r7, #16
 8004bc6:	46bd      	mov	sp, r7
 8004bc8:	bd80      	pop	{r7, pc}

08004bca <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004bca:	b480      	push	{r7}
 8004bcc:	b085      	sub	sp, #20
 8004bce:	af00      	add	r7, sp, #0
 8004bd0:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004bd8:	b2db      	uxtb	r3, r3
 8004bda:	2b21      	cmp	r3, #33	@ 0x21
 8004bdc:	d13e      	bne.n	8004c5c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	689b      	ldr	r3, [r3, #8]
 8004be2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004be6:	d114      	bne.n	8004c12 <UART_Transmit_IT+0x48>
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	691b      	ldr	r3, [r3, #16]
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d110      	bne.n	8004c12 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	6a1b      	ldr	r3, [r3, #32]
 8004bf4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	881b      	ldrh	r3, [r3, #0]
 8004bfa:	461a      	mov	r2, r3
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004c04:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	6a1b      	ldr	r3, [r3, #32]
 8004c0a:	1c9a      	adds	r2, r3, #2
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	621a      	str	r2, [r3, #32]
 8004c10:	e008      	b.n	8004c24 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	6a1b      	ldr	r3, [r3, #32]
 8004c16:	1c59      	adds	r1, r3, #1
 8004c18:	687a      	ldr	r2, [r7, #4]
 8004c1a:	6211      	str	r1, [r2, #32]
 8004c1c:	781a      	ldrb	r2, [r3, #0]
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004c28:	b29b      	uxth	r3, r3
 8004c2a:	3b01      	subs	r3, #1
 8004c2c:	b29b      	uxth	r3, r3
 8004c2e:	687a      	ldr	r2, [r7, #4]
 8004c30:	4619      	mov	r1, r3
 8004c32:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d10f      	bne.n	8004c58 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	68da      	ldr	r2, [r3, #12]
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004c46:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	68da      	ldr	r2, [r3, #12]
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004c56:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004c58:	2300      	movs	r3, #0
 8004c5a:	e000      	b.n	8004c5e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004c5c:	2302      	movs	r3, #2
  }
}
 8004c5e:	4618      	mov	r0, r3
 8004c60:	3714      	adds	r7, #20
 8004c62:	46bd      	mov	sp, r7
 8004c64:	bc80      	pop	{r7}
 8004c66:	4770      	bx	lr

08004c68 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004c68:	b580      	push	{r7, lr}
 8004c6a:	b082      	sub	sp, #8
 8004c6c:	af00      	add	r7, sp, #0
 8004c6e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	68da      	ldr	r2, [r3, #12]
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004c7e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	2220      	movs	r2, #32
 8004c84:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004c88:	6878      	ldr	r0, [r7, #4]
 8004c8a:	f7ff fe79 	bl	8004980 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004c8e:	2300      	movs	r3, #0
}
 8004c90:	4618      	mov	r0, r3
 8004c92:	3708      	adds	r7, #8
 8004c94:	46bd      	mov	sp, r7
 8004c96:	bd80      	pop	{r7, pc}

08004c98 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004c98:	b580      	push	{r7, lr}
 8004c9a:	b08c      	sub	sp, #48	@ 0x30
 8004c9c:	af00      	add	r7, sp, #0
 8004c9e:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004ca6:	b2db      	uxtb	r3, r3
 8004ca8:	2b22      	cmp	r3, #34	@ 0x22
 8004caa:	f040 80ae 	bne.w	8004e0a <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	689b      	ldr	r3, [r3, #8]
 8004cb2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004cb6:	d117      	bne.n	8004ce8 <UART_Receive_IT+0x50>
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	691b      	ldr	r3, [r3, #16]
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d113      	bne.n	8004ce8 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004cc0:	2300      	movs	r3, #0
 8004cc2:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004cc8:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	685b      	ldr	r3, [r3, #4]
 8004cd0:	b29b      	uxth	r3, r3
 8004cd2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004cd6:	b29a      	uxth	r2, r3
 8004cd8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004cda:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ce0:	1c9a      	adds	r2, r3, #2
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	629a      	str	r2, [r3, #40]	@ 0x28
 8004ce6:	e026      	b.n	8004d36 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004cec:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8004cee:	2300      	movs	r3, #0
 8004cf0:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	689b      	ldr	r3, [r3, #8]
 8004cf6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004cfa:	d007      	beq.n	8004d0c <UART_Receive_IT+0x74>
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	689b      	ldr	r3, [r3, #8]
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d10a      	bne.n	8004d1a <UART_Receive_IT+0x82>
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	691b      	ldr	r3, [r3, #16]
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d106      	bne.n	8004d1a <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	685b      	ldr	r3, [r3, #4]
 8004d12:	b2da      	uxtb	r2, r3
 8004d14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004d16:	701a      	strb	r2, [r3, #0]
 8004d18:	e008      	b.n	8004d2c <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	685b      	ldr	r3, [r3, #4]
 8004d20:	b2db      	uxtb	r3, r3
 8004d22:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004d26:	b2da      	uxtb	r2, r3
 8004d28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004d2a:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d30:	1c5a      	adds	r2, r3, #1
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004d3a:	b29b      	uxth	r3, r3
 8004d3c:	3b01      	subs	r3, #1
 8004d3e:	b29b      	uxth	r3, r3
 8004d40:	687a      	ldr	r2, [r7, #4]
 8004d42:	4619      	mov	r1, r3
 8004d44:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d15d      	bne.n	8004e06 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	68da      	ldr	r2, [r3, #12]
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	f022 0220 	bic.w	r2, r2, #32
 8004d58:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	68da      	ldr	r2, [r3, #12]
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004d68:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	695a      	ldr	r2, [r3, #20]
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	f022 0201 	bic.w	r2, r2, #1
 8004d78:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	2220      	movs	r2, #32
 8004d7e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	2200      	movs	r2, #0
 8004d86:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d8c:	2b01      	cmp	r3, #1
 8004d8e:	d135      	bne.n	8004dfc <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	2200      	movs	r2, #0
 8004d94:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	330c      	adds	r3, #12
 8004d9c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d9e:	697b      	ldr	r3, [r7, #20]
 8004da0:	e853 3f00 	ldrex	r3, [r3]
 8004da4:	613b      	str	r3, [r7, #16]
   return(result);
 8004da6:	693b      	ldr	r3, [r7, #16]
 8004da8:	f023 0310 	bic.w	r3, r3, #16
 8004dac:	627b      	str	r3, [r7, #36]	@ 0x24
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	330c      	adds	r3, #12
 8004db4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004db6:	623a      	str	r2, [r7, #32]
 8004db8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dba:	69f9      	ldr	r1, [r7, #28]
 8004dbc:	6a3a      	ldr	r2, [r7, #32]
 8004dbe:	e841 2300 	strex	r3, r2, [r1]
 8004dc2:	61bb      	str	r3, [r7, #24]
   return(result);
 8004dc4:	69bb      	ldr	r3, [r7, #24]
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d1e5      	bne.n	8004d96 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	f003 0310 	and.w	r3, r3, #16
 8004dd4:	2b10      	cmp	r3, #16
 8004dd6:	d10a      	bne.n	8004dee <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004dd8:	2300      	movs	r3, #0
 8004dda:	60fb      	str	r3, [r7, #12]
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	60fb      	str	r3, [r7, #12]
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	685b      	ldr	r3, [r3, #4]
 8004dea:	60fb      	str	r3, [r7, #12]
 8004dec:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004df2:	4619      	mov	r1, r3
 8004df4:	6878      	ldr	r0, [r7, #4]
 8004df6:	f7ff fdd5 	bl	80049a4 <HAL_UARTEx_RxEventCallback>
 8004dfa:	e002      	b.n	8004e02 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004dfc:	6878      	ldr	r0, [r7, #4]
 8004dfe:	f7fc f9df 	bl	80011c0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004e02:	2300      	movs	r3, #0
 8004e04:	e002      	b.n	8004e0c <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8004e06:	2300      	movs	r3, #0
 8004e08:	e000      	b.n	8004e0c <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8004e0a:	2302      	movs	r3, #2
  }
}
 8004e0c:	4618      	mov	r0, r3
 8004e0e:	3730      	adds	r7, #48	@ 0x30
 8004e10:	46bd      	mov	sp, r7
 8004e12:	bd80      	pop	{r7, pc}

08004e14 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004e14:	b580      	push	{r7, lr}
 8004e16:	b084      	sub	sp, #16
 8004e18:	af00      	add	r7, sp, #0
 8004e1a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	691b      	ldr	r3, [r3, #16]
 8004e22:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	68da      	ldr	r2, [r3, #12]
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	430a      	orrs	r2, r1
 8004e30:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	689a      	ldr	r2, [r3, #8]
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	691b      	ldr	r3, [r3, #16]
 8004e3a:	431a      	orrs	r2, r3
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	695b      	ldr	r3, [r3, #20]
 8004e40:	4313      	orrs	r3, r2
 8004e42:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	68db      	ldr	r3, [r3, #12]
 8004e4a:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8004e4e:	f023 030c 	bic.w	r3, r3, #12
 8004e52:	687a      	ldr	r2, [r7, #4]
 8004e54:	6812      	ldr	r2, [r2, #0]
 8004e56:	68b9      	ldr	r1, [r7, #8]
 8004e58:	430b      	orrs	r3, r1
 8004e5a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	695b      	ldr	r3, [r3, #20]
 8004e62:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	699a      	ldr	r2, [r3, #24]
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	430a      	orrs	r2, r1
 8004e70:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	4a2c      	ldr	r2, [pc, #176]	@ (8004f28 <UART_SetConfig+0x114>)
 8004e78:	4293      	cmp	r3, r2
 8004e7a:	d103      	bne.n	8004e84 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004e7c:	f7fe ff4e 	bl	8003d1c <HAL_RCC_GetPCLK2Freq>
 8004e80:	60f8      	str	r0, [r7, #12]
 8004e82:	e002      	b.n	8004e8a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004e84:	f7fe ff36 	bl	8003cf4 <HAL_RCC_GetPCLK1Freq>
 8004e88:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004e8a:	68fa      	ldr	r2, [r7, #12]
 8004e8c:	4613      	mov	r3, r2
 8004e8e:	009b      	lsls	r3, r3, #2
 8004e90:	4413      	add	r3, r2
 8004e92:	009a      	lsls	r2, r3, #2
 8004e94:	441a      	add	r2, r3
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	685b      	ldr	r3, [r3, #4]
 8004e9a:	009b      	lsls	r3, r3, #2
 8004e9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ea0:	4a22      	ldr	r2, [pc, #136]	@ (8004f2c <UART_SetConfig+0x118>)
 8004ea2:	fba2 2303 	umull	r2, r3, r2, r3
 8004ea6:	095b      	lsrs	r3, r3, #5
 8004ea8:	0119      	lsls	r1, r3, #4
 8004eaa:	68fa      	ldr	r2, [r7, #12]
 8004eac:	4613      	mov	r3, r2
 8004eae:	009b      	lsls	r3, r3, #2
 8004eb0:	4413      	add	r3, r2
 8004eb2:	009a      	lsls	r2, r3, #2
 8004eb4:	441a      	add	r2, r3
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	685b      	ldr	r3, [r3, #4]
 8004eba:	009b      	lsls	r3, r3, #2
 8004ebc:	fbb2 f2f3 	udiv	r2, r2, r3
 8004ec0:	4b1a      	ldr	r3, [pc, #104]	@ (8004f2c <UART_SetConfig+0x118>)
 8004ec2:	fba3 0302 	umull	r0, r3, r3, r2
 8004ec6:	095b      	lsrs	r3, r3, #5
 8004ec8:	2064      	movs	r0, #100	@ 0x64
 8004eca:	fb00 f303 	mul.w	r3, r0, r3
 8004ece:	1ad3      	subs	r3, r2, r3
 8004ed0:	011b      	lsls	r3, r3, #4
 8004ed2:	3332      	adds	r3, #50	@ 0x32
 8004ed4:	4a15      	ldr	r2, [pc, #84]	@ (8004f2c <UART_SetConfig+0x118>)
 8004ed6:	fba2 2303 	umull	r2, r3, r2, r3
 8004eda:	095b      	lsrs	r3, r3, #5
 8004edc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004ee0:	4419      	add	r1, r3
 8004ee2:	68fa      	ldr	r2, [r7, #12]
 8004ee4:	4613      	mov	r3, r2
 8004ee6:	009b      	lsls	r3, r3, #2
 8004ee8:	4413      	add	r3, r2
 8004eea:	009a      	lsls	r2, r3, #2
 8004eec:	441a      	add	r2, r3
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	685b      	ldr	r3, [r3, #4]
 8004ef2:	009b      	lsls	r3, r3, #2
 8004ef4:	fbb2 f2f3 	udiv	r2, r2, r3
 8004ef8:	4b0c      	ldr	r3, [pc, #48]	@ (8004f2c <UART_SetConfig+0x118>)
 8004efa:	fba3 0302 	umull	r0, r3, r3, r2
 8004efe:	095b      	lsrs	r3, r3, #5
 8004f00:	2064      	movs	r0, #100	@ 0x64
 8004f02:	fb00 f303 	mul.w	r3, r0, r3
 8004f06:	1ad3      	subs	r3, r2, r3
 8004f08:	011b      	lsls	r3, r3, #4
 8004f0a:	3332      	adds	r3, #50	@ 0x32
 8004f0c:	4a07      	ldr	r2, [pc, #28]	@ (8004f2c <UART_SetConfig+0x118>)
 8004f0e:	fba2 2303 	umull	r2, r3, r2, r3
 8004f12:	095b      	lsrs	r3, r3, #5
 8004f14:	f003 020f 	and.w	r2, r3, #15
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	440a      	add	r2, r1
 8004f1e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004f20:	bf00      	nop
 8004f22:	3710      	adds	r7, #16
 8004f24:	46bd      	mov	sp, r7
 8004f26:	bd80      	pop	{r7, pc}
 8004f28:	40013800 	.word	0x40013800
 8004f2c:	51eb851f 	.word	0x51eb851f

08004f30 <__NVIC_SetPriority>:
{
 8004f30:	b480      	push	{r7}
 8004f32:	b083      	sub	sp, #12
 8004f34:	af00      	add	r7, sp, #0
 8004f36:	4603      	mov	r3, r0
 8004f38:	6039      	str	r1, [r7, #0]
 8004f3a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004f3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	db0a      	blt.n	8004f5a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004f44:	683b      	ldr	r3, [r7, #0]
 8004f46:	b2da      	uxtb	r2, r3
 8004f48:	490c      	ldr	r1, [pc, #48]	@ (8004f7c <__NVIC_SetPriority+0x4c>)
 8004f4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004f4e:	0112      	lsls	r2, r2, #4
 8004f50:	b2d2      	uxtb	r2, r2
 8004f52:	440b      	add	r3, r1
 8004f54:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8004f58:	e00a      	b.n	8004f70 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004f5a:	683b      	ldr	r3, [r7, #0]
 8004f5c:	b2da      	uxtb	r2, r3
 8004f5e:	4908      	ldr	r1, [pc, #32]	@ (8004f80 <__NVIC_SetPriority+0x50>)
 8004f60:	79fb      	ldrb	r3, [r7, #7]
 8004f62:	f003 030f 	and.w	r3, r3, #15
 8004f66:	3b04      	subs	r3, #4
 8004f68:	0112      	lsls	r2, r2, #4
 8004f6a:	b2d2      	uxtb	r2, r2
 8004f6c:	440b      	add	r3, r1
 8004f6e:	761a      	strb	r2, [r3, #24]
}
 8004f70:	bf00      	nop
 8004f72:	370c      	adds	r7, #12
 8004f74:	46bd      	mov	sp, r7
 8004f76:	bc80      	pop	{r7}
 8004f78:	4770      	bx	lr
 8004f7a:	bf00      	nop
 8004f7c:	e000e100 	.word	0xe000e100
 8004f80:	e000ed00 	.word	0xe000ed00

08004f84 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8004f84:	b580      	push	{r7, lr}
 8004f86:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8004f88:	4b05      	ldr	r3, [pc, #20]	@ (8004fa0 <SysTick_Handler+0x1c>)
 8004f8a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8004f8c:	f002 f994 	bl	80072b8 <xTaskGetSchedulerState>
 8004f90:	4603      	mov	r3, r0
 8004f92:	2b01      	cmp	r3, #1
 8004f94:	d001      	beq.n	8004f9a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8004f96:	f003 f837 	bl	8008008 <xPortSysTickHandler>
  }
}
 8004f9a:	bf00      	nop
 8004f9c:	bd80      	pop	{r7, pc}
 8004f9e:	bf00      	nop
 8004fa0:	e000e010 	.word	0xe000e010

08004fa4 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8004fa4:	b580      	push	{r7, lr}
 8004fa6:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8004fa8:	2100      	movs	r1, #0
 8004faa:	f06f 0004 	mvn.w	r0, #4
 8004fae:	f7ff ffbf 	bl	8004f30 <__NVIC_SetPriority>
#endif
}
 8004fb2:	bf00      	nop
 8004fb4:	bd80      	pop	{r7, pc}
	...

08004fb8 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8004fb8:	b480      	push	{r7}
 8004fba:	b083      	sub	sp, #12
 8004fbc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004fbe:	f3ef 8305 	mrs	r3, IPSR
 8004fc2:	603b      	str	r3, [r7, #0]
  return(result);
 8004fc4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d003      	beq.n	8004fd2 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8004fca:	f06f 0305 	mvn.w	r3, #5
 8004fce:	607b      	str	r3, [r7, #4]
 8004fd0:	e00c      	b.n	8004fec <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8004fd2:	4b09      	ldr	r3, [pc, #36]	@ (8004ff8 <osKernelInitialize+0x40>)
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d105      	bne.n	8004fe6 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8004fda:	4b07      	ldr	r3, [pc, #28]	@ (8004ff8 <osKernelInitialize+0x40>)
 8004fdc:	2201      	movs	r2, #1
 8004fde:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8004fe0:	2300      	movs	r3, #0
 8004fe2:	607b      	str	r3, [r7, #4]
 8004fe4:	e002      	b.n	8004fec <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8004fe6:	f04f 33ff 	mov.w	r3, #4294967295
 8004fea:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004fec:	687b      	ldr	r3, [r7, #4]
}
 8004fee:	4618      	mov	r0, r3
 8004ff0:	370c      	adds	r7, #12
 8004ff2:	46bd      	mov	sp, r7
 8004ff4:	bc80      	pop	{r7}
 8004ff6:	4770      	bx	lr
 8004ff8:	200003a8 	.word	0x200003a8

08004ffc <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8004ffc:	b580      	push	{r7, lr}
 8004ffe:	b082      	sub	sp, #8
 8005000:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005002:	f3ef 8305 	mrs	r3, IPSR
 8005006:	603b      	str	r3, [r7, #0]
  return(result);
 8005008:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800500a:	2b00      	cmp	r3, #0
 800500c:	d003      	beq.n	8005016 <osKernelStart+0x1a>
    stat = osErrorISR;
 800500e:	f06f 0305 	mvn.w	r3, #5
 8005012:	607b      	str	r3, [r7, #4]
 8005014:	e010      	b.n	8005038 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8005016:	4b0b      	ldr	r3, [pc, #44]	@ (8005044 <osKernelStart+0x48>)
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	2b01      	cmp	r3, #1
 800501c:	d109      	bne.n	8005032 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800501e:	f7ff ffc1 	bl	8004fa4 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8005022:	4b08      	ldr	r3, [pc, #32]	@ (8005044 <osKernelStart+0x48>)
 8005024:	2202      	movs	r2, #2
 8005026:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8005028:	f001 fcd4 	bl	80069d4 <vTaskStartScheduler>
      stat = osOK;
 800502c:	2300      	movs	r3, #0
 800502e:	607b      	str	r3, [r7, #4]
 8005030:	e002      	b.n	8005038 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8005032:	f04f 33ff 	mov.w	r3, #4294967295
 8005036:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005038:	687b      	ldr	r3, [r7, #4]
}
 800503a:	4618      	mov	r0, r3
 800503c:	3708      	adds	r7, #8
 800503e:	46bd      	mov	sp, r7
 8005040:	bd80      	pop	{r7, pc}
 8005042:	bf00      	nop
 8005044:	200003a8 	.word	0x200003a8

08005048 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8005048:	b580      	push	{r7, lr}
 800504a:	b08e      	sub	sp, #56	@ 0x38
 800504c:	af04      	add	r7, sp, #16
 800504e:	60f8      	str	r0, [r7, #12]
 8005050:	60b9      	str	r1, [r7, #8]
 8005052:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8005054:	2300      	movs	r3, #0
 8005056:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005058:	f3ef 8305 	mrs	r3, IPSR
 800505c:	617b      	str	r3, [r7, #20]
  return(result);
 800505e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8005060:	2b00      	cmp	r3, #0
 8005062:	d17e      	bne.n	8005162 <osThreadNew+0x11a>
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	2b00      	cmp	r3, #0
 8005068:	d07b      	beq.n	8005162 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800506a:	2380      	movs	r3, #128	@ 0x80
 800506c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800506e:	2318      	movs	r3, #24
 8005070:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8005072:	2300      	movs	r3, #0
 8005074:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8005076:	f04f 33ff 	mov.w	r3, #4294967295
 800507a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	2b00      	cmp	r3, #0
 8005080:	d045      	beq.n	800510e <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	2b00      	cmp	r3, #0
 8005088:	d002      	beq.n	8005090 <osThreadNew+0x48>
        name = attr->name;
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	699b      	ldr	r3, [r3, #24]
 8005094:	2b00      	cmp	r3, #0
 8005096:	d002      	beq.n	800509e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	699b      	ldr	r3, [r3, #24]
 800509c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800509e:	69fb      	ldr	r3, [r7, #28]
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d008      	beq.n	80050b6 <osThreadNew+0x6e>
 80050a4:	69fb      	ldr	r3, [r7, #28]
 80050a6:	2b38      	cmp	r3, #56	@ 0x38
 80050a8:	d805      	bhi.n	80050b6 <osThreadNew+0x6e>
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	685b      	ldr	r3, [r3, #4]
 80050ae:	f003 0301 	and.w	r3, r3, #1
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d001      	beq.n	80050ba <osThreadNew+0x72>
        return (NULL);
 80050b6:	2300      	movs	r3, #0
 80050b8:	e054      	b.n	8005164 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	695b      	ldr	r3, [r3, #20]
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d003      	beq.n	80050ca <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	695b      	ldr	r3, [r3, #20]
 80050c6:	089b      	lsrs	r3, r3, #2
 80050c8:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	689b      	ldr	r3, [r3, #8]
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d00e      	beq.n	80050f0 <osThreadNew+0xa8>
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	68db      	ldr	r3, [r3, #12]
 80050d6:	2b5b      	cmp	r3, #91	@ 0x5b
 80050d8:	d90a      	bls.n	80050f0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d006      	beq.n	80050f0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	695b      	ldr	r3, [r3, #20]
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d002      	beq.n	80050f0 <osThreadNew+0xa8>
        mem = 1;
 80050ea:	2301      	movs	r3, #1
 80050ec:	61bb      	str	r3, [r7, #24]
 80050ee:	e010      	b.n	8005112 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	689b      	ldr	r3, [r3, #8]
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d10c      	bne.n	8005112 <osThreadNew+0xca>
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	68db      	ldr	r3, [r3, #12]
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d108      	bne.n	8005112 <osThreadNew+0xca>
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	691b      	ldr	r3, [r3, #16]
 8005104:	2b00      	cmp	r3, #0
 8005106:	d104      	bne.n	8005112 <osThreadNew+0xca>
          mem = 0;
 8005108:	2300      	movs	r3, #0
 800510a:	61bb      	str	r3, [r7, #24]
 800510c:	e001      	b.n	8005112 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800510e:	2300      	movs	r3, #0
 8005110:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8005112:	69bb      	ldr	r3, [r7, #24]
 8005114:	2b01      	cmp	r3, #1
 8005116:	d110      	bne.n	800513a <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800511c:	687a      	ldr	r2, [r7, #4]
 800511e:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005120:	9202      	str	r2, [sp, #8]
 8005122:	9301      	str	r3, [sp, #4]
 8005124:	69fb      	ldr	r3, [r7, #28]
 8005126:	9300      	str	r3, [sp, #0]
 8005128:	68bb      	ldr	r3, [r7, #8]
 800512a:	6a3a      	ldr	r2, [r7, #32]
 800512c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800512e:	68f8      	ldr	r0, [r7, #12]
 8005130:	f001 fa74 	bl	800661c <xTaskCreateStatic>
 8005134:	4603      	mov	r3, r0
 8005136:	613b      	str	r3, [r7, #16]
 8005138:	e013      	b.n	8005162 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800513a:	69bb      	ldr	r3, [r7, #24]
 800513c:	2b00      	cmp	r3, #0
 800513e:	d110      	bne.n	8005162 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8005140:	6a3b      	ldr	r3, [r7, #32]
 8005142:	b29a      	uxth	r2, r3
 8005144:	f107 0310 	add.w	r3, r7, #16
 8005148:	9301      	str	r3, [sp, #4]
 800514a:	69fb      	ldr	r3, [r7, #28]
 800514c:	9300      	str	r3, [sp, #0]
 800514e:	68bb      	ldr	r3, [r7, #8]
 8005150:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005152:	68f8      	ldr	r0, [r7, #12]
 8005154:	f001 fac2 	bl	80066dc <xTaskCreate>
 8005158:	4603      	mov	r3, r0
 800515a:	2b01      	cmp	r3, #1
 800515c:	d001      	beq.n	8005162 <osThreadNew+0x11a>
            hTask = NULL;
 800515e:	2300      	movs	r3, #0
 8005160:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8005162:	693b      	ldr	r3, [r7, #16]
}
 8005164:	4618      	mov	r0, r3
 8005166:	3728      	adds	r7, #40	@ 0x28
 8005168:	46bd      	mov	sp, r7
 800516a:	bd80      	pop	{r7, pc}

0800516c <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800516c:	b580      	push	{r7, lr}
 800516e:	b084      	sub	sp, #16
 8005170:	af00      	add	r7, sp, #0
 8005172:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005174:	f3ef 8305 	mrs	r3, IPSR
 8005178:	60bb      	str	r3, [r7, #8]
  return(result);
 800517a:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800517c:	2b00      	cmp	r3, #0
 800517e:	d003      	beq.n	8005188 <osDelay+0x1c>
    stat = osErrorISR;
 8005180:	f06f 0305 	mvn.w	r3, #5
 8005184:	60fb      	str	r3, [r7, #12]
 8005186:	e007      	b.n	8005198 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8005188:	2300      	movs	r3, #0
 800518a:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	2b00      	cmp	r3, #0
 8005190:	d002      	beq.n	8005198 <osDelay+0x2c>
      vTaskDelay(ticks);
 8005192:	6878      	ldr	r0, [r7, #4]
 8005194:	f001 fbe8 	bl	8006968 <vTaskDelay>
    }
  }

  return (stat);
 8005198:	68fb      	ldr	r3, [r7, #12]
}
 800519a:	4618      	mov	r0, r3
 800519c:	3710      	adds	r7, #16
 800519e:	46bd      	mov	sp, r7
 80051a0:	bd80      	pop	{r7, pc}

080051a2 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 80051a2:	b580      	push	{r7, lr}
 80051a4:	b08a      	sub	sp, #40	@ 0x28
 80051a6:	af02      	add	r7, sp, #8
 80051a8:	60f8      	str	r0, [r7, #12]
 80051aa:	60b9      	str	r1, [r7, #8]
 80051ac:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 80051ae:	2300      	movs	r3, #0
 80051b0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80051b2:	f3ef 8305 	mrs	r3, IPSR
 80051b6:	613b      	str	r3, [r7, #16]
  return(result);
 80051b8:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d175      	bne.n	80052aa <osSemaphoreNew+0x108>
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d072      	beq.n	80052aa <osSemaphoreNew+0x108>
 80051c4:	68ba      	ldr	r2, [r7, #8]
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	429a      	cmp	r2, r3
 80051ca:	d86e      	bhi.n	80052aa <osSemaphoreNew+0x108>
    mem = -1;
 80051cc:	f04f 33ff 	mov.w	r3, #4294967295
 80051d0:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d015      	beq.n	8005204 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	689b      	ldr	r3, [r3, #8]
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d006      	beq.n	80051ee <osSemaphoreNew+0x4c>
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	68db      	ldr	r3, [r3, #12]
 80051e4:	2b4f      	cmp	r3, #79	@ 0x4f
 80051e6:	d902      	bls.n	80051ee <osSemaphoreNew+0x4c>
        mem = 1;
 80051e8:	2301      	movs	r3, #1
 80051ea:	61bb      	str	r3, [r7, #24]
 80051ec:	e00c      	b.n	8005208 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	689b      	ldr	r3, [r3, #8]
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d108      	bne.n	8005208 <osSemaphoreNew+0x66>
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	68db      	ldr	r3, [r3, #12]
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d104      	bne.n	8005208 <osSemaphoreNew+0x66>
          mem = 0;
 80051fe:	2300      	movs	r3, #0
 8005200:	61bb      	str	r3, [r7, #24]
 8005202:	e001      	b.n	8005208 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 8005204:	2300      	movs	r3, #0
 8005206:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 8005208:	69bb      	ldr	r3, [r7, #24]
 800520a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800520e:	d04c      	beq.n	80052aa <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	2b01      	cmp	r3, #1
 8005214:	d128      	bne.n	8005268 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 8005216:	69bb      	ldr	r3, [r7, #24]
 8005218:	2b01      	cmp	r3, #1
 800521a:	d10a      	bne.n	8005232 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	689b      	ldr	r3, [r3, #8]
 8005220:	2203      	movs	r2, #3
 8005222:	9200      	str	r2, [sp, #0]
 8005224:	2200      	movs	r2, #0
 8005226:	2100      	movs	r1, #0
 8005228:	2001      	movs	r0, #1
 800522a:	f000 fa37 	bl	800569c <xQueueGenericCreateStatic>
 800522e:	61f8      	str	r0, [r7, #28]
 8005230:	e005      	b.n	800523e <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 8005232:	2203      	movs	r2, #3
 8005234:	2100      	movs	r1, #0
 8005236:	2001      	movs	r0, #1
 8005238:	f000 faad 	bl	8005796 <xQueueGenericCreate>
 800523c:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800523e:	69fb      	ldr	r3, [r7, #28]
 8005240:	2b00      	cmp	r3, #0
 8005242:	d022      	beq.n	800528a <osSemaphoreNew+0xe8>
 8005244:	68bb      	ldr	r3, [r7, #8]
 8005246:	2b00      	cmp	r3, #0
 8005248:	d01f      	beq.n	800528a <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800524a:	2300      	movs	r3, #0
 800524c:	2200      	movs	r2, #0
 800524e:	2100      	movs	r1, #0
 8005250:	69f8      	ldr	r0, [r7, #28]
 8005252:	f000 fb6d 	bl	8005930 <xQueueGenericSend>
 8005256:	4603      	mov	r3, r0
 8005258:	2b01      	cmp	r3, #1
 800525a:	d016      	beq.n	800528a <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 800525c:	69f8      	ldr	r0, [r7, #28]
 800525e:	f001 f80b 	bl	8006278 <vQueueDelete>
            hSemaphore = NULL;
 8005262:	2300      	movs	r3, #0
 8005264:	61fb      	str	r3, [r7, #28]
 8005266:	e010      	b.n	800528a <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 8005268:	69bb      	ldr	r3, [r7, #24]
 800526a:	2b01      	cmp	r3, #1
 800526c:	d108      	bne.n	8005280 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	689b      	ldr	r3, [r3, #8]
 8005272:	461a      	mov	r2, r3
 8005274:	68b9      	ldr	r1, [r7, #8]
 8005276:	68f8      	ldr	r0, [r7, #12]
 8005278:	f000 faeb 	bl	8005852 <xQueueCreateCountingSemaphoreStatic>
 800527c:	61f8      	str	r0, [r7, #28]
 800527e:	e004      	b.n	800528a <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8005280:	68b9      	ldr	r1, [r7, #8]
 8005282:	68f8      	ldr	r0, [r7, #12]
 8005284:	f000 fb1e 	bl	80058c4 <xQueueCreateCountingSemaphore>
 8005288:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800528a:	69fb      	ldr	r3, [r7, #28]
 800528c:	2b00      	cmp	r3, #0
 800528e:	d00c      	beq.n	80052aa <osSemaphoreNew+0x108>
        if (attr != NULL) {
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	2b00      	cmp	r3, #0
 8005294:	d003      	beq.n	800529e <osSemaphoreNew+0xfc>
          name = attr->name;
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	617b      	str	r3, [r7, #20]
 800529c:	e001      	b.n	80052a2 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 800529e:	2300      	movs	r3, #0
 80052a0:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 80052a2:	6979      	ldr	r1, [r7, #20]
 80052a4:	69f8      	ldr	r0, [r7, #28]
 80052a6:	f001 f933 	bl	8006510 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 80052aa:	69fb      	ldr	r3, [r7, #28]
}
 80052ac:	4618      	mov	r0, r3
 80052ae:	3720      	adds	r7, #32
 80052b0:	46bd      	mov	sp, r7
 80052b2:	bd80      	pop	{r7, pc}

080052b4 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 80052b4:	b580      	push	{r7, lr}
 80052b6:	b086      	sub	sp, #24
 80052b8:	af00      	add	r7, sp, #0
 80052ba:	6078      	str	r0, [r7, #4]
 80052bc:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 80052c2:	2300      	movs	r3, #0
 80052c4:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 80052c6:	693b      	ldr	r3, [r7, #16]
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d103      	bne.n	80052d4 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 80052cc:	f06f 0303 	mvn.w	r3, #3
 80052d0:	617b      	str	r3, [r7, #20]
 80052d2:	e039      	b.n	8005348 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80052d4:	f3ef 8305 	mrs	r3, IPSR
 80052d8:	60fb      	str	r3, [r7, #12]
  return(result);
 80052da:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d022      	beq.n	8005326 <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 80052e0:	683b      	ldr	r3, [r7, #0]
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d003      	beq.n	80052ee <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 80052e6:	f06f 0303 	mvn.w	r3, #3
 80052ea:	617b      	str	r3, [r7, #20]
 80052ec:	e02c      	b.n	8005348 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 80052ee:	2300      	movs	r3, #0
 80052f0:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 80052f2:	f107 0308 	add.w	r3, r7, #8
 80052f6:	461a      	mov	r2, r3
 80052f8:	2100      	movs	r1, #0
 80052fa:	6938      	ldr	r0, [r7, #16]
 80052fc:	f000 ff3a 	bl	8006174 <xQueueReceiveFromISR>
 8005300:	4603      	mov	r3, r0
 8005302:	2b01      	cmp	r3, #1
 8005304:	d003      	beq.n	800530e <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 8005306:	f06f 0302 	mvn.w	r3, #2
 800530a:	617b      	str	r3, [r7, #20]
 800530c:	e01c      	b.n	8005348 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 800530e:	68bb      	ldr	r3, [r7, #8]
 8005310:	2b00      	cmp	r3, #0
 8005312:	d019      	beq.n	8005348 <osSemaphoreAcquire+0x94>
 8005314:	4b0f      	ldr	r3, [pc, #60]	@ (8005354 <osSemaphoreAcquire+0xa0>)
 8005316:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800531a:	601a      	str	r2, [r3, #0]
 800531c:	f3bf 8f4f 	dsb	sy
 8005320:	f3bf 8f6f 	isb	sy
 8005324:	e010      	b.n	8005348 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8005326:	6839      	ldr	r1, [r7, #0]
 8005328:	6938      	ldr	r0, [r7, #16]
 800532a:	f000 fe13 	bl	8005f54 <xQueueSemaphoreTake>
 800532e:	4603      	mov	r3, r0
 8005330:	2b01      	cmp	r3, #1
 8005332:	d009      	beq.n	8005348 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 8005334:	683b      	ldr	r3, [r7, #0]
 8005336:	2b00      	cmp	r3, #0
 8005338:	d003      	beq.n	8005342 <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 800533a:	f06f 0301 	mvn.w	r3, #1
 800533e:	617b      	str	r3, [r7, #20]
 8005340:	e002      	b.n	8005348 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 8005342:	f06f 0302 	mvn.w	r3, #2
 8005346:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8005348:	697b      	ldr	r3, [r7, #20]
}
 800534a:	4618      	mov	r0, r3
 800534c:	3718      	adds	r7, #24
 800534e:	46bd      	mov	sp, r7
 8005350:	bd80      	pop	{r7, pc}
 8005352:	bf00      	nop
 8005354:	e000ed04 	.word	0xe000ed04

08005358 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8005358:	b580      	push	{r7, lr}
 800535a:	b086      	sub	sp, #24
 800535c:	af00      	add	r7, sp, #0
 800535e:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8005364:	2300      	movs	r3, #0
 8005366:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8005368:	693b      	ldr	r3, [r7, #16]
 800536a:	2b00      	cmp	r3, #0
 800536c:	d103      	bne.n	8005376 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 800536e:	f06f 0303 	mvn.w	r3, #3
 8005372:	617b      	str	r3, [r7, #20]
 8005374:	e02c      	b.n	80053d0 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005376:	f3ef 8305 	mrs	r3, IPSR
 800537a:	60fb      	str	r3, [r7, #12]
  return(result);
 800537c:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800537e:	2b00      	cmp	r3, #0
 8005380:	d01a      	beq.n	80053b8 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 8005382:	2300      	movs	r3, #0
 8005384:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8005386:	f107 0308 	add.w	r3, r7, #8
 800538a:	4619      	mov	r1, r3
 800538c:	6938      	ldr	r0, [r7, #16]
 800538e:	f000 fc6f 	bl	8005c70 <xQueueGiveFromISR>
 8005392:	4603      	mov	r3, r0
 8005394:	2b01      	cmp	r3, #1
 8005396:	d003      	beq.n	80053a0 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 8005398:	f06f 0302 	mvn.w	r3, #2
 800539c:	617b      	str	r3, [r7, #20]
 800539e:	e017      	b.n	80053d0 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 80053a0:	68bb      	ldr	r3, [r7, #8]
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d014      	beq.n	80053d0 <osSemaphoreRelease+0x78>
 80053a6:	4b0d      	ldr	r3, [pc, #52]	@ (80053dc <osSemaphoreRelease+0x84>)
 80053a8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80053ac:	601a      	str	r2, [r3, #0]
 80053ae:	f3bf 8f4f 	dsb	sy
 80053b2:	f3bf 8f6f 	isb	sy
 80053b6:	e00b      	b.n	80053d0 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 80053b8:	2300      	movs	r3, #0
 80053ba:	2200      	movs	r2, #0
 80053bc:	2100      	movs	r1, #0
 80053be:	6938      	ldr	r0, [r7, #16]
 80053c0:	f000 fab6 	bl	8005930 <xQueueGenericSend>
 80053c4:	4603      	mov	r3, r0
 80053c6:	2b01      	cmp	r3, #1
 80053c8:	d002      	beq.n	80053d0 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 80053ca:	f06f 0302 	mvn.w	r3, #2
 80053ce:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 80053d0:	697b      	ldr	r3, [r7, #20]
}
 80053d2:	4618      	mov	r0, r3
 80053d4:	3718      	adds	r7, #24
 80053d6:	46bd      	mov	sp, r7
 80053d8:	bd80      	pop	{r7, pc}
 80053da:	bf00      	nop
 80053dc:	e000ed04 	.word	0xe000ed04

080053e0 <vApplicationStackOverflowHook>:

/**
  Dummy implementation of the callback function vApplicationStackOverflowHook().
*/
#if (configCHECK_FOR_STACK_OVERFLOW > 0)
__WEAK void vApplicationStackOverflowHook (TaskHandle_t xTask, signed char *pcTaskName) {
 80053e0:	b480      	push	{r7}
 80053e2:	b085      	sub	sp, #20
 80053e4:	af00      	add	r7, sp, #0
 80053e6:	6078      	str	r0, [r7, #4]
 80053e8:	6039      	str	r1, [r7, #0]

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80053ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80053ee:	f383 8811 	msr	BASEPRI, r3
 80053f2:	f3bf 8f6f 	isb	sy
 80053f6:	f3bf 8f4f 	dsb	sy
 80053fa:	60fb      	str	r3, [r7, #12]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80053fc:	bf00      	nop
  (void)xTask;
  (void)pcTaskName;
  configASSERT(0);
 80053fe:	bf00      	nop
 8005400:	e7fd      	b.n	80053fe <vApplicationStackOverflowHook+0x1e>
	...

08005404 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8005404:	b480      	push	{r7}
 8005406:	b085      	sub	sp, #20
 8005408:	af00      	add	r7, sp, #0
 800540a:	60f8      	str	r0, [r7, #12]
 800540c:	60b9      	str	r1, [r7, #8]
 800540e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	4a06      	ldr	r2, [pc, #24]	@ (800542c <vApplicationGetIdleTaskMemory+0x28>)
 8005414:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8005416:	68bb      	ldr	r3, [r7, #8]
 8005418:	4a05      	ldr	r2, [pc, #20]	@ (8005430 <vApplicationGetIdleTaskMemory+0x2c>)
 800541a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	2280      	movs	r2, #128	@ 0x80
 8005420:	601a      	str	r2, [r3, #0]
}
 8005422:	bf00      	nop
 8005424:	3714      	adds	r7, #20
 8005426:	46bd      	mov	sp, r7
 8005428:	bc80      	pop	{r7}
 800542a:	4770      	bx	lr
 800542c:	200003ac 	.word	0x200003ac
 8005430:	20000408 	.word	0x20000408

08005434 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8005434:	b480      	push	{r7}
 8005436:	b085      	sub	sp, #20
 8005438:	af00      	add	r7, sp, #0
 800543a:	60f8      	str	r0, [r7, #12]
 800543c:	60b9      	str	r1, [r7, #8]
 800543e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	4a07      	ldr	r2, [pc, #28]	@ (8005460 <vApplicationGetTimerTaskMemory+0x2c>)
 8005444:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8005446:	68bb      	ldr	r3, [r7, #8]
 8005448:	4a06      	ldr	r2, [pc, #24]	@ (8005464 <vApplicationGetTimerTaskMemory+0x30>)
 800544a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005452:	601a      	str	r2, [r3, #0]
}
 8005454:	bf00      	nop
 8005456:	3714      	adds	r7, #20
 8005458:	46bd      	mov	sp, r7
 800545a:	bc80      	pop	{r7}
 800545c:	4770      	bx	lr
 800545e:	bf00      	nop
 8005460:	20000608 	.word	0x20000608
 8005464:	20000664 	.word	0x20000664

08005468 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005468:	b480      	push	{r7}
 800546a:	b083      	sub	sp, #12
 800546c:	af00      	add	r7, sp, #0
 800546e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	f103 0208 	add.w	r2, r3, #8
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	f04f 32ff 	mov.w	r2, #4294967295
 8005480:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	f103 0208 	add.w	r2, r3, #8
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	f103 0208 	add.w	r2, r3, #8
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	2200      	movs	r2, #0
 800549a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800549c:	bf00      	nop
 800549e:	370c      	adds	r7, #12
 80054a0:	46bd      	mov	sp, r7
 80054a2:	bc80      	pop	{r7}
 80054a4:	4770      	bx	lr

080054a6 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80054a6:	b480      	push	{r7}
 80054a8:	b083      	sub	sp, #12
 80054aa:	af00      	add	r7, sp, #0
 80054ac:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	2200      	movs	r2, #0
 80054b2:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80054b4:	bf00      	nop
 80054b6:	370c      	adds	r7, #12
 80054b8:	46bd      	mov	sp, r7
 80054ba:	bc80      	pop	{r7}
 80054bc:	4770      	bx	lr

080054be <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80054be:	b480      	push	{r7}
 80054c0:	b085      	sub	sp, #20
 80054c2:	af00      	add	r7, sp, #0
 80054c4:	6078      	str	r0, [r7, #4]
 80054c6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	685b      	ldr	r3, [r3, #4]
 80054cc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80054ce:	683b      	ldr	r3, [r7, #0]
 80054d0:	68fa      	ldr	r2, [r7, #12]
 80054d2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	689a      	ldr	r2, [r3, #8]
 80054d8:	683b      	ldr	r3, [r7, #0]
 80054da:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	689b      	ldr	r3, [r3, #8]
 80054e0:	683a      	ldr	r2, [r7, #0]
 80054e2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	683a      	ldr	r2, [r7, #0]
 80054e8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80054ea:	683b      	ldr	r3, [r7, #0]
 80054ec:	687a      	ldr	r2, [r7, #4]
 80054ee:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	1c5a      	adds	r2, r3, #1
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	601a      	str	r2, [r3, #0]
}
 80054fa:	bf00      	nop
 80054fc:	3714      	adds	r7, #20
 80054fe:	46bd      	mov	sp, r7
 8005500:	bc80      	pop	{r7}
 8005502:	4770      	bx	lr

08005504 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005504:	b480      	push	{r7}
 8005506:	b085      	sub	sp, #20
 8005508:	af00      	add	r7, sp, #0
 800550a:	6078      	str	r0, [r7, #4]
 800550c:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800550e:	683b      	ldr	r3, [r7, #0]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005514:	68bb      	ldr	r3, [r7, #8]
 8005516:	f1b3 3fff 	cmp.w	r3, #4294967295
 800551a:	d103      	bne.n	8005524 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	691b      	ldr	r3, [r3, #16]
 8005520:	60fb      	str	r3, [r7, #12]
 8005522:	e00c      	b.n	800553e <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	3308      	adds	r3, #8
 8005528:	60fb      	str	r3, [r7, #12]
 800552a:	e002      	b.n	8005532 <vListInsert+0x2e>
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	685b      	ldr	r3, [r3, #4]
 8005530:	60fb      	str	r3, [r7, #12]
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	685b      	ldr	r3, [r3, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	68ba      	ldr	r2, [r7, #8]
 800553a:	429a      	cmp	r2, r3
 800553c:	d2f6      	bcs.n	800552c <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	685a      	ldr	r2, [r3, #4]
 8005542:	683b      	ldr	r3, [r7, #0]
 8005544:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005546:	683b      	ldr	r3, [r7, #0]
 8005548:	685b      	ldr	r3, [r3, #4]
 800554a:	683a      	ldr	r2, [r7, #0]
 800554c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800554e:	683b      	ldr	r3, [r7, #0]
 8005550:	68fa      	ldr	r2, [r7, #12]
 8005552:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	683a      	ldr	r2, [r7, #0]
 8005558:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800555a:	683b      	ldr	r3, [r7, #0]
 800555c:	687a      	ldr	r2, [r7, #4]
 800555e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	1c5a      	adds	r2, r3, #1
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	601a      	str	r2, [r3, #0]
}
 800556a:	bf00      	nop
 800556c:	3714      	adds	r7, #20
 800556e:	46bd      	mov	sp, r7
 8005570:	bc80      	pop	{r7}
 8005572:	4770      	bx	lr

08005574 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005574:	b480      	push	{r7}
 8005576:	b085      	sub	sp, #20
 8005578:	af00      	add	r7, sp, #0
 800557a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	691b      	ldr	r3, [r3, #16]
 8005580:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	685b      	ldr	r3, [r3, #4]
 8005586:	687a      	ldr	r2, [r7, #4]
 8005588:	6892      	ldr	r2, [r2, #8]
 800558a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	689b      	ldr	r3, [r3, #8]
 8005590:	687a      	ldr	r2, [r7, #4]
 8005592:	6852      	ldr	r2, [r2, #4]
 8005594:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	685b      	ldr	r3, [r3, #4]
 800559a:	687a      	ldr	r2, [r7, #4]
 800559c:	429a      	cmp	r2, r3
 800559e:	d103      	bne.n	80055a8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	689a      	ldr	r2, [r3, #8]
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	2200      	movs	r2, #0
 80055ac:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	1e5a      	subs	r2, r3, #1
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	681b      	ldr	r3, [r3, #0]
}
 80055bc:	4618      	mov	r0, r3
 80055be:	3714      	adds	r7, #20
 80055c0:	46bd      	mov	sp, r7
 80055c2:	bc80      	pop	{r7}
 80055c4:	4770      	bx	lr
	...

080055c8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80055c8:	b580      	push	{r7, lr}
 80055ca:	b084      	sub	sp, #16
 80055cc:	af00      	add	r7, sp, #0
 80055ce:	6078      	str	r0, [r7, #4]
 80055d0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d10b      	bne.n	80055f4 <xQueueGenericReset+0x2c>
	__asm volatile
 80055dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80055e0:	f383 8811 	msr	BASEPRI, r3
 80055e4:	f3bf 8f6f 	isb	sy
 80055e8:	f3bf 8f4f 	dsb	sy
 80055ec:	60bb      	str	r3, [r7, #8]
}
 80055ee:	bf00      	nop
 80055f0:	bf00      	nop
 80055f2:	e7fd      	b.n	80055f0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80055f4:	f002 fc8a 	bl	8007f0c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	681a      	ldr	r2, [r3, #0]
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005600:	68f9      	ldr	r1, [r7, #12]
 8005602:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8005604:	fb01 f303 	mul.w	r3, r1, r3
 8005608:	441a      	add	r2, r3
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	2200      	movs	r2, #0
 8005612:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	681a      	ldr	r2, [r3, #0]
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	681a      	ldr	r2, [r3, #0]
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005624:	3b01      	subs	r3, #1
 8005626:	68f9      	ldr	r1, [r7, #12]
 8005628:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800562a:	fb01 f303 	mul.w	r3, r1, r3
 800562e:	441a      	add	r2, r3
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	22ff      	movs	r2, #255	@ 0xff
 8005638:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	22ff      	movs	r2, #255	@ 0xff
 8005640:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8005644:	683b      	ldr	r3, [r7, #0]
 8005646:	2b00      	cmp	r3, #0
 8005648:	d114      	bne.n	8005674 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	691b      	ldr	r3, [r3, #16]
 800564e:	2b00      	cmp	r3, #0
 8005650:	d01a      	beq.n	8005688 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	3310      	adds	r3, #16
 8005656:	4618      	mov	r0, r3
 8005658:	f001 fc6e 	bl	8006f38 <xTaskRemoveFromEventList>
 800565c:	4603      	mov	r3, r0
 800565e:	2b00      	cmp	r3, #0
 8005660:	d012      	beq.n	8005688 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005662:	4b0d      	ldr	r3, [pc, #52]	@ (8005698 <xQueueGenericReset+0xd0>)
 8005664:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005668:	601a      	str	r2, [r3, #0]
 800566a:	f3bf 8f4f 	dsb	sy
 800566e:	f3bf 8f6f 	isb	sy
 8005672:	e009      	b.n	8005688 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	3310      	adds	r3, #16
 8005678:	4618      	mov	r0, r3
 800567a:	f7ff fef5 	bl	8005468 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	3324      	adds	r3, #36	@ 0x24
 8005682:	4618      	mov	r0, r3
 8005684:	f7ff fef0 	bl	8005468 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005688:	f002 fc70 	bl	8007f6c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800568c:	2301      	movs	r3, #1
}
 800568e:	4618      	mov	r0, r3
 8005690:	3710      	adds	r7, #16
 8005692:	46bd      	mov	sp, r7
 8005694:	bd80      	pop	{r7, pc}
 8005696:	bf00      	nop
 8005698:	e000ed04 	.word	0xe000ed04

0800569c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800569c:	b580      	push	{r7, lr}
 800569e:	b08e      	sub	sp, #56	@ 0x38
 80056a0:	af02      	add	r7, sp, #8
 80056a2:	60f8      	str	r0, [r7, #12]
 80056a4:	60b9      	str	r1, [r7, #8]
 80056a6:	607a      	str	r2, [r7, #4]
 80056a8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d10b      	bne.n	80056c8 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 80056b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80056b4:	f383 8811 	msr	BASEPRI, r3
 80056b8:	f3bf 8f6f 	isb	sy
 80056bc:	f3bf 8f4f 	dsb	sy
 80056c0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80056c2:	bf00      	nop
 80056c4:	bf00      	nop
 80056c6:	e7fd      	b.n	80056c4 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80056c8:	683b      	ldr	r3, [r7, #0]
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d10b      	bne.n	80056e6 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 80056ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80056d2:	f383 8811 	msr	BASEPRI, r3
 80056d6:	f3bf 8f6f 	isb	sy
 80056da:	f3bf 8f4f 	dsb	sy
 80056de:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80056e0:	bf00      	nop
 80056e2:	bf00      	nop
 80056e4:	e7fd      	b.n	80056e2 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d002      	beq.n	80056f2 <xQueueGenericCreateStatic+0x56>
 80056ec:	68bb      	ldr	r3, [r7, #8]
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d001      	beq.n	80056f6 <xQueueGenericCreateStatic+0x5a>
 80056f2:	2301      	movs	r3, #1
 80056f4:	e000      	b.n	80056f8 <xQueueGenericCreateStatic+0x5c>
 80056f6:	2300      	movs	r3, #0
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d10b      	bne.n	8005714 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 80056fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005700:	f383 8811 	msr	BASEPRI, r3
 8005704:	f3bf 8f6f 	isb	sy
 8005708:	f3bf 8f4f 	dsb	sy
 800570c:	623b      	str	r3, [r7, #32]
}
 800570e:	bf00      	nop
 8005710:	bf00      	nop
 8005712:	e7fd      	b.n	8005710 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	2b00      	cmp	r3, #0
 8005718:	d102      	bne.n	8005720 <xQueueGenericCreateStatic+0x84>
 800571a:	68bb      	ldr	r3, [r7, #8]
 800571c:	2b00      	cmp	r3, #0
 800571e:	d101      	bne.n	8005724 <xQueueGenericCreateStatic+0x88>
 8005720:	2301      	movs	r3, #1
 8005722:	e000      	b.n	8005726 <xQueueGenericCreateStatic+0x8a>
 8005724:	2300      	movs	r3, #0
 8005726:	2b00      	cmp	r3, #0
 8005728:	d10b      	bne.n	8005742 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800572a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800572e:	f383 8811 	msr	BASEPRI, r3
 8005732:	f3bf 8f6f 	isb	sy
 8005736:	f3bf 8f4f 	dsb	sy
 800573a:	61fb      	str	r3, [r7, #28]
}
 800573c:	bf00      	nop
 800573e:	bf00      	nop
 8005740:	e7fd      	b.n	800573e <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8005742:	2350      	movs	r3, #80	@ 0x50
 8005744:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8005746:	697b      	ldr	r3, [r7, #20]
 8005748:	2b50      	cmp	r3, #80	@ 0x50
 800574a:	d00b      	beq.n	8005764 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800574c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005750:	f383 8811 	msr	BASEPRI, r3
 8005754:	f3bf 8f6f 	isb	sy
 8005758:	f3bf 8f4f 	dsb	sy
 800575c:	61bb      	str	r3, [r7, #24]
}
 800575e:	bf00      	nop
 8005760:	bf00      	nop
 8005762:	e7fd      	b.n	8005760 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8005764:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005766:	683b      	ldr	r3, [r7, #0]
 8005768:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800576a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800576c:	2b00      	cmp	r3, #0
 800576e:	d00d      	beq.n	800578c <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005770:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005772:	2201      	movs	r2, #1
 8005774:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005778:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800577c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800577e:	9300      	str	r3, [sp, #0]
 8005780:	4613      	mov	r3, r2
 8005782:	687a      	ldr	r2, [r7, #4]
 8005784:	68b9      	ldr	r1, [r7, #8]
 8005786:	68f8      	ldr	r0, [r7, #12]
 8005788:	f000 f840 	bl	800580c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800578c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800578e:	4618      	mov	r0, r3
 8005790:	3730      	adds	r7, #48	@ 0x30
 8005792:	46bd      	mov	sp, r7
 8005794:	bd80      	pop	{r7, pc}

08005796 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8005796:	b580      	push	{r7, lr}
 8005798:	b08a      	sub	sp, #40	@ 0x28
 800579a:	af02      	add	r7, sp, #8
 800579c:	60f8      	str	r0, [r7, #12]
 800579e:	60b9      	str	r1, [r7, #8]
 80057a0:	4613      	mov	r3, r2
 80057a2:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d10b      	bne.n	80057c2 <xQueueGenericCreate+0x2c>
	__asm volatile
 80057aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80057ae:	f383 8811 	msr	BASEPRI, r3
 80057b2:	f3bf 8f6f 	isb	sy
 80057b6:	f3bf 8f4f 	dsb	sy
 80057ba:	613b      	str	r3, [r7, #16]
}
 80057bc:	bf00      	nop
 80057be:	bf00      	nop
 80057c0:	e7fd      	b.n	80057be <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	68ba      	ldr	r2, [r7, #8]
 80057c6:	fb02 f303 	mul.w	r3, r2, r3
 80057ca:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80057cc:	69fb      	ldr	r3, [r7, #28]
 80057ce:	3350      	adds	r3, #80	@ 0x50
 80057d0:	4618      	mov	r0, r3
 80057d2:	f002 fc9d 	bl	8008110 <pvPortMalloc>
 80057d6:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80057d8:	69bb      	ldr	r3, [r7, #24]
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d011      	beq.n	8005802 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80057de:	69bb      	ldr	r3, [r7, #24]
 80057e0:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80057e2:	697b      	ldr	r3, [r7, #20]
 80057e4:	3350      	adds	r3, #80	@ 0x50
 80057e6:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80057e8:	69bb      	ldr	r3, [r7, #24]
 80057ea:	2200      	movs	r2, #0
 80057ec:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80057f0:	79fa      	ldrb	r2, [r7, #7]
 80057f2:	69bb      	ldr	r3, [r7, #24]
 80057f4:	9300      	str	r3, [sp, #0]
 80057f6:	4613      	mov	r3, r2
 80057f8:	697a      	ldr	r2, [r7, #20]
 80057fa:	68b9      	ldr	r1, [r7, #8]
 80057fc:	68f8      	ldr	r0, [r7, #12]
 80057fe:	f000 f805 	bl	800580c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005802:	69bb      	ldr	r3, [r7, #24]
	}
 8005804:	4618      	mov	r0, r3
 8005806:	3720      	adds	r7, #32
 8005808:	46bd      	mov	sp, r7
 800580a:	bd80      	pop	{r7, pc}

0800580c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800580c:	b580      	push	{r7, lr}
 800580e:	b084      	sub	sp, #16
 8005810:	af00      	add	r7, sp, #0
 8005812:	60f8      	str	r0, [r7, #12]
 8005814:	60b9      	str	r1, [r7, #8]
 8005816:	607a      	str	r2, [r7, #4]
 8005818:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800581a:	68bb      	ldr	r3, [r7, #8]
 800581c:	2b00      	cmp	r3, #0
 800581e:	d103      	bne.n	8005828 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005820:	69bb      	ldr	r3, [r7, #24]
 8005822:	69ba      	ldr	r2, [r7, #24]
 8005824:	601a      	str	r2, [r3, #0]
 8005826:	e002      	b.n	800582e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005828:	69bb      	ldr	r3, [r7, #24]
 800582a:	687a      	ldr	r2, [r7, #4]
 800582c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800582e:	69bb      	ldr	r3, [r7, #24]
 8005830:	68fa      	ldr	r2, [r7, #12]
 8005832:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005834:	69bb      	ldr	r3, [r7, #24]
 8005836:	68ba      	ldr	r2, [r7, #8]
 8005838:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800583a:	2101      	movs	r1, #1
 800583c:	69b8      	ldr	r0, [r7, #24]
 800583e:	f7ff fec3 	bl	80055c8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8005842:	69bb      	ldr	r3, [r7, #24]
 8005844:	78fa      	ldrb	r2, [r7, #3]
 8005846:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800584a:	bf00      	nop
 800584c:	3710      	adds	r7, #16
 800584e:	46bd      	mov	sp, r7
 8005850:	bd80      	pop	{r7, pc}

08005852 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8005852:	b580      	push	{r7, lr}
 8005854:	b08a      	sub	sp, #40	@ 0x28
 8005856:	af02      	add	r7, sp, #8
 8005858:	60f8      	str	r0, [r7, #12]
 800585a:	60b9      	str	r1, [r7, #8]
 800585c:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	2b00      	cmp	r3, #0
 8005862:	d10b      	bne.n	800587c <xQueueCreateCountingSemaphoreStatic+0x2a>
	__asm volatile
 8005864:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005868:	f383 8811 	msr	BASEPRI, r3
 800586c:	f3bf 8f6f 	isb	sy
 8005870:	f3bf 8f4f 	dsb	sy
 8005874:	61bb      	str	r3, [r7, #24]
}
 8005876:	bf00      	nop
 8005878:	bf00      	nop
 800587a:	e7fd      	b.n	8005878 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 800587c:	68ba      	ldr	r2, [r7, #8]
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	429a      	cmp	r2, r3
 8005882:	d90b      	bls.n	800589c <xQueueCreateCountingSemaphoreStatic+0x4a>
	__asm volatile
 8005884:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005888:	f383 8811 	msr	BASEPRI, r3
 800588c:	f3bf 8f6f 	isb	sy
 8005890:	f3bf 8f4f 	dsb	sy
 8005894:	617b      	str	r3, [r7, #20]
}
 8005896:	bf00      	nop
 8005898:	bf00      	nop
 800589a:	e7fd      	b.n	8005898 <xQueueCreateCountingSemaphoreStatic+0x46>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800589c:	2302      	movs	r3, #2
 800589e:	9300      	str	r3, [sp, #0]
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	2200      	movs	r2, #0
 80058a4:	2100      	movs	r1, #0
 80058a6:	68f8      	ldr	r0, [r7, #12]
 80058a8:	f7ff fef8 	bl	800569c <xQueueGenericCreateStatic>
 80058ac:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 80058ae:	69fb      	ldr	r3, [r7, #28]
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d002      	beq.n	80058ba <xQueueCreateCountingSemaphoreStatic+0x68>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80058b4:	69fb      	ldr	r3, [r7, #28]
 80058b6:	68ba      	ldr	r2, [r7, #8]
 80058b8:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 80058ba:	69fb      	ldr	r3, [r7, #28]
	}
 80058bc:	4618      	mov	r0, r3
 80058be:	3720      	adds	r7, #32
 80058c0:	46bd      	mov	sp, r7
 80058c2:	bd80      	pop	{r7, pc}

080058c4 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 80058c4:	b580      	push	{r7, lr}
 80058c6:	b086      	sub	sp, #24
 80058c8:	af00      	add	r7, sp, #0
 80058ca:	6078      	str	r0, [r7, #4]
 80058cc:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d10b      	bne.n	80058ec <xQueueCreateCountingSemaphore+0x28>
	__asm volatile
 80058d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80058d8:	f383 8811 	msr	BASEPRI, r3
 80058dc:	f3bf 8f6f 	isb	sy
 80058e0:	f3bf 8f4f 	dsb	sy
 80058e4:	613b      	str	r3, [r7, #16]
}
 80058e6:	bf00      	nop
 80058e8:	bf00      	nop
 80058ea:	e7fd      	b.n	80058e8 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 80058ec:	683a      	ldr	r2, [r7, #0]
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	429a      	cmp	r2, r3
 80058f2:	d90b      	bls.n	800590c <xQueueCreateCountingSemaphore+0x48>
	__asm volatile
 80058f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80058f8:	f383 8811 	msr	BASEPRI, r3
 80058fc:	f3bf 8f6f 	isb	sy
 8005900:	f3bf 8f4f 	dsb	sy
 8005904:	60fb      	str	r3, [r7, #12]
}
 8005906:	bf00      	nop
 8005908:	bf00      	nop
 800590a:	e7fd      	b.n	8005908 <xQueueCreateCountingSemaphore+0x44>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800590c:	2202      	movs	r2, #2
 800590e:	2100      	movs	r1, #0
 8005910:	6878      	ldr	r0, [r7, #4]
 8005912:	f7ff ff40 	bl	8005796 <xQueueGenericCreate>
 8005916:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8005918:	697b      	ldr	r3, [r7, #20]
 800591a:	2b00      	cmp	r3, #0
 800591c:	d002      	beq.n	8005924 <xQueueCreateCountingSemaphore+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800591e:	697b      	ldr	r3, [r7, #20]
 8005920:	683a      	ldr	r2, [r7, #0]
 8005922:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8005924:	697b      	ldr	r3, [r7, #20]
	}
 8005926:	4618      	mov	r0, r3
 8005928:	3718      	adds	r7, #24
 800592a:	46bd      	mov	sp, r7
 800592c:	bd80      	pop	{r7, pc}
	...

08005930 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005930:	b580      	push	{r7, lr}
 8005932:	b08e      	sub	sp, #56	@ 0x38
 8005934:	af00      	add	r7, sp, #0
 8005936:	60f8      	str	r0, [r7, #12]
 8005938:	60b9      	str	r1, [r7, #8]
 800593a:	607a      	str	r2, [r7, #4]
 800593c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800593e:	2300      	movs	r3, #0
 8005940:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8005946:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005948:	2b00      	cmp	r3, #0
 800594a:	d10b      	bne.n	8005964 <xQueueGenericSend+0x34>
	__asm volatile
 800594c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005950:	f383 8811 	msr	BASEPRI, r3
 8005954:	f3bf 8f6f 	isb	sy
 8005958:	f3bf 8f4f 	dsb	sy
 800595c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800595e:	bf00      	nop
 8005960:	bf00      	nop
 8005962:	e7fd      	b.n	8005960 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005964:	68bb      	ldr	r3, [r7, #8]
 8005966:	2b00      	cmp	r3, #0
 8005968:	d103      	bne.n	8005972 <xQueueGenericSend+0x42>
 800596a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800596c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800596e:	2b00      	cmp	r3, #0
 8005970:	d101      	bne.n	8005976 <xQueueGenericSend+0x46>
 8005972:	2301      	movs	r3, #1
 8005974:	e000      	b.n	8005978 <xQueueGenericSend+0x48>
 8005976:	2300      	movs	r3, #0
 8005978:	2b00      	cmp	r3, #0
 800597a:	d10b      	bne.n	8005994 <xQueueGenericSend+0x64>
	__asm volatile
 800597c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005980:	f383 8811 	msr	BASEPRI, r3
 8005984:	f3bf 8f6f 	isb	sy
 8005988:	f3bf 8f4f 	dsb	sy
 800598c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800598e:	bf00      	nop
 8005990:	bf00      	nop
 8005992:	e7fd      	b.n	8005990 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005994:	683b      	ldr	r3, [r7, #0]
 8005996:	2b02      	cmp	r3, #2
 8005998:	d103      	bne.n	80059a2 <xQueueGenericSend+0x72>
 800599a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800599c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800599e:	2b01      	cmp	r3, #1
 80059a0:	d101      	bne.n	80059a6 <xQueueGenericSend+0x76>
 80059a2:	2301      	movs	r3, #1
 80059a4:	e000      	b.n	80059a8 <xQueueGenericSend+0x78>
 80059a6:	2300      	movs	r3, #0
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d10b      	bne.n	80059c4 <xQueueGenericSend+0x94>
	__asm volatile
 80059ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80059b0:	f383 8811 	msr	BASEPRI, r3
 80059b4:	f3bf 8f6f 	isb	sy
 80059b8:	f3bf 8f4f 	dsb	sy
 80059bc:	623b      	str	r3, [r7, #32]
}
 80059be:	bf00      	nop
 80059c0:	bf00      	nop
 80059c2:	e7fd      	b.n	80059c0 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80059c4:	f001 fc78 	bl	80072b8 <xTaskGetSchedulerState>
 80059c8:	4603      	mov	r3, r0
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d102      	bne.n	80059d4 <xQueueGenericSend+0xa4>
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d101      	bne.n	80059d8 <xQueueGenericSend+0xa8>
 80059d4:	2301      	movs	r3, #1
 80059d6:	e000      	b.n	80059da <xQueueGenericSend+0xaa>
 80059d8:	2300      	movs	r3, #0
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d10b      	bne.n	80059f6 <xQueueGenericSend+0xc6>
	__asm volatile
 80059de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80059e2:	f383 8811 	msr	BASEPRI, r3
 80059e6:	f3bf 8f6f 	isb	sy
 80059ea:	f3bf 8f4f 	dsb	sy
 80059ee:	61fb      	str	r3, [r7, #28]
}
 80059f0:	bf00      	nop
 80059f2:	bf00      	nop
 80059f4:	e7fd      	b.n	80059f2 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80059f6:	f002 fa89 	bl	8007f0c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80059fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059fc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80059fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a00:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005a02:	429a      	cmp	r2, r3
 8005a04:	d302      	bcc.n	8005a0c <xQueueGenericSend+0xdc>
 8005a06:	683b      	ldr	r3, [r7, #0]
 8005a08:	2b02      	cmp	r3, #2
 8005a0a:	d129      	bne.n	8005a60 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005a0c:	683a      	ldr	r2, [r7, #0]
 8005a0e:	68b9      	ldr	r1, [r7, #8]
 8005a10:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005a12:	f000 fc6c 	bl	80062ee <prvCopyDataToQueue>
 8005a16:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005a18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d010      	beq.n	8005a42 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005a20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a22:	3324      	adds	r3, #36	@ 0x24
 8005a24:	4618      	mov	r0, r3
 8005a26:	f001 fa87 	bl	8006f38 <xTaskRemoveFromEventList>
 8005a2a:	4603      	mov	r3, r0
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d013      	beq.n	8005a58 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005a30:	4b3f      	ldr	r3, [pc, #252]	@ (8005b30 <xQueueGenericSend+0x200>)
 8005a32:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005a36:	601a      	str	r2, [r3, #0]
 8005a38:	f3bf 8f4f 	dsb	sy
 8005a3c:	f3bf 8f6f 	isb	sy
 8005a40:	e00a      	b.n	8005a58 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8005a42:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d007      	beq.n	8005a58 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005a48:	4b39      	ldr	r3, [pc, #228]	@ (8005b30 <xQueueGenericSend+0x200>)
 8005a4a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005a4e:	601a      	str	r2, [r3, #0]
 8005a50:	f3bf 8f4f 	dsb	sy
 8005a54:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005a58:	f002 fa88 	bl	8007f6c <vPortExitCritical>
				return pdPASS;
 8005a5c:	2301      	movs	r3, #1
 8005a5e:	e063      	b.n	8005b28 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d103      	bne.n	8005a6e <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005a66:	f002 fa81 	bl	8007f6c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8005a6a:	2300      	movs	r3, #0
 8005a6c:	e05c      	b.n	8005b28 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005a6e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d106      	bne.n	8005a82 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005a74:	f107 0314 	add.w	r3, r7, #20
 8005a78:	4618      	mov	r0, r3
 8005a7a:	f001 fac1 	bl	8007000 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005a7e:	2301      	movs	r3, #1
 8005a80:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005a82:	f002 fa73 	bl	8007f6c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005a86:	f001 f80d 	bl	8006aa4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005a8a:	f002 fa3f 	bl	8007f0c <vPortEnterCritical>
 8005a8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a90:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005a94:	b25b      	sxtb	r3, r3
 8005a96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a9a:	d103      	bne.n	8005aa4 <xQueueGenericSend+0x174>
 8005a9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a9e:	2200      	movs	r2, #0
 8005aa0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005aa4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005aa6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005aaa:	b25b      	sxtb	r3, r3
 8005aac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ab0:	d103      	bne.n	8005aba <xQueueGenericSend+0x18a>
 8005ab2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ab4:	2200      	movs	r2, #0
 8005ab6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005aba:	f002 fa57 	bl	8007f6c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005abe:	1d3a      	adds	r2, r7, #4
 8005ac0:	f107 0314 	add.w	r3, r7, #20
 8005ac4:	4611      	mov	r1, r2
 8005ac6:	4618      	mov	r0, r3
 8005ac8:	f001 fab0 	bl	800702c <xTaskCheckForTimeOut>
 8005acc:	4603      	mov	r3, r0
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d124      	bne.n	8005b1c <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005ad2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005ad4:	f000 fd03 	bl	80064de <prvIsQueueFull>
 8005ad8:	4603      	mov	r3, r0
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d018      	beq.n	8005b10 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005ade:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ae0:	3310      	adds	r3, #16
 8005ae2:	687a      	ldr	r2, [r7, #4]
 8005ae4:	4611      	mov	r1, r2
 8005ae6:	4618      	mov	r0, r3
 8005ae8:	f001 f9d4 	bl	8006e94 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005aec:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005aee:	f000 fc8e 	bl	800640e <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8005af2:	f000 ffe5 	bl	8006ac0 <xTaskResumeAll>
 8005af6:	4603      	mov	r3, r0
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	f47f af7c 	bne.w	80059f6 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8005afe:	4b0c      	ldr	r3, [pc, #48]	@ (8005b30 <xQueueGenericSend+0x200>)
 8005b00:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005b04:	601a      	str	r2, [r3, #0]
 8005b06:	f3bf 8f4f 	dsb	sy
 8005b0a:	f3bf 8f6f 	isb	sy
 8005b0e:	e772      	b.n	80059f6 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005b10:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005b12:	f000 fc7c 	bl	800640e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005b16:	f000 ffd3 	bl	8006ac0 <xTaskResumeAll>
 8005b1a:	e76c      	b.n	80059f6 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005b1c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005b1e:	f000 fc76 	bl	800640e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005b22:	f000 ffcd 	bl	8006ac0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8005b26:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8005b28:	4618      	mov	r0, r3
 8005b2a:	3738      	adds	r7, #56	@ 0x38
 8005b2c:	46bd      	mov	sp, r7
 8005b2e:	bd80      	pop	{r7, pc}
 8005b30:	e000ed04 	.word	0xe000ed04

08005b34 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005b34:	b580      	push	{r7, lr}
 8005b36:	b090      	sub	sp, #64	@ 0x40
 8005b38:	af00      	add	r7, sp, #0
 8005b3a:	60f8      	str	r0, [r7, #12]
 8005b3c:	60b9      	str	r1, [r7, #8]
 8005b3e:	607a      	str	r2, [r7, #4]
 8005b40:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8005b46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d10b      	bne.n	8005b64 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8005b4c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b50:	f383 8811 	msr	BASEPRI, r3
 8005b54:	f3bf 8f6f 	isb	sy
 8005b58:	f3bf 8f4f 	dsb	sy
 8005b5c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8005b5e:	bf00      	nop
 8005b60:	bf00      	nop
 8005b62:	e7fd      	b.n	8005b60 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005b64:	68bb      	ldr	r3, [r7, #8]
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d103      	bne.n	8005b72 <xQueueGenericSendFromISR+0x3e>
 8005b6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d101      	bne.n	8005b76 <xQueueGenericSendFromISR+0x42>
 8005b72:	2301      	movs	r3, #1
 8005b74:	e000      	b.n	8005b78 <xQueueGenericSendFromISR+0x44>
 8005b76:	2300      	movs	r3, #0
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d10b      	bne.n	8005b94 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8005b7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b80:	f383 8811 	msr	BASEPRI, r3
 8005b84:	f3bf 8f6f 	isb	sy
 8005b88:	f3bf 8f4f 	dsb	sy
 8005b8c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8005b8e:	bf00      	nop
 8005b90:	bf00      	nop
 8005b92:	e7fd      	b.n	8005b90 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005b94:	683b      	ldr	r3, [r7, #0]
 8005b96:	2b02      	cmp	r3, #2
 8005b98:	d103      	bne.n	8005ba2 <xQueueGenericSendFromISR+0x6e>
 8005b9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b9c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005b9e:	2b01      	cmp	r3, #1
 8005ba0:	d101      	bne.n	8005ba6 <xQueueGenericSendFromISR+0x72>
 8005ba2:	2301      	movs	r3, #1
 8005ba4:	e000      	b.n	8005ba8 <xQueueGenericSendFromISR+0x74>
 8005ba6:	2300      	movs	r3, #0
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d10b      	bne.n	8005bc4 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8005bac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005bb0:	f383 8811 	msr	BASEPRI, r3
 8005bb4:	f3bf 8f6f 	isb	sy
 8005bb8:	f3bf 8f4f 	dsb	sy
 8005bbc:	623b      	str	r3, [r7, #32]
}
 8005bbe:	bf00      	nop
 8005bc0:	bf00      	nop
 8005bc2:	e7fd      	b.n	8005bc0 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005bc4:	f002 fa64 	bl	8008090 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8005bc8:	f3ef 8211 	mrs	r2, BASEPRI
 8005bcc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005bd0:	f383 8811 	msr	BASEPRI, r3
 8005bd4:	f3bf 8f6f 	isb	sy
 8005bd8:	f3bf 8f4f 	dsb	sy
 8005bdc:	61fa      	str	r2, [r7, #28]
 8005bde:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8005be0:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005be2:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005be4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005be6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005be8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005bea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005bec:	429a      	cmp	r2, r3
 8005bee:	d302      	bcc.n	8005bf6 <xQueueGenericSendFromISR+0xc2>
 8005bf0:	683b      	ldr	r3, [r7, #0]
 8005bf2:	2b02      	cmp	r3, #2
 8005bf4:	d12f      	bne.n	8005c56 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005bf6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005bf8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005bfc:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005c00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c02:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c04:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005c06:	683a      	ldr	r2, [r7, #0]
 8005c08:	68b9      	ldr	r1, [r7, #8]
 8005c0a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8005c0c:	f000 fb6f 	bl	80062ee <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005c10:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8005c14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c18:	d112      	bne.n	8005c40 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005c1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d016      	beq.n	8005c50 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005c22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c24:	3324      	adds	r3, #36	@ 0x24
 8005c26:	4618      	mov	r0, r3
 8005c28:	f001 f986 	bl	8006f38 <xTaskRemoveFromEventList>
 8005c2c:	4603      	mov	r3, r0
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d00e      	beq.n	8005c50 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d00b      	beq.n	8005c50 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	2201      	movs	r2, #1
 8005c3c:	601a      	str	r2, [r3, #0]
 8005c3e:	e007      	b.n	8005c50 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005c40:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8005c44:	3301      	adds	r3, #1
 8005c46:	b2db      	uxtb	r3, r3
 8005c48:	b25a      	sxtb	r2, r3
 8005c4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c4c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8005c50:	2301      	movs	r3, #1
 8005c52:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8005c54:	e001      	b.n	8005c5a <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005c56:	2300      	movs	r3, #0
 8005c58:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005c5a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005c5c:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005c5e:	697b      	ldr	r3, [r7, #20]
 8005c60:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005c64:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005c66:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8005c68:	4618      	mov	r0, r3
 8005c6a:	3740      	adds	r7, #64	@ 0x40
 8005c6c:	46bd      	mov	sp, r7
 8005c6e:	bd80      	pop	{r7, pc}

08005c70 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8005c70:	b580      	push	{r7, lr}
 8005c72:	b08e      	sub	sp, #56	@ 0x38
 8005c74:	af00      	add	r7, sp, #0
 8005c76:	6078      	str	r0, [r7, #4]
 8005c78:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8005c7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d10b      	bne.n	8005c9c <xQueueGiveFromISR+0x2c>
	__asm volatile
 8005c84:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c88:	f383 8811 	msr	BASEPRI, r3
 8005c8c:	f3bf 8f6f 	isb	sy
 8005c90:	f3bf 8f4f 	dsb	sy
 8005c94:	623b      	str	r3, [r7, #32]
}
 8005c96:	bf00      	nop
 8005c98:	bf00      	nop
 8005c9a:	e7fd      	b.n	8005c98 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8005c9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d00b      	beq.n	8005cbc <xQueueGiveFromISR+0x4c>
	__asm volatile
 8005ca4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ca8:	f383 8811 	msr	BASEPRI, r3
 8005cac:	f3bf 8f6f 	isb	sy
 8005cb0:	f3bf 8f4f 	dsb	sy
 8005cb4:	61fb      	str	r3, [r7, #28]
}
 8005cb6:	bf00      	nop
 8005cb8:	bf00      	nop
 8005cba:	e7fd      	b.n	8005cb8 <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8005cbc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d103      	bne.n	8005ccc <xQueueGiveFromISR+0x5c>
 8005cc4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005cc6:	689b      	ldr	r3, [r3, #8]
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d101      	bne.n	8005cd0 <xQueueGiveFromISR+0x60>
 8005ccc:	2301      	movs	r3, #1
 8005cce:	e000      	b.n	8005cd2 <xQueueGiveFromISR+0x62>
 8005cd0:	2300      	movs	r3, #0
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d10b      	bne.n	8005cee <xQueueGiveFromISR+0x7e>
	__asm volatile
 8005cd6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005cda:	f383 8811 	msr	BASEPRI, r3
 8005cde:	f3bf 8f6f 	isb	sy
 8005ce2:	f3bf 8f4f 	dsb	sy
 8005ce6:	61bb      	str	r3, [r7, #24]
}
 8005ce8:	bf00      	nop
 8005cea:	bf00      	nop
 8005cec:	e7fd      	b.n	8005cea <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005cee:	f002 f9cf 	bl	8008090 <vPortValidateInterruptPriority>
	__asm volatile
 8005cf2:	f3ef 8211 	mrs	r2, BASEPRI
 8005cf6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005cfa:	f383 8811 	msr	BASEPRI, r3
 8005cfe:	f3bf 8f6f 	isb	sy
 8005d02:	f3bf 8f4f 	dsb	sy
 8005d06:	617a      	str	r2, [r7, #20]
 8005d08:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8005d0a:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005d0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005d0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d10:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d12:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8005d14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d16:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005d18:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005d1a:	429a      	cmp	r2, r3
 8005d1c:	d22b      	bcs.n	8005d76 <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005d1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d20:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005d24:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005d28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d2a:	1c5a      	adds	r2, r3, #1
 8005d2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d2e:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005d30:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8005d34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d38:	d112      	bne.n	8005d60 <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005d3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d016      	beq.n	8005d70 <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005d42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d44:	3324      	adds	r3, #36	@ 0x24
 8005d46:	4618      	mov	r0, r3
 8005d48:	f001 f8f6 	bl	8006f38 <xTaskRemoveFromEventList>
 8005d4c:	4603      	mov	r3, r0
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d00e      	beq.n	8005d70 <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005d52:	683b      	ldr	r3, [r7, #0]
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d00b      	beq.n	8005d70 <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005d58:	683b      	ldr	r3, [r7, #0]
 8005d5a:	2201      	movs	r2, #1
 8005d5c:	601a      	str	r2, [r3, #0]
 8005d5e:	e007      	b.n	8005d70 <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005d60:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005d64:	3301      	adds	r3, #1
 8005d66:	b2db      	uxtb	r3, r3
 8005d68:	b25a      	sxtb	r2, r3
 8005d6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d6c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8005d70:	2301      	movs	r3, #1
 8005d72:	637b      	str	r3, [r7, #52]	@ 0x34
 8005d74:	e001      	b.n	8005d7a <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005d76:	2300      	movs	r3, #0
 8005d78:	637b      	str	r3, [r7, #52]	@ 0x34
 8005d7a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005d7c:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	f383 8811 	msr	BASEPRI, r3
}
 8005d84:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005d86:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8005d88:	4618      	mov	r0, r3
 8005d8a:	3738      	adds	r7, #56	@ 0x38
 8005d8c:	46bd      	mov	sp, r7
 8005d8e:	bd80      	pop	{r7, pc}

08005d90 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8005d90:	b580      	push	{r7, lr}
 8005d92:	b08c      	sub	sp, #48	@ 0x30
 8005d94:	af00      	add	r7, sp, #0
 8005d96:	60f8      	str	r0, [r7, #12]
 8005d98:	60b9      	str	r1, [r7, #8]
 8005d9a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8005d9c:	2300      	movs	r3, #0
 8005d9e:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005da4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d10b      	bne.n	8005dc2 <xQueueReceive+0x32>
	__asm volatile
 8005daa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005dae:	f383 8811 	msr	BASEPRI, r3
 8005db2:	f3bf 8f6f 	isb	sy
 8005db6:	f3bf 8f4f 	dsb	sy
 8005dba:	623b      	str	r3, [r7, #32]
}
 8005dbc:	bf00      	nop
 8005dbe:	bf00      	nop
 8005dc0:	e7fd      	b.n	8005dbe <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005dc2:	68bb      	ldr	r3, [r7, #8]
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d103      	bne.n	8005dd0 <xQueueReceive+0x40>
 8005dc8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005dca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d101      	bne.n	8005dd4 <xQueueReceive+0x44>
 8005dd0:	2301      	movs	r3, #1
 8005dd2:	e000      	b.n	8005dd6 <xQueueReceive+0x46>
 8005dd4:	2300      	movs	r3, #0
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d10b      	bne.n	8005df2 <xQueueReceive+0x62>
	__asm volatile
 8005dda:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005dde:	f383 8811 	msr	BASEPRI, r3
 8005de2:	f3bf 8f6f 	isb	sy
 8005de6:	f3bf 8f4f 	dsb	sy
 8005dea:	61fb      	str	r3, [r7, #28]
}
 8005dec:	bf00      	nop
 8005dee:	bf00      	nop
 8005df0:	e7fd      	b.n	8005dee <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005df2:	f001 fa61 	bl	80072b8 <xTaskGetSchedulerState>
 8005df6:	4603      	mov	r3, r0
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d102      	bne.n	8005e02 <xQueueReceive+0x72>
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d101      	bne.n	8005e06 <xQueueReceive+0x76>
 8005e02:	2301      	movs	r3, #1
 8005e04:	e000      	b.n	8005e08 <xQueueReceive+0x78>
 8005e06:	2300      	movs	r3, #0
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d10b      	bne.n	8005e24 <xQueueReceive+0x94>
	__asm volatile
 8005e0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e10:	f383 8811 	msr	BASEPRI, r3
 8005e14:	f3bf 8f6f 	isb	sy
 8005e18:	f3bf 8f4f 	dsb	sy
 8005e1c:	61bb      	str	r3, [r7, #24]
}
 8005e1e:	bf00      	nop
 8005e20:	bf00      	nop
 8005e22:	e7fd      	b.n	8005e20 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005e24:	f002 f872 	bl	8007f0c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005e28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e2a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e2c:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005e2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d01f      	beq.n	8005e74 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005e34:	68b9      	ldr	r1, [r7, #8]
 8005e36:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005e38:	f000 fac3 	bl	80063c2 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005e3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e3e:	1e5a      	subs	r2, r3, #1
 8005e40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e42:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005e44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e46:	691b      	ldr	r3, [r3, #16]
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d00f      	beq.n	8005e6c <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005e4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e4e:	3310      	adds	r3, #16
 8005e50:	4618      	mov	r0, r3
 8005e52:	f001 f871 	bl	8006f38 <xTaskRemoveFromEventList>
 8005e56:	4603      	mov	r3, r0
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d007      	beq.n	8005e6c <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005e5c:	4b3c      	ldr	r3, [pc, #240]	@ (8005f50 <xQueueReceive+0x1c0>)
 8005e5e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005e62:	601a      	str	r2, [r3, #0]
 8005e64:	f3bf 8f4f 	dsb	sy
 8005e68:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005e6c:	f002 f87e 	bl	8007f6c <vPortExitCritical>
				return pdPASS;
 8005e70:	2301      	movs	r3, #1
 8005e72:	e069      	b.n	8005f48 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d103      	bne.n	8005e82 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005e7a:	f002 f877 	bl	8007f6c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005e7e:	2300      	movs	r3, #0
 8005e80:	e062      	b.n	8005f48 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005e82:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d106      	bne.n	8005e96 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005e88:	f107 0310 	add.w	r3, r7, #16
 8005e8c:	4618      	mov	r0, r3
 8005e8e:	f001 f8b7 	bl	8007000 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005e92:	2301      	movs	r3, #1
 8005e94:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005e96:	f002 f869 	bl	8007f6c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005e9a:	f000 fe03 	bl	8006aa4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005e9e:	f002 f835 	bl	8007f0c <vPortEnterCritical>
 8005ea2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ea4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005ea8:	b25b      	sxtb	r3, r3
 8005eaa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005eae:	d103      	bne.n	8005eb8 <xQueueReceive+0x128>
 8005eb0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005eb2:	2200      	movs	r2, #0
 8005eb4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005eb8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005eba:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005ebe:	b25b      	sxtb	r3, r3
 8005ec0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ec4:	d103      	bne.n	8005ece <xQueueReceive+0x13e>
 8005ec6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ec8:	2200      	movs	r2, #0
 8005eca:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005ece:	f002 f84d 	bl	8007f6c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005ed2:	1d3a      	adds	r2, r7, #4
 8005ed4:	f107 0310 	add.w	r3, r7, #16
 8005ed8:	4611      	mov	r1, r2
 8005eda:	4618      	mov	r0, r3
 8005edc:	f001 f8a6 	bl	800702c <xTaskCheckForTimeOut>
 8005ee0:	4603      	mov	r3, r0
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d123      	bne.n	8005f2e <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005ee6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005ee8:	f000 fae3 	bl	80064b2 <prvIsQueueEmpty>
 8005eec:	4603      	mov	r3, r0
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d017      	beq.n	8005f22 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005ef2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ef4:	3324      	adds	r3, #36	@ 0x24
 8005ef6:	687a      	ldr	r2, [r7, #4]
 8005ef8:	4611      	mov	r1, r2
 8005efa:	4618      	mov	r0, r3
 8005efc:	f000 ffca 	bl	8006e94 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005f00:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005f02:	f000 fa84 	bl	800640e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005f06:	f000 fddb 	bl	8006ac0 <xTaskResumeAll>
 8005f0a:	4603      	mov	r3, r0
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d189      	bne.n	8005e24 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8005f10:	4b0f      	ldr	r3, [pc, #60]	@ (8005f50 <xQueueReceive+0x1c0>)
 8005f12:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005f16:	601a      	str	r2, [r3, #0]
 8005f18:	f3bf 8f4f 	dsb	sy
 8005f1c:	f3bf 8f6f 	isb	sy
 8005f20:	e780      	b.n	8005e24 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005f22:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005f24:	f000 fa73 	bl	800640e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005f28:	f000 fdca 	bl	8006ac0 <xTaskResumeAll>
 8005f2c:	e77a      	b.n	8005e24 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005f2e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005f30:	f000 fa6d 	bl	800640e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005f34:	f000 fdc4 	bl	8006ac0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005f38:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005f3a:	f000 faba 	bl	80064b2 <prvIsQueueEmpty>
 8005f3e:	4603      	mov	r3, r0
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	f43f af6f 	beq.w	8005e24 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005f46:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005f48:	4618      	mov	r0, r3
 8005f4a:	3730      	adds	r7, #48	@ 0x30
 8005f4c:	46bd      	mov	sp, r7
 8005f4e:	bd80      	pop	{r7, pc}
 8005f50:	e000ed04 	.word	0xe000ed04

08005f54 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8005f54:	b580      	push	{r7, lr}
 8005f56:	b08e      	sub	sp, #56	@ 0x38
 8005f58:	af00      	add	r7, sp, #0
 8005f5a:	6078      	str	r0, [r7, #4]
 8005f5c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8005f5e:	2300      	movs	r3, #0
 8005f60:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8005f66:	2300      	movs	r3, #0
 8005f68:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005f6a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d10b      	bne.n	8005f88 <xQueueSemaphoreTake+0x34>
	__asm volatile
 8005f70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f74:	f383 8811 	msr	BASEPRI, r3
 8005f78:	f3bf 8f6f 	isb	sy
 8005f7c:	f3bf 8f4f 	dsb	sy
 8005f80:	623b      	str	r3, [r7, #32]
}
 8005f82:	bf00      	nop
 8005f84:	bf00      	nop
 8005f86:	e7fd      	b.n	8005f84 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8005f88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d00b      	beq.n	8005fa8 <xQueueSemaphoreTake+0x54>
	__asm volatile
 8005f90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f94:	f383 8811 	msr	BASEPRI, r3
 8005f98:	f3bf 8f6f 	isb	sy
 8005f9c:	f3bf 8f4f 	dsb	sy
 8005fa0:	61fb      	str	r3, [r7, #28]
}
 8005fa2:	bf00      	nop
 8005fa4:	bf00      	nop
 8005fa6:	e7fd      	b.n	8005fa4 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005fa8:	f001 f986 	bl	80072b8 <xTaskGetSchedulerState>
 8005fac:	4603      	mov	r3, r0
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d102      	bne.n	8005fb8 <xQueueSemaphoreTake+0x64>
 8005fb2:	683b      	ldr	r3, [r7, #0]
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d101      	bne.n	8005fbc <xQueueSemaphoreTake+0x68>
 8005fb8:	2301      	movs	r3, #1
 8005fba:	e000      	b.n	8005fbe <xQueueSemaphoreTake+0x6a>
 8005fbc:	2300      	movs	r3, #0
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d10b      	bne.n	8005fda <xQueueSemaphoreTake+0x86>
	__asm volatile
 8005fc2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005fc6:	f383 8811 	msr	BASEPRI, r3
 8005fca:	f3bf 8f6f 	isb	sy
 8005fce:	f3bf 8f4f 	dsb	sy
 8005fd2:	61bb      	str	r3, [r7, #24]
}
 8005fd4:	bf00      	nop
 8005fd6:	bf00      	nop
 8005fd8:	e7fd      	b.n	8005fd6 <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005fda:	f001 ff97 	bl	8007f0c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8005fde:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005fe0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005fe2:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8005fe4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d024      	beq.n	8006034 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8005fea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005fec:	1e5a      	subs	r2, r3, #1
 8005fee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ff0:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005ff2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d104      	bne.n	8006004 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8005ffa:	f001 fad7 	bl	80075ac <pvTaskIncrementMutexHeldCount>
 8005ffe:	4602      	mov	r2, r0
 8006000:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006002:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006004:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006006:	691b      	ldr	r3, [r3, #16]
 8006008:	2b00      	cmp	r3, #0
 800600a:	d00f      	beq.n	800602c <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800600c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800600e:	3310      	adds	r3, #16
 8006010:	4618      	mov	r0, r3
 8006012:	f000 ff91 	bl	8006f38 <xTaskRemoveFromEventList>
 8006016:	4603      	mov	r3, r0
 8006018:	2b00      	cmp	r3, #0
 800601a:	d007      	beq.n	800602c <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800601c:	4b54      	ldr	r3, [pc, #336]	@ (8006170 <xQueueSemaphoreTake+0x21c>)
 800601e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006022:	601a      	str	r2, [r3, #0]
 8006024:	f3bf 8f4f 	dsb	sy
 8006028:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800602c:	f001 ff9e 	bl	8007f6c <vPortExitCritical>
				return pdPASS;
 8006030:	2301      	movs	r3, #1
 8006032:	e098      	b.n	8006166 <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006034:	683b      	ldr	r3, [r7, #0]
 8006036:	2b00      	cmp	r3, #0
 8006038:	d112      	bne.n	8006060 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800603a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800603c:	2b00      	cmp	r3, #0
 800603e:	d00b      	beq.n	8006058 <xQueueSemaphoreTake+0x104>
	__asm volatile
 8006040:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006044:	f383 8811 	msr	BASEPRI, r3
 8006048:	f3bf 8f6f 	isb	sy
 800604c:	f3bf 8f4f 	dsb	sy
 8006050:	617b      	str	r3, [r7, #20]
}
 8006052:	bf00      	nop
 8006054:	bf00      	nop
 8006056:	e7fd      	b.n	8006054 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8006058:	f001 ff88 	bl	8007f6c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800605c:	2300      	movs	r3, #0
 800605e:	e082      	b.n	8006166 <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006060:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006062:	2b00      	cmp	r3, #0
 8006064:	d106      	bne.n	8006074 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006066:	f107 030c 	add.w	r3, r7, #12
 800606a:	4618      	mov	r0, r3
 800606c:	f000 ffc8 	bl	8007000 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006070:	2301      	movs	r3, #1
 8006072:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006074:	f001 ff7a 	bl	8007f6c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006078:	f000 fd14 	bl	8006aa4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800607c:	f001 ff46 	bl	8007f0c <vPortEnterCritical>
 8006080:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006082:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006086:	b25b      	sxtb	r3, r3
 8006088:	f1b3 3fff 	cmp.w	r3, #4294967295
 800608c:	d103      	bne.n	8006096 <xQueueSemaphoreTake+0x142>
 800608e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006090:	2200      	movs	r2, #0
 8006092:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006096:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006098:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800609c:	b25b      	sxtb	r3, r3
 800609e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060a2:	d103      	bne.n	80060ac <xQueueSemaphoreTake+0x158>
 80060a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80060a6:	2200      	movs	r2, #0
 80060a8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80060ac:	f001 ff5e 	bl	8007f6c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80060b0:	463a      	mov	r2, r7
 80060b2:	f107 030c 	add.w	r3, r7, #12
 80060b6:	4611      	mov	r1, r2
 80060b8:	4618      	mov	r0, r3
 80060ba:	f000 ffb7 	bl	800702c <xTaskCheckForTimeOut>
 80060be:	4603      	mov	r3, r0
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d132      	bne.n	800612a <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80060c4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80060c6:	f000 f9f4 	bl	80064b2 <prvIsQueueEmpty>
 80060ca:	4603      	mov	r3, r0
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d026      	beq.n	800611e <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80060d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d109      	bne.n	80060ec <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 80060d8:	f001 ff18 	bl	8007f0c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80060dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80060de:	689b      	ldr	r3, [r3, #8]
 80060e0:	4618      	mov	r0, r3
 80060e2:	f001 f907 	bl	80072f4 <xTaskPriorityInherit>
 80060e6:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 80060e8:	f001 ff40 	bl	8007f6c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80060ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80060ee:	3324      	adds	r3, #36	@ 0x24
 80060f0:	683a      	ldr	r2, [r7, #0]
 80060f2:	4611      	mov	r1, r2
 80060f4:	4618      	mov	r0, r3
 80060f6:	f000 fecd 	bl	8006e94 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80060fa:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80060fc:	f000 f987 	bl	800640e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006100:	f000 fcde 	bl	8006ac0 <xTaskResumeAll>
 8006104:	4603      	mov	r3, r0
 8006106:	2b00      	cmp	r3, #0
 8006108:	f47f af67 	bne.w	8005fda <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 800610c:	4b18      	ldr	r3, [pc, #96]	@ (8006170 <xQueueSemaphoreTake+0x21c>)
 800610e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006112:	601a      	str	r2, [r3, #0]
 8006114:	f3bf 8f4f 	dsb	sy
 8006118:	f3bf 8f6f 	isb	sy
 800611c:	e75d      	b.n	8005fda <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800611e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006120:	f000 f975 	bl	800640e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006124:	f000 fccc 	bl	8006ac0 <xTaskResumeAll>
 8006128:	e757      	b.n	8005fda <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800612a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800612c:	f000 f96f 	bl	800640e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006130:	f000 fcc6 	bl	8006ac0 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006134:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006136:	f000 f9bc 	bl	80064b2 <prvIsQueueEmpty>
 800613a:	4603      	mov	r3, r0
 800613c:	2b00      	cmp	r3, #0
 800613e:	f43f af4c 	beq.w	8005fda <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8006142:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006144:	2b00      	cmp	r3, #0
 8006146:	d00d      	beq.n	8006164 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 8006148:	f001 fee0 	bl	8007f0c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800614c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800614e:	f000 f8b7 	bl	80062c0 <prvGetDisinheritPriorityAfterTimeout>
 8006152:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8006154:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006156:	689b      	ldr	r3, [r3, #8]
 8006158:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800615a:	4618      	mov	r0, r3
 800615c:	f001 f9a2 	bl	80074a4 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8006160:	f001 ff04 	bl	8007f6c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006164:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006166:	4618      	mov	r0, r3
 8006168:	3738      	adds	r7, #56	@ 0x38
 800616a:	46bd      	mov	sp, r7
 800616c:	bd80      	pop	{r7, pc}
 800616e:	bf00      	nop
 8006170:	e000ed04 	.word	0xe000ed04

08006174 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8006174:	b580      	push	{r7, lr}
 8006176:	b08e      	sub	sp, #56	@ 0x38
 8006178:	af00      	add	r7, sp, #0
 800617a:	60f8      	str	r0, [r7, #12]
 800617c:	60b9      	str	r1, [r7, #8]
 800617e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8006184:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006186:	2b00      	cmp	r3, #0
 8006188:	d10b      	bne.n	80061a2 <xQueueReceiveFromISR+0x2e>
	__asm volatile
 800618a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800618e:	f383 8811 	msr	BASEPRI, r3
 8006192:	f3bf 8f6f 	isb	sy
 8006196:	f3bf 8f4f 	dsb	sy
 800619a:	623b      	str	r3, [r7, #32]
}
 800619c:	bf00      	nop
 800619e:	bf00      	nop
 80061a0:	e7fd      	b.n	800619e <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80061a2:	68bb      	ldr	r3, [r7, #8]
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d103      	bne.n	80061b0 <xQueueReceiveFromISR+0x3c>
 80061a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d101      	bne.n	80061b4 <xQueueReceiveFromISR+0x40>
 80061b0:	2301      	movs	r3, #1
 80061b2:	e000      	b.n	80061b6 <xQueueReceiveFromISR+0x42>
 80061b4:	2300      	movs	r3, #0
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d10b      	bne.n	80061d2 <xQueueReceiveFromISR+0x5e>
	__asm volatile
 80061ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80061be:	f383 8811 	msr	BASEPRI, r3
 80061c2:	f3bf 8f6f 	isb	sy
 80061c6:	f3bf 8f4f 	dsb	sy
 80061ca:	61fb      	str	r3, [r7, #28]
}
 80061cc:	bf00      	nop
 80061ce:	bf00      	nop
 80061d0:	e7fd      	b.n	80061ce <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80061d2:	f001 ff5d 	bl	8008090 <vPortValidateInterruptPriority>
	__asm volatile
 80061d6:	f3ef 8211 	mrs	r2, BASEPRI
 80061da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80061de:	f383 8811 	msr	BASEPRI, r3
 80061e2:	f3bf 8f6f 	isb	sy
 80061e6:	f3bf 8f4f 	dsb	sy
 80061ea:	61ba      	str	r2, [r7, #24]
 80061ec:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80061ee:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80061f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80061f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80061f6:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80061f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d02f      	beq.n	800625e <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80061fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006200:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006204:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006208:	68b9      	ldr	r1, [r7, #8]
 800620a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800620c:	f000 f8d9 	bl	80063c2 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006210:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006212:	1e5a      	subs	r2, r3, #1
 8006214:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006216:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8006218:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800621c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006220:	d112      	bne.n	8006248 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006222:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006224:	691b      	ldr	r3, [r3, #16]
 8006226:	2b00      	cmp	r3, #0
 8006228:	d016      	beq.n	8006258 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800622a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800622c:	3310      	adds	r3, #16
 800622e:	4618      	mov	r0, r3
 8006230:	f000 fe82 	bl	8006f38 <xTaskRemoveFromEventList>
 8006234:	4603      	mov	r3, r0
 8006236:	2b00      	cmp	r3, #0
 8006238:	d00e      	beq.n	8006258 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	2b00      	cmp	r3, #0
 800623e:	d00b      	beq.n	8006258 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	2201      	movs	r2, #1
 8006244:	601a      	str	r2, [r3, #0]
 8006246:	e007      	b.n	8006258 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8006248:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800624c:	3301      	adds	r3, #1
 800624e:	b2db      	uxtb	r3, r3
 8006250:	b25a      	sxtb	r2, r3
 8006252:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006254:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 8006258:	2301      	movs	r3, #1
 800625a:	637b      	str	r3, [r7, #52]	@ 0x34
 800625c:	e001      	b.n	8006262 <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 800625e:	2300      	movs	r3, #0
 8006260:	637b      	str	r3, [r7, #52]	@ 0x34
 8006262:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006264:	613b      	str	r3, [r7, #16]
	__asm volatile
 8006266:	693b      	ldr	r3, [r7, #16]
 8006268:	f383 8811 	msr	BASEPRI, r3
}
 800626c:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800626e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8006270:	4618      	mov	r0, r3
 8006272:	3738      	adds	r7, #56	@ 0x38
 8006274:	46bd      	mov	sp, r7
 8006276:	bd80      	pop	{r7, pc}

08006278 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8006278:	b580      	push	{r7, lr}
 800627a:	b084      	sub	sp, #16
 800627c:	af00      	add	r7, sp, #0
 800627e:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	2b00      	cmp	r3, #0
 8006288:	d10b      	bne.n	80062a2 <vQueueDelete+0x2a>
	__asm volatile
 800628a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800628e:	f383 8811 	msr	BASEPRI, r3
 8006292:	f3bf 8f6f 	isb	sy
 8006296:	f3bf 8f4f 	dsb	sy
 800629a:	60bb      	str	r3, [r7, #8]
}
 800629c:	bf00      	nop
 800629e:	bf00      	nop
 80062a0:	e7fd      	b.n	800629e <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 80062a2:	68f8      	ldr	r0, [r7, #12]
 80062a4:	f000 f95c 	bl	8006560 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d102      	bne.n	80062b8 <vQueueDelete+0x40>
		{
			vPortFree( pxQueue );
 80062b2:	68f8      	ldr	r0, [r7, #12]
 80062b4:	f001 fffa 	bl	80082ac <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 80062b8:	bf00      	nop
 80062ba:	3710      	adds	r7, #16
 80062bc:	46bd      	mov	sp, r7
 80062be:	bd80      	pop	{r7, pc}

080062c0 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80062c0:	b480      	push	{r7}
 80062c2:	b085      	sub	sp, #20
 80062c4:	af00      	add	r7, sp, #0
 80062c6:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d006      	beq.n	80062de <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 80062da:	60fb      	str	r3, [r7, #12]
 80062dc:	e001      	b.n	80062e2 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80062de:	2300      	movs	r3, #0
 80062e0:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80062e2:	68fb      	ldr	r3, [r7, #12]
	}
 80062e4:	4618      	mov	r0, r3
 80062e6:	3714      	adds	r7, #20
 80062e8:	46bd      	mov	sp, r7
 80062ea:	bc80      	pop	{r7}
 80062ec:	4770      	bx	lr

080062ee <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80062ee:	b580      	push	{r7, lr}
 80062f0:	b086      	sub	sp, #24
 80062f2:	af00      	add	r7, sp, #0
 80062f4:	60f8      	str	r0, [r7, #12]
 80062f6:	60b9      	str	r1, [r7, #8]
 80062f8:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80062fa:	2300      	movs	r3, #0
 80062fc:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006302:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006308:	2b00      	cmp	r3, #0
 800630a:	d10d      	bne.n	8006328 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	2b00      	cmp	r3, #0
 8006312:	d14d      	bne.n	80063b0 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	689b      	ldr	r3, [r3, #8]
 8006318:	4618      	mov	r0, r3
 800631a:	f001 f853 	bl	80073c4 <xTaskPriorityDisinherit>
 800631e:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	2200      	movs	r2, #0
 8006324:	609a      	str	r2, [r3, #8]
 8006326:	e043      	b.n	80063b0 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	2b00      	cmp	r3, #0
 800632c:	d119      	bne.n	8006362 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	6858      	ldr	r0, [r3, #4]
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006336:	461a      	mov	r2, r3
 8006338:	68b9      	ldr	r1, [r7, #8]
 800633a:	f002 ffd6 	bl	80092ea <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	685a      	ldr	r2, [r3, #4]
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006346:	441a      	add	r2, r3
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	685a      	ldr	r2, [r3, #4]
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	689b      	ldr	r3, [r3, #8]
 8006354:	429a      	cmp	r2, r3
 8006356:	d32b      	bcc.n	80063b0 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	681a      	ldr	r2, [r3, #0]
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	605a      	str	r2, [r3, #4]
 8006360:	e026      	b.n	80063b0 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	68d8      	ldr	r0, [r3, #12]
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800636a:	461a      	mov	r2, r3
 800636c:	68b9      	ldr	r1, [r7, #8]
 800636e:	f002 ffbc 	bl	80092ea <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	68da      	ldr	r2, [r3, #12]
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800637a:	425b      	negs	r3, r3
 800637c:	441a      	add	r2, r3
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	68da      	ldr	r2, [r3, #12]
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	429a      	cmp	r2, r3
 800638c:	d207      	bcs.n	800639e <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	689a      	ldr	r2, [r3, #8]
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006396:	425b      	negs	r3, r3
 8006398:	441a      	add	r2, r3
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	2b02      	cmp	r3, #2
 80063a2:	d105      	bne.n	80063b0 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80063a4:	693b      	ldr	r3, [r7, #16]
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d002      	beq.n	80063b0 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80063aa:	693b      	ldr	r3, [r7, #16]
 80063ac:	3b01      	subs	r3, #1
 80063ae:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80063b0:	693b      	ldr	r3, [r7, #16]
 80063b2:	1c5a      	adds	r2, r3, #1
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 80063b8:	697b      	ldr	r3, [r7, #20]
}
 80063ba:	4618      	mov	r0, r3
 80063bc:	3718      	adds	r7, #24
 80063be:	46bd      	mov	sp, r7
 80063c0:	bd80      	pop	{r7, pc}

080063c2 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80063c2:	b580      	push	{r7, lr}
 80063c4:	b082      	sub	sp, #8
 80063c6:	af00      	add	r7, sp, #0
 80063c8:	6078      	str	r0, [r7, #4]
 80063ca:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d018      	beq.n	8006406 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	68da      	ldr	r2, [r3, #12]
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80063dc:	441a      	add	r2, r3
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	68da      	ldr	r2, [r3, #12]
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	689b      	ldr	r3, [r3, #8]
 80063ea:	429a      	cmp	r2, r3
 80063ec:	d303      	bcc.n	80063f6 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	681a      	ldr	r2, [r3, #0]
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	68d9      	ldr	r1, [r3, #12]
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80063fe:	461a      	mov	r2, r3
 8006400:	6838      	ldr	r0, [r7, #0]
 8006402:	f002 ff72 	bl	80092ea <memcpy>
	}
}
 8006406:	bf00      	nop
 8006408:	3708      	adds	r7, #8
 800640a:	46bd      	mov	sp, r7
 800640c:	bd80      	pop	{r7, pc}

0800640e <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800640e:	b580      	push	{r7, lr}
 8006410:	b084      	sub	sp, #16
 8006412:	af00      	add	r7, sp, #0
 8006414:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8006416:	f001 fd79 	bl	8007f0c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006420:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006422:	e011      	b.n	8006448 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006428:	2b00      	cmp	r3, #0
 800642a:	d012      	beq.n	8006452 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	3324      	adds	r3, #36	@ 0x24
 8006430:	4618      	mov	r0, r3
 8006432:	f000 fd81 	bl	8006f38 <xTaskRemoveFromEventList>
 8006436:	4603      	mov	r3, r0
 8006438:	2b00      	cmp	r3, #0
 800643a:	d001      	beq.n	8006440 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800643c:	f000 fe5a 	bl	80070f4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8006440:	7bfb      	ldrb	r3, [r7, #15]
 8006442:	3b01      	subs	r3, #1
 8006444:	b2db      	uxtb	r3, r3
 8006446:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006448:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800644c:	2b00      	cmp	r3, #0
 800644e:	dce9      	bgt.n	8006424 <prvUnlockQueue+0x16>
 8006450:	e000      	b.n	8006454 <prvUnlockQueue+0x46>
					break;
 8006452:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	22ff      	movs	r2, #255	@ 0xff
 8006458:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800645c:	f001 fd86 	bl	8007f6c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8006460:	f001 fd54 	bl	8007f0c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800646a:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800646c:	e011      	b.n	8006492 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	691b      	ldr	r3, [r3, #16]
 8006472:	2b00      	cmp	r3, #0
 8006474:	d012      	beq.n	800649c <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	3310      	adds	r3, #16
 800647a:	4618      	mov	r0, r3
 800647c:	f000 fd5c 	bl	8006f38 <xTaskRemoveFromEventList>
 8006480:	4603      	mov	r3, r0
 8006482:	2b00      	cmp	r3, #0
 8006484:	d001      	beq.n	800648a <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8006486:	f000 fe35 	bl	80070f4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800648a:	7bbb      	ldrb	r3, [r7, #14]
 800648c:	3b01      	subs	r3, #1
 800648e:	b2db      	uxtb	r3, r3
 8006490:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006492:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006496:	2b00      	cmp	r3, #0
 8006498:	dce9      	bgt.n	800646e <prvUnlockQueue+0x60>
 800649a:	e000      	b.n	800649e <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800649c:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	22ff      	movs	r2, #255	@ 0xff
 80064a2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 80064a6:	f001 fd61 	bl	8007f6c <vPortExitCritical>
}
 80064aa:	bf00      	nop
 80064ac:	3710      	adds	r7, #16
 80064ae:	46bd      	mov	sp, r7
 80064b0:	bd80      	pop	{r7, pc}

080064b2 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80064b2:	b580      	push	{r7, lr}
 80064b4:	b084      	sub	sp, #16
 80064b6:	af00      	add	r7, sp, #0
 80064b8:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80064ba:	f001 fd27 	bl	8007f0c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d102      	bne.n	80064cc <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80064c6:	2301      	movs	r3, #1
 80064c8:	60fb      	str	r3, [r7, #12]
 80064ca:	e001      	b.n	80064d0 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80064cc:	2300      	movs	r3, #0
 80064ce:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80064d0:	f001 fd4c 	bl	8007f6c <vPortExitCritical>

	return xReturn;
 80064d4:	68fb      	ldr	r3, [r7, #12]
}
 80064d6:	4618      	mov	r0, r3
 80064d8:	3710      	adds	r7, #16
 80064da:	46bd      	mov	sp, r7
 80064dc:	bd80      	pop	{r7, pc}

080064de <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80064de:	b580      	push	{r7, lr}
 80064e0:	b084      	sub	sp, #16
 80064e2:	af00      	add	r7, sp, #0
 80064e4:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80064e6:	f001 fd11 	bl	8007f0c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80064f2:	429a      	cmp	r2, r3
 80064f4:	d102      	bne.n	80064fc <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80064f6:	2301      	movs	r3, #1
 80064f8:	60fb      	str	r3, [r7, #12]
 80064fa:	e001      	b.n	8006500 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80064fc:	2300      	movs	r3, #0
 80064fe:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006500:	f001 fd34 	bl	8007f6c <vPortExitCritical>

	return xReturn;
 8006504:	68fb      	ldr	r3, [r7, #12]
}
 8006506:	4618      	mov	r0, r3
 8006508:	3710      	adds	r7, #16
 800650a:	46bd      	mov	sp, r7
 800650c:	bd80      	pop	{r7, pc}
	...

08006510 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8006510:	b480      	push	{r7}
 8006512:	b085      	sub	sp, #20
 8006514:	af00      	add	r7, sp, #0
 8006516:	6078      	str	r0, [r7, #4]
 8006518:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800651a:	2300      	movs	r3, #0
 800651c:	60fb      	str	r3, [r7, #12]
 800651e:	e014      	b.n	800654a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8006520:	4a0e      	ldr	r2, [pc, #56]	@ (800655c <vQueueAddToRegistry+0x4c>)
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8006528:	2b00      	cmp	r3, #0
 800652a:	d10b      	bne.n	8006544 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800652c:	490b      	ldr	r1, [pc, #44]	@ (800655c <vQueueAddToRegistry+0x4c>)
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	683a      	ldr	r2, [r7, #0]
 8006532:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8006536:	4a09      	ldr	r2, [pc, #36]	@ (800655c <vQueueAddToRegistry+0x4c>)
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	00db      	lsls	r3, r3, #3
 800653c:	4413      	add	r3, r2
 800653e:	687a      	ldr	r2, [r7, #4]
 8006540:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8006542:	e006      	b.n	8006552 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	3301      	adds	r3, #1
 8006548:	60fb      	str	r3, [r7, #12]
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	2b07      	cmp	r3, #7
 800654e:	d9e7      	bls.n	8006520 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8006550:	bf00      	nop
 8006552:	bf00      	nop
 8006554:	3714      	adds	r7, #20
 8006556:	46bd      	mov	sp, r7
 8006558:	bc80      	pop	{r7}
 800655a:	4770      	bx	lr
 800655c:	20000a64 	.word	0x20000a64

08006560 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8006560:	b480      	push	{r7}
 8006562:	b085      	sub	sp, #20
 8006564:	af00      	add	r7, sp, #0
 8006566:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006568:	2300      	movs	r3, #0
 800656a:	60fb      	str	r3, [r7, #12]
 800656c:	e016      	b.n	800659c <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800656e:	4a10      	ldr	r2, [pc, #64]	@ (80065b0 <vQueueUnregisterQueue+0x50>)
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	00db      	lsls	r3, r3, #3
 8006574:	4413      	add	r3, r2
 8006576:	685b      	ldr	r3, [r3, #4]
 8006578:	687a      	ldr	r2, [r7, #4]
 800657a:	429a      	cmp	r2, r3
 800657c:	d10b      	bne.n	8006596 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800657e:	4a0c      	ldr	r2, [pc, #48]	@ (80065b0 <vQueueUnregisterQueue+0x50>)
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	2100      	movs	r1, #0
 8006584:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8006588:	4a09      	ldr	r2, [pc, #36]	@ (80065b0 <vQueueUnregisterQueue+0x50>)
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	00db      	lsls	r3, r3, #3
 800658e:	4413      	add	r3, r2
 8006590:	2200      	movs	r2, #0
 8006592:	605a      	str	r2, [r3, #4]
				break;
 8006594:	e006      	b.n	80065a4 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	3301      	adds	r3, #1
 800659a:	60fb      	str	r3, [r7, #12]
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	2b07      	cmp	r3, #7
 80065a0:	d9e5      	bls.n	800656e <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 80065a2:	bf00      	nop
 80065a4:	bf00      	nop
 80065a6:	3714      	adds	r7, #20
 80065a8:	46bd      	mov	sp, r7
 80065aa:	bc80      	pop	{r7}
 80065ac:	4770      	bx	lr
 80065ae:	bf00      	nop
 80065b0:	20000a64 	.word	0x20000a64

080065b4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80065b4:	b580      	push	{r7, lr}
 80065b6:	b086      	sub	sp, #24
 80065b8:	af00      	add	r7, sp, #0
 80065ba:	60f8      	str	r0, [r7, #12]
 80065bc:	60b9      	str	r1, [r7, #8]
 80065be:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80065c4:	f001 fca2 	bl	8007f0c <vPortEnterCritical>
 80065c8:	697b      	ldr	r3, [r7, #20]
 80065ca:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80065ce:	b25b      	sxtb	r3, r3
 80065d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065d4:	d103      	bne.n	80065de <vQueueWaitForMessageRestricted+0x2a>
 80065d6:	697b      	ldr	r3, [r7, #20]
 80065d8:	2200      	movs	r2, #0
 80065da:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80065de:	697b      	ldr	r3, [r7, #20]
 80065e0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80065e4:	b25b      	sxtb	r3, r3
 80065e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065ea:	d103      	bne.n	80065f4 <vQueueWaitForMessageRestricted+0x40>
 80065ec:	697b      	ldr	r3, [r7, #20]
 80065ee:	2200      	movs	r2, #0
 80065f0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80065f4:	f001 fcba 	bl	8007f6c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80065f8:	697b      	ldr	r3, [r7, #20]
 80065fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d106      	bne.n	800660e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8006600:	697b      	ldr	r3, [r7, #20]
 8006602:	3324      	adds	r3, #36	@ 0x24
 8006604:	687a      	ldr	r2, [r7, #4]
 8006606:	68b9      	ldr	r1, [r7, #8]
 8006608:	4618      	mov	r0, r3
 800660a:	f000 fc69 	bl	8006ee0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800660e:	6978      	ldr	r0, [r7, #20]
 8006610:	f7ff fefd 	bl	800640e <prvUnlockQueue>
	}
 8006614:	bf00      	nop
 8006616:	3718      	adds	r7, #24
 8006618:	46bd      	mov	sp, r7
 800661a:	bd80      	pop	{r7, pc}

0800661c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800661c:	b580      	push	{r7, lr}
 800661e:	b08e      	sub	sp, #56	@ 0x38
 8006620:	af04      	add	r7, sp, #16
 8006622:	60f8      	str	r0, [r7, #12]
 8006624:	60b9      	str	r1, [r7, #8]
 8006626:	607a      	str	r2, [r7, #4]
 8006628:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800662a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800662c:	2b00      	cmp	r3, #0
 800662e:	d10b      	bne.n	8006648 <xTaskCreateStatic+0x2c>
	__asm volatile
 8006630:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006634:	f383 8811 	msr	BASEPRI, r3
 8006638:	f3bf 8f6f 	isb	sy
 800663c:	f3bf 8f4f 	dsb	sy
 8006640:	623b      	str	r3, [r7, #32]
}
 8006642:	bf00      	nop
 8006644:	bf00      	nop
 8006646:	e7fd      	b.n	8006644 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8006648:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800664a:	2b00      	cmp	r3, #0
 800664c:	d10b      	bne.n	8006666 <xTaskCreateStatic+0x4a>
	__asm volatile
 800664e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006652:	f383 8811 	msr	BASEPRI, r3
 8006656:	f3bf 8f6f 	isb	sy
 800665a:	f3bf 8f4f 	dsb	sy
 800665e:	61fb      	str	r3, [r7, #28]
}
 8006660:	bf00      	nop
 8006662:	bf00      	nop
 8006664:	e7fd      	b.n	8006662 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006666:	235c      	movs	r3, #92	@ 0x5c
 8006668:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800666a:	693b      	ldr	r3, [r7, #16]
 800666c:	2b5c      	cmp	r3, #92	@ 0x5c
 800666e:	d00b      	beq.n	8006688 <xTaskCreateStatic+0x6c>
	__asm volatile
 8006670:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006674:	f383 8811 	msr	BASEPRI, r3
 8006678:	f3bf 8f6f 	isb	sy
 800667c:	f3bf 8f4f 	dsb	sy
 8006680:	61bb      	str	r3, [r7, #24]
}
 8006682:	bf00      	nop
 8006684:	bf00      	nop
 8006686:	e7fd      	b.n	8006684 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8006688:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800668a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800668c:	2b00      	cmp	r3, #0
 800668e:	d01e      	beq.n	80066ce <xTaskCreateStatic+0xb2>
 8006690:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006692:	2b00      	cmp	r3, #0
 8006694:	d01b      	beq.n	80066ce <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006696:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006698:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800669a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800669c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800669e:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80066a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066a2:	2202      	movs	r2, #2
 80066a4:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80066a8:	2300      	movs	r3, #0
 80066aa:	9303      	str	r3, [sp, #12]
 80066ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066ae:	9302      	str	r3, [sp, #8]
 80066b0:	f107 0314 	add.w	r3, r7, #20
 80066b4:	9301      	str	r3, [sp, #4]
 80066b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066b8:	9300      	str	r3, [sp, #0]
 80066ba:	683b      	ldr	r3, [r7, #0]
 80066bc:	687a      	ldr	r2, [r7, #4]
 80066be:	68b9      	ldr	r1, [r7, #8]
 80066c0:	68f8      	ldr	r0, [r7, #12]
 80066c2:	f000 f850 	bl	8006766 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80066c6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80066c8:	f000 f8de 	bl	8006888 <prvAddNewTaskToReadyList>
 80066cc:	e001      	b.n	80066d2 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 80066ce:	2300      	movs	r3, #0
 80066d0:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80066d2:	697b      	ldr	r3, [r7, #20]
	}
 80066d4:	4618      	mov	r0, r3
 80066d6:	3728      	adds	r7, #40	@ 0x28
 80066d8:	46bd      	mov	sp, r7
 80066da:	bd80      	pop	{r7, pc}

080066dc <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80066dc:	b580      	push	{r7, lr}
 80066de:	b08c      	sub	sp, #48	@ 0x30
 80066e0:	af04      	add	r7, sp, #16
 80066e2:	60f8      	str	r0, [r7, #12]
 80066e4:	60b9      	str	r1, [r7, #8]
 80066e6:	603b      	str	r3, [r7, #0]
 80066e8:	4613      	mov	r3, r2
 80066ea:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80066ec:	88fb      	ldrh	r3, [r7, #6]
 80066ee:	009b      	lsls	r3, r3, #2
 80066f0:	4618      	mov	r0, r3
 80066f2:	f001 fd0d 	bl	8008110 <pvPortMalloc>
 80066f6:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80066f8:	697b      	ldr	r3, [r7, #20]
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d00e      	beq.n	800671c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80066fe:	205c      	movs	r0, #92	@ 0x5c
 8006700:	f001 fd06 	bl	8008110 <pvPortMalloc>
 8006704:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006706:	69fb      	ldr	r3, [r7, #28]
 8006708:	2b00      	cmp	r3, #0
 800670a:	d003      	beq.n	8006714 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800670c:	69fb      	ldr	r3, [r7, #28]
 800670e:	697a      	ldr	r2, [r7, #20]
 8006710:	631a      	str	r2, [r3, #48]	@ 0x30
 8006712:	e005      	b.n	8006720 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006714:	6978      	ldr	r0, [r7, #20]
 8006716:	f001 fdc9 	bl	80082ac <vPortFree>
 800671a:	e001      	b.n	8006720 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800671c:	2300      	movs	r3, #0
 800671e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006720:	69fb      	ldr	r3, [r7, #28]
 8006722:	2b00      	cmp	r3, #0
 8006724:	d017      	beq.n	8006756 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006726:	69fb      	ldr	r3, [r7, #28]
 8006728:	2200      	movs	r2, #0
 800672a:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800672e:	88fa      	ldrh	r2, [r7, #6]
 8006730:	2300      	movs	r3, #0
 8006732:	9303      	str	r3, [sp, #12]
 8006734:	69fb      	ldr	r3, [r7, #28]
 8006736:	9302      	str	r3, [sp, #8]
 8006738:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800673a:	9301      	str	r3, [sp, #4]
 800673c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800673e:	9300      	str	r3, [sp, #0]
 8006740:	683b      	ldr	r3, [r7, #0]
 8006742:	68b9      	ldr	r1, [r7, #8]
 8006744:	68f8      	ldr	r0, [r7, #12]
 8006746:	f000 f80e 	bl	8006766 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800674a:	69f8      	ldr	r0, [r7, #28]
 800674c:	f000 f89c 	bl	8006888 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006750:	2301      	movs	r3, #1
 8006752:	61bb      	str	r3, [r7, #24]
 8006754:	e002      	b.n	800675c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006756:	f04f 33ff 	mov.w	r3, #4294967295
 800675a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800675c:	69bb      	ldr	r3, [r7, #24]
	}
 800675e:	4618      	mov	r0, r3
 8006760:	3720      	adds	r7, #32
 8006762:	46bd      	mov	sp, r7
 8006764:	bd80      	pop	{r7, pc}

08006766 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006766:	b580      	push	{r7, lr}
 8006768:	b088      	sub	sp, #32
 800676a:	af00      	add	r7, sp, #0
 800676c:	60f8      	str	r0, [r7, #12]
 800676e:	60b9      	str	r1, [r7, #8]
 8006770:	607a      	str	r2, [r7, #4]
 8006772:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8006774:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006776:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	009b      	lsls	r3, r3, #2
 800677c:	461a      	mov	r2, r3
 800677e:	21a5      	movs	r1, #165	@ 0xa5
 8006780:	f002 fd26 	bl	80091d0 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8006784:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006786:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800678e:	3b01      	subs	r3, #1
 8006790:	009b      	lsls	r3, r3, #2
 8006792:	4413      	add	r3, r2
 8006794:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006796:	69bb      	ldr	r3, [r7, #24]
 8006798:	f023 0307 	bic.w	r3, r3, #7
 800679c:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800679e:	69bb      	ldr	r3, [r7, #24]
 80067a0:	f003 0307 	and.w	r3, r3, #7
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d00b      	beq.n	80067c0 <prvInitialiseNewTask+0x5a>
	__asm volatile
 80067a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80067ac:	f383 8811 	msr	BASEPRI, r3
 80067b0:	f3bf 8f6f 	isb	sy
 80067b4:	f3bf 8f4f 	dsb	sy
 80067b8:	617b      	str	r3, [r7, #20]
}
 80067ba:	bf00      	nop
 80067bc:	bf00      	nop
 80067be:	e7fd      	b.n	80067bc <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80067c0:	68bb      	ldr	r3, [r7, #8]
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d01f      	beq.n	8006806 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80067c6:	2300      	movs	r3, #0
 80067c8:	61fb      	str	r3, [r7, #28]
 80067ca:	e012      	b.n	80067f2 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80067cc:	68ba      	ldr	r2, [r7, #8]
 80067ce:	69fb      	ldr	r3, [r7, #28]
 80067d0:	4413      	add	r3, r2
 80067d2:	7819      	ldrb	r1, [r3, #0]
 80067d4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80067d6:	69fb      	ldr	r3, [r7, #28]
 80067d8:	4413      	add	r3, r2
 80067da:	3334      	adds	r3, #52	@ 0x34
 80067dc:	460a      	mov	r2, r1
 80067de:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80067e0:	68ba      	ldr	r2, [r7, #8]
 80067e2:	69fb      	ldr	r3, [r7, #28]
 80067e4:	4413      	add	r3, r2
 80067e6:	781b      	ldrb	r3, [r3, #0]
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d006      	beq.n	80067fa <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80067ec:	69fb      	ldr	r3, [r7, #28]
 80067ee:	3301      	adds	r3, #1
 80067f0:	61fb      	str	r3, [r7, #28]
 80067f2:	69fb      	ldr	r3, [r7, #28]
 80067f4:	2b0f      	cmp	r3, #15
 80067f6:	d9e9      	bls.n	80067cc <prvInitialiseNewTask+0x66>
 80067f8:	e000      	b.n	80067fc <prvInitialiseNewTask+0x96>
			{
				break;
 80067fa:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80067fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067fe:	2200      	movs	r2, #0
 8006800:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006804:	e003      	b.n	800680e <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8006806:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006808:	2200      	movs	r2, #0
 800680a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800680e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006810:	2b37      	cmp	r3, #55	@ 0x37
 8006812:	d901      	bls.n	8006818 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006814:	2337      	movs	r3, #55	@ 0x37
 8006816:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006818:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800681a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800681c:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800681e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006820:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006822:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8006824:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006826:	2200      	movs	r2, #0
 8006828:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800682a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800682c:	3304      	adds	r3, #4
 800682e:	4618      	mov	r0, r3
 8006830:	f7fe fe39 	bl	80054a6 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006834:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006836:	3318      	adds	r3, #24
 8006838:	4618      	mov	r0, r3
 800683a:	f7fe fe34 	bl	80054a6 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800683e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006840:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006842:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006844:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006846:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800684a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800684c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800684e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006850:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006852:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006854:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006856:	2200      	movs	r2, #0
 8006858:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800685a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800685c:	2200      	movs	r2, #0
 800685e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006862:	683a      	ldr	r2, [r7, #0]
 8006864:	68f9      	ldr	r1, [r7, #12]
 8006866:	69b8      	ldr	r0, [r7, #24]
 8006868:	f001 fa60 	bl	8007d2c <pxPortInitialiseStack>
 800686c:	4602      	mov	r2, r0
 800686e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006870:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8006872:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006874:	2b00      	cmp	r3, #0
 8006876:	d002      	beq.n	800687e <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006878:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800687a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800687c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800687e:	bf00      	nop
 8006880:	3720      	adds	r7, #32
 8006882:	46bd      	mov	sp, r7
 8006884:	bd80      	pop	{r7, pc}
	...

08006888 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006888:	b580      	push	{r7, lr}
 800688a:	b082      	sub	sp, #8
 800688c:	af00      	add	r7, sp, #0
 800688e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006890:	f001 fb3c 	bl	8007f0c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006894:	4b2d      	ldr	r3, [pc, #180]	@ (800694c <prvAddNewTaskToReadyList+0xc4>)
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	3301      	adds	r3, #1
 800689a:	4a2c      	ldr	r2, [pc, #176]	@ (800694c <prvAddNewTaskToReadyList+0xc4>)
 800689c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800689e:	4b2c      	ldr	r3, [pc, #176]	@ (8006950 <prvAddNewTaskToReadyList+0xc8>)
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d109      	bne.n	80068ba <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80068a6:	4a2a      	ldr	r2, [pc, #168]	@ (8006950 <prvAddNewTaskToReadyList+0xc8>)
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80068ac:	4b27      	ldr	r3, [pc, #156]	@ (800694c <prvAddNewTaskToReadyList+0xc4>)
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	2b01      	cmp	r3, #1
 80068b2:	d110      	bne.n	80068d6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80068b4:	f000 fc42 	bl	800713c <prvInitialiseTaskLists>
 80068b8:	e00d      	b.n	80068d6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80068ba:	4b26      	ldr	r3, [pc, #152]	@ (8006954 <prvAddNewTaskToReadyList+0xcc>)
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d109      	bne.n	80068d6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80068c2:	4b23      	ldr	r3, [pc, #140]	@ (8006950 <prvAddNewTaskToReadyList+0xc8>)
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80068cc:	429a      	cmp	r2, r3
 80068ce:	d802      	bhi.n	80068d6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80068d0:	4a1f      	ldr	r2, [pc, #124]	@ (8006950 <prvAddNewTaskToReadyList+0xc8>)
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80068d6:	4b20      	ldr	r3, [pc, #128]	@ (8006958 <prvAddNewTaskToReadyList+0xd0>)
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	3301      	adds	r3, #1
 80068dc:	4a1e      	ldr	r2, [pc, #120]	@ (8006958 <prvAddNewTaskToReadyList+0xd0>)
 80068de:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80068e0:	4b1d      	ldr	r3, [pc, #116]	@ (8006958 <prvAddNewTaskToReadyList+0xd0>)
 80068e2:	681a      	ldr	r2, [r3, #0]
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80068ec:	4b1b      	ldr	r3, [pc, #108]	@ (800695c <prvAddNewTaskToReadyList+0xd4>)
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	429a      	cmp	r2, r3
 80068f2:	d903      	bls.n	80068fc <prvAddNewTaskToReadyList+0x74>
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80068f8:	4a18      	ldr	r2, [pc, #96]	@ (800695c <prvAddNewTaskToReadyList+0xd4>)
 80068fa:	6013      	str	r3, [r2, #0]
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006900:	4613      	mov	r3, r2
 8006902:	009b      	lsls	r3, r3, #2
 8006904:	4413      	add	r3, r2
 8006906:	009b      	lsls	r3, r3, #2
 8006908:	4a15      	ldr	r2, [pc, #84]	@ (8006960 <prvAddNewTaskToReadyList+0xd8>)
 800690a:	441a      	add	r2, r3
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	3304      	adds	r3, #4
 8006910:	4619      	mov	r1, r3
 8006912:	4610      	mov	r0, r2
 8006914:	f7fe fdd3 	bl	80054be <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006918:	f001 fb28 	bl	8007f6c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800691c:	4b0d      	ldr	r3, [pc, #52]	@ (8006954 <prvAddNewTaskToReadyList+0xcc>)
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	2b00      	cmp	r3, #0
 8006922:	d00e      	beq.n	8006942 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006924:	4b0a      	ldr	r3, [pc, #40]	@ (8006950 <prvAddNewTaskToReadyList+0xc8>)
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800692e:	429a      	cmp	r2, r3
 8006930:	d207      	bcs.n	8006942 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006932:	4b0c      	ldr	r3, [pc, #48]	@ (8006964 <prvAddNewTaskToReadyList+0xdc>)
 8006934:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006938:	601a      	str	r2, [r3, #0]
 800693a:	f3bf 8f4f 	dsb	sy
 800693e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006942:	bf00      	nop
 8006944:	3708      	adds	r7, #8
 8006946:	46bd      	mov	sp, r7
 8006948:	bd80      	pop	{r7, pc}
 800694a:	bf00      	nop
 800694c:	20000f78 	.word	0x20000f78
 8006950:	20000aa4 	.word	0x20000aa4
 8006954:	20000f84 	.word	0x20000f84
 8006958:	20000f94 	.word	0x20000f94
 800695c:	20000f80 	.word	0x20000f80
 8006960:	20000aa8 	.word	0x20000aa8
 8006964:	e000ed04 	.word	0xe000ed04

08006968 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006968:	b580      	push	{r7, lr}
 800696a:	b084      	sub	sp, #16
 800696c:	af00      	add	r7, sp, #0
 800696e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006970:	2300      	movs	r3, #0
 8006972:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	2b00      	cmp	r3, #0
 8006978:	d018      	beq.n	80069ac <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800697a:	4b14      	ldr	r3, [pc, #80]	@ (80069cc <vTaskDelay+0x64>)
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	2b00      	cmp	r3, #0
 8006980:	d00b      	beq.n	800699a <vTaskDelay+0x32>
	__asm volatile
 8006982:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006986:	f383 8811 	msr	BASEPRI, r3
 800698a:	f3bf 8f6f 	isb	sy
 800698e:	f3bf 8f4f 	dsb	sy
 8006992:	60bb      	str	r3, [r7, #8]
}
 8006994:	bf00      	nop
 8006996:	bf00      	nop
 8006998:	e7fd      	b.n	8006996 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800699a:	f000 f883 	bl	8006aa4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800699e:	2100      	movs	r1, #0
 80069a0:	6878      	ldr	r0, [r7, #4]
 80069a2:	f000 fe17 	bl	80075d4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80069a6:	f000 f88b 	bl	8006ac0 <xTaskResumeAll>
 80069aa:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d107      	bne.n	80069c2 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 80069b2:	4b07      	ldr	r3, [pc, #28]	@ (80069d0 <vTaskDelay+0x68>)
 80069b4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80069b8:	601a      	str	r2, [r3, #0]
 80069ba:	f3bf 8f4f 	dsb	sy
 80069be:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80069c2:	bf00      	nop
 80069c4:	3710      	adds	r7, #16
 80069c6:	46bd      	mov	sp, r7
 80069c8:	bd80      	pop	{r7, pc}
 80069ca:	bf00      	nop
 80069cc:	20000fa0 	.word	0x20000fa0
 80069d0:	e000ed04 	.word	0xe000ed04

080069d4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80069d4:	b580      	push	{r7, lr}
 80069d6:	b08a      	sub	sp, #40	@ 0x28
 80069d8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80069da:	2300      	movs	r3, #0
 80069dc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80069de:	2300      	movs	r3, #0
 80069e0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80069e2:	463a      	mov	r2, r7
 80069e4:	1d39      	adds	r1, r7, #4
 80069e6:	f107 0308 	add.w	r3, r7, #8
 80069ea:	4618      	mov	r0, r3
 80069ec:	f7fe fd0a 	bl	8005404 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80069f0:	6839      	ldr	r1, [r7, #0]
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	68ba      	ldr	r2, [r7, #8]
 80069f6:	9202      	str	r2, [sp, #8]
 80069f8:	9301      	str	r3, [sp, #4]
 80069fa:	2300      	movs	r3, #0
 80069fc:	9300      	str	r3, [sp, #0]
 80069fe:	2300      	movs	r3, #0
 8006a00:	460a      	mov	r2, r1
 8006a02:	4922      	ldr	r1, [pc, #136]	@ (8006a8c <vTaskStartScheduler+0xb8>)
 8006a04:	4822      	ldr	r0, [pc, #136]	@ (8006a90 <vTaskStartScheduler+0xbc>)
 8006a06:	f7ff fe09 	bl	800661c <xTaskCreateStatic>
 8006a0a:	4603      	mov	r3, r0
 8006a0c:	4a21      	ldr	r2, [pc, #132]	@ (8006a94 <vTaskStartScheduler+0xc0>)
 8006a0e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006a10:	4b20      	ldr	r3, [pc, #128]	@ (8006a94 <vTaskStartScheduler+0xc0>)
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d002      	beq.n	8006a1e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006a18:	2301      	movs	r3, #1
 8006a1a:	617b      	str	r3, [r7, #20]
 8006a1c:	e001      	b.n	8006a22 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006a1e:	2300      	movs	r3, #0
 8006a20:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8006a22:	697b      	ldr	r3, [r7, #20]
 8006a24:	2b01      	cmp	r3, #1
 8006a26:	d102      	bne.n	8006a2e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8006a28:	f000 fe28 	bl	800767c <xTimerCreateTimerTask>
 8006a2c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006a2e:	697b      	ldr	r3, [r7, #20]
 8006a30:	2b01      	cmp	r3, #1
 8006a32:	d116      	bne.n	8006a62 <vTaskStartScheduler+0x8e>
	__asm volatile
 8006a34:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a38:	f383 8811 	msr	BASEPRI, r3
 8006a3c:	f3bf 8f6f 	isb	sy
 8006a40:	f3bf 8f4f 	dsb	sy
 8006a44:	613b      	str	r3, [r7, #16]
}
 8006a46:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006a48:	4b13      	ldr	r3, [pc, #76]	@ (8006a98 <vTaskStartScheduler+0xc4>)
 8006a4a:	f04f 32ff 	mov.w	r2, #4294967295
 8006a4e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006a50:	4b12      	ldr	r3, [pc, #72]	@ (8006a9c <vTaskStartScheduler+0xc8>)
 8006a52:	2201      	movs	r2, #1
 8006a54:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006a56:	4b12      	ldr	r3, [pc, #72]	@ (8006aa0 <vTaskStartScheduler+0xcc>)
 8006a58:	2200      	movs	r2, #0
 8006a5a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006a5c:	f001 f9e4 	bl	8007e28 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006a60:	e00f      	b.n	8006a82 <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006a62:	697b      	ldr	r3, [r7, #20]
 8006a64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a68:	d10b      	bne.n	8006a82 <vTaskStartScheduler+0xae>
	__asm volatile
 8006a6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a6e:	f383 8811 	msr	BASEPRI, r3
 8006a72:	f3bf 8f6f 	isb	sy
 8006a76:	f3bf 8f4f 	dsb	sy
 8006a7a:	60fb      	str	r3, [r7, #12]
}
 8006a7c:	bf00      	nop
 8006a7e:	bf00      	nop
 8006a80:	e7fd      	b.n	8006a7e <vTaskStartScheduler+0xaa>
}
 8006a82:	bf00      	nop
 8006a84:	3718      	adds	r7, #24
 8006a86:	46bd      	mov	sp, r7
 8006a88:	bd80      	pop	{r7, pc}
 8006a8a:	bf00      	nop
 8006a8c:	0800b380 	.word	0x0800b380
 8006a90:	0800710d 	.word	0x0800710d
 8006a94:	20000f9c 	.word	0x20000f9c
 8006a98:	20000f98 	.word	0x20000f98
 8006a9c:	20000f84 	.word	0x20000f84
 8006aa0:	20000f7c 	.word	0x20000f7c

08006aa4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006aa4:	b480      	push	{r7}
 8006aa6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8006aa8:	4b04      	ldr	r3, [pc, #16]	@ (8006abc <vTaskSuspendAll+0x18>)
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	3301      	adds	r3, #1
 8006aae:	4a03      	ldr	r2, [pc, #12]	@ (8006abc <vTaskSuspendAll+0x18>)
 8006ab0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8006ab2:	bf00      	nop
 8006ab4:	46bd      	mov	sp, r7
 8006ab6:	bc80      	pop	{r7}
 8006ab8:	4770      	bx	lr
 8006aba:	bf00      	nop
 8006abc:	20000fa0 	.word	0x20000fa0

08006ac0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006ac0:	b580      	push	{r7, lr}
 8006ac2:	b084      	sub	sp, #16
 8006ac4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006ac6:	2300      	movs	r3, #0
 8006ac8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006aca:	2300      	movs	r3, #0
 8006acc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006ace:	4b42      	ldr	r3, [pc, #264]	@ (8006bd8 <xTaskResumeAll+0x118>)
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d10b      	bne.n	8006aee <xTaskResumeAll+0x2e>
	__asm volatile
 8006ad6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ada:	f383 8811 	msr	BASEPRI, r3
 8006ade:	f3bf 8f6f 	isb	sy
 8006ae2:	f3bf 8f4f 	dsb	sy
 8006ae6:	603b      	str	r3, [r7, #0]
}
 8006ae8:	bf00      	nop
 8006aea:	bf00      	nop
 8006aec:	e7fd      	b.n	8006aea <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006aee:	f001 fa0d 	bl	8007f0c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006af2:	4b39      	ldr	r3, [pc, #228]	@ (8006bd8 <xTaskResumeAll+0x118>)
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	3b01      	subs	r3, #1
 8006af8:	4a37      	ldr	r2, [pc, #220]	@ (8006bd8 <xTaskResumeAll+0x118>)
 8006afa:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006afc:	4b36      	ldr	r3, [pc, #216]	@ (8006bd8 <xTaskResumeAll+0x118>)
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d162      	bne.n	8006bca <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006b04:	4b35      	ldr	r3, [pc, #212]	@ (8006bdc <xTaskResumeAll+0x11c>)
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d05e      	beq.n	8006bca <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006b0c:	e02f      	b.n	8006b6e <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006b0e:	4b34      	ldr	r3, [pc, #208]	@ (8006be0 <xTaskResumeAll+0x120>)
 8006b10:	68db      	ldr	r3, [r3, #12]
 8006b12:	68db      	ldr	r3, [r3, #12]
 8006b14:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	3318      	adds	r3, #24
 8006b1a:	4618      	mov	r0, r3
 8006b1c:	f7fe fd2a 	bl	8005574 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	3304      	adds	r3, #4
 8006b24:	4618      	mov	r0, r3
 8006b26:	f7fe fd25 	bl	8005574 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006b2e:	4b2d      	ldr	r3, [pc, #180]	@ (8006be4 <xTaskResumeAll+0x124>)
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	429a      	cmp	r2, r3
 8006b34:	d903      	bls.n	8006b3e <xTaskResumeAll+0x7e>
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b3a:	4a2a      	ldr	r2, [pc, #168]	@ (8006be4 <xTaskResumeAll+0x124>)
 8006b3c:	6013      	str	r3, [r2, #0]
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006b42:	4613      	mov	r3, r2
 8006b44:	009b      	lsls	r3, r3, #2
 8006b46:	4413      	add	r3, r2
 8006b48:	009b      	lsls	r3, r3, #2
 8006b4a:	4a27      	ldr	r2, [pc, #156]	@ (8006be8 <xTaskResumeAll+0x128>)
 8006b4c:	441a      	add	r2, r3
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	3304      	adds	r3, #4
 8006b52:	4619      	mov	r1, r3
 8006b54:	4610      	mov	r0, r2
 8006b56:	f7fe fcb2 	bl	80054be <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006b5e:	4b23      	ldr	r3, [pc, #140]	@ (8006bec <xTaskResumeAll+0x12c>)
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b64:	429a      	cmp	r2, r3
 8006b66:	d302      	bcc.n	8006b6e <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8006b68:	4b21      	ldr	r3, [pc, #132]	@ (8006bf0 <xTaskResumeAll+0x130>)
 8006b6a:	2201      	movs	r2, #1
 8006b6c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006b6e:	4b1c      	ldr	r3, [pc, #112]	@ (8006be0 <xTaskResumeAll+0x120>)
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d1cb      	bne.n	8006b0e <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d001      	beq.n	8006b80 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006b7c:	f000 fb7c 	bl	8007278 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8006b80:	4b1c      	ldr	r3, [pc, #112]	@ (8006bf4 <xTaskResumeAll+0x134>)
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d010      	beq.n	8006bae <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006b8c:	f000 f844 	bl	8006c18 <xTaskIncrementTick>
 8006b90:	4603      	mov	r3, r0
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d002      	beq.n	8006b9c <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8006b96:	4b16      	ldr	r3, [pc, #88]	@ (8006bf0 <xTaskResumeAll+0x130>)
 8006b98:	2201      	movs	r2, #1
 8006b9a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	3b01      	subs	r3, #1
 8006ba0:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d1f1      	bne.n	8006b8c <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8006ba8:	4b12      	ldr	r3, [pc, #72]	@ (8006bf4 <xTaskResumeAll+0x134>)
 8006baa:	2200      	movs	r2, #0
 8006bac:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006bae:	4b10      	ldr	r3, [pc, #64]	@ (8006bf0 <xTaskResumeAll+0x130>)
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d009      	beq.n	8006bca <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006bb6:	2301      	movs	r3, #1
 8006bb8:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006bba:	4b0f      	ldr	r3, [pc, #60]	@ (8006bf8 <xTaskResumeAll+0x138>)
 8006bbc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006bc0:	601a      	str	r2, [r3, #0]
 8006bc2:	f3bf 8f4f 	dsb	sy
 8006bc6:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006bca:	f001 f9cf 	bl	8007f6c <vPortExitCritical>

	return xAlreadyYielded;
 8006bce:	68bb      	ldr	r3, [r7, #8]
}
 8006bd0:	4618      	mov	r0, r3
 8006bd2:	3710      	adds	r7, #16
 8006bd4:	46bd      	mov	sp, r7
 8006bd6:	bd80      	pop	{r7, pc}
 8006bd8:	20000fa0 	.word	0x20000fa0
 8006bdc:	20000f78 	.word	0x20000f78
 8006be0:	20000f38 	.word	0x20000f38
 8006be4:	20000f80 	.word	0x20000f80
 8006be8:	20000aa8 	.word	0x20000aa8
 8006bec:	20000aa4 	.word	0x20000aa4
 8006bf0:	20000f8c 	.word	0x20000f8c
 8006bf4:	20000f88 	.word	0x20000f88
 8006bf8:	e000ed04 	.word	0xe000ed04

08006bfc <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006bfc:	b480      	push	{r7}
 8006bfe:	b083      	sub	sp, #12
 8006c00:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8006c02:	4b04      	ldr	r3, [pc, #16]	@ (8006c14 <xTaskGetTickCount+0x18>)
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8006c08:	687b      	ldr	r3, [r7, #4]
}
 8006c0a:	4618      	mov	r0, r3
 8006c0c:	370c      	adds	r7, #12
 8006c0e:	46bd      	mov	sp, r7
 8006c10:	bc80      	pop	{r7}
 8006c12:	4770      	bx	lr
 8006c14:	20000f7c 	.word	0x20000f7c

08006c18 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006c18:	b580      	push	{r7, lr}
 8006c1a:	b086      	sub	sp, #24
 8006c1c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006c1e:	2300      	movs	r3, #0
 8006c20:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006c22:	4b4f      	ldr	r3, [pc, #316]	@ (8006d60 <xTaskIncrementTick+0x148>)
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	f040 8090 	bne.w	8006d4c <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006c2c:	4b4d      	ldr	r3, [pc, #308]	@ (8006d64 <xTaskIncrementTick+0x14c>)
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	3301      	adds	r3, #1
 8006c32:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006c34:	4a4b      	ldr	r2, [pc, #300]	@ (8006d64 <xTaskIncrementTick+0x14c>)
 8006c36:	693b      	ldr	r3, [r7, #16]
 8006c38:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006c3a:	693b      	ldr	r3, [r7, #16]
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d121      	bne.n	8006c84 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8006c40:	4b49      	ldr	r3, [pc, #292]	@ (8006d68 <xTaskIncrementTick+0x150>)
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d00b      	beq.n	8006c62 <xTaskIncrementTick+0x4a>
	__asm volatile
 8006c4a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c4e:	f383 8811 	msr	BASEPRI, r3
 8006c52:	f3bf 8f6f 	isb	sy
 8006c56:	f3bf 8f4f 	dsb	sy
 8006c5a:	603b      	str	r3, [r7, #0]
}
 8006c5c:	bf00      	nop
 8006c5e:	bf00      	nop
 8006c60:	e7fd      	b.n	8006c5e <xTaskIncrementTick+0x46>
 8006c62:	4b41      	ldr	r3, [pc, #260]	@ (8006d68 <xTaskIncrementTick+0x150>)
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	60fb      	str	r3, [r7, #12]
 8006c68:	4b40      	ldr	r3, [pc, #256]	@ (8006d6c <xTaskIncrementTick+0x154>)
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	4a3e      	ldr	r2, [pc, #248]	@ (8006d68 <xTaskIncrementTick+0x150>)
 8006c6e:	6013      	str	r3, [r2, #0]
 8006c70:	4a3e      	ldr	r2, [pc, #248]	@ (8006d6c <xTaskIncrementTick+0x154>)
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	6013      	str	r3, [r2, #0]
 8006c76:	4b3e      	ldr	r3, [pc, #248]	@ (8006d70 <xTaskIncrementTick+0x158>)
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	3301      	adds	r3, #1
 8006c7c:	4a3c      	ldr	r2, [pc, #240]	@ (8006d70 <xTaskIncrementTick+0x158>)
 8006c7e:	6013      	str	r3, [r2, #0]
 8006c80:	f000 fafa 	bl	8007278 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006c84:	4b3b      	ldr	r3, [pc, #236]	@ (8006d74 <xTaskIncrementTick+0x15c>)
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	693a      	ldr	r2, [r7, #16]
 8006c8a:	429a      	cmp	r2, r3
 8006c8c:	d349      	bcc.n	8006d22 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006c8e:	4b36      	ldr	r3, [pc, #216]	@ (8006d68 <xTaskIncrementTick+0x150>)
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d104      	bne.n	8006ca2 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006c98:	4b36      	ldr	r3, [pc, #216]	@ (8006d74 <xTaskIncrementTick+0x15c>)
 8006c9a:	f04f 32ff 	mov.w	r2, #4294967295
 8006c9e:	601a      	str	r2, [r3, #0]
					break;
 8006ca0:	e03f      	b.n	8006d22 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006ca2:	4b31      	ldr	r3, [pc, #196]	@ (8006d68 <xTaskIncrementTick+0x150>)
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	68db      	ldr	r3, [r3, #12]
 8006ca8:	68db      	ldr	r3, [r3, #12]
 8006caa:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006cac:	68bb      	ldr	r3, [r7, #8]
 8006cae:	685b      	ldr	r3, [r3, #4]
 8006cb0:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006cb2:	693a      	ldr	r2, [r7, #16]
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	429a      	cmp	r2, r3
 8006cb8:	d203      	bcs.n	8006cc2 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006cba:	4a2e      	ldr	r2, [pc, #184]	@ (8006d74 <xTaskIncrementTick+0x15c>)
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8006cc0:	e02f      	b.n	8006d22 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006cc2:	68bb      	ldr	r3, [r7, #8]
 8006cc4:	3304      	adds	r3, #4
 8006cc6:	4618      	mov	r0, r3
 8006cc8:	f7fe fc54 	bl	8005574 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006ccc:	68bb      	ldr	r3, [r7, #8]
 8006cce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d004      	beq.n	8006cde <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006cd4:	68bb      	ldr	r3, [r7, #8]
 8006cd6:	3318      	adds	r3, #24
 8006cd8:	4618      	mov	r0, r3
 8006cda:	f7fe fc4b 	bl	8005574 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006cde:	68bb      	ldr	r3, [r7, #8]
 8006ce0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006ce2:	4b25      	ldr	r3, [pc, #148]	@ (8006d78 <xTaskIncrementTick+0x160>)
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	429a      	cmp	r2, r3
 8006ce8:	d903      	bls.n	8006cf2 <xTaskIncrementTick+0xda>
 8006cea:	68bb      	ldr	r3, [r7, #8]
 8006cec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006cee:	4a22      	ldr	r2, [pc, #136]	@ (8006d78 <xTaskIncrementTick+0x160>)
 8006cf0:	6013      	str	r3, [r2, #0]
 8006cf2:	68bb      	ldr	r3, [r7, #8]
 8006cf4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006cf6:	4613      	mov	r3, r2
 8006cf8:	009b      	lsls	r3, r3, #2
 8006cfa:	4413      	add	r3, r2
 8006cfc:	009b      	lsls	r3, r3, #2
 8006cfe:	4a1f      	ldr	r2, [pc, #124]	@ (8006d7c <xTaskIncrementTick+0x164>)
 8006d00:	441a      	add	r2, r3
 8006d02:	68bb      	ldr	r3, [r7, #8]
 8006d04:	3304      	adds	r3, #4
 8006d06:	4619      	mov	r1, r3
 8006d08:	4610      	mov	r0, r2
 8006d0a:	f7fe fbd8 	bl	80054be <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006d0e:	68bb      	ldr	r3, [r7, #8]
 8006d10:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006d12:	4b1b      	ldr	r3, [pc, #108]	@ (8006d80 <xTaskIncrementTick+0x168>)
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d18:	429a      	cmp	r2, r3
 8006d1a:	d3b8      	bcc.n	8006c8e <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8006d1c:	2301      	movs	r3, #1
 8006d1e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006d20:	e7b5      	b.n	8006c8e <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006d22:	4b17      	ldr	r3, [pc, #92]	@ (8006d80 <xTaskIncrementTick+0x168>)
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006d28:	4914      	ldr	r1, [pc, #80]	@ (8006d7c <xTaskIncrementTick+0x164>)
 8006d2a:	4613      	mov	r3, r2
 8006d2c:	009b      	lsls	r3, r3, #2
 8006d2e:	4413      	add	r3, r2
 8006d30:	009b      	lsls	r3, r3, #2
 8006d32:	440b      	add	r3, r1
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	2b01      	cmp	r3, #1
 8006d38:	d901      	bls.n	8006d3e <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8006d3a:	2301      	movs	r3, #1
 8006d3c:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8006d3e:	4b11      	ldr	r3, [pc, #68]	@ (8006d84 <xTaskIncrementTick+0x16c>)
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d007      	beq.n	8006d56 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8006d46:	2301      	movs	r3, #1
 8006d48:	617b      	str	r3, [r7, #20]
 8006d4a:	e004      	b.n	8006d56 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8006d4c:	4b0e      	ldr	r3, [pc, #56]	@ (8006d88 <xTaskIncrementTick+0x170>)
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	3301      	adds	r3, #1
 8006d52:	4a0d      	ldr	r2, [pc, #52]	@ (8006d88 <xTaskIncrementTick+0x170>)
 8006d54:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8006d56:	697b      	ldr	r3, [r7, #20]
}
 8006d58:	4618      	mov	r0, r3
 8006d5a:	3718      	adds	r7, #24
 8006d5c:	46bd      	mov	sp, r7
 8006d5e:	bd80      	pop	{r7, pc}
 8006d60:	20000fa0 	.word	0x20000fa0
 8006d64:	20000f7c 	.word	0x20000f7c
 8006d68:	20000f30 	.word	0x20000f30
 8006d6c:	20000f34 	.word	0x20000f34
 8006d70:	20000f90 	.word	0x20000f90
 8006d74:	20000f98 	.word	0x20000f98
 8006d78:	20000f80 	.word	0x20000f80
 8006d7c:	20000aa8 	.word	0x20000aa8
 8006d80:	20000aa4 	.word	0x20000aa4
 8006d84:	20000f8c 	.word	0x20000f8c
 8006d88:	20000f88 	.word	0x20000f88

08006d8c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006d8c:	b580      	push	{r7, lr}
 8006d8e:	b086      	sub	sp, #24
 8006d90:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006d92:	4b3b      	ldr	r3, [pc, #236]	@ (8006e80 <vTaskSwitchContext+0xf4>)
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d003      	beq.n	8006da2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006d9a:	4b3a      	ldr	r3, [pc, #232]	@ (8006e84 <vTaskSwitchContext+0xf8>)
 8006d9c:	2201      	movs	r2, #1
 8006d9e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006da0:	e069      	b.n	8006e76 <vTaskSwitchContext+0xea>
		xYieldPending = pdFALSE;
 8006da2:	4b38      	ldr	r3, [pc, #224]	@ (8006e84 <vTaskSwitchContext+0xf8>)
 8006da4:	2200      	movs	r2, #0
 8006da6:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 8006da8:	4b37      	ldr	r3, [pc, #220]	@ (8006e88 <vTaskSwitchContext+0xfc>)
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006dae:	613b      	str	r3, [r7, #16]
 8006db0:	f04f 33a5 	mov.w	r3, #2779096485	@ 0xa5a5a5a5
 8006db4:	60fb      	str	r3, [r7, #12]
 8006db6:	693b      	ldr	r3, [r7, #16]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	68fa      	ldr	r2, [r7, #12]
 8006dbc:	429a      	cmp	r2, r3
 8006dbe:	d111      	bne.n	8006de4 <vTaskSwitchContext+0x58>
 8006dc0:	693b      	ldr	r3, [r7, #16]
 8006dc2:	3304      	adds	r3, #4
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	68fa      	ldr	r2, [r7, #12]
 8006dc8:	429a      	cmp	r2, r3
 8006dca:	d10b      	bne.n	8006de4 <vTaskSwitchContext+0x58>
 8006dcc:	693b      	ldr	r3, [r7, #16]
 8006dce:	3308      	adds	r3, #8
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	68fa      	ldr	r2, [r7, #12]
 8006dd4:	429a      	cmp	r2, r3
 8006dd6:	d105      	bne.n	8006de4 <vTaskSwitchContext+0x58>
 8006dd8:	693b      	ldr	r3, [r7, #16]
 8006dda:	330c      	adds	r3, #12
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	68fa      	ldr	r2, [r7, #12]
 8006de0:	429a      	cmp	r2, r3
 8006de2:	d008      	beq.n	8006df6 <vTaskSwitchContext+0x6a>
 8006de4:	4b28      	ldr	r3, [pc, #160]	@ (8006e88 <vTaskSwitchContext+0xfc>)
 8006de6:	681a      	ldr	r2, [r3, #0]
 8006de8:	4b27      	ldr	r3, [pc, #156]	@ (8006e88 <vTaskSwitchContext+0xfc>)
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	3334      	adds	r3, #52	@ 0x34
 8006dee:	4619      	mov	r1, r3
 8006df0:	4610      	mov	r0, r2
 8006df2:	f7fe faf5 	bl	80053e0 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006df6:	4b25      	ldr	r3, [pc, #148]	@ (8006e8c <vTaskSwitchContext+0x100>)
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	617b      	str	r3, [r7, #20]
 8006dfc:	e011      	b.n	8006e22 <vTaskSwitchContext+0x96>
 8006dfe:	697b      	ldr	r3, [r7, #20]
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d10b      	bne.n	8006e1c <vTaskSwitchContext+0x90>
	__asm volatile
 8006e04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e08:	f383 8811 	msr	BASEPRI, r3
 8006e0c:	f3bf 8f6f 	isb	sy
 8006e10:	f3bf 8f4f 	dsb	sy
 8006e14:	607b      	str	r3, [r7, #4]
}
 8006e16:	bf00      	nop
 8006e18:	bf00      	nop
 8006e1a:	e7fd      	b.n	8006e18 <vTaskSwitchContext+0x8c>
 8006e1c:	697b      	ldr	r3, [r7, #20]
 8006e1e:	3b01      	subs	r3, #1
 8006e20:	617b      	str	r3, [r7, #20]
 8006e22:	491b      	ldr	r1, [pc, #108]	@ (8006e90 <vTaskSwitchContext+0x104>)
 8006e24:	697a      	ldr	r2, [r7, #20]
 8006e26:	4613      	mov	r3, r2
 8006e28:	009b      	lsls	r3, r3, #2
 8006e2a:	4413      	add	r3, r2
 8006e2c:	009b      	lsls	r3, r3, #2
 8006e2e:	440b      	add	r3, r1
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d0e3      	beq.n	8006dfe <vTaskSwitchContext+0x72>
 8006e36:	697a      	ldr	r2, [r7, #20]
 8006e38:	4613      	mov	r3, r2
 8006e3a:	009b      	lsls	r3, r3, #2
 8006e3c:	4413      	add	r3, r2
 8006e3e:	009b      	lsls	r3, r3, #2
 8006e40:	4a13      	ldr	r2, [pc, #76]	@ (8006e90 <vTaskSwitchContext+0x104>)
 8006e42:	4413      	add	r3, r2
 8006e44:	60bb      	str	r3, [r7, #8]
 8006e46:	68bb      	ldr	r3, [r7, #8]
 8006e48:	685b      	ldr	r3, [r3, #4]
 8006e4a:	685a      	ldr	r2, [r3, #4]
 8006e4c:	68bb      	ldr	r3, [r7, #8]
 8006e4e:	605a      	str	r2, [r3, #4]
 8006e50:	68bb      	ldr	r3, [r7, #8]
 8006e52:	685a      	ldr	r2, [r3, #4]
 8006e54:	68bb      	ldr	r3, [r7, #8]
 8006e56:	3308      	adds	r3, #8
 8006e58:	429a      	cmp	r2, r3
 8006e5a:	d104      	bne.n	8006e66 <vTaskSwitchContext+0xda>
 8006e5c:	68bb      	ldr	r3, [r7, #8]
 8006e5e:	685b      	ldr	r3, [r3, #4]
 8006e60:	685a      	ldr	r2, [r3, #4]
 8006e62:	68bb      	ldr	r3, [r7, #8]
 8006e64:	605a      	str	r2, [r3, #4]
 8006e66:	68bb      	ldr	r3, [r7, #8]
 8006e68:	685b      	ldr	r3, [r3, #4]
 8006e6a:	68db      	ldr	r3, [r3, #12]
 8006e6c:	4a06      	ldr	r2, [pc, #24]	@ (8006e88 <vTaskSwitchContext+0xfc>)
 8006e6e:	6013      	str	r3, [r2, #0]
 8006e70:	4a06      	ldr	r2, [pc, #24]	@ (8006e8c <vTaskSwitchContext+0x100>)
 8006e72:	697b      	ldr	r3, [r7, #20]
 8006e74:	6013      	str	r3, [r2, #0]
}
 8006e76:	bf00      	nop
 8006e78:	3718      	adds	r7, #24
 8006e7a:	46bd      	mov	sp, r7
 8006e7c:	bd80      	pop	{r7, pc}
 8006e7e:	bf00      	nop
 8006e80:	20000fa0 	.word	0x20000fa0
 8006e84:	20000f8c 	.word	0x20000f8c
 8006e88:	20000aa4 	.word	0x20000aa4
 8006e8c:	20000f80 	.word	0x20000f80
 8006e90:	20000aa8 	.word	0x20000aa8

08006e94 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006e94:	b580      	push	{r7, lr}
 8006e96:	b084      	sub	sp, #16
 8006e98:	af00      	add	r7, sp, #0
 8006e9a:	6078      	str	r0, [r7, #4]
 8006e9c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d10b      	bne.n	8006ebc <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8006ea4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ea8:	f383 8811 	msr	BASEPRI, r3
 8006eac:	f3bf 8f6f 	isb	sy
 8006eb0:	f3bf 8f4f 	dsb	sy
 8006eb4:	60fb      	str	r3, [r7, #12]
}
 8006eb6:	bf00      	nop
 8006eb8:	bf00      	nop
 8006eba:	e7fd      	b.n	8006eb8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006ebc:	4b07      	ldr	r3, [pc, #28]	@ (8006edc <vTaskPlaceOnEventList+0x48>)
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	3318      	adds	r3, #24
 8006ec2:	4619      	mov	r1, r3
 8006ec4:	6878      	ldr	r0, [r7, #4]
 8006ec6:	f7fe fb1d 	bl	8005504 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006eca:	2101      	movs	r1, #1
 8006ecc:	6838      	ldr	r0, [r7, #0]
 8006ece:	f000 fb81 	bl	80075d4 <prvAddCurrentTaskToDelayedList>
}
 8006ed2:	bf00      	nop
 8006ed4:	3710      	adds	r7, #16
 8006ed6:	46bd      	mov	sp, r7
 8006ed8:	bd80      	pop	{r7, pc}
 8006eda:	bf00      	nop
 8006edc:	20000aa4 	.word	0x20000aa4

08006ee0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006ee0:	b580      	push	{r7, lr}
 8006ee2:	b086      	sub	sp, #24
 8006ee4:	af00      	add	r7, sp, #0
 8006ee6:	60f8      	str	r0, [r7, #12]
 8006ee8:	60b9      	str	r1, [r7, #8]
 8006eea:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d10b      	bne.n	8006f0a <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8006ef2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ef6:	f383 8811 	msr	BASEPRI, r3
 8006efa:	f3bf 8f6f 	isb	sy
 8006efe:	f3bf 8f4f 	dsb	sy
 8006f02:	617b      	str	r3, [r7, #20]
}
 8006f04:	bf00      	nop
 8006f06:	bf00      	nop
 8006f08:	e7fd      	b.n	8006f06 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006f0a:	4b0a      	ldr	r3, [pc, #40]	@ (8006f34 <vTaskPlaceOnEventListRestricted+0x54>)
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	3318      	adds	r3, #24
 8006f10:	4619      	mov	r1, r3
 8006f12:	68f8      	ldr	r0, [r7, #12]
 8006f14:	f7fe fad3 	bl	80054be <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d002      	beq.n	8006f24 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8006f1e:	f04f 33ff 	mov.w	r3, #4294967295
 8006f22:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8006f24:	6879      	ldr	r1, [r7, #4]
 8006f26:	68b8      	ldr	r0, [r7, #8]
 8006f28:	f000 fb54 	bl	80075d4 <prvAddCurrentTaskToDelayedList>
	}
 8006f2c:	bf00      	nop
 8006f2e:	3718      	adds	r7, #24
 8006f30:	46bd      	mov	sp, r7
 8006f32:	bd80      	pop	{r7, pc}
 8006f34:	20000aa4 	.word	0x20000aa4

08006f38 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006f38:	b580      	push	{r7, lr}
 8006f3a:	b086      	sub	sp, #24
 8006f3c:	af00      	add	r7, sp, #0
 8006f3e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	68db      	ldr	r3, [r3, #12]
 8006f44:	68db      	ldr	r3, [r3, #12]
 8006f46:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006f48:	693b      	ldr	r3, [r7, #16]
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d10b      	bne.n	8006f66 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8006f4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f52:	f383 8811 	msr	BASEPRI, r3
 8006f56:	f3bf 8f6f 	isb	sy
 8006f5a:	f3bf 8f4f 	dsb	sy
 8006f5e:	60fb      	str	r3, [r7, #12]
}
 8006f60:	bf00      	nop
 8006f62:	bf00      	nop
 8006f64:	e7fd      	b.n	8006f62 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006f66:	693b      	ldr	r3, [r7, #16]
 8006f68:	3318      	adds	r3, #24
 8006f6a:	4618      	mov	r0, r3
 8006f6c:	f7fe fb02 	bl	8005574 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006f70:	4b1d      	ldr	r3, [pc, #116]	@ (8006fe8 <xTaskRemoveFromEventList+0xb0>)
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	d11d      	bne.n	8006fb4 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006f78:	693b      	ldr	r3, [r7, #16]
 8006f7a:	3304      	adds	r3, #4
 8006f7c:	4618      	mov	r0, r3
 8006f7e:	f7fe faf9 	bl	8005574 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006f82:	693b      	ldr	r3, [r7, #16]
 8006f84:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006f86:	4b19      	ldr	r3, [pc, #100]	@ (8006fec <xTaskRemoveFromEventList+0xb4>)
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	429a      	cmp	r2, r3
 8006f8c:	d903      	bls.n	8006f96 <xTaskRemoveFromEventList+0x5e>
 8006f8e:	693b      	ldr	r3, [r7, #16]
 8006f90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f92:	4a16      	ldr	r2, [pc, #88]	@ (8006fec <xTaskRemoveFromEventList+0xb4>)
 8006f94:	6013      	str	r3, [r2, #0]
 8006f96:	693b      	ldr	r3, [r7, #16]
 8006f98:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006f9a:	4613      	mov	r3, r2
 8006f9c:	009b      	lsls	r3, r3, #2
 8006f9e:	4413      	add	r3, r2
 8006fa0:	009b      	lsls	r3, r3, #2
 8006fa2:	4a13      	ldr	r2, [pc, #76]	@ (8006ff0 <xTaskRemoveFromEventList+0xb8>)
 8006fa4:	441a      	add	r2, r3
 8006fa6:	693b      	ldr	r3, [r7, #16]
 8006fa8:	3304      	adds	r3, #4
 8006faa:	4619      	mov	r1, r3
 8006fac:	4610      	mov	r0, r2
 8006fae:	f7fe fa86 	bl	80054be <vListInsertEnd>
 8006fb2:	e005      	b.n	8006fc0 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006fb4:	693b      	ldr	r3, [r7, #16]
 8006fb6:	3318      	adds	r3, #24
 8006fb8:	4619      	mov	r1, r3
 8006fba:	480e      	ldr	r0, [pc, #56]	@ (8006ff4 <xTaskRemoveFromEventList+0xbc>)
 8006fbc:	f7fe fa7f 	bl	80054be <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006fc0:	693b      	ldr	r3, [r7, #16]
 8006fc2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006fc4:	4b0c      	ldr	r3, [pc, #48]	@ (8006ff8 <xTaskRemoveFromEventList+0xc0>)
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006fca:	429a      	cmp	r2, r3
 8006fcc:	d905      	bls.n	8006fda <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006fce:	2301      	movs	r3, #1
 8006fd0:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006fd2:	4b0a      	ldr	r3, [pc, #40]	@ (8006ffc <xTaskRemoveFromEventList+0xc4>)
 8006fd4:	2201      	movs	r2, #1
 8006fd6:	601a      	str	r2, [r3, #0]
 8006fd8:	e001      	b.n	8006fde <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8006fda:	2300      	movs	r3, #0
 8006fdc:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8006fde:	697b      	ldr	r3, [r7, #20]
}
 8006fe0:	4618      	mov	r0, r3
 8006fe2:	3718      	adds	r7, #24
 8006fe4:	46bd      	mov	sp, r7
 8006fe6:	bd80      	pop	{r7, pc}
 8006fe8:	20000fa0 	.word	0x20000fa0
 8006fec:	20000f80 	.word	0x20000f80
 8006ff0:	20000aa8 	.word	0x20000aa8
 8006ff4:	20000f38 	.word	0x20000f38
 8006ff8:	20000aa4 	.word	0x20000aa4
 8006ffc:	20000f8c 	.word	0x20000f8c

08007000 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007000:	b480      	push	{r7}
 8007002:	b083      	sub	sp, #12
 8007004:	af00      	add	r7, sp, #0
 8007006:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007008:	4b06      	ldr	r3, [pc, #24]	@ (8007024 <vTaskInternalSetTimeOutState+0x24>)
 800700a:	681a      	ldr	r2, [r3, #0]
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007010:	4b05      	ldr	r3, [pc, #20]	@ (8007028 <vTaskInternalSetTimeOutState+0x28>)
 8007012:	681a      	ldr	r2, [r3, #0]
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	605a      	str	r2, [r3, #4]
}
 8007018:	bf00      	nop
 800701a:	370c      	adds	r7, #12
 800701c:	46bd      	mov	sp, r7
 800701e:	bc80      	pop	{r7}
 8007020:	4770      	bx	lr
 8007022:	bf00      	nop
 8007024:	20000f90 	.word	0x20000f90
 8007028:	20000f7c 	.word	0x20000f7c

0800702c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800702c:	b580      	push	{r7, lr}
 800702e:	b088      	sub	sp, #32
 8007030:	af00      	add	r7, sp, #0
 8007032:	6078      	str	r0, [r7, #4]
 8007034:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	2b00      	cmp	r3, #0
 800703a:	d10b      	bne.n	8007054 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800703c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007040:	f383 8811 	msr	BASEPRI, r3
 8007044:	f3bf 8f6f 	isb	sy
 8007048:	f3bf 8f4f 	dsb	sy
 800704c:	613b      	str	r3, [r7, #16]
}
 800704e:	bf00      	nop
 8007050:	bf00      	nop
 8007052:	e7fd      	b.n	8007050 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8007054:	683b      	ldr	r3, [r7, #0]
 8007056:	2b00      	cmp	r3, #0
 8007058:	d10b      	bne.n	8007072 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800705a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800705e:	f383 8811 	msr	BASEPRI, r3
 8007062:	f3bf 8f6f 	isb	sy
 8007066:	f3bf 8f4f 	dsb	sy
 800706a:	60fb      	str	r3, [r7, #12]
}
 800706c:	bf00      	nop
 800706e:	bf00      	nop
 8007070:	e7fd      	b.n	800706e <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8007072:	f000 ff4b 	bl	8007f0c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8007076:	4b1d      	ldr	r3, [pc, #116]	@ (80070ec <xTaskCheckForTimeOut+0xc0>)
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	685b      	ldr	r3, [r3, #4]
 8007080:	69ba      	ldr	r2, [r7, #24]
 8007082:	1ad3      	subs	r3, r2, r3
 8007084:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8007086:	683b      	ldr	r3, [r7, #0]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800708e:	d102      	bne.n	8007096 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007090:	2300      	movs	r3, #0
 8007092:	61fb      	str	r3, [r7, #28]
 8007094:	e023      	b.n	80070de <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	681a      	ldr	r2, [r3, #0]
 800709a:	4b15      	ldr	r3, [pc, #84]	@ (80070f0 <xTaskCheckForTimeOut+0xc4>)
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	429a      	cmp	r2, r3
 80070a0:	d007      	beq.n	80070b2 <xTaskCheckForTimeOut+0x86>
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	685b      	ldr	r3, [r3, #4]
 80070a6:	69ba      	ldr	r2, [r7, #24]
 80070a8:	429a      	cmp	r2, r3
 80070aa:	d302      	bcc.n	80070b2 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80070ac:	2301      	movs	r3, #1
 80070ae:	61fb      	str	r3, [r7, #28]
 80070b0:	e015      	b.n	80070de <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80070b2:	683b      	ldr	r3, [r7, #0]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	697a      	ldr	r2, [r7, #20]
 80070b8:	429a      	cmp	r2, r3
 80070ba:	d20b      	bcs.n	80070d4 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80070bc:	683b      	ldr	r3, [r7, #0]
 80070be:	681a      	ldr	r2, [r3, #0]
 80070c0:	697b      	ldr	r3, [r7, #20]
 80070c2:	1ad2      	subs	r2, r2, r3
 80070c4:	683b      	ldr	r3, [r7, #0]
 80070c6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80070c8:	6878      	ldr	r0, [r7, #4]
 80070ca:	f7ff ff99 	bl	8007000 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80070ce:	2300      	movs	r3, #0
 80070d0:	61fb      	str	r3, [r7, #28]
 80070d2:	e004      	b.n	80070de <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 80070d4:	683b      	ldr	r3, [r7, #0]
 80070d6:	2200      	movs	r2, #0
 80070d8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80070da:	2301      	movs	r3, #1
 80070dc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80070de:	f000 ff45 	bl	8007f6c <vPortExitCritical>

	return xReturn;
 80070e2:	69fb      	ldr	r3, [r7, #28]
}
 80070e4:	4618      	mov	r0, r3
 80070e6:	3720      	adds	r7, #32
 80070e8:	46bd      	mov	sp, r7
 80070ea:	bd80      	pop	{r7, pc}
 80070ec:	20000f7c 	.word	0x20000f7c
 80070f0:	20000f90 	.word	0x20000f90

080070f4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80070f4:	b480      	push	{r7}
 80070f6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80070f8:	4b03      	ldr	r3, [pc, #12]	@ (8007108 <vTaskMissedYield+0x14>)
 80070fa:	2201      	movs	r2, #1
 80070fc:	601a      	str	r2, [r3, #0]
}
 80070fe:	bf00      	nop
 8007100:	46bd      	mov	sp, r7
 8007102:	bc80      	pop	{r7}
 8007104:	4770      	bx	lr
 8007106:	bf00      	nop
 8007108:	20000f8c 	.word	0x20000f8c

0800710c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800710c:	b580      	push	{r7, lr}
 800710e:	b082      	sub	sp, #8
 8007110:	af00      	add	r7, sp, #0
 8007112:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007114:	f000 f852 	bl	80071bc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007118:	4b06      	ldr	r3, [pc, #24]	@ (8007134 <prvIdleTask+0x28>)
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	2b01      	cmp	r3, #1
 800711e:	d9f9      	bls.n	8007114 <prvIdleTask+0x8>
			{
				taskYIELD();
 8007120:	4b05      	ldr	r3, [pc, #20]	@ (8007138 <prvIdleTask+0x2c>)
 8007122:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007126:	601a      	str	r2, [r3, #0]
 8007128:	f3bf 8f4f 	dsb	sy
 800712c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007130:	e7f0      	b.n	8007114 <prvIdleTask+0x8>
 8007132:	bf00      	nop
 8007134:	20000aa8 	.word	0x20000aa8
 8007138:	e000ed04 	.word	0xe000ed04

0800713c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800713c:	b580      	push	{r7, lr}
 800713e:	b082      	sub	sp, #8
 8007140:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007142:	2300      	movs	r3, #0
 8007144:	607b      	str	r3, [r7, #4]
 8007146:	e00c      	b.n	8007162 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007148:	687a      	ldr	r2, [r7, #4]
 800714a:	4613      	mov	r3, r2
 800714c:	009b      	lsls	r3, r3, #2
 800714e:	4413      	add	r3, r2
 8007150:	009b      	lsls	r3, r3, #2
 8007152:	4a12      	ldr	r2, [pc, #72]	@ (800719c <prvInitialiseTaskLists+0x60>)
 8007154:	4413      	add	r3, r2
 8007156:	4618      	mov	r0, r3
 8007158:	f7fe f986 	bl	8005468 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	3301      	adds	r3, #1
 8007160:	607b      	str	r3, [r7, #4]
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	2b37      	cmp	r3, #55	@ 0x37
 8007166:	d9ef      	bls.n	8007148 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007168:	480d      	ldr	r0, [pc, #52]	@ (80071a0 <prvInitialiseTaskLists+0x64>)
 800716a:	f7fe f97d 	bl	8005468 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800716e:	480d      	ldr	r0, [pc, #52]	@ (80071a4 <prvInitialiseTaskLists+0x68>)
 8007170:	f7fe f97a 	bl	8005468 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007174:	480c      	ldr	r0, [pc, #48]	@ (80071a8 <prvInitialiseTaskLists+0x6c>)
 8007176:	f7fe f977 	bl	8005468 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800717a:	480c      	ldr	r0, [pc, #48]	@ (80071ac <prvInitialiseTaskLists+0x70>)
 800717c:	f7fe f974 	bl	8005468 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007180:	480b      	ldr	r0, [pc, #44]	@ (80071b0 <prvInitialiseTaskLists+0x74>)
 8007182:	f7fe f971 	bl	8005468 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007186:	4b0b      	ldr	r3, [pc, #44]	@ (80071b4 <prvInitialiseTaskLists+0x78>)
 8007188:	4a05      	ldr	r2, [pc, #20]	@ (80071a0 <prvInitialiseTaskLists+0x64>)
 800718a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800718c:	4b0a      	ldr	r3, [pc, #40]	@ (80071b8 <prvInitialiseTaskLists+0x7c>)
 800718e:	4a05      	ldr	r2, [pc, #20]	@ (80071a4 <prvInitialiseTaskLists+0x68>)
 8007190:	601a      	str	r2, [r3, #0]
}
 8007192:	bf00      	nop
 8007194:	3708      	adds	r7, #8
 8007196:	46bd      	mov	sp, r7
 8007198:	bd80      	pop	{r7, pc}
 800719a:	bf00      	nop
 800719c:	20000aa8 	.word	0x20000aa8
 80071a0:	20000f08 	.word	0x20000f08
 80071a4:	20000f1c 	.word	0x20000f1c
 80071a8:	20000f38 	.word	0x20000f38
 80071ac:	20000f4c 	.word	0x20000f4c
 80071b0:	20000f64 	.word	0x20000f64
 80071b4:	20000f30 	.word	0x20000f30
 80071b8:	20000f34 	.word	0x20000f34

080071bc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80071bc:	b580      	push	{r7, lr}
 80071be:	b082      	sub	sp, #8
 80071c0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80071c2:	e019      	b.n	80071f8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80071c4:	f000 fea2 	bl	8007f0c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80071c8:	4b10      	ldr	r3, [pc, #64]	@ (800720c <prvCheckTasksWaitingTermination+0x50>)
 80071ca:	68db      	ldr	r3, [r3, #12]
 80071cc:	68db      	ldr	r3, [r3, #12]
 80071ce:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	3304      	adds	r3, #4
 80071d4:	4618      	mov	r0, r3
 80071d6:	f7fe f9cd 	bl	8005574 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80071da:	4b0d      	ldr	r3, [pc, #52]	@ (8007210 <prvCheckTasksWaitingTermination+0x54>)
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	3b01      	subs	r3, #1
 80071e0:	4a0b      	ldr	r2, [pc, #44]	@ (8007210 <prvCheckTasksWaitingTermination+0x54>)
 80071e2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80071e4:	4b0b      	ldr	r3, [pc, #44]	@ (8007214 <prvCheckTasksWaitingTermination+0x58>)
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	3b01      	subs	r3, #1
 80071ea:	4a0a      	ldr	r2, [pc, #40]	@ (8007214 <prvCheckTasksWaitingTermination+0x58>)
 80071ec:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80071ee:	f000 febd 	bl	8007f6c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80071f2:	6878      	ldr	r0, [r7, #4]
 80071f4:	f000 f810 	bl	8007218 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80071f8:	4b06      	ldr	r3, [pc, #24]	@ (8007214 <prvCheckTasksWaitingTermination+0x58>)
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	d1e1      	bne.n	80071c4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007200:	bf00      	nop
 8007202:	bf00      	nop
 8007204:	3708      	adds	r7, #8
 8007206:	46bd      	mov	sp, r7
 8007208:	bd80      	pop	{r7, pc}
 800720a:	bf00      	nop
 800720c:	20000f4c 	.word	0x20000f4c
 8007210:	20000f78 	.word	0x20000f78
 8007214:	20000f60 	.word	0x20000f60

08007218 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007218:	b580      	push	{r7, lr}
 800721a:	b084      	sub	sp, #16
 800721c:	af00      	add	r7, sp, #0
 800721e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8007226:	2b00      	cmp	r3, #0
 8007228:	d108      	bne.n	800723c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800722e:	4618      	mov	r0, r3
 8007230:	f001 f83c 	bl	80082ac <vPortFree>
				vPortFree( pxTCB );
 8007234:	6878      	ldr	r0, [r7, #4]
 8007236:	f001 f839 	bl	80082ac <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800723a:	e019      	b.n	8007270 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8007242:	2b01      	cmp	r3, #1
 8007244:	d103      	bne.n	800724e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8007246:	6878      	ldr	r0, [r7, #4]
 8007248:	f001 f830 	bl	80082ac <vPortFree>
	}
 800724c:	e010      	b.n	8007270 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8007254:	2b02      	cmp	r3, #2
 8007256:	d00b      	beq.n	8007270 <prvDeleteTCB+0x58>
	__asm volatile
 8007258:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800725c:	f383 8811 	msr	BASEPRI, r3
 8007260:	f3bf 8f6f 	isb	sy
 8007264:	f3bf 8f4f 	dsb	sy
 8007268:	60fb      	str	r3, [r7, #12]
}
 800726a:	bf00      	nop
 800726c:	bf00      	nop
 800726e:	e7fd      	b.n	800726c <prvDeleteTCB+0x54>
	}
 8007270:	bf00      	nop
 8007272:	3710      	adds	r7, #16
 8007274:	46bd      	mov	sp, r7
 8007276:	bd80      	pop	{r7, pc}

08007278 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007278:	b480      	push	{r7}
 800727a:	b083      	sub	sp, #12
 800727c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800727e:	4b0c      	ldr	r3, [pc, #48]	@ (80072b0 <prvResetNextTaskUnblockTime+0x38>)
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	2b00      	cmp	r3, #0
 8007286:	d104      	bne.n	8007292 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007288:	4b0a      	ldr	r3, [pc, #40]	@ (80072b4 <prvResetNextTaskUnblockTime+0x3c>)
 800728a:	f04f 32ff 	mov.w	r2, #4294967295
 800728e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007290:	e008      	b.n	80072a4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007292:	4b07      	ldr	r3, [pc, #28]	@ (80072b0 <prvResetNextTaskUnblockTime+0x38>)
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	68db      	ldr	r3, [r3, #12]
 8007298:	68db      	ldr	r3, [r3, #12]
 800729a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	685b      	ldr	r3, [r3, #4]
 80072a0:	4a04      	ldr	r2, [pc, #16]	@ (80072b4 <prvResetNextTaskUnblockTime+0x3c>)
 80072a2:	6013      	str	r3, [r2, #0]
}
 80072a4:	bf00      	nop
 80072a6:	370c      	adds	r7, #12
 80072a8:	46bd      	mov	sp, r7
 80072aa:	bc80      	pop	{r7}
 80072ac:	4770      	bx	lr
 80072ae:	bf00      	nop
 80072b0:	20000f30 	.word	0x20000f30
 80072b4:	20000f98 	.word	0x20000f98

080072b8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80072b8:	b480      	push	{r7}
 80072ba:	b083      	sub	sp, #12
 80072bc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80072be:	4b0b      	ldr	r3, [pc, #44]	@ (80072ec <xTaskGetSchedulerState+0x34>)
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d102      	bne.n	80072cc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80072c6:	2301      	movs	r3, #1
 80072c8:	607b      	str	r3, [r7, #4]
 80072ca:	e008      	b.n	80072de <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80072cc:	4b08      	ldr	r3, [pc, #32]	@ (80072f0 <xTaskGetSchedulerState+0x38>)
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	d102      	bne.n	80072da <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80072d4:	2302      	movs	r3, #2
 80072d6:	607b      	str	r3, [r7, #4]
 80072d8:	e001      	b.n	80072de <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80072da:	2300      	movs	r3, #0
 80072dc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80072de:	687b      	ldr	r3, [r7, #4]
	}
 80072e0:	4618      	mov	r0, r3
 80072e2:	370c      	adds	r7, #12
 80072e4:	46bd      	mov	sp, r7
 80072e6:	bc80      	pop	{r7}
 80072e8:	4770      	bx	lr
 80072ea:	bf00      	nop
 80072ec:	20000f84 	.word	0x20000f84
 80072f0:	20000fa0 	.word	0x20000fa0

080072f4 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80072f4:	b580      	push	{r7, lr}
 80072f6:	b084      	sub	sp, #16
 80072f8:	af00      	add	r7, sp, #0
 80072fa:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8007300:	2300      	movs	r3, #0
 8007302:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	2b00      	cmp	r3, #0
 8007308:	d051      	beq.n	80073ae <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800730a:	68bb      	ldr	r3, [r7, #8]
 800730c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800730e:	4b2a      	ldr	r3, [pc, #168]	@ (80073b8 <xTaskPriorityInherit+0xc4>)
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007314:	429a      	cmp	r2, r3
 8007316:	d241      	bcs.n	800739c <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007318:	68bb      	ldr	r3, [r7, #8]
 800731a:	699b      	ldr	r3, [r3, #24]
 800731c:	2b00      	cmp	r3, #0
 800731e:	db06      	blt.n	800732e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007320:	4b25      	ldr	r3, [pc, #148]	@ (80073b8 <xTaskPriorityInherit+0xc4>)
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007326:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800732a:	68bb      	ldr	r3, [r7, #8]
 800732c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800732e:	68bb      	ldr	r3, [r7, #8]
 8007330:	6959      	ldr	r1, [r3, #20]
 8007332:	68bb      	ldr	r3, [r7, #8]
 8007334:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007336:	4613      	mov	r3, r2
 8007338:	009b      	lsls	r3, r3, #2
 800733a:	4413      	add	r3, r2
 800733c:	009b      	lsls	r3, r3, #2
 800733e:	4a1f      	ldr	r2, [pc, #124]	@ (80073bc <xTaskPriorityInherit+0xc8>)
 8007340:	4413      	add	r3, r2
 8007342:	4299      	cmp	r1, r3
 8007344:	d122      	bne.n	800738c <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007346:	68bb      	ldr	r3, [r7, #8]
 8007348:	3304      	adds	r3, #4
 800734a:	4618      	mov	r0, r3
 800734c:	f7fe f912 	bl	8005574 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007350:	4b19      	ldr	r3, [pc, #100]	@ (80073b8 <xTaskPriorityInherit+0xc4>)
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007356:	68bb      	ldr	r3, [r7, #8]
 8007358:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800735a:	68bb      	ldr	r3, [r7, #8]
 800735c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800735e:	4b18      	ldr	r3, [pc, #96]	@ (80073c0 <xTaskPriorityInherit+0xcc>)
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	429a      	cmp	r2, r3
 8007364:	d903      	bls.n	800736e <xTaskPriorityInherit+0x7a>
 8007366:	68bb      	ldr	r3, [r7, #8]
 8007368:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800736a:	4a15      	ldr	r2, [pc, #84]	@ (80073c0 <xTaskPriorityInherit+0xcc>)
 800736c:	6013      	str	r3, [r2, #0]
 800736e:	68bb      	ldr	r3, [r7, #8]
 8007370:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007372:	4613      	mov	r3, r2
 8007374:	009b      	lsls	r3, r3, #2
 8007376:	4413      	add	r3, r2
 8007378:	009b      	lsls	r3, r3, #2
 800737a:	4a10      	ldr	r2, [pc, #64]	@ (80073bc <xTaskPriorityInherit+0xc8>)
 800737c:	441a      	add	r2, r3
 800737e:	68bb      	ldr	r3, [r7, #8]
 8007380:	3304      	adds	r3, #4
 8007382:	4619      	mov	r1, r3
 8007384:	4610      	mov	r0, r2
 8007386:	f7fe f89a 	bl	80054be <vListInsertEnd>
 800738a:	e004      	b.n	8007396 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800738c:	4b0a      	ldr	r3, [pc, #40]	@ (80073b8 <xTaskPriorityInherit+0xc4>)
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007392:	68bb      	ldr	r3, [r7, #8]
 8007394:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8007396:	2301      	movs	r3, #1
 8007398:	60fb      	str	r3, [r7, #12]
 800739a:	e008      	b.n	80073ae <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800739c:	68bb      	ldr	r3, [r7, #8]
 800739e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80073a0:	4b05      	ldr	r3, [pc, #20]	@ (80073b8 <xTaskPriorityInherit+0xc4>)
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80073a6:	429a      	cmp	r2, r3
 80073a8:	d201      	bcs.n	80073ae <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80073aa:	2301      	movs	r3, #1
 80073ac:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80073ae:	68fb      	ldr	r3, [r7, #12]
	}
 80073b0:	4618      	mov	r0, r3
 80073b2:	3710      	adds	r7, #16
 80073b4:	46bd      	mov	sp, r7
 80073b6:	bd80      	pop	{r7, pc}
 80073b8:	20000aa4 	.word	0x20000aa4
 80073bc:	20000aa8 	.word	0x20000aa8
 80073c0:	20000f80 	.word	0x20000f80

080073c4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80073c4:	b580      	push	{r7, lr}
 80073c6:	b086      	sub	sp, #24
 80073c8:	af00      	add	r7, sp, #0
 80073ca:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80073d0:	2300      	movs	r3, #0
 80073d2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d058      	beq.n	800748c <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80073da:	4b2f      	ldr	r3, [pc, #188]	@ (8007498 <xTaskPriorityDisinherit+0xd4>)
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	693a      	ldr	r2, [r7, #16]
 80073e0:	429a      	cmp	r2, r3
 80073e2:	d00b      	beq.n	80073fc <xTaskPriorityDisinherit+0x38>
	__asm volatile
 80073e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80073e8:	f383 8811 	msr	BASEPRI, r3
 80073ec:	f3bf 8f6f 	isb	sy
 80073f0:	f3bf 8f4f 	dsb	sy
 80073f4:	60fb      	str	r3, [r7, #12]
}
 80073f6:	bf00      	nop
 80073f8:	bf00      	nop
 80073fa:	e7fd      	b.n	80073f8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80073fc:	693b      	ldr	r3, [r7, #16]
 80073fe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007400:	2b00      	cmp	r3, #0
 8007402:	d10b      	bne.n	800741c <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8007404:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007408:	f383 8811 	msr	BASEPRI, r3
 800740c:	f3bf 8f6f 	isb	sy
 8007410:	f3bf 8f4f 	dsb	sy
 8007414:	60bb      	str	r3, [r7, #8]
}
 8007416:	bf00      	nop
 8007418:	bf00      	nop
 800741a:	e7fd      	b.n	8007418 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800741c:	693b      	ldr	r3, [r7, #16]
 800741e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007420:	1e5a      	subs	r2, r3, #1
 8007422:	693b      	ldr	r3, [r7, #16]
 8007424:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8007426:	693b      	ldr	r3, [r7, #16]
 8007428:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800742a:	693b      	ldr	r3, [r7, #16]
 800742c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800742e:	429a      	cmp	r2, r3
 8007430:	d02c      	beq.n	800748c <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8007432:	693b      	ldr	r3, [r7, #16]
 8007434:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007436:	2b00      	cmp	r3, #0
 8007438:	d128      	bne.n	800748c <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800743a:	693b      	ldr	r3, [r7, #16]
 800743c:	3304      	adds	r3, #4
 800743e:	4618      	mov	r0, r3
 8007440:	f7fe f898 	bl	8005574 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007444:	693b      	ldr	r3, [r7, #16]
 8007446:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007448:	693b      	ldr	r3, [r7, #16]
 800744a:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800744c:	693b      	ldr	r3, [r7, #16]
 800744e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007450:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8007454:	693b      	ldr	r3, [r7, #16]
 8007456:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8007458:	693b      	ldr	r3, [r7, #16]
 800745a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800745c:	4b0f      	ldr	r3, [pc, #60]	@ (800749c <xTaskPriorityDisinherit+0xd8>)
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	429a      	cmp	r2, r3
 8007462:	d903      	bls.n	800746c <xTaskPriorityDisinherit+0xa8>
 8007464:	693b      	ldr	r3, [r7, #16]
 8007466:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007468:	4a0c      	ldr	r2, [pc, #48]	@ (800749c <xTaskPriorityDisinherit+0xd8>)
 800746a:	6013      	str	r3, [r2, #0]
 800746c:	693b      	ldr	r3, [r7, #16]
 800746e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007470:	4613      	mov	r3, r2
 8007472:	009b      	lsls	r3, r3, #2
 8007474:	4413      	add	r3, r2
 8007476:	009b      	lsls	r3, r3, #2
 8007478:	4a09      	ldr	r2, [pc, #36]	@ (80074a0 <xTaskPriorityDisinherit+0xdc>)
 800747a:	441a      	add	r2, r3
 800747c:	693b      	ldr	r3, [r7, #16]
 800747e:	3304      	adds	r3, #4
 8007480:	4619      	mov	r1, r3
 8007482:	4610      	mov	r0, r2
 8007484:	f7fe f81b 	bl	80054be <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8007488:	2301      	movs	r3, #1
 800748a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800748c:	697b      	ldr	r3, [r7, #20]
	}
 800748e:	4618      	mov	r0, r3
 8007490:	3718      	adds	r7, #24
 8007492:	46bd      	mov	sp, r7
 8007494:	bd80      	pop	{r7, pc}
 8007496:	bf00      	nop
 8007498:	20000aa4 	.word	0x20000aa4
 800749c:	20000f80 	.word	0x20000f80
 80074a0:	20000aa8 	.word	0x20000aa8

080074a4 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80074a4:	b580      	push	{r7, lr}
 80074a6:	b088      	sub	sp, #32
 80074a8:	af00      	add	r7, sp, #0
 80074aa:	6078      	str	r0, [r7, #4]
 80074ac:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80074b2:	2301      	movs	r3, #1
 80074b4:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d06c      	beq.n	8007596 <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80074bc:	69bb      	ldr	r3, [r7, #24]
 80074be:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	d10b      	bne.n	80074dc <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 80074c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80074c8:	f383 8811 	msr	BASEPRI, r3
 80074cc:	f3bf 8f6f 	isb	sy
 80074d0:	f3bf 8f4f 	dsb	sy
 80074d4:	60fb      	str	r3, [r7, #12]
}
 80074d6:	bf00      	nop
 80074d8:	bf00      	nop
 80074da:	e7fd      	b.n	80074d8 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80074dc:	69bb      	ldr	r3, [r7, #24]
 80074de:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80074e0:	683a      	ldr	r2, [r7, #0]
 80074e2:	429a      	cmp	r2, r3
 80074e4:	d902      	bls.n	80074ec <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80074e6:	683b      	ldr	r3, [r7, #0]
 80074e8:	61fb      	str	r3, [r7, #28]
 80074ea:	e002      	b.n	80074f2 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80074ec:	69bb      	ldr	r3, [r7, #24]
 80074ee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80074f0:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80074f2:	69bb      	ldr	r3, [r7, #24]
 80074f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80074f6:	69fa      	ldr	r2, [r7, #28]
 80074f8:	429a      	cmp	r2, r3
 80074fa:	d04c      	beq.n	8007596 <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80074fc:	69bb      	ldr	r3, [r7, #24]
 80074fe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007500:	697a      	ldr	r2, [r7, #20]
 8007502:	429a      	cmp	r2, r3
 8007504:	d147      	bne.n	8007596 <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8007506:	4b26      	ldr	r3, [pc, #152]	@ (80075a0 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	69ba      	ldr	r2, [r7, #24]
 800750c:	429a      	cmp	r2, r3
 800750e:	d10b      	bne.n	8007528 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 8007510:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007514:	f383 8811 	msr	BASEPRI, r3
 8007518:	f3bf 8f6f 	isb	sy
 800751c:	f3bf 8f4f 	dsb	sy
 8007520:	60bb      	str	r3, [r7, #8]
}
 8007522:	bf00      	nop
 8007524:	bf00      	nop
 8007526:	e7fd      	b.n	8007524 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8007528:	69bb      	ldr	r3, [r7, #24]
 800752a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800752c:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800752e:	69bb      	ldr	r3, [r7, #24]
 8007530:	69fa      	ldr	r2, [r7, #28]
 8007532:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007534:	69bb      	ldr	r3, [r7, #24]
 8007536:	699b      	ldr	r3, [r3, #24]
 8007538:	2b00      	cmp	r3, #0
 800753a:	db04      	blt.n	8007546 <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800753c:	69fb      	ldr	r3, [r7, #28]
 800753e:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8007542:	69bb      	ldr	r3, [r7, #24]
 8007544:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8007546:	69bb      	ldr	r3, [r7, #24]
 8007548:	6959      	ldr	r1, [r3, #20]
 800754a:	693a      	ldr	r2, [r7, #16]
 800754c:	4613      	mov	r3, r2
 800754e:	009b      	lsls	r3, r3, #2
 8007550:	4413      	add	r3, r2
 8007552:	009b      	lsls	r3, r3, #2
 8007554:	4a13      	ldr	r2, [pc, #76]	@ (80075a4 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8007556:	4413      	add	r3, r2
 8007558:	4299      	cmp	r1, r3
 800755a:	d11c      	bne.n	8007596 <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800755c:	69bb      	ldr	r3, [r7, #24]
 800755e:	3304      	adds	r3, #4
 8007560:	4618      	mov	r0, r3
 8007562:	f7fe f807 	bl	8005574 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8007566:	69bb      	ldr	r3, [r7, #24]
 8007568:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800756a:	4b0f      	ldr	r3, [pc, #60]	@ (80075a8 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	429a      	cmp	r2, r3
 8007570:	d903      	bls.n	800757a <vTaskPriorityDisinheritAfterTimeout+0xd6>
 8007572:	69bb      	ldr	r3, [r7, #24]
 8007574:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007576:	4a0c      	ldr	r2, [pc, #48]	@ (80075a8 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8007578:	6013      	str	r3, [r2, #0]
 800757a:	69bb      	ldr	r3, [r7, #24]
 800757c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800757e:	4613      	mov	r3, r2
 8007580:	009b      	lsls	r3, r3, #2
 8007582:	4413      	add	r3, r2
 8007584:	009b      	lsls	r3, r3, #2
 8007586:	4a07      	ldr	r2, [pc, #28]	@ (80075a4 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8007588:	441a      	add	r2, r3
 800758a:	69bb      	ldr	r3, [r7, #24]
 800758c:	3304      	adds	r3, #4
 800758e:	4619      	mov	r1, r3
 8007590:	4610      	mov	r0, r2
 8007592:	f7fd ff94 	bl	80054be <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007596:	bf00      	nop
 8007598:	3720      	adds	r7, #32
 800759a:	46bd      	mov	sp, r7
 800759c:	bd80      	pop	{r7, pc}
 800759e:	bf00      	nop
 80075a0:	20000aa4 	.word	0x20000aa4
 80075a4:	20000aa8 	.word	0x20000aa8
 80075a8:	20000f80 	.word	0x20000f80

080075ac <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 80075ac:	b480      	push	{r7}
 80075ae:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80075b0:	4b07      	ldr	r3, [pc, #28]	@ (80075d0 <pvTaskIncrementMutexHeldCount+0x24>)
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	d004      	beq.n	80075c2 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80075b8:	4b05      	ldr	r3, [pc, #20]	@ (80075d0 <pvTaskIncrementMutexHeldCount+0x24>)
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80075be:	3201      	adds	r2, #1
 80075c0:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 80075c2:	4b03      	ldr	r3, [pc, #12]	@ (80075d0 <pvTaskIncrementMutexHeldCount+0x24>)
 80075c4:	681b      	ldr	r3, [r3, #0]
	}
 80075c6:	4618      	mov	r0, r3
 80075c8:	46bd      	mov	sp, r7
 80075ca:	bc80      	pop	{r7}
 80075cc:	4770      	bx	lr
 80075ce:	bf00      	nop
 80075d0:	20000aa4 	.word	0x20000aa4

080075d4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80075d4:	b580      	push	{r7, lr}
 80075d6:	b084      	sub	sp, #16
 80075d8:	af00      	add	r7, sp, #0
 80075da:	6078      	str	r0, [r7, #4]
 80075dc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80075de:	4b21      	ldr	r3, [pc, #132]	@ (8007664 <prvAddCurrentTaskToDelayedList+0x90>)
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80075e4:	4b20      	ldr	r3, [pc, #128]	@ (8007668 <prvAddCurrentTaskToDelayedList+0x94>)
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	3304      	adds	r3, #4
 80075ea:	4618      	mov	r0, r3
 80075ec:	f7fd ffc2 	bl	8005574 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80075f6:	d10a      	bne.n	800760e <prvAddCurrentTaskToDelayedList+0x3a>
 80075f8:	683b      	ldr	r3, [r7, #0]
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d007      	beq.n	800760e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80075fe:	4b1a      	ldr	r3, [pc, #104]	@ (8007668 <prvAddCurrentTaskToDelayedList+0x94>)
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	3304      	adds	r3, #4
 8007604:	4619      	mov	r1, r3
 8007606:	4819      	ldr	r0, [pc, #100]	@ (800766c <prvAddCurrentTaskToDelayedList+0x98>)
 8007608:	f7fd ff59 	bl	80054be <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800760c:	e026      	b.n	800765c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800760e:	68fa      	ldr	r2, [r7, #12]
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	4413      	add	r3, r2
 8007614:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007616:	4b14      	ldr	r3, [pc, #80]	@ (8007668 <prvAddCurrentTaskToDelayedList+0x94>)
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	68ba      	ldr	r2, [r7, #8]
 800761c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800761e:	68ba      	ldr	r2, [r7, #8]
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	429a      	cmp	r2, r3
 8007624:	d209      	bcs.n	800763a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007626:	4b12      	ldr	r3, [pc, #72]	@ (8007670 <prvAddCurrentTaskToDelayedList+0x9c>)
 8007628:	681a      	ldr	r2, [r3, #0]
 800762a:	4b0f      	ldr	r3, [pc, #60]	@ (8007668 <prvAddCurrentTaskToDelayedList+0x94>)
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	3304      	adds	r3, #4
 8007630:	4619      	mov	r1, r3
 8007632:	4610      	mov	r0, r2
 8007634:	f7fd ff66 	bl	8005504 <vListInsert>
}
 8007638:	e010      	b.n	800765c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800763a:	4b0e      	ldr	r3, [pc, #56]	@ (8007674 <prvAddCurrentTaskToDelayedList+0xa0>)
 800763c:	681a      	ldr	r2, [r3, #0]
 800763e:	4b0a      	ldr	r3, [pc, #40]	@ (8007668 <prvAddCurrentTaskToDelayedList+0x94>)
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	3304      	adds	r3, #4
 8007644:	4619      	mov	r1, r3
 8007646:	4610      	mov	r0, r2
 8007648:	f7fd ff5c 	bl	8005504 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800764c:	4b0a      	ldr	r3, [pc, #40]	@ (8007678 <prvAddCurrentTaskToDelayedList+0xa4>)
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	68ba      	ldr	r2, [r7, #8]
 8007652:	429a      	cmp	r2, r3
 8007654:	d202      	bcs.n	800765c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8007656:	4a08      	ldr	r2, [pc, #32]	@ (8007678 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007658:	68bb      	ldr	r3, [r7, #8]
 800765a:	6013      	str	r3, [r2, #0]
}
 800765c:	bf00      	nop
 800765e:	3710      	adds	r7, #16
 8007660:	46bd      	mov	sp, r7
 8007662:	bd80      	pop	{r7, pc}
 8007664:	20000f7c 	.word	0x20000f7c
 8007668:	20000aa4 	.word	0x20000aa4
 800766c:	20000f64 	.word	0x20000f64
 8007670:	20000f34 	.word	0x20000f34
 8007674:	20000f30 	.word	0x20000f30
 8007678:	20000f98 	.word	0x20000f98

0800767c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800767c:	b580      	push	{r7, lr}
 800767e:	b08a      	sub	sp, #40	@ 0x28
 8007680:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8007682:	2300      	movs	r3, #0
 8007684:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8007686:	f000 fb11 	bl	8007cac <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800768a:	4b1d      	ldr	r3, [pc, #116]	@ (8007700 <xTimerCreateTimerTask+0x84>)
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	2b00      	cmp	r3, #0
 8007690:	d021      	beq.n	80076d6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8007692:	2300      	movs	r3, #0
 8007694:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8007696:	2300      	movs	r3, #0
 8007698:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800769a:	1d3a      	adds	r2, r7, #4
 800769c:	f107 0108 	add.w	r1, r7, #8
 80076a0:	f107 030c 	add.w	r3, r7, #12
 80076a4:	4618      	mov	r0, r3
 80076a6:	f7fd fec5 	bl	8005434 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80076aa:	6879      	ldr	r1, [r7, #4]
 80076ac:	68bb      	ldr	r3, [r7, #8]
 80076ae:	68fa      	ldr	r2, [r7, #12]
 80076b0:	9202      	str	r2, [sp, #8]
 80076b2:	9301      	str	r3, [sp, #4]
 80076b4:	2302      	movs	r3, #2
 80076b6:	9300      	str	r3, [sp, #0]
 80076b8:	2300      	movs	r3, #0
 80076ba:	460a      	mov	r2, r1
 80076bc:	4911      	ldr	r1, [pc, #68]	@ (8007704 <xTimerCreateTimerTask+0x88>)
 80076be:	4812      	ldr	r0, [pc, #72]	@ (8007708 <xTimerCreateTimerTask+0x8c>)
 80076c0:	f7fe ffac 	bl	800661c <xTaskCreateStatic>
 80076c4:	4603      	mov	r3, r0
 80076c6:	4a11      	ldr	r2, [pc, #68]	@ (800770c <xTimerCreateTimerTask+0x90>)
 80076c8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80076ca:	4b10      	ldr	r3, [pc, #64]	@ (800770c <xTimerCreateTimerTask+0x90>)
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	d001      	beq.n	80076d6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80076d2:	2301      	movs	r3, #1
 80076d4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80076d6:	697b      	ldr	r3, [r7, #20]
 80076d8:	2b00      	cmp	r3, #0
 80076da:	d10b      	bne.n	80076f4 <xTimerCreateTimerTask+0x78>
	__asm volatile
 80076dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80076e0:	f383 8811 	msr	BASEPRI, r3
 80076e4:	f3bf 8f6f 	isb	sy
 80076e8:	f3bf 8f4f 	dsb	sy
 80076ec:	613b      	str	r3, [r7, #16]
}
 80076ee:	bf00      	nop
 80076f0:	bf00      	nop
 80076f2:	e7fd      	b.n	80076f0 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80076f4:	697b      	ldr	r3, [r7, #20]
}
 80076f6:	4618      	mov	r0, r3
 80076f8:	3718      	adds	r7, #24
 80076fa:	46bd      	mov	sp, r7
 80076fc:	bd80      	pop	{r7, pc}
 80076fe:	bf00      	nop
 8007700:	20000fd4 	.word	0x20000fd4
 8007704:	0800b388 	.word	0x0800b388
 8007708:	08007849 	.word	0x08007849
 800770c:	20000fd8 	.word	0x20000fd8

08007710 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8007710:	b580      	push	{r7, lr}
 8007712:	b08a      	sub	sp, #40	@ 0x28
 8007714:	af00      	add	r7, sp, #0
 8007716:	60f8      	str	r0, [r7, #12]
 8007718:	60b9      	str	r1, [r7, #8]
 800771a:	607a      	str	r2, [r7, #4]
 800771c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800771e:	2300      	movs	r3, #0
 8007720:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	2b00      	cmp	r3, #0
 8007726:	d10b      	bne.n	8007740 <xTimerGenericCommand+0x30>
	__asm volatile
 8007728:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800772c:	f383 8811 	msr	BASEPRI, r3
 8007730:	f3bf 8f6f 	isb	sy
 8007734:	f3bf 8f4f 	dsb	sy
 8007738:	623b      	str	r3, [r7, #32]
}
 800773a:	bf00      	nop
 800773c:	bf00      	nop
 800773e:	e7fd      	b.n	800773c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8007740:	4b19      	ldr	r3, [pc, #100]	@ (80077a8 <xTimerGenericCommand+0x98>)
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	2b00      	cmp	r3, #0
 8007746:	d02a      	beq.n	800779e <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8007748:	68bb      	ldr	r3, [r7, #8]
 800774a:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8007754:	68bb      	ldr	r3, [r7, #8]
 8007756:	2b05      	cmp	r3, #5
 8007758:	dc18      	bgt.n	800778c <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800775a:	f7ff fdad 	bl	80072b8 <xTaskGetSchedulerState>
 800775e:	4603      	mov	r3, r0
 8007760:	2b02      	cmp	r3, #2
 8007762:	d109      	bne.n	8007778 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8007764:	4b10      	ldr	r3, [pc, #64]	@ (80077a8 <xTimerGenericCommand+0x98>)
 8007766:	6818      	ldr	r0, [r3, #0]
 8007768:	f107 0110 	add.w	r1, r7, #16
 800776c:	2300      	movs	r3, #0
 800776e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007770:	f7fe f8de 	bl	8005930 <xQueueGenericSend>
 8007774:	6278      	str	r0, [r7, #36]	@ 0x24
 8007776:	e012      	b.n	800779e <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8007778:	4b0b      	ldr	r3, [pc, #44]	@ (80077a8 <xTimerGenericCommand+0x98>)
 800777a:	6818      	ldr	r0, [r3, #0]
 800777c:	f107 0110 	add.w	r1, r7, #16
 8007780:	2300      	movs	r3, #0
 8007782:	2200      	movs	r2, #0
 8007784:	f7fe f8d4 	bl	8005930 <xQueueGenericSend>
 8007788:	6278      	str	r0, [r7, #36]	@ 0x24
 800778a:	e008      	b.n	800779e <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800778c:	4b06      	ldr	r3, [pc, #24]	@ (80077a8 <xTimerGenericCommand+0x98>)
 800778e:	6818      	ldr	r0, [r3, #0]
 8007790:	f107 0110 	add.w	r1, r7, #16
 8007794:	2300      	movs	r3, #0
 8007796:	683a      	ldr	r2, [r7, #0]
 8007798:	f7fe f9cc 	bl	8005b34 <xQueueGenericSendFromISR>
 800779c:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800779e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80077a0:	4618      	mov	r0, r3
 80077a2:	3728      	adds	r7, #40	@ 0x28
 80077a4:	46bd      	mov	sp, r7
 80077a6:	bd80      	pop	{r7, pc}
 80077a8:	20000fd4 	.word	0x20000fd4

080077ac <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80077ac:	b580      	push	{r7, lr}
 80077ae:	b088      	sub	sp, #32
 80077b0:	af02      	add	r7, sp, #8
 80077b2:	6078      	str	r0, [r7, #4]
 80077b4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80077b6:	4b23      	ldr	r3, [pc, #140]	@ (8007844 <prvProcessExpiredTimer+0x98>)
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	68db      	ldr	r3, [r3, #12]
 80077bc:	68db      	ldr	r3, [r3, #12]
 80077be:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80077c0:	697b      	ldr	r3, [r7, #20]
 80077c2:	3304      	adds	r3, #4
 80077c4:	4618      	mov	r0, r3
 80077c6:	f7fd fed5 	bl	8005574 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80077ca:	697b      	ldr	r3, [r7, #20]
 80077cc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80077d0:	f003 0304 	and.w	r3, r3, #4
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	d023      	beq.n	8007820 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80077d8:	697b      	ldr	r3, [r7, #20]
 80077da:	699a      	ldr	r2, [r3, #24]
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	18d1      	adds	r1, r2, r3
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	683a      	ldr	r2, [r7, #0]
 80077e4:	6978      	ldr	r0, [r7, #20]
 80077e6:	f000 f8d3 	bl	8007990 <prvInsertTimerInActiveList>
 80077ea:	4603      	mov	r3, r0
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	d020      	beq.n	8007832 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80077f0:	2300      	movs	r3, #0
 80077f2:	9300      	str	r3, [sp, #0]
 80077f4:	2300      	movs	r3, #0
 80077f6:	687a      	ldr	r2, [r7, #4]
 80077f8:	2100      	movs	r1, #0
 80077fa:	6978      	ldr	r0, [r7, #20]
 80077fc:	f7ff ff88 	bl	8007710 <xTimerGenericCommand>
 8007800:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8007802:	693b      	ldr	r3, [r7, #16]
 8007804:	2b00      	cmp	r3, #0
 8007806:	d114      	bne.n	8007832 <prvProcessExpiredTimer+0x86>
	__asm volatile
 8007808:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800780c:	f383 8811 	msr	BASEPRI, r3
 8007810:	f3bf 8f6f 	isb	sy
 8007814:	f3bf 8f4f 	dsb	sy
 8007818:	60fb      	str	r3, [r7, #12]
}
 800781a:	bf00      	nop
 800781c:	bf00      	nop
 800781e:	e7fd      	b.n	800781c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007820:	697b      	ldr	r3, [r7, #20]
 8007822:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007826:	f023 0301 	bic.w	r3, r3, #1
 800782a:	b2da      	uxtb	r2, r3
 800782c:	697b      	ldr	r3, [r7, #20]
 800782e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007832:	697b      	ldr	r3, [r7, #20]
 8007834:	6a1b      	ldr	r3, [r3, #32]
 8007836:	6978      	ldr	r0, [r7, #20]
 8007838:	4798      	blx	r3
}
 800783a:	bf00      	nop
 800783c:	3718      	adds	r7, #24
 800783e:	46bd      	mov	sp, r7
 8007840:	bd80      	pop	{r7, pc}
 8007842:	bf00      	nop
 8007844:	20000fcc 	.word	0x20000fcc

08007848 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8007848:	b580      	push	{r7, lr}
 800784a:	b084      	sub	sp, #16
 800784c:	af00      	add	r7, sp, #0
 800784e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007850:	f107 0308 	add.w	r3, r7, #8
 8007854:	4618      	mov	r0, r3
 8007856:	f000 f859 	bl	800790c <prvGetNextExpireTime>
 800785a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800785c:	68bb      	ldr	r3, [r7, #8]
 800785e:	4619      	mov	r1, r3
 8007860:	68f8      	ldr	r0, [r7, #12]
 8007862:	f000 f805 	bl	8007870 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8007866:	f000 f8d5 	bl	8007a14 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800786a:	bf00      	nop
 800786c:	e7f0      	b.n	8007850 <prvTimerTask+0x8>
	...

08007870 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8007870:	b580      	push	{r7, lr}
 8007872:	b084      	sub	sp, #16
 8007874:	af00      	add	r7, sp, #0
 8007876:	6078      	str	r0, [r7, #4]
 8007878:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800787a:	f7ff f913 	bl	8006aa4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800787e:	f107 0308 	add.w	r3, r7, #8
 8007882:	4618      	mov	r0, r3
 8007884:	f000 f864 	bl	8007950 <prvSampleTimeNow>
 8007888:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800788a:	68bb      	ldr	r3, [r7, #8]
 800788c:	2b00      	cmp	r3, #0
 800788e:	d130      	bne.n	80078f2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8007890:	683b      	ldr	r3, [r7, #0]
 8007892:	2b00      	cmp	r3, #0
 8007894:	d10a      	bne.n	80078ac <prvProcessTimerOrBlockTask+0x3c>
 8007896:	687a      	ldr	r2, [r7, #4]
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	429a      	cmp	r2, r3
 800789c:	d806      	bhi.n	80078ac <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800789e:	f7ff f90f 	bl	8006ac0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80078a2:	68f9      	ldr	r1, [r7, #12]
 80078a4:	6878      	ldr	r0, [r7, #4]
 80078a6:	f7ff ff81 	bl	80077ac <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80078aa:	e024      	b.n	80078f6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80078ac:	683b      	ldr	r3, [r7, #0]
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d008      	beq.n	80078c4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80078b2:	4b13      	ldr	r3, [pc, #76]	@ (8007900 <prvProcessTimerOrBlockTask+0x90>)
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	d101      	bne.n	80078c0 <prvProcessTimerOrBlockTask+0x50>
 80078bc:	2301      	movs	r3, #1
 80078be:	e000      	b.n	80078c2 <prvProcessTimerOrBlockTask+0x52>
 80078c0:	2300      	movs	r3, #0
 80078c2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80078c4:	4b0f      	ldr	r3, [pc, #60]	@ (8007904 <prvProcessTimerOrBlockTask+0x94>)
 80078c6:	6818      	ldr	r0, [r3, #0]
 80078c8:	687a      	ldr	r2, [r7, #4]
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	1ad3      	subs	r3, r2, r3
 80078ce:	683a      	ldr	r2, [r7, #0]
 80078d0:	4619      	mov	r1, r3
 80078d2:	f7fe fe6f 	bl	80065b4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80078d6:	f7ff f8f3 	bl	8006ac0 <xTaskResumeAll>
 80078da:	4603      	mov	r3, r0
 80078dc:	2b00      	cmp	r3, #0
 80078de:	d10a      	bne.n	80078f6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80078e0:	4b09      	ldr	r3, [pc, #36]	@ (8007908 <prvProcessTimerOrBlockTask+0x98>)
 80078e2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80078e6:	601a      	str	r2, [r3, #0]
 80078e8:	f3bf 8f4f 	dsb	sy
 80078ec:	f3bf 8f6f 	isb	sy
}
 80078f0:	e001      	b.n	80078f6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80078f2:	f7ff f8e5 	bl	8006ac0 <xTaskResumeAll>
}
 80078f6:	bf00      	nop
 80078f8:	3710      	adds	r7, #16
 80078fa:	46bd      	mov	sp, r7
 80078fc:	bd80      	pop	{r7, pc}
 80078fe:	bf00      	nop
 8007900:	20000fd0 	.word	0x20000fd0
 8007904:	20000fd4 	.word	0x20000fd4
 8007908:	e000ed04 	.word	0xe000ed04

0800790c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800790c:	b480      	push	{r7}
 800790e:	b085      	sub	sp, #20
 8007910:	af00      	add	r7, sp, #0
 8007912:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8007914:	4b0d      	ldr	r3, [pc, #52]	@ (800794c <prvGetNextExpireTime+0x40>)
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	2b00      	cmp	r3, #0
 800791c:	d101      	bne.n	8007922 <prvGetNextExpireTime+0x16>
 800791e:	2201      	movs	r2, #1
 8007920:	e000      	b.n	8007924 <prvGetNextExpireTime+0x18>
 8007922:	2200      	movs	r2, #0
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	2b00      	cmp	r3, #0
 800792e:	d105      	bne.n	800793c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007930:	4b06      	ldr	r3, [pc, #24]	@ (800794c <prvGetNextExpireTime+0x40>)
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	68db      	ldr	r3, [r3, #12]
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	60fb      	str	r3, [r7, #12]
 800793a:	e001      	b.n	8007940 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800793c:	2300      	movs	r3, #0
 800793e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8007940:	68fb      	ldr	r3, [r7, #12]
}
 8007942:	4618      	mov	r0, r3
 8007944:	3714      	adds	r7, #20
 8007946:	46bd      	mov	sp, r7
 8007948:	bc80      	pop	{r7}
 800794a:	4770      	bx	lr
 800794c:	20000fcc 	.word	0x20000fcc

08007950 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8007950:	b580      	push	{r7, lr}
 8007952:	b084      	sub	sp, #16
 8007954:	af00      	add	r7, sp, #0
 8007956:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8007958:	f7ff f950 	bl	8006bfc <xTaskGetTickCount>
 800795c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800795e:	4b0b      	ldr	r3, [pc, #44]	@ (800798c <prvSampleTimeNow+0x3c>)
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	68fa      	ldr	r2, [r7, #12]
 8007964:	429a      	cmp	r2, r3
 8007966:	d205      	bcs.n	8007974 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8007968:	f000 f93a 	bl	8007be0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	2201      	movs	r2, #1
 8007970:	601a      	str	r2, [r3, #0]
 8007972:	e002      	b.n	800797a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	2200      	movs	r2, #0
 8007978:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800797a:	4a04      	ldr	r2, [pc, #16]	@ (800798c <prvSampleTimeNow+0x3c>)
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8007980:	68fb      	ldr	r3, [r7, #12]
}
 8007982:	4618      	mov	r0, r3
 8007984:	3710      	adds	r7, #16
 8007986:	46bd      	mov	sp, r7
 8007988:	bd80      	pop	{r7, pc}
 800798a:	bf00      	nop
 800798c:	20000fdc 	.word	0x20000fdc

08007990 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8007990:	b580      	push	{r7, lr}
 8007992:	b086      	sub	sp, #24
 8007994:	af00      	add	r7, sp, #0
 8007996:	60f8      	str	r0, [r7, #12]
 8007998:	60b9      	str	r1, [r7, #8]
 800799a:	607a      	str	r2, [r7, #4]
 800799c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800799e:	2300      	movs	r3, #0
 80079a0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	68ba      	ldr	r2, [r7, #8]
 80079a6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	68fa      	ldr	r2, [r7, #12]
 80079ac:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80079ae:	68ba      	ldr	r2, [r7, #8]
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	429a      	cmp	r2, r3
 80079b4:	d812      	bhi.n	80079dc <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80079b6:	687a      	ldr	r2, [r7, #4]
 80079b8:	683b      	ldr	r3, [r7, #0]
 80079ba:	1ad2      	subs	r2, r2, r3
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	699b      	ldr	r3, [r3, #24]
 80079c0:	429a      	cmp	r2, r3
 80079c2:	d302      	bcc.n	80079ca <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80079c4:	2301      	movs	r3, #1
 80079c6:	617b      	str	r3, [r7, #20]
 80079c8:	e01b      	b.n	8007a02 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80079ca:	4b10      	ldr	r3, [pc, #64]	@ (8007a0c <prvInsertTimerInActiveList+0x7c>)
 80079cc:	681a      	ldr	r2, [r3, #0]
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	3304      	adds	r3, #4
 80079d2:	4619      	mov	r1, r3
 80079d4:	4610      	mov	r0, r2
 80079d6:	f7fd fd95 	bl	8005504 <vListInsert>
 80079da:	e012      	b.n	8007a02 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80079dc:	687a      	ldr	r2, [r7, #4]
 80079de:	683b      	ldr	r3, [r7, #0]
 80079e0:	429a      	cmp	r2, r3
 80079e2:	d206      	bcs.n	80079f2 <prvInsertTimerInActiveList+0x62>
 80079e4:	68ba      	ldr	r2, [r7, #8]
 80079e6:	683b      	ldr	r3, [r7, #0]
 80079e8:	429a      	cmp	r2, r3
 80079ea:	d302      	bcc.n	80079f2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80079ec:	2301      	movs	r3, #1
 80079ee:	617b      	str	r3, [r7, #20]
 80079f0:	e007      	b.n	8007a02 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80079f2:	4b07      	ldr	r3, [pc, #28]	@ (8007a10 <prvInsertTimerInActiveList+0x80>)
 80079f4:	681a      	ldr	r2, [r3, #0]
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	3304      	adds	r3, #4
 80079fa:	4619      	mov	r1, r3
 80079fc:	4610      	mov	r0, r2
 80079fe:	f7fd fd81 	bl	8005504 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8007a02:	697b      	ldr	r3, [r7, #20]
}
 8007a04:	4618      	mov	r0, r3
 8007a06:	3718      	adds	r7, #24
 8007a08:	46bd      	mov	sp, r7
 8007a0a:	bd80      	pop	{r7, pc}
 8007a0c:	20000fd0 	.word	0x20000fd0
 8007a10:	20000fcc 	.word	0x20000fcc

08007a14 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8007a14:	b580      	push	{r7, lr}
 8007a16:	b08e      	sub	sp, #56	@ 0x38
 8007a18:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007a1a:	e0ce      	b.n	8007bba <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	da19      	bge.n	8007a56 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8007a22:	1d3b      	adds	r3, r7, #4
 8007a24:	3304      	adds	r3, #4
 8007a26:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8007a28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	d10b      	bne.n	8007a46 <prvProcessReceivedCommands+0x32>
	__asm volatile
 8007a2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a32:	f383 8811 	msr	BASEPRI, r3
 8007a36:	f3bf 8f6f 	isb	sy
 8007a3a:	f3bf 8f4f 	dsb	sy
 8007a3e:	61fb      	str	r3, [r7, #28]
}
 8007a40:	bf00      	nop
 8007a42:	bf00      	nop
 8007a44:	e7fd      	b.n	8007a42 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8007a46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007a4c:	6850      	ldr	r0, [r2, #4]
 8007a4e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007a50:	6892      	ldr	r2, [r2, #8]
 8007a52:	4611      	mov	r1, r2
 8007a54:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	f2c0 80ae 	blt.w	8007bba <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8007a62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a64:	695b      	ldr	r3, [r3, #20]
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	d004      	beq.n	8007a74 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007a6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a6c:	3304      	adds	r3, #4
 8007a6e:	4618      	mov	r0, r3
 8007a70:	f7fd fd80 	bl	8005574 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007a74:	463b      	mov	r3, r7
 8007a76:	4618      	mov	r0, r3
 8007a78:	f7ff ff6a 	bl	8007950 <prvSampleTimeNow>
 8007a7c:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	2b09      	cmp	r3, #9
 8007a82:	f200 8097 	bhi.w	8007bb4 <prvProcessReceivedCommands+0x1a0>
 8007a86:	a201      	add	r2, pc, #4	@ (adr r2, 8007a8c <prvProcessReceivedCommands+0x78>)
 8007a88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a8c:	08007ab5 	.word	0x08007ab5
 8007a90:	08007ab5 	.word	0x08007ab5
 8007a94:	08007ab5 	.word	0x08007ab5
 8007a98:	08007b2b 	.word	0x08007b2b
 8007a9c:	08007b3f 	.word	0x08007b3f
 8007aa0:	08007b8b 	.word	0x08007b8b
 8007aa4:	08007ab5 	.word	0x08007ab5
 8007aa8:	08007ab5 	.word	0x08007ab5
 8007aac:	08007b2b 	.word	0x08007b2b
 8007ab0:	08007b3f 	.word	0x08007b3f
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007ab4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ab6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007aba:	f043 0301 	orr.w	r3, r3, #1
 8007abe:	b2da      	uxtb	r2, r3
 8007ac0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ac2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8007ac6:	68ba      	ldr	r2, [r7, #8]
 8007ac8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007aca:	699b      	ldr	r3, [r3, #24]
 8007acc:	18d1      	adds	r1, r2, r3
 8007ace:	68bb      	ldr	r3, [r7, #8]
 8007ad0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007ad2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007ad4:	f7ff ff5c 	bl	8007990 <prvInsertTimerInActiveList>
 8007ad8:	4603      	mov	r3, r0
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	d06c      	beq.n	8007bb8 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007ade:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ae0:	6a1b      	ldr	r3, [r3, #32]
 8007ae2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007ae4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007ae6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ae8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007aec:	f003 0304 	and.w	r3, r3, #4
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	d061      	beq.n	8007bb8 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8007af4:	68ba      	ldr	r2, [r7, #8]
 8007af6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007af8:	699b      	ldr	r3, [r3, #24]
 8007afa:	441a      	add	r2, r3
 8007afc:	2300      	movs	r3, #0
 8007afe:	9300      	str	r3, [sp, #0]
 8007b00:	2300      	movs	r3, #0
 8007b02:	2100      	movs	r1, #0
 8007b04:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007b06:	f7ff fe03 	bl	8007710 <xTimerGenericCommand>
 8007b0a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8007b0c:	6a3b      	ldr	r3, [r7, #32]
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	d152      	bne.n	8007bb8 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8007b12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b16:	f383 8811 	msr	BASEPRI, r3
 8007b1a:	f3bf 8f6f 	isb	sy
 8007b1e:	f3bf 8f4f 	dsb	sy
 8007b22:	61bb      	str	r3, [r7, #24]
}
 8007b24:	bf00      	nop
 8007b26:	bf00      	nop
 8007b28:	e7fd      	b.n	8007b26 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007b2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b2c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007b30:	f023 0301 	bic.w	r3, r3, #1
 8007b34:	b2da      	uxtb	r2, r3
 8007b36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b38:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8007b3c:	e03d      	b.n	8007bba <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007b3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b40:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007b44:	f043 0301 	orr.w	r3, r3, #1
 8007b48:	b2da      	uxtb	r2, r3
 8007b4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b4c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8007b50:	68ba      	ldr	r2, [r7, #8]
 8007b52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b54:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8007b56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b58:	699b      	ldr	r3, [r3, #24]
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	d10b      	bne.n	8007b76 <prvProcessReceivedCommands+0x162>
	__asm volatile
 8007b5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b62:	f383 8811 	msr	BASEPRI, r3
 8007b66:	f3bf 8f6f 	isb	sy
 8007b6a:	f3bf 8f4f 	dsb	sy
 8007b6e:	617b      	str	r3, [r7, #20]
}
 8007b70:	bf00      	nop
 8007b72:	bf00      	nop
 8007b74:	e7fd      	b.n	8007b72 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8007b76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b78:	699a      	ldr	r2, [r3, #24]
 8007b7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b7c:	18d1      	adds	r1, r2, r3
 8007b7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b80:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007b82:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007b84:	f7ff ff04 	bl	8007990 <prvInsertTimerInActiveList>
					break;
 8007b88:	e017      	b.n	8007bba <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8007b8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b8c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007b90:	f003 0302 	and.w	r3, r3, #2
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	d103      	bne.n	8007ba0 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8007b98:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007b9a:	f000 fb87 	bl	80082ac <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8007b9e:	e00c      	b.n	8007bba <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007ba0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ba2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007ba6:	f023 0301 	bic.w	r3, r3, #1
 8007baa:	b2da      	uxtb	r2, r3
 8007bac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007bae:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8007bb2:	e002      	b.n	8007bba <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8007bb4:	bf00      	nop
 8007bb6:	e000      	b.n	8007bba <prvProcessReceivedCommands+0x1a6>
					break;
 8007bb8:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007bba:	4b08      	ldr	r3, [pc, #32]	@ (8007bdc <prvProcessReceivedCommands+0x1c8>)
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	1d39      	adds	r1, r7, #4
 8007bc0:	2200      	movs	r2, #0
 8007bc2:	4618      	mov	r0, r3
 8007bc4:	f7fe f8e4 	bl	8005d90 <xQueueReceive>
 8007bc8:	4603      	mov	r3, r0
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	f47f af26 	bne.w	8007a1c <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8007bd0:	bf00      	nop
 8007bd2:	bf00      	nop
 8007bd4:	3730      	adds	r7, #48	@ 0x30
 8007bd6:	46bd      	mov	sp, r7
 8007bd8:	bd80      	pop	{r7, pc}
 8007bda:	bf00      	nop
 8007bdc:	20000fd4 	.word	0x20000fd4

08007be0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8007be0:	b580      	push	{r7, lr}
 8007be2:	b088      	sub	sp, #32
 8007be4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007be6:	e049      	b.n	8007c7c <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007be8:	4b2e      	ldr	r3, [pc, #184]	@ (8007ca4 <prvSwitchTimerLists+0xc4>)
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	68db      	ldr	r3, [r3, #12]
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007bf2:	4b2c      	ldr	r3, [pc, #176]	@ (8007ca4 <prvSwitchTimerLists+0xc4>)
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	68db      	ldr	r3, [r3, #12]
 8007bf8:	68db      	ldr	r3, [r3, #12]
 8007bfa:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	3304      	adds	r3, #4
 8007c00:	4618      	mov	r0, r3
 8007c02:	f7fd fcb7 	bl	8005574 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	6a1b      	ldr	r3, [r3, #32]
 8007c0a:	68f8      	ldr	r0, [r7, #12]
 8007c0c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007c14:	f003 0304 	and.w	r3, r3, #4
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	d02f      	beq.n	8007c7c <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	699b      	ldr	r3, [r3, #24]
 8007c20:	693a      	ldr	r2, [r7, #16]
 8007c22:	4413      	add	r3, r2
 8007c24:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8007c26:	68ba      	ldr	r2, [r7, #8]
 8007c28:	693b      	ldr	r3, [r7, #16]
 8007c2a:	429a      	cmp	r2, r3
 8007c2c:	d90e      	bls.n	8007c4c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	68ba      	ldr	r2, [r7, #8]
 8007c32:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	68fa      	ldr	r2, [r7, #12]
 8007c38:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007c3a:	4b1a      	ldr	r3, [pc, #104]	@ (8007ca4 <prvSwitchTimerLists+0xc4>)
 8007c3c:	681a      	ldr	r2, [r3, #0]
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	3304      	adds	r3, #4
 8007c42:	4619      	mov	r1, r3
 8007c44:	4610      	mov	r0, r2
 8007c46:	f7fd fc5d 	bl	8005504 <vListInsert>
 8007c4a:	e017      	b.n	8007c7c <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007c4c:	2300      	movs	r3, #0
 8007c4e:	9300      	str	r3, [sp, #0]
 8007c50:	2300      	movs	r3, #0
 8007c52:	693a      	ldr	r2, [r7, #16]
 8007c54:	2100      	movs	r1, #0
 8007c56:	68f8      	ldr	r0, [r7, #12]
 8007c58:	f7ff fd5a 	bl	8007710 <xTimerGenericCommand>
 8007c5c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	d10b      	bne.n	8007c7c <prvSwitchTimerLists+0x9c>
	__asm volatile
 8007c64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c68:	f383 8811 	msr	BASEPRI, r3
 8007c6c:	f3bf 8f6f 	isb	sy
 8007c70:	f3bf 8f4f 	dsb	sy
 8007c74:	603b      	str	r3, [r7, #0]
}
 8007c76:	bf00      	nop
 8007c78:	bf00      	nop
 8007c7a:	e7fd      	b.n	8007c78 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007c7c:	4b09      	ldr	r3, [pc, #36]	@ (8007ca4 <prvSwitchTimerLists+0xc4>)
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	d1b0      	bne.n	8007be8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8007c86:	4b07      	ldr	r3, [pc, #28]	@ (8007ca4 <prvSwitchTimerLists+0xc4>)
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8007c8c:	4b06      	ldr	r3, [pc, #24]	@ (8007ca8 <prvSwitchTimerLists+0xc8>)
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	4a04      	ldr	r2, [pc, #16]	@ (8007ca4 <prvSwitchTimerLists+0xc4>)
 8007c92:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8007c94:	4a04      	ldr	r2, [pc, #16]	@ (8007ca8 <prvSwitchTimerLists+0xc8>)
 8007c96:	697b      	ldr	r3, [r7, #20]
 8007c98:	6013      	str	r3, [r2, #0]
}
 8007c9a:	bf00      	nop
 8007c9c:	3718      	adds	r7, #24
 8007c9e:	46bd      	mov	sp, r7
 8007ca0:	bd80      	pop	{r7, pc}
 8007ca2:	bf00      	nop
 8007ca4:	20000fcc 	.word	0x20000fcc
 8007ca8:	20000fd0 	.word	0x20000fd0

08007cac <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8007cac:	b580      	push	{r7, lr}
 8007cae:	b082      	sub	sp, #8
 8007cb0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8007cb2:	f000 f92b 	bl	8007f0c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8007cb6:	4b15      	ldr	r3, [pc, #84]	@ (8007d0c <prvCheckForValidListAndQueue+0x60>)
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	d120      	bne.n	8007d00 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8007cbe:	4814      	ldr	r0, [pc, #80]	@ (8007d10 <prvCheckForValidListAndQueue+0x64>)
 8007cc0:	f7fd fbd2 	bl	8005468 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8007cc4:	4813      	ldr	r0, [pc, #76]	@ (8007d14 <prvCheckForValidListAndQueue+0x68>)
 8007cc6:	f7fd fbcf 	bl	8005468 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8007cca:	4b13      	ldr	r3, [pc, #76]	@ (8007d18 <prvCheckForValidListAndQueue+0x6c>)
 8007ccc:	4a10      	ldr	r2, [pc, #64]	@ (8007d10 <prvCheckForValidListAndQueue+0x64>)
 8007cce:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8007cd0:	4b12      	ldr	r3, [pc, #72]	@ (8007d1c <prvCheckForValidListAndQueue+0x70>)
 8007cd2:	4a10      	ldr	r2, [pc, #64]	@ (8007d14 <prvCheckForValidListAndQueue+0x68>)
 8007cd4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8007cd6:	2300      	movs	r3, #0
 8007cd8:	9300      	str	r3, [sp, #0]
 8007cda:	4b11      	ldr	r3, [pc, #68]	@ (8007d20 <prvCheckForValidListAndQueue+0x74>)
 8007cdc:	4a11      	ldr	r2, [pc, #68]	@ (8007d24 <prvCheckForValidListAndQueue+0x78>)
 8007cde:	2110      	movs	r1, #16
 8007ce0:	200a      	movs	r0, #10
 8007ce2:	f7fd fcdb 	bl	800569c <xQueueGenericCreateStatic>
 8007ce6:	4603      	mov	r3, r0
 8007ce8:	4a08      	ldr	r2, [pc, #32]	@ (8007d0c <prvCheckForValidListAndQueue+0x60>)
 8007cea:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8007cec:	4b07      	ldr	r3, [pc, #28]	@ (8007d0c <prvCheckForValidListAndQueue+0x60>)
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	d005      	beq.n	8007d00 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8007cf4:	4b05      	ldr	r3, [pc, #20]	@ (8007d0c <prvCheckForValidListAndQueue+0x60>)
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	490b      	ldr	r1, [pc, #44]	@ (8007d28 <prvCheckForValidListAndQueue+0x7c>)
 8007cfa:	4618      	mov	r0, r3
 8007cfc:	f7fe fc08 	bl	8006510 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007d00:	f000 f934 	bl	8007f6c <vPortExitCritical>
}
 8007d04:	bf00      	nop
 8007d06:	46bd      	mov	sp, r7
 8007d08:	bd80      	pop	{r7, pc}
 8007d0a:	bf00      	nop
 8007d0c:	20000fd4 	.word	0x20000fd4
 8007d10:	20000fa4 	.word	0x20000fa4
 8007d14:	20000fb8 	.word	0x20000fb8
 8007d18:	20000fcc 	.word	0x20000fcc
 8007d1c:	20000fd0 	.word	0x20000fd0
 8007d20:	20001080 	.word	0x20001080
 8007d24:	20000fe0 	.word	0x20000fe0
 8007d28:	0800b390 	.word	0x0800b390

08007d2c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007d2c:	b480      	push	{r7}
 8007d2e:	b085      	sub	sp, #20
 8007d30:	af00      	add	r7, sp, #0
 8007d32:	60f8      	str	r0, [r7, #12]
 8007d34:	60b9      	str	r1, [r7, #8]
 8007d36:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	3b04      	subs	r3, #4
 8007d3c:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007d3e:	68fb      	ldr	r3, [r7, #12]
 8007d40:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8007d44:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	3b04      	subs	r3, #4
 8007d4a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007d4c:	68bb      	ldr	r3, [r7, #8]
 8007d4e:	f023 0201 	bic.w	r2, r3, #1
 8007d52:	68fb      	ldr	r3, [r7, #12]
 8007d54:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	3b04      	subs	r3, #4
 8007d5a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007d5c:	4a08      	ldr	r2, [pc, #32]	@ (8007d80 <pxPortInitialiseStack+0x54>)
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007d62:	68fb      	ldr	r3, [r7, #12]
 8007d64:	3b14      	subs	r3, #20
 8007d66:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007d68:	687a      	ldr	r2, [r7, #4]
 8007d6a:	68fb      	ldr	r3, [r7, #12]
 8007d6c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	3b20      	subs	r3, #32
 8007d72:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007d74:	68fb      	ldr	r3, [r7, #12]
}
 8007d76:	4618      	mov	r0, r3
 8007d78:	3714      	adds	r7, #20
 8007d7a:	46bd      	mov	sp, r7
 8007d7c:	bc80      	pop	{r7}
 8007d7e:	4770      	bx	lr
 8007d80:	08007d85 	.word	0x08007d85

08007d84 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007d84:	b480      	push	{r7}
 8007d86:	b085      	sub	sp, #20
 8007d88:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8007d8a:	2300      	movs	r3, #0
 8007d8c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007d8e:	4b12      	ldr	r3, [pc, #72]	@ (8007dd8 <prvTaskExitError+0x54>)
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d96:	d00b      	beq.n	8007db0 <prvTaskExitError+0x2c>
	__asm volatile
 8007d98:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d9c:	f383 8811 	msr	BASEPRI, r3
 8007da0:	f3bf 8f6f 	isb	sy
 8007da4:	f3bf 8f4f 	dsb	sy
 8007da8:	60fb      	str	r3, [r7, #12]
}
 8007daa:	bf00      	nop
 8007dac:	bf00      	nop
 8007dae:	e7fd      	b.n	8007dac <prvTaskExitError+0x28>
	__asm volatile
 8007db0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007db4:	f383 8811 	msr	BASEPRI, r3
 8007db8:	f3bf 8f6f 	isb	sy
 8007dbc:	f3bf 8f4f 	dsb	sy
 8007dc0:	60bb      	str	r3, [r7, #8]
}
 8007dc2:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007dc4:	bf00      	nop
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	d0fc      	beq.n	8007dc6 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007dcc:	bf00      	nop
 8007dce:	bf00      	nop
 8007dd0:	3714      	adds	r7, #20
 8007dd2:	46bd      	mov	sp, r7
 8007dd4:	bc80      	pop	{r7}
 8007dd6:	4770      	bx	lr
 8007dd8:	2000001c 	.word	0x2000001c
 8007ddc:	00000000 	.word	0x00000000

08007de0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007de0:	4b07      	ldr	r3, [pc, #28]	@ (8007e00 <pxCurrentTCBConst2>)
 8007de2:	6819      	ldr	r1, [r3, #0]
 8007de4:	6808      	ldr	r0, [r1, #0]
 8007de6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8007dea:	f380 8809 	msr	PSP, r0
 8007dee:	f3bf 8f6f 	isb	sy
 8007df2:	f04f 0000 	mov.w	r0, #0
 8007df6:	f380 8811 	msr	BASEPRI, r0
 8007dfa:	f04e 0e0d 	orr.w	lr, lr, #13
 8007dfe:	4770      	bx	lr

08007e00 <pxCurrentTCBConst2>:
 8007e00:	20000aa4 	.word	0x20000aa4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007e04:	bf00      	nop
 8007e06:	bf00      	nop

08007e08 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8007e08:	4806      	ldr	r0, [pc, #24]	@ (8007e24 <prvPortStartFirstTask+0x1c>)
 8007e0a:	6800      	ldr	r0, [r0, #0]
 8007e0c:	6800      	ldr	r0, [r0, #0]
 8007e0e:	f380 8808 	msr	MSP, r0
 8007e12:	b662      	cpsie	i
 8007e14:	b661      	cpsie	f
 8007e16:	f3bf 8f4f 	dsb	sy
 8007e1a:	f3bf 8f6f 	isb	sy
 8007e1e:	df00      	svc	0
 8007e20:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8007e22:	bf00      	nop
 8007e24:	e000ed08 	.word	0xe000ed08

08007e28 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007e28:	b580      	push	{r7, lr}
 8007e2a:	b084      	sub	sp, #16
 8007e2c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007e2e:	4b32      	ldr	r3, [pc, #200]	@ (8007ef8 <xPortStartScheduler+0xd0>)
 8007e30:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007e32:	68fb      	ldr	r3, [r7, #12]
 8007e34:	781b      	ldrb	r3, [r3, #0]
 8007e36:	b2db      	uxtb	r3, r3
 8007e38:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007e3a:	68fb      	ldr	r3, [r7, #12]
 8007e3c:	22ff      	movs	r2, #255	@ 0xff
 8007e3e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	781b      	ldrb	r3, [r3, #0]
 8007e44:	b2db      	uxtb	r3, r3
 8007e46:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007e48:	78fb      	ldrb	r3, [r7, #3]
 8007e4a:	b2db      	uxtb	r3, r3
 8007e4c:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8007e50:	b2da      	uxtb	r2, r3
 8007e52:	4b2a      	ldr	r3, [pc, #168]	@ (8007efc <xPortStartScheduler+0xd4>)
 8007e54:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007e56:	4b2a      	ldr	r3, [pc, #168]	@ (8007f00 <xPortStartScheduler+0xd8>)
 8007e58:	2207      	movs	r2, #7
 8007e5a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007e5c:	e009      	b.n	8007e72 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8007e5e:	4b28      	ldr	r3, [pc, #160]	@ (8007f00 <xPortStartScheduler+0xd8>)
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	3b01      	subs	r3, #1
 8007e64:	4a26      	ldr	r2, [pc, #152]	@ (8007f00 <xPortStartScheduler+0xd8>)
 8007e66:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007e68:	78fb      	ldrb	r3, [r7, #3]
 8007e6a:	b2db      	uxtb	r3, r3
 8007e6c:	005b      	lsls	r3, r3, #1
 8007e6e:	b2db      	uxtb	r3, r3
 8007e70:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007e72:	78fb      	ldrb	r3, [r7, #3]
 8007e74:	b2db      	uxtb	r3, r3
 8007e76:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007e7a:	2b80      	cmp	r3, #128	@ 0x80
 8007e7c:	d0ef      	beq.n	8007e5e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007e7e:	4b20      	ldr	r3, [pc, #128]	@ (8007f00 <xPortStartScheduler+0xd8>)
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	f1c3 0307 	rsb	r3, r3, #7
 8007e86:	2b04      	cmp	r3, #4
 8007e88:	d00b      	beq.n	8007ea2 <xPortStartScheduler+0x7a>
	__asm volatile
 8007e8a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e8e:	f383 8811 	msr	BASEPRI, r3
 8007e92:	f3bf 8f6f 	isb	sy
 8007e96:	f3bf 8f4f 	dsb	sy
 8007e9a:	60bb      	str	r3, [r7, #8]
}
 8007e9c:	bf00      	nop
 8007e9e:	bf00      	nop
 8007ea0:	e7fd      	b.n	8007e9e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007ea2:	4b17      	ldr	r3, [pc, #92]	@ (8007f00 <xPortStartScheduler+0xd8>)
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	021b      	lsls	r3, r3, #8
 8007ea8:	4a15      	ldr	r2, [pc, #84]	@ (8007f00 <xPortStartScheduler+0xd8>)
 8007eaa:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007eac:	4b14      	ldr	r3, [pc, #80]	@ (8007f00 <xPortStartScheduler+0xd8>)
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8007eb4:	4a12      	ldr	r2, [pc, #72]	@ (8007f00 <xPortStartScheduler+0xd8>)
 8007eb6:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	b2da      	uxtb	r2, r3
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007ec0:	4b10      	ldr	r3, [pc, #64]	@ (8007f04 <xPortStartScheduler+0xdc>)
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	4a0f      	ldr	r2, [pc, #60]	@ (8007f04 <xPortStartScheduler+0xdc>)
 8007ec6:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8007eca:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007ecc:	4b0d      	ldr	r3, [pc, #52]	@ (8007f04 <xPortStartScheduler+0xdc>)
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	4a0c      	ldr	r2, [pc, #48]	@ (8007f04 <xPortStartScheduler+0xdc>)
 8007ed2:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8007ed6:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007ed8:	f000 f8b8 	bl	800804c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007edc:	4b0a      	ldr	r3, [pc, #40]	@ (8007f08 <xPortStartScheduler+0xe0>)
 8007ede:	2200      	movs	r2, #0
 8007ee0:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007ee2:	f7ff ff91 	bl	8007e08 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007ee6:	f7fe ff51 	bl	8006d8c <vTaskSwitchContext>
	prvTaskExitError();
 8007eea:	f7ff ff4b 	bl	8007d84 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007eee:	2300      	movs	r3, #0
}
 8007ef0:	4618      	mov	r0, r3
 8007ef2:	3710      	adds	r7, #16
 8007ef4:	46bd      	mov	sp, r7
 8007ef6:	bd80      	pop	{r7, pc}
 8007ef8:	e000e400 	.word	0xe000e400
 8007efc:	200010d0 	.word	0x200010d0
 8007f00:	200010d4 	.word	0x200010d4
 8007f04:	e000ed20 	.word	0xe000ed20
 8007f08:	2000001c 	.word	0x2000001c

08007f0c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007f0c:	b480      	push	{r7}
 8007f0e:	b083      	sub	sp, #12
 8007f10:	af00      	add	r7, sp, #0
	__asm volatile
 8007f12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f16:	f383 8811 	msr	BASEPRI, r3
 8007f1a:	f3bf 8f6f 	isb	sy
 8007f1e:	f3bf 8f4f 	dsb	sy
 8007f22:	607b      	str	r3, [r7, #4]
}
 8007f24:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007f26:	4b0f      	ldr	r3, [pc, #60]	@ (8007f64 <vPortEnterCritical+0x58>)
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	3301      	adds	r3, #1
 8007f2c:	4a0d      	ldr	r2, [pc, #52]	@ (8007f64 <vPortEnterCritical+0x58>)
 8007f2e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007f30:	4b0c      	ldr	r3, [pc, #48]	@ (8007f64 <vPortEnterCritical+0x58>)
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	2b01      	cmp	r3, #1
 8007f36:	d110      	bne.n	8007f5a <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007f38:	4b0b      	ldr	r3, [pc, #44]	@ (8007f68 <vPortEnterCritical+0x5c>)
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	b2db      	uxtb	r3, r3
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	d00b      	beq.n	8007f5a <vPortEnterCritical+0x4e>
	__asm volatile
 8007f42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f46:	f383 8811 	msr	BASEPRI, r3
 8007f4a:	f3bf 8f6f 	isb	sy
 8007f4e:	f3bf 8f4f 	dsb	sy
 8007f52:	603b      	str	r3, [r7, #0]
}
 8007f54:	bf00      	nop
 8007f56:	bf00      	nop
 8007f58:	e7fd      	b.n	8007f56 <vPortEnterCritical+0x4a>
	}
}
 8007f5a:	bf00      	nop
 8007f5c:	370c      	adds	r7, #12
 8007f5e:	46bd      	mov	sp, r7
 8007f60:	bc80      	pop	{r7}
 8007f62:	4770      	bx	lr
 8007f64:	2000001c 	.word	0x2000001c
 8007f68:	e000ed04 	.word	0xe000ed04

08007f6c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007f6c:	b480      	push	{r7}
 8007f6e:	b083      	sub	sp, #12
 8007f70:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007f72:	4b12      	ldr	r3, [pc, #72]	@ (8007fbc <vPortExitCritical+0x50>)
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	d10b      	bne.n	8007f92 <vPortExitCritical+0x26>
	__asm volatile
 8007f7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f7e:	f383 8811 	msr	BASEPRI, r3
 8007f82:	f3bf 8f6f 	isb	sy
 8007f86:	f3bf 8f4f 	dsb	sy
 8007f8a:	607b      	str	r3, [r7, #4]
}
 8007f8c:	bf00      	nop
 8007f8e:	bf00      	nop
 8007f90:	e7fd      	b.n	8007f8e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007f92:	4b0a      	ldr	r3, [pc, #40]	@ (8007fbc <vPortExitCritical+0x50>)
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	3b01      	subs	r3, #1
 8007f98:	4a08      	ldr	r2, [pc, #32]	@ (8007fbc <vPortExitCritical+0x50>)
 8007f9a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007f9c:	4b07      	ldr	r3, [pc, #28]	@ (8007fbc <vPortExitCritical+0x50>)
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	2b00      	cmp	r3, #0
 8007fa2:	d105      	bne.n	8007fb0 <vPortExitCritical+0x44>
 8007fa4:	2300      	movs	r3, #0
 8007fa6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007fa8:	683b      	ldr	r3, [r7, #0]
 8007faa:	f383 8811 	msr	BASEPRI, r3
}
 8007fae:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007fb0:	bf00      	nop
 8007fb2:	370c      	adds	r7, #12
 8007fb4:	46bd      	mov	sp, r7
 8007fb6:	bc80      	pop	{r7}
 8007fb8:	4770      	bx	lr
 8007fba:	bf00      	nop
 8007fbc:	2000001c 	.word	0x2000001c

08007fc0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007fc0:	f3ef 8009 	mrs	r0, PSP
 8007fc4:	f3bf 8f6f 	isb	sy
 8007fc8:	4b0d      	ldr	r3, [pc, #52]	@ (8008000 <pxCurrentTCBConst>)
 8007fca:	681a      	ldr	r2, [r3, #0]
 8007fcc:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8007fd0:	6010      	str	r0, [r2, #0]
 8007fd2:	e92d 4008 	stmdb	sp!, {r3, lr}
 8007fd6:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8007fda:	f380 8811 	msr	BASEPRI, r0
 8007fde:	f7fe fed5 	bl	8006d8c <vTaskSwitchContext>
 8007fe2:	f04f 0000 	mov.w	r0, #0
 8007fe6:	f380 8811 	msr	BASEPRI, r0
 8007fea:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8007fee:	6819      	ldr	r1, [r3, #0]
 8007ff0:	6808      	ldr	r0, [r1, #0]
 8007ff2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8007ff6:	f380 8809 	msr	PSP, r0
 8007ffa:	f3bf 8f6f 	isb	sy
 8007ffe:	4770      	bx	lr

08008000 <pxCurrentTCBConst>:
 8008000:	20000aa4 	.word	0x20000aa4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008004:	bf00      	nop
 8008006:	bf00      	nop

08008008 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008008:	b580      	push	{r7, lr}
 800800a:	b082      	sub	sp, #8
 800800c:	af00      	add	r7, sp, #0
	__asm volatile
 800800e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008012:	f383 8811 	msr	BASEPRI, r3
 8008016:	f3bf 8f6f 	isb	sy
 800801a:	f3bf 8f4f 	dsb	sy
 800801e:	607b      	str	r3, [r7, #4]
}
 8008020:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008022:	f7fe fdf9 	bl	8006c18 <xTaskIncrementTick>
 8008026:	4603      	mov	r3, r0
 8008028:	2b00      	cmp	r3, #0
 800802a:	d003      	beq.n	8008034 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800802c:	4b06      	ldr	r3, [pc, #24]	@ (8008048 <xPortSysTickHandler+0x40>)
 800802e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008032:	601a      	str	r2, [r3, #0]
 8008034:	2300      	movs	r3, #0
 8008036:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008038:	683b      	ldr	r3, [r7, #0]
 800803a:	f383 8811 	msr	BASEPRI, r3
}
 800803e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008040:	bf00      	nop
 8008042:	3708      	adds	r7, #8
 8008044:	46bd      	mov	sp, r7
 8008046:	bd80      	pop	{r7, pc}
 8008048:	e000ed04 	.word	0xe000ed04

0800804c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800804c:	b480      	push	{r7}
 800804e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008050:	4b0a      	ldr	r3, [pc, #40]	@ (800807c <vPortSetupTimerInterrupt+0x30>)
 8008052:	2200      	movs	r2, #0
 8008054:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008056:	4b0a      	ldr	r3, [pc, #40]	@ (8008080 <vPortSetupTimerInterrupt+0x34>)
 8008058:	2200      	movs	r2, #0
 800805a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800805c:	4b09      	ldr	r3, [pc, #36]	@ (8008084 <vPortSetupTimerInterrupt+0x38>)
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	4a09      	ldr	r2, [pc, #36]	@ (8008088 <vPortSetupTimerInterrupt+0x3c>)
 8008062:	fba2 2303 	umull	r2, r3, r2, r3
 8008066:	099b      	lsrs	r3, r3, #6
 8008068:	4a08      	ldr	r2, [pc, #32]	@ (800808c <vPortSetupTimerInterrupt+0x40>)
 800806a:	3b01      	subs	r3, #1
 800806c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800806e:	4b03      	ldr	r3, [pc, #12]	@ (800807c <vPortSetupTimerInterrupt+0x30>)
 8008070:	2207      	movs	r2, #7
 8008072:	601a      	str	r2, [r3, #0]
}
 8008074:	bf00      	nop
 8008076:	46bd      	mov	sp, r7
 8008078:	bc80      	pop	{r7}
 800807a:	4770      	bx	lr
 800807c:	e000e010 	.word	0xe000e010
 8008080:	e000e018 	.word	0xe000e018
 8008084:	20000010 	.word	0x20000010
 8008088:	10624dd3 	.word	0x10624dd3
 800808c:	e000e014 	.word	0xe000e014

08008090 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008090:	b480      	push	{r7}
 8008092:	b085      	sub	sp, #20
 8008094:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8008096:	f3ef 8305 	mrs	r3, IPSR
 800809a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800809c:	68fb      	ldr	r3, [r7, #12]
 800809e:	2b0f      	cmp	r3, #15
 80080a0:	d915      	bls.n	80080ce <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80080a2:	4a17      	ldr	r2, [pc, #92]	@ (8008100 <vPortValidateInterruptPriority+0x70>)
 80080a4:	68fb      	ldr	r3, [r7, #12]
 80080a6:	4413      	add	r3, r2
 80080a8:	781b      	ldrb	r3, [r3, #0]
 80080aa:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80080ac:	4b15      	ldr	r3, [pc, #84]	@ (8008104 <vPortValidateInterruptPriority+0x74>)
 80080ae:	781b      	ldrb	r3, [r3, #0]
 80080b0:	7afa      	ldrb	r2, [r7, #11]
 80080b2:	429a      	cmp	r2, r3
 80080b4:	d20b      	bcs.n	80080ce <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 80080b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80080ba:	f383 8811 	msr	BASEPRI, r3
 80080be:	f3bf 8f6f 	isb	sy
 80080c2:	f3bf 8f4f 	dsb	sy
 80080c6:	607b      	str	r3, [r7, #4]
}
 80080c8:	bf00      	nop
 80080ca:	bf00      	nop
 80080cc:	e7fd      	b.n	80080ca <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80080ce:	4b0e      	ldr	r3, [pc, #56]	@ (8008108 <vPortValidateInterruptPriority+0x78>)
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80080d6:	4b0d      	ldr	r3, [pc, #52]	@ (800810c <vPortValidateInterruptPriority+0x7c>)
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	429a      	cmp	r2, r3
 80080dc:	d90b      	bls.n	80080f6 <vPortValidateInterruptPriority+0x66>
	__asm volatile
 80080de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80080e2:	f383 8811 	msr	BASEPRI, r3
 80080e6:	f3bf 8f6f 	isb	sy
 80080ea:	f3bf 8f4f 	dsb	sy
 80080ee:	603b      	str	r3, [r7, #0]
}
 80080f0:	bf00      	nop
 80080f2:	bf00      	nop
 80080f4:	e7fd      	b.n	80080f2 <vPortValidateInterruptPriority+0x62>
	}
 80080f6:	bf00      	nop
 80080f8:	3714      	adds	r7, #20
 80080fa:	46bd      	mov	sp, r7
 80080fc:	bc80      	pop	{r7}
 80080fe:	4770      	bx	lr
 8008100:	e000e3f0 	.word	0xe000e3f0
 8008104:	200010d0 	.word	0x200010d0
 8008108:	e000ed0c 	.word	0xe000ed0c
 800810c:	200010d4 	.word	0x200010d4

08008110 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008110:	b580      	push	{r7, lr}
 8008112:	b08a      	sub	sp, #40	@ 0x28
 8008114:	af00      	add	r7, sp, #0
 8008116:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008118:	2300      	movs	r3, #0
 800811a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800811c:	f7fe fcc2 	bl	8006aa4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008120:	4b5c      	ldr	r3, [pc, #368]	@ (8008294 <pvPortMalloc+0x184>)
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	2b00      	cmp	r3, #0
 8008126:	d101      	bne.n	800812c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008128:	f000 f924 	bl	8008374 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800812c:	4b5a      	ldr	r3, [pc, #360]	@ (8008298 <pvPortMalloc+0x188>)
 800812e:	681a      	ldr	r2, [r3, #0]
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	4013      	ands	r3, r2
 8008134:	2b00      	cmp	r3, #0
 8008136:	f040 8095 	bne.w	8008264 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	2b00      	cmp	r3, #0
 800813e:	d01e      	beq.n	800817e <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8008140:	2208      	movs	r2, #8
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	4413      	add	r3, r2
 8008146:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	f003 0307 	and.w	r3, r3, #7
 800814e:	2b00      	cmp	r3, #0
 8008150:	d015      	beq.n	800817e <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	f023 0307 	bic.w	r3, r3, #7
 8008158:	3308      	adds	r3, #8
 800815a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	f003 0307 	and.w	r3, r3, #7
 8008162:	2b00      	cmp	r3, #0
 8008164:	d00b      	beq.n	800817e <pvPortMalloc+0x6e>
	__asm volatile
 8008166:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800816a:	f383 8811 	msr	BASEPRI, r3
 800816e:	f3bf 8f6f 	isb	sy
 8008172:	f3bf 8f4f 	dsb	sy
 8008176:	617b      	str	r3, [r7, #20]
}
 8008178:	bf00      	nop
 800817a:	bf00      	nop
 800817c:	e7fd      	b.n	800817a <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	2b00      	cmp	r3, #0
 8008182:	d06f      	beq.n	8008264 <pvPortMalloc+0x154>
 8008184:	4b45      	ldr	r3, [pc, #276]	@ (800829c <pvPortMalloc+0x18c>)
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	687a      	ldr	r2, [r7, #4]
 800818a:	429a      	cmp	r2, r3
 800818c:	d86a      	bhi.n	8008264 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800818e:	4b44      	ldr	r3, [pc, #272]	@ (80082a0 <pvPortMalloc+0x190>)
 8008190:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8008192:	4b43      	ldr	r3, [pc, #268]	@ (80082a0 <pvPortMalloc+0x190>)
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008198:	e004      	b.n	80081a4 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800819a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800819c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800819e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80081a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80081a6:	685b      	ldr	r3, [r3, #4]
 80081a8:	687a      	ldr	r2, [r7, #4]
 80081aa:	429a      	cmp	r2, r3
 80081ac:	d903      	bls.n	80081b6 <pvPortMalloc+0xa6>
 80081ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	d1f1      	bne.n	800819a <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80081b6:	4b37      	ldr	r3, [pc, #220]	@ (8008294 <pvPortMalloc+0x184>)
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80081bc:	429a      	cmp	r2, r3
 80081be:	d051      	beq.n	8008264 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80081c0:	6a3b      	ldr	r3, [r7, #32]
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	2208      	movs	r2, #8
 80081c6:	4413      	add	r3, r2
 80081c8:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80081ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80081cc:	681a      	ldr	r2, [r3, #0]
 80081ce:	6a3b      	ldr	r3, [r7, #32]
 80081d0:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80081d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80081d4:	685a      	ldr	r2, [r3, #4]
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	1ad2      	subs	r2, r2, r3
 80081da:	2308      	movs	r3, #8
 80081dc:	005b      	lsls	r3, r3, #1
 80081de:	429a      	cmp	r2, r3
 80081e0:	d920      	bls.n	8008224 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80081e2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	4413      	add	r3, r2
 80081e8:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80081ea:	69bb      	ldr	r3, [r7, #24]
 80081ec:	f003 0307 	and.w	r3, r3, #7
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	d00b      	beq.n	800820c <pvPortMalloc+0xfc>
	__asm volatile
 80081f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80081f8:	f383 8811 	msr	BASEPRI, r3
 80081fc:	f3bf 8f6f 	isb	sy
 8008200:	f3bf 8f4f 	dsb	sy
 8008204:	613b      	str	r3, [r7, #16]
}
 8008206:	bf00      	nop
 8008208:	bf00      	nop
 800820a:	e7fd      	b.n	8008208 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800820c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800820e:	685a      	ldr	r2, [r3, #4]
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	1ad2      	subs	r2, r2, r3
 8008214:	69bb      	ldr	r3, [r7, #24]
 8008216:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008218:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800821a:	687a      	ldr	r2, [r7, #4]
 800821c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800821e:	69b8      	ldr	r0, [r7, #24]
 8008220:	f000 f90a 	bl	8008438 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008224:	4b1d      	ldr	r3, [pc, #116]	@ (800829c <pvPortMalloc+0x18c>)
 8008226:	681a      	ldr	r2, [r3, #0]
 8008228:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800822a:	685b      	ldr	r3, [r3, #4]
 800822c:	1ad3      	subs	r3, r2, r3
 800822e:	4a1b      	ldr	r2, [pc, #108]	@ (800829c <pvPortMalloc+0x18c>)
 8008230:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008232:	4b1a      	ldr	r3, [pc, #104]	@ (800829c <pvPortMalloc+0x18c>)
 8008234:	681a      	ldr	r2, [r3, #0]
 8008236:	4b1b      	ldr	r3, [pc, #108]	@ (80082a4 <pvPortMalloc+0x194>)
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	429a      	cmp	r2, r3
 800823c:	d203      	bcs.n	8008246 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800823e:	4b17      	ldr	r3, [pc, #92]	@ (800829c <pvPortMalloc+0x18c>)
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	4a18      	ldr	r2, [pc, #96]	@ (80082a4 <pvPortMalloc+0x194>)
 8008244:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008246:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008248:	685a      	ldr	r2, [r3, #4]
 800824a:	4b13      	ldr	r3, [pc, #76]	@ (8008298 <pvPortMalloc+0x188>)
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	431a      	orrs	r2, r3
 8008250:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008252:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008254:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008256:	2200      	movs	r2, #0
 8008258:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800825a:	4b13      	ldr	r3, [pc, #76]	@ (80082a8 <pvPortMalloc+0x198>)
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	3301      	adds	r3, #1
 8008260:	4a11      	ldr	r2, [pc, #68]	@ (80082a8 <pvPortMalloc+0x198>)
 8008262:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008264:	f7fe fc2c 	bl	8006ac0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008268:	69fb      	ldr	r3, [r7, #28]
 800826a:	f003 0307 	and.w	r3, r3, #7
 800826e:	2b00      	cmp	r3, #0
 8008270:	d00b      	beq.n	800828a <pvPortMalloc+0x17a>
	__asm volatile
 8008272:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008276:	f383 8811 	msr	BASEPRI, r3
 800827a:	f3bf 8f6f 	isb	sy
 800827e:	f3bf 8f4f 	dsb	sy
 8008282:	60fb      	str	r3, [r7, #12]
}
 8008284:	bf00      	nop
 8008286:	bf00      	nop
 8008288:	e7fd      	b.n	8008286 <pvPortMalloc+0x176>
	return pvReturn;
 800828a:	69fb      	ldr	r3, [r7, #28]
}
 800828c:	4618      	mov	r0, r3
 800828e:	3728      	adds	r7, #40	@ 0x28
 8008290:	46bd      	mov	sp, r7
 8008292:	bd80      	pop	{r7, pc}
 8008294:	20001ce0 	.word	0x20001ce0
 8008298:	20001cf4 	.word	0x20001cf4
 800829c:	20001ce4 	.word	0x20001ce4
 80082a0:	20001cd8 	.word	0x20001cd8
 80082a4:	20001ce8 	.word	0x20001ce8
 80082a8:	20001cec 	.word	0x20001cec

080082ac <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80082ac:	b580      	push	{r7, lr}
 80082ae:	b086      	sub	sp, #24
 80082b0:	af00      	add	r7, sp, #0
 80082b2:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	d04f      	beq.n	800835e <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80082be:	2308      	movs	r3, #8
 80082c0:	425b      	negs	r3, r3
 80082c2:	697a      	ldr	r2, [r7, #20]
 80082c4:	4413      	add	r3, r2
 80082c6:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80082c8:	697b      	ldr	r3, [r7, #20]
 80082ca:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80082cc:	693b      	ldr	r3, [r7, #16]
 80082ce:	685a      	ldr	r2, [r3, #4]
 80082d0:	4b25      	ldr	r3, [pc, #148]	@ (8008368 <vPortFree+0xbc>)
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	4013      	ands	r3, r2
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	d10b      	bne.n	80082f2 <vPortFree+0x46>
	__asm volatile
 80082da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80082de:	f383 8811 	msr	BASEPRI, r3
 80082e2:	f3bf 8f6f 	isb	sy
 80082e6:	f3bf 8f4f 	dsb	sy
 80082ea:	60fb      	str	r3, [r7, #12]
}
 80082ec:	bf00      	nop
 80082ee:	bf00      	nop
 80082f0:	e7fd      	b.n	80082ee <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80082f2:	693b      	ldr	r3, [r7, #16]
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	2b00      	cmp	r3, #0
 80082f8:	d00b      	beq.n	8008312 <vPortFree+0x66>
	__asm volatile
 80082fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80082fe:	f383 8811 	msr	BASEPRI, r3
 8008302:	f3bf 8f6f 	isb	sy
 8008306:	f3bf 8f4f 	dsb	sy
 800830a:	60bb      	str	r3, [r7, #8]
}
 800830c:	bf00      	nop
 800830e:	bf00      	nop
 8008310:	e7fd      	b.n	800830e <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008312:	693b      	ldr	r3, [r7, #16]
 8008314:	685a      	ldr	r2, [r3, #4]
 8008316:	4b14      	ldr	r3, [pc, #80]	@ (8008368 <vPortFree+0xbc>)
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	4013      	ands	r3, r2
 800831c:	2b00      	cmp	r3, #0
 800831e:	d01e      	beq.n	800835e <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008320:	693b      	ldr	r3, [r7, #16]
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	2b00      	cmp	r3, #0
 8008326:	d11a      	bne.n	800835e <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008328:	693b      	ldr	r3, [r7, #16]
 800832a:	685a      	ldr	r2, [r3, #4]
 800832c:	4b0e      	ldr	r3, [pc, #56]	@ (8008368 <vPortFree+0xbc>)
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	43db      	mvns	r3, r3
 8008332:	401a      	ands	r2, r3
 8008334:	693b      	ldr	r3, [r7, #16]
 8008336:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008338:	f7fe fbb4 	bl	8006aa4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800833c:	693b      	ldr	r3, [r7, #16]
 800833e:	685a      	ldr	r2, [r3, #4]
 8008340:	4b0a      	ldr	r3, [pc, #40]	@ (800836c <vPortFree+0xc0>)
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	4413      	add	r3, r2
 8008346:	4a09      	ldr	r2, [pc, #36]	@ (800836c <vPortFree+0xc0>)
 8008348:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800834a:	6938      	ldr	r0, [r7, #16]
 800834c:	f000 f874 	bl	8008438 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8008350:	4b07      	ldr	r3, [pc, #28]	@ (8008370 <vPortFree+0xc4>)
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	3301      	adds	r3, #1
 8008356:	4a06      	ldr	r2, [pc, #24]	@ (8008370 <vPortFree+0xc4>)
 8008358:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800835a:	f7fe fbb1 	bl	8006ac0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800835e:	bf00      	nop
 8008360:	3718      	adds	r7, #24
 8008362:	46bd      	mov	sp, r7
 8008364:	bd80      	pop	{r7, pc}
 8008366:	bf00      	nop
 8008368:	20001cf4 	.word	0x20001cf4
 800836c:	20001ce4 	.word	0x20001ce4
 8008370:	20001cf0 	.word	0x20001cf0

08008374 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008374:	b480      	push	{r7}
 8008376:	b085      	sub	sp, #20
 8008378:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800837a:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800837e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008380:	4b27      	ldr	r3, [pc, #156]	@ (8008420 <prvHeapInit+0xac>)
 8008382:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008384:	68fb      	ldr	r3, [r7, #12]
 8008386:	f003 0307 	and.w	r3, r3, #7
 800838a:	2b00      	cmp	r3, #0
 800838c:	d00c      	beq.n	80083a8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800838e:	68fb      	ldr	r3, [r7, #12]
 8008390:	3307      	adds	r3, #7
 8008392:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	f023 0307 	bic.w	r3, r3, #7
 800839a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800839c:	68ba      	ldr	r2, [r7, #8]
 800839e:	68fb      	ldr	r3, [r7, #12]
 80083a0:	1ad3      	subs	r3, r2, r3
 80083a2:	4a1f      	ldr	r2, [pc, #124]	@ (8008420 <prvHeapInit+0xac>)
 80083a4:	4413      	add	r3, r2
 80083a6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80083a8:	68fb      	ldr	r3, [r7, #12]
 80083aa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80083ac:	4a1d      	ldr	r2, [pc, #116]	@ (8008424 <prvHeapInit+0xb0>)
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80083b2:	4b1c      	ldr	r3, [pc, #112]	@ (8008424 <prvHeapInit+0xb0>)
 80083b4:	2200      	movs	r2, #0
 80083b6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	68ba      	ldr	r2, [r7, #8]
 80083bc:	4413      	add	r3, r2
 80083be:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80083c0:	2208      	movs	r2, #8
 80083c2:	68fb      	ldr	r3, [r7, #12]
 80083c4:	1a9b      	subs	r3, r3, r2
 80083c6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80083c8:	68fb      	ldr	r3, [r7, #12]
 80083ca:	f023 0307 	bic.w	r3, r3, #7
 80083ce:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80083d0:	68fb      	ldr	r3, [r7, #12]
 80083d2:	4a15      	ldr	r2, [pc, #84]	@ (8008428 <prvHeapInit+0xb4>)
 80083d4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80083d6:	4b14      	ldr	r3, [pc, #80]	@ (8008428 <prvHeapInit+0xb4>)
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	2200      	movs	r2, #0
 80083dc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80083de:	4b12      	ldr	r3, [pc, #72]	@ (8008428 <prvHeapInit+0xb4>)
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	2200      	movs	r2, #0
 80083e4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80083ea:	683b      	ldr	r3, [r7, #0]
 80083ec:	68fa      	ldr	r2, [r7, #12]
 80083ee:	1ad2      	subs	r2, r2, r3
 80083f0:	683b      	ldr	r3, [r7, #0]
 80083f2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80083f4:	4b0c      	ldr	r3, [pc, #48]	@ (8008428 <prvHeapInit+0xb4>)
 80083f6:	681a      	ldr	r2, [r3, #0]
 80083f8:	683b      	ldr	r3, [r7, #0]
 80083fa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80083fc:	683b      	ldr	r3, [r7, #0]
 80083fe:	685b      	ldr	r3, [r3, #4]
 8008400:	4a0a      	ldr	r2, [pc, #40]	@ (800842c <prvHeapInit+0xb8>)
 8008402:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008404:	683b      	ldr	r3, [r7, #0]
 8008406:	685b      	ldr	r3, [r3, #4]
 8008408:	4a09      	ldr	r2, [pc, #36]	@ (8008430 <prvHeapInit+0xbc>)
 800840a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800840c:	4b09      	ldr	r3, [pc, #36]	@ (8008434 <prvHeapInit+0xc0>)
 800840e:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8008412:	601a      	str	r2, [r3, #0]
}
 8008414:	bf00      	nop
 8008416:	3714      	adds	r7, #20
 8008418:	46bd      	mov	sp, r7
 800841a:	bc80      	pop	{r7}
 800841c:	4770      	bx	lr
 800841e:	bf00      	nop
 8008420:	200010d8 	.word	0x200010d8
 8008424:	20001cd8 	.word	0x20001cd8
 8008428:	20001ce0 	.word	0x20001ce0
 800842c:	20001ce8 	.word	0x20001ce8
 8008430:	20001ce4 	.word	0x20001ce4
 8008434:	20001cf4 	.word	0x20001cf4

08008438 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008438:	b480      	push	{r7}
 800843a:	b085      	sub	sp, #20
 800843c:	af00      	add	r7, sp, #0
 800843e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008440:	4b27      	ldr	r3, [pc, #156]	@ (80084e0 <prvInsertBlockIntoFreeList+0xa8>)
 8008442:	60fb      	str	r3, [r7, #12]
 8008444:	e002      	b.n	800844c <prvInsertBlockIntoFreeList+0x14>
 8008446:	68fb      	ldr	r3, [r7, #12]
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	60fb      	str	r3, [r7, #12]
 800844c:	68fb      	ldr	r3, [r7, #12]
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	687a      	ldr	r2, [r7, #4]
 8008452:	429a      	cmp	r2, r3
 8008454:	d8f7      	bhi.n	8008446 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008456:	68fb      	ldr	r3, [r7, #12]
 8008458:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800845a:	68fb      	ldr	r3, [r7, #12]
 800845c:	685b      	ldr	r3, [r3, #4]
 800845e:	68ba      	ldr	r2, [r7, #8]
 8008460:	4413      	add	r3, r2
 8008462:	687a      	ldr	r2, [r7, #4]
 8008464:	429a      	cmp	r2, r3
 8008466:	d108      	bne.n	800847a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008468:	68fb      	ldr	r3, [r7, #12]
 800846a:	685a      	ldr	r2, [r3, #4]
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	685b      	ldr	r3, [r3, #4]
 8008470:	441a      	add	r2, r3
 8008472:	68fb      	ldr	r3, [r7, #12]
 8008474:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008476:	68fb      	ldr	r3, [r7, #12]
 8008478:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	685b      	ldr	r3, [r3, #4]
 8008482:	68ba      	ldr	r2, [r7, #8]
 8008484:	441a      	add	r2, r3
 8008486:	68fb      	ldr	r3, [r7, #12]
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	429a      	cmp	r2, r3
 800848c:	d118      	bne.n	80084c0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800848e:	68fb      	ldr	r3, [r7, #12]
 8008490:	681a      	ldr	r2, [r3, #0]
 8008492:	4b14      	ldr	r3, [pc, #80]	@ (80084e4 <prvInsertBlockIntoFreeList+0xac>)
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	429a      	cmp	r2, r3
 8008498:	d00d      	beq.n	80084b6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	685a      	ldr	r2, [r3, #4]
 800849e:	68fb      	ldr	r3, [r7, #12]
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	685b      	ldr	r3, [r3, #4]
 80084a4:	441a      	add	r2, r3
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80084aa:	68fb      	ldr	r3, [r7, #12]
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	681a      	ldr	r2, [r3, #0]
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	601a      	str	r2, [r3, #0]
 80084b4:	e008      	b.n	80084c8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80084b6:	4b0b      	ldr	r3, [pc, #44]	@ (80084e4 <prvInsertBlockIntoFreeList+0xac>)
 80084b8:	681a      	ldr	r2, [r3, #0]
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	601a      	str	r2, [r3, #0]
 80084be:	e003      	b.n	80084c8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80084c0:	68fb      	ldr	r3, [r7, #12]
 80084c2:	681a      	ldr	r2, [r3, #0]
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80084c8:	68fa      	ldr	r2, [r7, #12]
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	429a      	cmp	r2, r3
 80084ce:	d002      	beq.n	80084d6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80084d0:	68fb      	ldr	r3, [r7, #12]
 80084d2:	687a      	ldr	r2, [r7, #4]
 80084d4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80084d6:	bf00      	nop
 80084d8:	3714      	adds	r7, #20
 80084da:	46bd      	mov	sp, r7
 80084dc:	bc80      	pop	{r7}
 80084de:	4770      	bx	lr
 80084e0:	20001cd8 	.word	0x20001cd8
 80084e4:	20001ce0 	.word	0x20001ce0

080084e8 <__cvt>:
 80084e8:	2b00      	cmp	r3, #0
 80084ea:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80084ee:	461d      	mov	r5, r3
 80084f0:	bfbb      	ittet	lt
 80084f2:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 80084f6:	461d      	movlt	r5, r3
 80084f8:	2300      	movge	r3, #0
 80084fa:	232d      	movlt	r3, #45	@ 0x2d
 80084fc:	b088      	sub	sp, #32
 80084fe:	4614      	mov	r4, r2
 8008500:	bfb8      	it	lt
 8008502:	4614      	movlt	r4, r2
 8008504:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8008506:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8008508:	7013      	strb	r3, [r2, #0]
 800850a:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800850c:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 8008510:	f023 0820 	bic.w	r8, r3, #32
 8008514:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8008518:	d005      	beq.n	8008526 <__cvt+0x3e>
 800851a:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800851e:	d100      	bne.n	8008522 <__cvt+0x3a>
 8008520:	3601      	adds	r6, #1
 8008522:	2302      	movs	r3, #2
 8008524:	e000      	b.n	8008528 <__cvt+0x40>
 8008526:	2303      	movs	r3, #3
 8008528:	aa07      	add	r2, sp, #28
 800852a:	9204      	str	r2, [sp, #16]
 800852c:	aa06      	add	r2, sp, #24
 800852e:	e9cd a202 	strd	sl, r2, [sp, #8]
 8008532:	e9cd 3600 	strd	r3, r6, [sp]
 8008536:	4622      	mov	r2, r4
 8008538:	462b      	mov	r3, r5
 800853a:	f000 ff6d 	bl	8009418 <_dtoa_r>
 800853e:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8008542:	4607      	mov	r7, r0
 8008544:	d119      	bne.n	800857a <__cvt+0x92>
 8008546:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8008548:	07db      	lsls	r3, r3, #31
 800854a:	d50e      	bpl.n	800856a <__cvt+0x82>
 800854c:	eb00 0906 	add.w	r9, r0, r6
 8008550:	2200      	movs	r2, #0
 8008552:	2300      	movs	r3, #0
 8008554:	4620      	mov	r0, r4
 8008556:	4629      	mov	r1, r5
 8008558:	f7f8 fa26 	bl	80009a8 <__aeabi_dcmpeq>
 800855c:	b108      	cbz	r0, 8008562 <__cvt+0x7a>
 800855e:	f8cd 901c 	str.w	r9, [sp, #28]
 8008562:	2230      	movs	r2, #48	@ 0x30
 8008564:	9b07      	ldr	r3, [sp, #28]
 8008566:	454b      	cmp	r3, r9
 8008568:	d31e      	bcc.n	80085a8 <__cvt+0xc0>
 800856a:	4638      	mov	r0, r7
 800856c:	9b07      	ldr	r3, [sp, #28]
 800856e:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8008570:	1bdb      	subs	r3, r3, r7
 8008572:	6013      	str	r3, [r2, #0]
 8008574:	b008      	add	sp, #32
 8008576:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800857a:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800857e:	eb00 0906 	add.w	r9, r0, r6
 8008582:	d1e5      	bne.n	8008550 <__cvt+0x68>
 8008584:	7803      	ldrb	r3, [r0, #0]
 8008586:	2b30      	cmp	r3, #48	@ 0x30
 8008588:	d10a      	bne.n	80085a0 <__cvt+0xb8>
 800858a:	2200      	movs	r2, #0
 800858c:	2300      	movs	r3, #0
 800858e:	4620      	mov	r0, r4
 8008590:	4629      	mov	r1, r5
 8008592:	f7f8 fa09 	bl	80009a8 <__aeabi_dcmpeq>
 8008596:	b918      	cbnz	r0, 80085a0 <__cvt+0xb8>
 8008598:	f1c6 0601 	rsb	r6, r6, #1
 800859c:	f8ca 6000 	str.w	r6, [sl]
 80085a0:	f8da 3000 	ldr.w	r3, [sl]
 80085a4:	4499      	add	r9, r3
 80085a6:	e7d3      	b.n	8008550 <__cvt+0x68>
 80085a8:	1c59      	adds	r1, r3, #1
 80085aa:	9107      	str	r1, [sp, #28]
 80085ac:	701a      	strb	r2, [r3, #0]
 80085ae:	e7d9      	b.n	8008564 <__cvt+0x7c>

080085b0 <__exponent>:
 80085b0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80085b2:	2900      	cmp	r1, #0
 80085b4:	bfb6      	itet	lt
 80085b6:	232d      	movlt	r3, #45	@ 0x2d
 80085b8:	232b      	movge	r3, #43	@ 0x2b
 80085ba:	4249      	neglt	r1, r1
 80085bc:	2909      	cmp	r1, #9
 80085be:	7002      	strb	r2, [r0, #0]
 80085c0:	7043      	strb	r3, [r0, #1]
 80085c2:	dd29      	ble.n	8008618 <__exponent+0x68>
 80085c4:	f10d 0307 	add.w	r3, sp, #7
 80085c8:	461d      	mov	r5, r3
 80085ca:	270a      	movs	r7, #10
 80085cc:	fbb1 f6f7 	udiv	r6, r1, r7
 80085d0:	461a      	mov	r2, r3
 80085d2:	fb07 1416 	mls	r4, r7, r6, r1
 80085d6:	3430      	adds	r4, #48	@ 0x30
 80085d8:	f802 4c01 	strb.w	r4, [r2, #-1]
 80085dc:	460c      	mov	r4, r1
 80085de:	2c63      	cmp	r4, #99	@ 0x63
 80085e0:	4631      	mov	r1, r6
 80085e2:	f103 33ff 	add.w	r3, r3, #4294967295
 80085e6:	dcf1      	bgt.n	80085cc <__exponent+0x1c>
 80085e8:	3130      	adds	r1, #48	@ 0x30
 80085ea:	1e94      	subs	r4, r2, #2
 80085ec:	f803 1c01 	strb.w	r1, [r3, #-1]
 80085f0:	4623      	mov	r3, r4
 80085f2:	1c41      	adds	r1, r0, #1
 80085f4:	42ab      	cmp	r3, r5
 80085f6:	d30a      	bcc.n	800860e <__exponent+0x5e>
 80085f8:	f10d 0309 	add.w	r3, sp, #9
 80085fc:	1a9b      	subs	r3, r3, r2
 80085fe:	42ac      	cmp	r4, r5
 8008600:	bf88      	it	hi
 8008602:	2300      	movhi	r3, #0
 8008604:	3302      	adds	r3, #2
 8008606:	4403      	add	r3, r0
 8008608:	1a18      	subs	r0, r3, r0
 800860a:	b003      	add	sp, #12
 800860c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800860e:	f813 6b01 	ldrb.w	r6, [r3], #1
 8008612:	f801 6f01 	strb.w	r6, [r1, #1]!
 8008616:	e7ed      	b.n	80085f4 <__exponent+0x44>
 8008618:	2330      	movs	r3, #48	@ 0x30
 800861a:	3130      	adds	r1, #48	@ 0x30
 800861c:	7083      	strb	r3, [r0, #2]
 800861e:	70c1      	strb	r1, [r0, #3]
 8008620:	1d03      	adds	r3, r0, #4
 8008622:	e7f1      	b.n	8008608 <__exponent+0x58>

08008624 <_printf_float>:
 8008624:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008628:	b091      	sub	sp, #68	@ 0x44
 800862a:	460c      	mov	r4, r1
 800862c:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 8008630:	4616      	mov	r6, r2
 8008632:	461f      	mov	r7, r3
 8008634:	4605      	mov	r5, r0
 8008636:	f000 fdd3 	bl	80091e0 <_localeconv_r>
 800863a:	6803      	ldr	r3, [r0, #0]
 800863c:	4618      	mov	r0, r3
 800863e:	9308      	str	r3, [sp, #32]
 8008640:	f7f7 fd86 	bl	8000150 <strlen>
 8008644:	2300      	movs	r3, #0
 8008646:	930e      	str	r3, [sp, #56]	@ 0x38
 8008648:	f8d8 3000 	ldr.w	r3, [r8]
 800864c:	9009      	str	r0, [sp, #36]	@ 0x24
 800864e:	3307      	adds	r3, #7
 8008650:	f023 0307 	bic.w	r3, r3, #7
 8008654:	f103 0208 	add.w	r2, r3, #8
 8008658:	f894 a018 	ldrb.w	sl, [r4, #24]
 800865c:	f8d4 b000 	ldr.w	fp, [r4]
 8008660:	f8c8 2000 	str.w	r2, [r8]
 8008664:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008668:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800866c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800866e:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8008672:	f04f 32ff 	mov.w	r2, #4294967295
 8008676:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800867a:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800867e:	4b9c      	ldr	r3, [pc, #624]	@ (80088f0 <_printf_float+0x2cc>)
 8008680:	f7f8 f9c4 	bl	8000a0c <__aeabi_dcmpun>
 8008684:	bb70      	cbnz	r0, 80086e4 <_printf_float+0xc0>
 8008686:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800868a:	f04f 32ff 	mov.w	r2, #4294967295
 800868e:	4b98      	ldr	r3, [pc, #608]	@ (80088f0 <_printf_float+0x2cc>)
 8008690:	f7f8 f99e 	bl	80009d0 <__aeabi_dcmple>
 8008694:	bb30      	cbnz	r0, 80086e4 <_printf_float+0xc0>
 8008696:	2200      	movs	r2, #0
 8008698:	2300      	movs	r3, #0
 800869a:	4640      	mov	r0, r8
 800869c:	4649      	mov	r1, r9
 800869e:	f7f8 f98d 	bl	80009bc <__aeabi_dcmplt>
 80086a2:	b110      	cbz	r0, 80086aa <_printf_float+0x86>
 80086a4:	232d      	movs	r3, #45	@ 0x2d
 80086a6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80086aa:	4a92      	ldr	r2, [pc, #584]	@ (80088f4 <_printf_float+0x2d0>)
 80086ac:	4b92      	ldr	r3, [pc, #584]	@ (80088f8 <_printf_float+0x2d4>)
 80086ae:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80086b2:	bf94      	ite	ls
 80086b4:	4690      	movls	r8, r2
 80086b6:	4698      	movhi	r8, r3
 80086b8:	2303      	movs	r3, #3
 80086ba:	f04f 0900 	mov.w	r9, #0
 80086be:	6123      	str	r3, [r4, #16]
 80086c0:	f02b 0304 	bic.w	r3, fp, #4
 80086c4:	6023      	str	r3, [r4, #0]
 80086c6:	4633      	mov	r3, r6
 80086c8:	4621      	mov	r1, r4
 80086ca:	4628      	mov	r0, r5
 80086cc:	9700      	str	r7, [sp, #0]
 80086ce:	aa0f      	add	r2, sp, #60	@ 0x3c
 80086d0:	f000 f9d4 	bl	8008a7c <_printf_common>
 80086d4:	3001      	adds	r0, #1
 80086d6:	f040 8090 	bne.w	80087fa <_printf_float+0x1d6>
 80086da:	f04f 30ff 	mov.w	r0, #4294967295
 80086de:	b011      	add	sp, #68	@ 0x44
 80086e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80086e4:	4642      	mov	r2, r8
 80086e6:	464b      	mov	r3, r9
 80086e8:	4640      	mov	r0, r8
 80086ea:	4649      	mov	r1, r9
 80086ec:	f7f8 f98e 	bl	8000a0c <__aeabi_dcmpun>
 80086f0:	b148      	cbz	r0, 8008706 <_printf_float+0xe2>
 80086f2:	464b      	mov	r3, r9
 80086f4:	2b00      	cmp	r3, #0
 80086f6:	bfb8      	it	lt
 80086f8:	232d      	movlt	r3, #45	@ 0x2d
 80086fa:	4a80      	ldr	r2, [pc, #512]	@ (80088fc <_printf_float+0x2d8>)
 80086fc:	bfb8      	it	lt
 80086fe:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8008702:	4b7f      	ldr	r3, [pc, #508]	@ (8008900 <_printf_float+0x2dc>)
 8008704:	e7d3      	b.n	80086ae <_printf_float+0x8a>
 8008706:	6863      	ldr	r3, [r4, #4]
 8008708:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 800870c:	1c5a      	adds	r2, r3, #1
 800870e:	d13f      	bne.n	8008790 <_printf_float+0x16c>
 8008710:	2306      	movs	r3, #6
 8008712:	6063      	str	r3, [r4, #4]
 8008714:	2200      	movs	r2, #0
 8008716:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 800871a:	6023      	str	r3, [r4, #0]
 800871c:	9206      	str	r2, [sp, #24]
 800871e:	aa0e      	add	r2, sp, #56	@ 0x38
 8008720:	e9cd a204 	strd	sl, r2, [sp, #16]
 8008724:	aa0d      	add	r2, sp, #52	@ 0x34
 8008726:	9203      	str	r2, [sp, #12]
 8008728:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 800872c:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8008730:	6863      	ldr	r3, [r4, #4]
 8008732:	4642      	mov	r2, r8
 8008734:	9300      	str	r3, [sp, #0]
 8008736:	4628      	mov	r0, r5
 8008738:	464b      	mov	r3, r9
 800873a:	910a      	str	r1, [sp, #40]	@ 0x28
 800873c:	f7ff fed4 	bl	80084e8 <__cvt>
 8008740:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8008742:	4680      	mov	r8, r0
 8008744:	2947      	cmp	r1, #71	@ 0x47
 8008746:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8008748:	d128      	bne.n	800879c <_printf_float+0x178>
 800874a:	1cc8      	adds	r0, r1, #3
 800874c:	db02      	blt.n	8008754 <_printf_float+0x130>
 800874e:	6863      	ldr	r3, [r4, #4]
 8008750:	4299      	cmp	r1, r3
 8008752:	dd40      	ble.n	80087d6 <_printf_float+0x1b2>
 8008754:	f1aa 0a02 	sub.w	sl, sl, #2
 8008758:	fa5f fa8a 	uxtb.w	sl, sl
 800875c:	4652      	mov	r2, sl
 800875e:	3901      	subs	r1, #1
 8008760:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8008764:	910d      	str	r1, [sp, #52]	@ 0x34
 8008766:	f7ff ff23 	bl	80085b0 <__exponent>
 800876a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800876c:	4681      	mov	r9, r0
 800876e:	1813      	adds	r3, r2, r0
 8008770:	2a01      	cmp	r2, #1
 8008772:	6123      	str	r3, [r4, #16]
 8008774:	dc02      	bgt.n	800877c <_printf_float+0x158>
 8008776:	6822      	ldr	r2, [r4, #0]
 8008778:	07d2      	lsls	r2, r2, #31
 800877a:	d501      	bpl.n	8008780 <_printf_float+0x15c>
 800877c:	3301      	adds	r3, #1
 800877e:	6123      	str	r3, [r4, #16]
 8008780:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 8008784:	2b00      	cmp	r3, #0
 8008786:	d09e      	beq.n	80086c6 <_printf_float+0xa2>
 8008788:	232d      	movs	r3, #45	@ 0x2d
 800878a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800878e:	e79a      	b.n	80086c6 <_printf_float+0xa2>
 8008790:	2947      	cmp	r1, #71	@ 0x47
 8008792:	d1bf      	bne.n	8008714 <_printf_float+0xf0>
 8008794:	2b00      	cmp	r3, #0
 8008796:	d1bd      	bne.n	8008714 <_printf_float+0xf0>
 8008798:	2301      	movs	r3, #1
 800879a:	e7ba      	b.n	8008712 <_printf_float+0xee>
 800879c:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80087a0:	d9dc      	bls.n	800875c <_printf_float+0x138>
 80087a2:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80087a6:	d118      	bne.n	80087da <_printf_float+0x1b6>
 80087a8:	2900      	cmp	r1, #0
 80087aa:	6863      	ldr	r3, [r4, #4]
 80087ac:	dd0b      	ble.n	80087c6 <_printf_float+0x1a2>
 80087ae:	6121      	str	r1, [r4, #16]
 80087b0:	b913      	cbnz	r3, 80087b8 <_printf_float+0x194>
 80087b2:	6822      	ldr	r2, [r4, #0]
 80087b4:	07d0      	lsls	r0, r2, #31
 80087b6:	d502      	bpl.n	80087be <_printf_float+0x19a>
 80087b8:	3301      	adds	r3, #1
 80087ba:	440b      	add	r3, r1
 80087bc:	6123      	str	r3, [r4, #16]
 80087be:	f04f 0900 	mov.w	r9, #0
 80087c2:	65a1      	str	r1, [r4, #88]	@ 0x58
 80087c4:	e7dc      	b.n	8008780 <_printf_float+0x15c>
 80087c6:	b913      	cbnz	r3, 80087ce <_printf_float+0x1aa>
 80087c8:	6822      	ldr	r2, [r4, #0]
 80087ca:	07d2      	lsls	r2, r2, #31
 80087cc:	d501      	bpl.n	80087d2 <_printf_float+0x1ae>
 80087ce:	3302      	adds	r3, #2
 80087d0:	e7f4      	b.n	80087bc <_printf_float+0x198>
 80087d2:	2301      	movs	r3, #1
 80087d4:	e7f2      	b.n	80087bc <_printf_float+0x198>
 80087d6:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80087da:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80087dc:	4299      	cmp	r1, r3
 80087de:	db05      	blt.n	80087ec <_printf_float+0x1c8>
 80087e0:	6823      	ldr	r3, [r4, #0]
 80087e2:	6121      	str	r1, [r4, #16]
 80087e4:	07d8      	lsls	r0, r3, #31
 80087e6:	d5ea      	bpl.n	80087be <_printf_float+0x19a>
 80087e8:	1c4b      	adds	r3, r1, #1
 80087ea:	e7e7      	b.n	80087bc <_printf_float+0x198>
 80087ec:	2900      	cmp	r1, #0
 80087ee:	bfcc      	ite	gt
 80087f0:	2201      	movgt	r2, #1
 80087f2:	f1c1 0202 	rsble	r2, r1, #2
 80087f6:	4413      	add	r3, r2
 80087f8:	e7e0      	b.n	80087bc <_printf_float+0x198>
 80087fa:	6823      	ldr	r3, [r4, #0]
 80087fc:	055a      	lsls	r2, r3, #21
 80087fe:	d407      	bmi.n	8008810 <_printf_float+0x1ec>
 8008800:	6923      	ldr	r3, [r4, #16]
 8008802:	4642      	mov	r2, r8
 8008804:	4631      	mov	r1, r6
 8008806:	4628      	mov	r0, r5
 8008808:	47b8      	blx	r7
 800880a:	3001      	adds	r0, #1
 800880c:	d12b      	bne.n	8008866 <_printf_float+0x242>
 800880e:	e764      	b.n	80086da <_printf_float+0xb6>
 8008810:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8008814:	f240 80dc 	bls.w	80089d0 <_printf_float+0x3ac>
 8008818:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800881c:	2200      	movs	r2, #0
 800881e:	2300      	movs	r3, #0
 8008820:	f7f8 f8c2 	bl	80009a8 <__aeabi_dcmpeq>
 8008824:	2800      	cmp	r0, #0
 8008826:	d033      	beq.n	8008890 <_printf_float+0x26c>
 8008828:	2301      	movs	r3, #1
 800882a:	4631      	mov	r1, r6
 800882c:	4628      	mov	r0, r5
 800882e:	4a35      	ldr	r2, [pc, #212]	@ (8008904 <_printf_float+0x2e0>)
 8008830:	47b8      	blx	r7
 8008832:	3001      	adds	r0, #1
 8008834:	f43f af51 	beq.w	80086da <_printf_float+0xb6>
 8008838:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 800883c:	4543      	cmp	r3, r8
 800883e:	db02      	blt.n	8008846 <_printf_float+0x222>
 8008840:	6823      	ldr	r3, [r4, #0]
 8008842:	07d8      	lsls	r0, r3, #31
 8008844:	d50f      	bpl.n	8008866 <_printf_float+0x242>
 8008846:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800884a:	4631      	mov	r1, r6
 800884c:	4628      	mov	r0, r5
 800884e:	47b8      	blx	r7
 8008850:	3001      	adds	r0, #1
 8008852:	f43f af42 	beq.w	80086da <_printf_float+0xb6>
 8008856:	f04f 0900 	mov.w	r9, #0
 800885a:	f108 38ff 	add.w	r8, r8, #4294967295
 800885e:	f104 0a1a 	add.w	sl, r4, #26
 8008862:	45c8      	cmp	r8, r9
 8008864:	dc09      	bgt.n	800887a <_printf_float+0x256>
 8008866:	6823      	ldr	r3, [r4, #0]
 8008868:	079b      	lsls	r3, r3, #30
 800886a:	f100 8102 	bmi.w	8008a72 <_printf_float+0x44e>
 800886e:	68e0      	ldr	r0, [r4, #12]
 8008870:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008872:	4298      	cmp	r0, r3
 8008874:	bfb8      	it	lt
 8008876:	4618      	movlt	r0, r3
 8008878:	e731      	b.n	80086de <_printf_float+0xba>
 800887a:	2301      	movs	r3, #1
 800887c:	4652      	mov	r2, sl
 800887e:	4631      	mov	r1, r6
 8008880:	4628      	mov	r0, r5
 8008882:	47b8      	blx	r7
 8008884:	3001      	adds	r0, #1
 8008886:	f43f af28 	beq.w	80086da <_printf_float+0xb6>
 800888a:	f109 0901 	add.w	r9, r9, #1
 800888e:	e7e8      	b.n	8008862 <_printf_float+0x23e>
 8008890:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008892:	2b00      	cmp	r3, #0
 8008894:	dc38      	bgt.n	8008908 <_printf_float+0x2e4>
 8008896:	2301      	movs	r3, #1
 8008898:	4631      	mov	r1, r6
 800889a:	4628      	mov	r0, r5
 800889c:	4a19      	ldr	r2, [pc, #100]	@ (8008904 <_printf_float+0x2e0>)
 800889e:	47b8      	blx	r7
 80088a0:	3001      	adds	r0, #1
 80088a2:	f43f af1a 	beq.w	80086da <_printf_float+0xb6>
 80088a6:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 80088aa:	ea59 0303 	orrs.w	r3, r9, r3
 80088ae:	d102      	bne.n	80088b6 <_printf_float+0x292>
 80088b0:	6823      	ldr	r3, [r4, #0]
 80088b2:	07d9      	lsls	r1, r3, #31
 80088b4:	d5d7      	bpl.n	8008866 <_printf_float+0x242>
 80088b6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80088ba:	4631      	mov	r1, r6
 80088bc:	4628      	mov	r0, r5
 80088be:	47b8      	blx	r7
 80088c0:	3001      	adds	r0, #1
 80088c2:	f43f af0a 	beq.w	80086da <_printf_float+0xb6>
 80088c6:	f04f 0a00 	mov.w	sl, #0
 80088ca:	f104 0b1a 	add.w	fp, r4, #26
 80088ce:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80088d0:	425b      	negs	r3, r3
 80088d2:	4553      	cmp	r3, sl
 80088d4:	dc01      	bgt.n	80088da <_printf_float+0x2b6>
 80088d6:	464b      	mov	r3, r9
 80088d8:	e793      	b.n	8008802 <_printf_float+0x1de>
 80088da:	2301      	movs	r3, #1
 80088dc:	465a      	mov	r2, fp
 80088de:	4631      	mov	r1, r6
 80088e0:	4628      	mov	r0, r5
 80088e2:	47b8      	blx	r7
 80088e4:	3001      	adds	r0, #1
 80088e6:	f43f aef8 	beq.w	80086da <_printf_float+0xb6>
 80088ea:	f10a 0a01 	add.w	sl, sl, #1
 80088ee:	e7ee      	b.n	80088ce <_printf_float+0x2aa>
 80088f0:	7fefffff 	.word	0x7fefffff
 80088f4:	0800b43e 	.word	0x0800b43e
 80088f8:	0800b442 	.word	0x0800b442
 80088fc:	0800b446 	.word	0x0800b446
 8008900:	0800b44a 	.word	0x0800b44a
 8008904:	0800b44e 	.word	0x0800b44e
 8008908:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800890a:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 800890e:	4553      	cmp	r3, sl
 8008910:	bfa8      	it	ge
 8008912:	4653      	movge	r3, sl
 8008914:	2b00      	cmp	r3, #0
 8008916:	4699      	mov	r9, r3
 8008918:	dc36      	bgt.n	8008988 <_printf_float+0x364>
 800891a:	f04f 0b00 	mov.w	fp, #0
 800891e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008922:	f104 021a 	add.w	r2, r4, #26
 8008926:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8008928:	930a      	str	r3, [sp, #40]	@ 0x28
 800892a:	eba3 0309 	sub.w	r3, r3, r9
 800892e:	455b      	cmp	r3, fp
 8008930:	dc31      	bgt.n	8008996 <_printf_float+0x372>
 8008932:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008934:	459a      	cmp	sl, r3
 8008936:	dc3a      	bgt.n	80089ae <_printf_float+0x38a>
 8008938:	6823      	ldr	r3, [r4, #0]
 800893a:	07da      	lsls	r2, r3, #31
 800893c:	d437      	bmi.n	80089ae <_printf_float+0x38a>
 800893e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008940:	ebaa 0903 	sub.w	r9, sl, r3
 8008944:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008946:	ebaa 0303 	sub.w	r3, sl, r3
 800894a:	4599      	cmp	r9, r3
 800894c:	bfa8      	it	ge
 800894e:	4699      	movge	r9, r3
 8008950:	f1b9 0f00 	cmp.w	r9, #0
 8008954:	dc33      	bgt.n	80089be <_printf_float+0x39a>
 8008956:	f04f 0800 	mov.w	r8, #0
 800895a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800895e:	f104 0b1a 	add.w	fp, r4, #26
 8008962:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008964:	ebaa 0303 	sub.w	r3, sl, r3
 8008968:	eba3 0309 	sub.w	r3, r3, r9
 800896c:	4543      	cmp	r3, r8
 800896e:	f77f af7a 	ble.w	8008866 <_printf_float+0x242>
 8008972:	2301      	movs	r3, #1
 8008974:	465a      	mov	r2, fp
 8008976:	4631      	mov	r1, r6
 8008978:	4628      	mov	r0, r5
 800897a:	47b8      	blx	r7
 800897c:	3001      	adds	r0, #1
 800897e:	f43f aeac 	beq.w	80086da <_printf_float+0xb6>
 8008982:	f108 0801 	add.w	r8, r8, #1
 8008986:	e7ec      	b.n	8008962 <_printf_float+0x33e>
 8008988:	4642      	mov	r2, r8
 800898a:	4631      	mov	r1, r6
 800898c:	4628      	mov	r0, r5
 800898e:	47b8      	blx	r7
 8008990:	3001      	adds	r0, #1
 8008992:	d1c2      	bne.n	800891a <_printf_float+0x2f6>
 8008994:	e6a1      	b.n	80086da <_printf_float+0xb6>
 8008996:	2301      	movs	r3, #1
 8008998:	4631      	mov	r1, r6
 800899a:	4628      	mov	r0, r5
 800899c:	920a      	str	r2, [sp, #40]	@ 0x28
 800899e:	47b8      	blx	r7
 80089a0:	3001      	adds	r0, #1
 80089a2:	f43f ae9a 	beq.w	80086da <_printf_float+0xb6>
 80089a6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80089a8:	f10b 0b01 	add.w	fp, fp, #1
 80089ac:	e7bb      	b.n	8008926 <_printf_float+0x302>
 80089ae:	4631      	mov	r1, r6
 80089b0:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80089b4:	4628      	mov	r0, r5
 80089b6:	47b8      	blx	r7
 80089b8:	3001      	adds	r0, #1
 80089ba:	d1c0      	bne.n	800893e <_printf_float+0x31a>
 80089bc:	e68d      	b.n	80086da <_printf_float+0xb6>
 80089be:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80089c0:	464b      	mov	r3, r9
 80089c2:	4631      	mov	r1, r6
 80089c4:	4628      	mov	r0, r5
 80089c6:	4442      	add	r2, r8
 80089c8:	47b8      	blx	r7
 80089ca:	3001      	adds	r0, #1
 80089cc:	d1c3      	bne.n	8008956 <_printf_float+0x332>
 80089ce:	e684      	b.n	80086da <_printf_float+0xb6>
 80089d0:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 80089d4:	f1ba 0f01 	cmp.w	sl, #1
 80089d8:	dc01      	bgt.n	80089de <_printf_float+0x3ba>
 80089da:	07db      	lsls	r3, r3, #31
 80089dc:	d536      	bpl.n	8008a4c <_printf_float+0x428>
 80089de:	2301      	movs	r3, #1
 80089e0:	4642      	mov	r2, r8
 80089e2:	4631      	mov	r1, r6
 80089e4:	4628      	mov	r0, r5
 80089e6:	47b8      	blx	r7
 80089e8:	3001      	adds	r0, #1
 80089ea:	f43f ae76 	beq.w	80086da <_printf_float+0xb6>
 80089ee:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80089f2:	4631      	mov	r1, r6
 80089f4:	4628      	mov	r0, r5
 80089f6:	47b8      	blx	r7
 80089f8:	3001      	adds	r0, #1
 80089fa:	f43f ae6e 	beq.w	80086da <_printf_float+0xb6>
 80089fe:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8008a02:	2200      	movs	r2, #0
 8008a04:	2300      	movs	r3, #0
 8008a06:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008a0a:	f7f7 ffcd 	bl	80009a8 <__aeabi_dcmpeq>
 8008a0e:	b9c0      	cbnz	r0, 8008a42 <_printf_float+0x41e>
 8008a10:	4653      	mov	r3, sl
 8008a12:	f108 0201 	add.w	r2, r8, #1
 8008a16:	4631      	mov	r1, r6
 8008a18:	4628      	mov	r0, r5
 8008a1a:	47b8      	blx	r7
 8008a1c:	3001      	adds	r0, #1
 8008a1e:	d10c      	bne.n	8008a3a <_printf_float+0x416>
 8008a20:	e65b      	b.n	80086da <_printf_float+0xb6>
 8008a22:	2301      	movs	r3, #1
 8008a24:	465a      	mov	r2, fp
 8008a26:	4631      	mov	r1, r6
 8008a28:	4628      	mov	r0, r5
 8008a2a:	47b8      	blx	r7
 8008a2c:	3001      	adds	r0, #1
 8008a2e:	f43f ae54 	beq.w	80086da <_printf_float+0xb6>
 8008a32:	f108 0801 	add.w	r8, r8, #1
 8008a36:	45d0      	cmp	r8, sl
 8008a38:	dbf3      	blt.n	8008a22 <_printf_float+0x3fe>
 8008a3a:	464b      	mov	r3, r9
 8008a3c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8008a40:	e6e0      	b.n	8008804 <_printf_float+0x1e0>
 8008a42:	f04f 0800 	mov.w	r8, #0
 8008a46:	f104 0b1a 	add.w	fp, r4, #26
 8008a4a:	e7f4      	b.n	8008a36 <_printf_float+0x412>
 8008a4c:	2301      	movs	r3, #1
 8008a4e:	4642      	mov	r2, r8
 8008a50:	e7e1      	b.n	8008a16 <_printf_float+0x3f2>
 8008a52:	2301      	movs	r3, #1
 8008a54:	464a      	mov	r2, r9
 8008a56:	4631      	mov	r1, r6
 8008a58:	4628      	mov	r0, r5
 8008a5a:	47b8      	blx	r7
 8008a5c:	3001      	adds	r0, #1
 8008a5e:	f43f ae3c 	beq.w	80086da <_printf_float+0xb6>
 8008a62:	f108 0801 	add.w	r8, r8, #1
 8008a66:	68e3      	ldr	r3, [r4, #12]
 8008a68:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8008a6a:	1a5b      	subs	r3, r3, r1
 8008a6c:	4543      	cmp	r3, r8
 8008a6e:	dcf0      	bgt.n	8008a52 <_printf_float+0x42e>
 8008a70:	e6fd      	b.n	800886e <_printf_float+0x24a>
 8008a72:	f04f 0800 	mov.w	r8, #0
 8008a76:	f104 0919 	add.w	r9, r4, #25
 8008a7a:	e7f4      	b.n	8008a66 <_printf_float+0x442>

08008a7c <_printf_common>:
 8008a7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008a80:	4616      	mov	r6, r2
 8008a82:	4698      	mov	r8, r3
 8008a84:	688a      	ldr	r2, [r1, #8]
 8008a86:	690b      	ldr	r3, [r1, #16]
 8008a88:	4607      	mov	r7, r0
 8008a8a:	4293      	cmp	r3, r2
 8008a8c:	bfb8      	it	lt
 8008a8e:	4613      	movlt	r3, r2
 8008a90:	6033      	str	r3, [r6, #0]
 8008a92:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8008a96:	460c      	mov	r4, r1
 8008a98:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008a9c:	b10a      	cbz	r2, 8008aa2 <_printf_common+0x26>
 8008a9e:	3301      	adds	r3, #1
 8008aa0:	6033      	str	r3, [r6, #0]
 8008aa2:	6823      	ldr	r3, [r4, #0]
 8008aa4:	0699      	lsls	r1, r3, #26
 8008aa6:	bf42      	ittt	mi
 8008aa8:	6833      	ldrmi	r3, [r6, #0]
 8008aaa:	3302      	addmi	r3, #2
 8008aac:	6033      	strmi	r3, [r6, #0]
 8008aae:	6825      	ldr	r5, [r4, #0]
 8008ab0:	f015 0506 	ands.w	r5, r5, #6
 8008ab4:	d106      	bne.n	8008ac4 <_printf_common+0x48>
 8008ab6:	f104 0a19 	add.w	sl, r4, #25
 8008aba:	68e3      	ldr	r3, [r4, #12]
 8008abc:	6832      	ldr	r2, [r6, #0]
 8008abe:	1a9b      	subs	r3, r3, r2
 8008ac0:	42ab      	cmp	r3, r5
 8008ac2:	dc2b      	bgt.n	8008b1c <_printf_common+0xa0>
 8008ac4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8008ac8:	6822      	ldr	r2, [r4, #0]
 8008aca:	3b00      	subs	r3, #0
 8008acc:	bf18      	it	ne
 8008ace:	2301      	movne	r3, #1
 8008ad0:	0692      	lsls	r2, r2, #26
 8008ad2:	d430      	bmi.n	8008b36 <_printf_common+0xba>
 8008ad4:	4641      	mov	r1, r8
 8008ad6:	4638      	mov	r0, r7
 8008ad8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008adc:	47c8      	blx	r9
 8008ade:	3001      	adds	r0, #1
 8008ae0:	d023      	beq.n	8008b2a <_printf_common+0xae>
 8008ae2:	6823      	ldr	r3, [r4, #0]
 8008ae4:	6922      	ldr	r2, [r4, #16]
 8008ae6:	f003 0306 	and.w	r3, r3, #6
 8008aea:	2b04      	cmp	r3, #4
 8008aec:	bf14      	ite	ne
 8008aee:	2500      	movne	r5, #0
 8008af0:	6833      	ldreq	r3, [r6, #0]
 8008af2:	f04f 0600 	mov.w	r6, #0
 8008af6:	bf08      	it	eq
 8008af8:	68e5      	ldreq	r5, [r4, #12]
 8008afa:	f104 041a 	add.w	r4, r4, #26
 8008afe:	bf08      	it	eq
 8008b00:	1aed      	subeq	r5, r5, r3
 8008b02:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8008b06:	bf08      	it	eq
 8008b08:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008b0c:	4293      	cmp	r3, r2
 8008b0e:	bfc4      	itt	gt
 8008b10:	1a9b      	subgt	r3, r3, r2
 8008b12:	18ed      	addgt	r5, r5, r3
 8008b14:	42b5      	cmp	r5, r6
 8008b16:	d11a      	bne.n	8008b4e <_printf_common+0xd2>
 8008b18:	2000      	movs	r0, #0
 8008b1a:	e008      	b.n	8008b2e <_printf_common+0xb2>
 8008b1c:	2301      	movs	r3, #1
 8008b1e:	4652      	mov	r2, sl
 8008b20:	4641      	mov	r1, r8
 8008b22:	4638      	mov	r0, r7
 8008b24:	47c8      	blx	r9
 8008b26:	3001      	adds	r0, #1
 8008b28:	d103      	bne.n	8008b32 <_printf_common+0xb6>
 8008b2a:	f04f 30ff 	mov.w	r0, #4294967295
 8008b2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008b32:	3501      	adds	r5, #1
 8008b34:	e7c1      	b.n	8008aba <_printf_common+0x3e>
 8008b36:	2030      	movs	r0, #48	@ 0x30
 8008b38:	18e1      	adds	r1, r4, r3
 8008b3a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8008b3e:	1c5a      	adds	r2, r3, #1
 8008b40:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008b44:	4422      	add	r2, r4
 8008b46:	3302      	adds	r3, #2
 8008b48:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008b4c:	e7c2      	b.n	8008ad4 <_printf_common+0x58>
 8008b4e:	2301      	movs	r3, #1
 8008b50:	4622      	mov	r2, r4
 8008b52:	4641      	mov	r1, r8
 8008b54:	4638      	mov	r0, r7
 8008b56:	47c8      	blx	r9
 8008b58:	3001      	adds	r0, #1
 8008b5a:	d0e6      	beq.n	8008b2a <_printf_common+0xae>
 8008b5c:	3601      	adds	r6, #1
 8008b5e:	e7d9      	b.n	8008b14 <_printf_common+0x98>

08008b60 <_printf_i>:
 8008b60:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008b64:	7e0f      	ldrb	r7, [r1, #24]
 8008b66:	4691      	mov	r9, r2
 8008b68:	2f78      	cmp	r7, #120	@ 0x78
 8008b6a:	4680      	mov	r8, r0
 8008b6c:	460c      	mov	r4, r1
 8008b6e:	469a      	mov	sl, r3
 8008b70:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008b72:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8008b76:	d807      	bhi.n	8008b88 <_printf_i+0x28>
 8008b78:	2f62      	cmp	r7, #98	@ 0x62
 8008b7a:	d80a      	bhi.n	8008b92 <_printf_i+0x32>
 8008b7c:	2f00      	cmp	r7, #0
 8008b7e:	f000 80d3 	beq.w	8008d28 <_printf_i+0x1c8>
 8008b82:	2f58      	cmp	r7, #88	@ 0x58
 8008b84:	f000 80ba 	beq.w	8008cfc <_printf_i+0x19c>
 8008b88:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008b8c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8008b90:	e03a      	b.n	8008c08 <_printf_i+0xa8>
 8008b92:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8008b96:	2b15      	cmp	r3, #21
 8008b98:	d8f6      	bhi.n	8008b88 <_printf_i+0x28>
 8008b9a:	a101      	add	r1, pc, #4	@ (adr r1, 8008ba0 <_printf_i+0x40>)
 8008b9c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008ba0:	08008bf9 	.word	0x08008bf9
 8008ba4:	08008c0d 	.word	0x08008c0d
 8008ba8:	08008b89 	.word	0x08008b89
 8008bac:	08008b89 	.word	0x08008b89
 8008bb0:	08008b89 	.word	0x08008b89
 8008bb4:	08008b89 	.word	0x08008b89
 8008bb8:	08008c0d 	.word	0x08008c0d
 8008bbc:	08008b89 	.word	0x08008b89
 8008bc0:	08008b89 	.word	0x08008b89
 8008bc4:	08008b89 	.word	0x08008b89
 8008bc8:	08008b89 	.word	0x08008b89
 8008bcc:	08008d0f 	.word	0x08008d0f
 8008bd0:	08008c37 	.word	0x08008c37
 8008bd4:	08008cc9 	.word	0x08008cc9
 8008bd8:	08008b89 	.word	0x08008b89
 8008bdc:	08008b89 	.word	0x08008b89
 8008be0:	08008d31 	.word	0x08008d31
 8008be4:	08008b89 	.word	0x08008b89
 8008be8:	08008c37 	.word	0x08008c37
 8008bec:	08008b89 	.word	0x08008b89
 8008bf0:	08008b89 	.word	0x08008b89
 8008bf4:	08008cd1 	.word	0x08008cd1
 8008bf8:	6833      	ldr	r3, [r6, #0]
 8008bfa:	1d1a      	adds	r2, r3, #4
 8008bfc:	681b      	ldr	r3, [r3, #0]
 8008bfe:	6032      	str	r2, [r6, #0]
 8008c00:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008c04:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008c08:	2301      	movs	r3, #1
 8008c0a:	e09e      	b.n	8008d4a <_printf_i+0x1ea>
 8008c0c:	6833      	ldr	r3, [r6, #0]
 8008c0e:	6820      	ldr	r0, [r4, #0]
 8008c10:	1d19      	adds	r1, r3, #4
 8008c12:	6031      	str	r1, [r6, #0]
 8008c14:	0606      	lsls	r6, r0, #24
 8008c16:	d501      	bpl.n	8008c1c <_printf_i+0xbc>
 8008c18:	681d      	ldr	r5, [r3, #0]
 8008c1a:	e003      	b.n	8008c24 <_printf_i+0xc4>
 8008c1c:	0645      	lsls	r5, r0, #25
 8008c1e:	d5fb      	bpl.n	8008c18 <_printf_i+0xb8>
 8008c20:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008c24:	2d00      	cmp	r5, #0
 8008c26:	da03      	bge.n	8008c30 <_printf_i+0xd0>
 8008c28:	232d      	movs	r3, #45	@ 0x2d
 8008c2a:	426d      	negs	r5, r5
 8008c2c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008c30:	230a      	movs	r3, #10
 8008c32:	4859      	ldr	r0, [pc, #356]	@ (8008d98 <_printf_i+0x238>)
 8008c34:	e011      	b.n	8008c5a <_printf_i+0xfa>
 8008c36:	6821      	ldr	r1, [r4, #0]
 8008c38:	6833      	ldr	r3, [r6, #0]
 8008c3a:	0608      	lsls	r0, r1, #24
 8008c3c:	f853 5b04 	ldr.w	r5, [r3], #4
 8008c40:	d402      	bmi.n	8008c48 <_printf_i+0xe8>
 8008c42:	0649      	lsls	r1, r1, #25
 8008c44:	bf48      	it	mi
 8008c46:	b2ad      	uxthmi	r5, r5
 8008c48:	2f6f      	cmp	r7, #111	@ 0x6f
 8008c4a:	6033      	str	r3, [r6, #0]
 8008c4c:	bf14      	ite	ne
 8008c4e:	230a      	movne	r3, #10
 8008c50:	2308      	moveq	r3, #8
 8008c52:	4851      	ldr	r0, [pc, #324]	@ (8008d98 <_printf_i+0x238>)
 8008c54:	2100      	movs	r1, #0
 8008c56:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8008c5a:	6866      	ldr	r6, [r4, #4]
 8008c5c:	2e00      	cmp	r6, #0
 8008c5e:	bfa8      	it	ge
 8008c60:	6821      	ldrge	r1, [r4, #0]
 8008c62:	60a6      	str	r6, [r4, #8]
 8008c64:	bfa4      	itt	ge
 8008c66:	f021 0104 	bicge.w	r1, r1, #4
 8008c6a:	6021      	strge	r1, [r4, #0]
 8008c6c:	b90d      	cbnz	r5, 8008c72 <_printf_i+0x112>
 8008c6e:	2e00      	cmp	r6, #0
 8008c70:	d04b      	beq.n	8008d0a <_printf_i+0x1aa>
 8008c72:	4616      	mov	r6, r2
 8008c74:	fbb5 f1f3 	udiv	r1, r5, r3
 8008c78:	fb03 5711 	mls	r7, r3, r1, r5
 8008c7c:	5dc7      	ldrb	r7, [r0, r7]
 8008c7e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008c82:	462f      	mov	r7, r5
 8008c84:	42bb      	cmp	r3, r7
 8008c86:	460d      	mov	r5, r1
 8008c88:	d9f4      	bls.n	8008c74 <_printf_i+0x114>
 8008c8a:	2b08      	cmp	r3, #8
 8008c8c:	d10b      	bne.n	8008ca6 <_printf_i+0x146>
 8008c8e:	6823      	ldr	r3, [r4, #0]
 8008c90:	07df      	lsls	r7, r3, #31
 8008c92:	d508      	bpl.n	8008ca6 <_printf_i+0x146>
 8008c94:	6923      	ldr	r3, [r4, #16]
 8008c96:	6861      	ldr	r1, [r4, #4]
 8008c98:	4299      	cmp	r1, r3
 8008c9a:	bfde      	ittt	le
 8008c9c:	2330      	movle	r3, #48	@ 0x30
 8008c9e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008ca2:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008ca6:	1b92      	subs	r2, r2, r6
 8008ca8:	6122      	str	r2, [r4, #16]
 8008caa:	464b      	mov	r3, r9
 8008cac:	4621      	mov	r1, r4
 8008cae:	4640      	mov	r0, r8
 8008cb0:	f8cd a000 	str.w	sl, [sp]
 8008cb4:	aa03      	add	r2, sp, #12
 8008cb6:	f7ff fee1 	bl	8008a7c <_printf_common>
 8008cba:	3001      	adds	r0, #1
 8008cbc:	d14a      	bne.n	8008d54 <_printf_i+0x1f4>
 8008cbe:	f04f 30ff 	mov.w	r0, #4294967295
 8008cc2:	b004      	add	sp, #16
 8008cc4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008cc8:	6823      	ldr	r3, [r4, #0]
 8008cca:	f043 0320 	orr.w	r3, r3, #32
 8008cce:	6023      	str	r3, [r4, #0]
 8008cd0:	2778      	movs	r7, #120	@ 0x78
 8008cd2:	4832      	ldr	r0, [pc, #200]	@ (8008d9c <_printf_i+0x23c>)
 8008cd4:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8008cd8:	6823      	ldr	r3, [r4, #0]
 8008cda:	6831      	ldr	r1, [r6, #0]
 8008cdc:	061f      	lsls	r7, r3, #24
 8008cde:	f851 5b04 	ldr.w	r5, [r1], #4
 8008ce2:	d402      	bmi.n	8008cea <_printf_i+0x18a>
 8008ce4:	065f      	lsls	r7, r3, #25
 8008ce6:	bf48      	it	mi
 8008ce8:	b2ad      	uxthmi	r5, r5
 8008cea:	6031      	str	r1, [r6, #0]
 8008cec:	07d9      	lsls	r1, r3, #31
 8008cee:	bf44      	itt	mi
 8008cf0:	f043 0320 	orrmi.w	r3, r3, #32
 8008cf4:	6023      	strmi	r3, [r4, #0]
 8008cf6:	b11d      	cbz	r5, 8008d00 <_printf_i+0x1a0>
 8008cf8:	2310      	movs	r3, #16
 8008cfa:	e7ab      	b.n	8008c54 <_printf_i+0xf4>
 8008cfc:	4826      	ldr	r0, [pc, #152]	@ (8008d98 <_printf_i+0x238>)
 8008cfe:	e7e9      	b.n	8008cd4 <_printf_i+0x174>
 8008d00:	6823      	ldr	r3, [r4, #0]
 8008d02:	f023 0320 	bic.w	r3, r3, #32
 8008d06:	6023      	str	r3, [r4, #0]
 8008d08:	e7f6      	b.n	8008cf8 <_printf_i+0x198>
 8008d0a:	4616      	mov	r6, r2
 8008d0c:	e7bd      	b.n	8008c8a <_printf_i+0x12a>
 8008d0e:	6833      	ldr	r3, [r6, #0]
 8008d10:	6825      	ldr	r5, [r4, #0]
 8008d12:	1d18      	adds	r0, r3, #4
 8008d14:	6961      	ldr	r1, [r4, #20]
 8008d16:	6030      	str	r0, [r6, #0]
 8008d18:	062e      	lsls	r6, r5, #24
 8008d1a:	681b      	ldr	r3, [r3, #0]
 8008d1c:	d501      	bpl.n	8008d22 <_printf_i+0x1c2>
 8008d1e:	6019      	str	r1, [r3, #0]
 8008d20:	e002      	b.n	8008d28 <_printf_i+0x1c8>
 8008d22:	0668      	lsls	r0, r5, #25
 8008d24:	d5fb      	bpl.n	8008d1e <_printf_i+0x1be>
 8008d26:	8019      	strh	r1, [r3, #0]
 8008d28:	2300      	movs	r3, #0
 8008d2a:	4616      	mov	r6, r2
 8008d2c:	6123      	str	r3, [r4, #16]
 8008d2e:	e7bc      	b.n	8008caa <_printf_i+0x14a>
 8008d30:	6833      	ldr	r3, [r6, #0]
 8008d32:	2100      	movs	r1, #0
 8008d34:	1d1a      	adds	r2, r3, #4
 8008d36:	6032      	str	r2, [r6, #0]
 8008d38:	681e      	ldr	r6, [r3, #0]
 8008d3a:	6862      	ldr	r2, [r4, #4]
 8008d3c:	4630      	mov	r0, r6
 8008d3e:	f000 fac6 	bl	80092ce <memchr>
 8008d42:	b108      	cbz	r0, 8008d48 <_printf_i+0x1e8>
 8008d44:	1b80      	subs	r0, r0, r6
 8008d46:	6060      	str	r0, [r4, #4]
 8008d48:	6863      	ldr	r3, [r4, #4]
 8008d4a:	6123      	str	r3, [r4, #16]
 8008d4c:	2300      	movs	r3, #0
 8008d4e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008d52:	e7aa      	b.n	8008caa <_printf_i+0x14a>
 8008d54:	4632      	mov	r2, r6
 8008d56:	4649      	mov	r1, r9
 8008d58:	4640      	mov	r0, r8
 8008d5a:	6923      	ldr	r3, [r4, #16]
 8008d5c:	47d0      	blx	sl
 8008d5e:	3001      	adds	r0, #1
 8008d60:	d0ad      	beq.n	8008cbe <_printf_i+0x15e>
 8008d62:	6823      	ldr	r3, [r4, #0]
 8008d64:	079b      	lsls	r3, r3, #30
 8008d66:	d413      	bmi.n	8008d90 <_printf_i+0x230>
 8008d68:	68e0      	ldr	r0, [r4, #12]
 8008d6a:	9b03      	ldr	r3, [sp, #12]
 8008d6c:	4298      	cmp	r0, r3
 8008d6e:	bfb8      	it	lt
 8008d70:	4618      	movlt	r0, r3
 8008d72:	e7a6      	b.n	8008cc2 <_printf_i+0x162>
 8008d74:	2301      	movs	r3, #1
 8008d76:	4632      	mov	r2, r6
 8008d78:	4649      	mov	r1, r9
 8008d7a:	4640      	mov	r0, r8
 8008d7c:	47d0      	blx	sl
 8008d7e:	3001      	adds	r0, #1
 8008d80:	d09d      	beq.n	8008cbe <_printf_i+0x15e>
 8008d82:	3501      	adds	r5, #1
 8008d84:	68e3      	ldr	r3, [r4, #12]
 8008d86:	9903      	ldr	r1, [sp, #12]
 8008d88:	1a5b      	subs	r3, r3, r1
 8008d8a:	42ab      	cmp	r3, r5
 8008d8c:	dcf2      	bgt.n	8008d74 <_printf_i+0x214>
 8008d8e:	e7eb      	b.n	8008d68 <_printf_i+0x208>
 8008d90:	2500      	movs	r5, #0
 8008d92:	f104 0619 	add.w	r6, r4, #25
 8008d96:	e7f5      	b.n	8008d84 <_printf_i+0x224>
 8008d98:	0800b450 	.word	0x0800b450
 8008d9c:	0800b461 	.word	0x0800b461

08008da0 <std>:
 8008da0:	2300      	movs	r3, #0
 8008da2:	b510      	push	{r4, lr}
 8008da4:	4604      	mov	r4, r0
 8008da6:	e9c0 3300 	strd	r3, r3, [r0]
 8008daa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008dae:	6083      	str	r3, [r0, #8]
 8008db0:	8181      	strh	r1, [r0, #12]
 8008db2:	6643      	str	r3, [r0, #100]	@ 0x64
 8008db4:	81c2      	strh	r2, [r0, #14]
 8008db6:	6183      	str	r3, [r0, #24]
 8008db8:	4619      	mov	r1, r3
 8008dba:	2208      	movs	r2, #8
 8008dbc:	305c      	adds	r0, #92	@ 0x5c
 8008dbe:	f000 fa07 	bl	80091d0 <memset>
 8008dc2:	4b0d      	ldr	r3, [pc, #52]	@ (8008df8 <std+0x58>)
 8008dc4:	6224      	str	r4, [r4, #32]
 8008dc6:	6263      	str	r3, [r4, #36]	@ 0x24
 8008dc8:	4b0c      	ldr	r3, [pc, #48]	@ (8008dfc <std+0x5c>)
 8008dca:	62a3      	str	r3, [r4, #40]	@ 0x28
 8008dcc:	4b0c      	ldr	r3, [pc, #48]	@ (8008e00 <std+0x60>)
 8008dce:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8008dd0:	4b0c      	ldr	r3, [pc, #48]	@ (8008e04 <std+0x64>)
 8008dd2:	6323      	str	r3, [r4, #48]	@ 0x30
 8008dd4:	4b0c      	ldr	r3, [pc, #48]	@ (8008e08 <std+0x68>)
 8008dd6:	429c      	cmp	r4, r3
 8008dd8:	d006      	beq.n	8008de8 <std+0x48>
 8008dda:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8008dde:	4294      	cmp	r4, r2
 8008de0:	d002      	beq.n	8008de8 <std+0x48>
 8008de2:	33d0      	adds	r3, #208	@ 0xd0
 8008de4:	429c      	cmp	r4, r3
 8008de6:	d105      	bne.n	8008df4 <std+0x54>
 8008de8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8008dec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008df0:	f000 ba6a 	b.w	80092c8 <__retarget_lock_init_recursive>
 8008df4:	bd10      	pop	{r4, pc}
 8008df6:	bf00      	nop
 8008df8:	08009021 	.word	0x08009021
 8008dfc:	08009043 	.word	0x08009043
 8008e00:	0800907b 	.word	0x0800907b
 8008e04:	0800909f 	.word	0x0800909f
 8008e08:	20001cf8 	.word	0x20001cf8

08008e0c <stdio_exit_handler>:
 8008e0c:	4a02      	ldr	r2, [pc, #8]	@ (8008e18 <stdio_exit_handler+0xc>)
 8008e0e:	4903      	ldr	r1, [pc, #12]	@ (8008e1c <stdio_exit_handler+0x10>)
 8008e10:	4803      	ldr	r0, [pc, #12]	@ (8008e20 <stdio_exit_handler+0x14>)
 8008e12:	f000 b869 	b.w	8008ee8 <_fwalk_sglue>
 8008e16:	bf00      	nop
 8008e18:	20000020 	.word	0x20000020
 8008e1c:	0800ac55 	.word	0x0800ac55
 8008e20:	20000030 	.word	0x20000030

08008e24 <cleanup_stdio>:
 8008e24:	6841      	ldr	r1, [r0, #4]
 8008e26:	4b0c      	ldr	r3, [pc, #48]	@ (8008e58 <cleanup_stdio+0x34>)
 8008e28:	b510      	push	{r4, lr}
 8008e2a:	4299      	cmp	r1, r3
 8008e2c:	4604      	mov	r4, r0
 8008e2e:	d001      	beq.n	8008e34 <cleanup_stdio+0x10>
 8008e30:	f001 ff10 	bl	800ac54 <_fflush_r>
 8008e34:	68a1      	ldr	r1, [r4, #8]
 8008e36:	4b09      	ldr	r3, [pc, #36]	@ (8008e5c <cleanup_stdio+0x38>)
 8008e38:	4299      	cmp	r1, r3
 8008e3a:	d002      	beq.n	8008e42 <cleanup_stdio+0x1e>
 8008e3c:	4620      	mov	r0, r4
 8008e3e:	f001 ff09 	bl	800ac54 <_fflush_r>
 8008e42:	68e1      	ldr	r1, [r4, #12]
 8008e44:	4b06      	ldr	r3, [pc, #24]	@ (8008e60 <cleanup_stdio+0x3c>)
 8008e46:	4299      	cmp	r1, r3
 8008e48:	d004      	beq.n	8008e54 <cleanup_stdio+0x30>
 8008e4a:	4620      	mov	r0, r4
 8008e4c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008e50:	f001 bf00 	b.w	800ac54 <_fflush_r>
 8008e54:	bd10      	pop	{r4, pc}
 8008e56:	bf00      	nop
 8008e58:	20001cf8 	.word	0x20001cf8
 8008e5c:	20001d60 	.word	0x20001d60
 8008e60:	20001dc8 	.word	0x20001dc8

08008e64 <global_stdio_init.part.0>:
 8008e64:	b510      	push	{r4, lr}
 8008e66:	4b0b      	ldr	r3, [pc, #44]	@ (8008e94 <global_stdio_init.part.0+0x30>)
 8008e68:	4c0b      	ldr	r4, [pc, #44]	@ (8008e98 <global_stdio_init.part.0+0x34>)
 8008e6a:	4a0c      	ldr	r2, [pc, #48]	@ (8008e9c <global_stdio_init.part.0+0x38>)
 8008e6c:	4620      	mov	r0, r4
 8008e6e:	601a      	str	r2, [r3, #0]
 8008e70:	2104      	movs	r1, #4
 8008e72:	2200      	movs	r2, #0
 8008e74:	f7ff ff94 	bl	8008da0 <std>
 8008e78:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8008e7c:	2201      	movs	r2, #1
 8008e7e:	2109      	movs	r1, #9
 8008e80:	f7ff ff8e 	bl	8008da0 <std>
 8008e84:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8008e88:	2202      	movs	r2, #2
 8008e8a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008e8e:	2112      	movs	r1, #18
 8008e90:	f7ff bf86 	b.w	8008da0 <std>
 8008e94:	20001e30 	.word	0x20001e30
 8008e98:	20001cf8 	.word	0x20001cf8
 8008e9c:	08008e0d 	.word	0x08008e0d

08008ea0 <__sfp_lock_acquire>:
 8008ea0:	4801      	ldr	r0, [pc, #4]	@ (8008ea8 <__sfp_lock_acquire+0x8>)
 8008ea2:	f000 ba12 	b.w	80092ca <__retarget_lock_acquire_recursive>
 8008ea6:	bf00      	nop
 8008ea8:	20001e39 	.word	0x20001e39

08008eac <__sfp_lock_release>:
 8008eac:	4801      	ldr	r0, [pc, #4]	@ (8008eb4 <__sfp_lock_release+0x8>)
 8008eae:	f000 ba0d 	b.w	80092cc <__retarget_lock_release_recursive>
 8008eb2:	bf00      	nop
 8008eb4:	20001e39 	.word	0x20001e39

08008eb8 <__sinit>:
 8008eb8:	b510      	push	{r4, lr}
 8008eba:	4604      	mov	r4, r0
 8008ebc:	f7ff fff0 	bl	8008ea0 <__sfp_lock_acquire>
 8008ec0:	6a23      	ldr	r3, [r4, #32]
 8008ec2:	b11b      	cbz	r3, 8008ecc <__sinit+0x14>
 8008ec4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008ec8:	f7ff bff0 	b.w	8008eac <__sfp_lock_release>
 8008ecc:	4b04      	ldr	r3, [pc, #16]	@ (8008ee0 <__sinit+0x28>)
 8008ece:	6223      	str	r3, [r4, #32]
 8008ed0:	4b04      	ldr	r3, [pc, #16]	@ (8008ee4 <__sinit+0x2c>)
 8008ed2:	681b      	ldr	r3, [r3, #0]
 8008ed4:	2b00      	cmp	r3, #0
 8008ed6:	d1f5      	bne.n	8008ec4 <__sinit+0xc>
 8008ed8:	f7ff ffc4 	bl	8008e64 <global_stdio_init.part.0>
 8008edc:	e7f2      	b.n	8008ec4 <__sinit+0xc>
 8008ede:	bf00      	nop
 8008ee0:	08008e25 	.word	0x08008e25
 8008ee4:	20001e30 	.word	0x20001e30

08008ee8 <_fwalk_sglue>:
 8008ee8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008eec:	4607      	mov	r7, r0
 8008eee:	4688      	mov	r8, r1
 8008ef0:	4614      	mov	r4, r2
 8008ef2:	2600      	movs	r6, #0
 8008ef4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008ef8:	f1b9 0901 	subs.w	r9, r9, #1
 8008efc:	d505      	bpl.n	8008f0a <_fwalk_sglue+0x22>
 8008efe:	6824      	ldr	r4, [r4, #0]
 8008f00:	2c00      	cmp	r4, #0
 8008f02:	d1f7      	bne.n	8008ef4 <_fwalk_sglue+0xc>
 8008f04:	4630      	mov	r0, r6
 8008f06:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008f0a:	89ab      	ldrh	r3, [r5, #12]
 8008f0c:	2b01      	cmp	r3, #1
 8008f0e:	d907      	bls.n	8008f20 <_fwalk_sglue+0x38>
 8008f10:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008f14:	3301      	adds	r3, #1
 8008f16:	d003      	beq.n	8008f20 <_fwalk_sglue+0x38>
 8008f18:	4629      	mov	r1, r5
 8008f1a:	4638      	mov	r0, r7
 8008f1c:	47c0      	blx	r8
 8008f1e:	4306      	orrs	r6, r0
 8008f20:	3568      	adds	r5, #104	@ 0x68
 8008f22:	e7e9      	b.n	8008ef8 <_fwalk_sglue+0x10>

08008f24 <_puts_r>:
 8008f24:	6a03      	ldr	r3, [r0, #32]
 8008f26:	b570      	push	{r4, r5, r6, lr}
 8008f28:	4605      	mov	r5, r0
 8008f2a:	460e      	mov	r6, r1
 8008f2c:	6884      	ldr	r4, [r0, #8]
 8008f2e:	b90b      	cbnz	r3, 8008f34 <_puts_r+0x10>
 8008f30:	f7ff ffc2 	bl	8008eb8 <__sinit>
 8008f34:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008f36:	07db      	lsls	r3, r3, #31
 8008f38:	d405      	bmi.n	8008f46 <_puts_r+0x22>
 8008f3a:	89a3      	ldrh	r3, [r4, #12]
 8008f3c:	0598      	lsls	r0, r3, #22
 8008f3e:	d402      	bmi.n	8008f46 <_puts_r+0x22>
 8008f40:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008f42:	f000 f9c2 	bl	80092ca <__retarget_lock_acquire_recursive>
 8008f46:	89a3      	ldrh	r3, [r4, #12]
 8008f48:	0719      	lsls	r1, r3, #28
 8008f4a:	d502      	bpl.n	8008f52 <_puts_r+0x2e>
 8008f4c:	6923      	ldr	r3, [r4, #16]
 8008f4e:	2b00      	cmp	r3, #0
 8008f50:	d135      	bne.n	8008fbe <_puts_r+0x9a>
 8008f52:	4621      	mov	r1, r4
 8008f54:	4628      	mov	r0, r5
 8008f56:	f000 f8e5 	bl	8009124 <__swsetup_r>
 8008f5a:	b380      	cbz	r0, 8008fbe <_puts_r+0x9a>
 8008f5c:	f04f 35ff 	mov.w	r5, #4294967295
 8008f60:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008f62:	07da      	lsls	r2, r3, #31
 8008f64:	d405      	bmi.n	8008f72 <_puts_r+0x4e>
 8008f66:	89a3      	ldrh	r3, [r4, #12]
 8008f68:	059b      	lsls	r3, r3, #22
 8008f6a:	d402      	bmi.n	8008f72 <_puts_r+0x4e>
 8008f6c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008f6e:	f000 f9ad 	bl	80092cc <__retarget_lock_release_recursive>
 8008f72:	4628      	mov	r0, r5
 8008f74:	bd70      	pop	{r4, r5, r6, pc}
 8008f76:	2b00      	cmp	r3, #0
 8008f78:	da04      	bge.n	8008f84 <_puts_r+0x60>
 8008f7a:	69a2      	ldr	r2, [r4, #24]
 8008f7c:	429a      	cmp	r2, r3
 8008f7e:	dc17      	bgt.n	8008fb0 <_puts_r+0x8c>
 8008f80:	290a      	cmp	r1, #10
 8008f82:	d015      	beq.n	8008fb0 <_puts_r+0x8c>
 8008f84:	6823      	ldr	r3, [r4, #0]
 8008f86:	1c5a      	adds	r2, r3, #1
 8008f88:	6022      	str	r2, [r4, #0]
 8008f8a:	7019      	strb	r1, [r3, #0]
 8008f8c:	68a3      	ldr	r3, [r4, #8]
 8008f8e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8008f92:	3b01      	subs	r3, #1
 8008f94:	60a3      	str	r3, [r4, #8]
 8008f96:	2900      	cmp	r1, #0
 8008f98:	d1ed      	bne.n	8008f76 <_puts_r+0x52>
 8008f9a:	2b00      	cmp	r3, #0
 8008f9c:	da11      	bge.n	8008fc2 <_puts_r+0x9e>
 8008f9e:	4622      	mov	r2, r4
 8008fa0:	210a      	movs	r1, #10
 8008fa2:	4628      	mov	r0, r5
 8008fa4:	f000 f87f 	bl	80090a6 <__swbuf_r>
 8008fa8:	3001      	adds	r0, #1
 8008faa:	d0d7      	beq.n	8008f5c <_puts_r+0x38>
 8008fac:	250a      	movs	r5, #10
 8008fae:	e7d7      	b.n	8008f60 <_puts_r+0x3c>
 8008fb0:	4622      	mov	r2, r4
 8008fb2:	4628      	mov	r0, r5
 8008fb4:	f000 f877 	bl	80090a6 <__swbuf_r>
 8008fb8:	3001      	adds	r0, #1
 8008fba:	d1e7      	bne.n	8008f8c <_puts_r+0x68>
 8008fbc:	e7ce      	b.n	8008f5c <_puts_r+0x38>
 8008fbe:	3e01      	subs	r6, #1
 8008fc0:	e7e4      	b.n	8008f8c <_puts_r+0x68>
 8008fc2:	6823      	ldr	r3, [r4, #0]
 8008fc4:	1c5a      	adds	r2, r3, #1
 8008fc6:	6022      	str	r2, [r4, #0]
 8008fc8:	220a      	movs	r2, #10
 8008fca:	701a      	strb	r2, [r3, #0]
 8008fcc:	e7ee      	b.n	8008fac <_puts_r+0x88>
	...

08008fd0 <puts>:
 8008fd0:	4b02      	ldr	r3, [pc, #8]	@ (8008fdc <puts+0xc>)
 8008fd2:	4601      	mov	r1, r0
 8008fd4:	6818      	ldr	r0, [r3, #0]
 8008fd6:	f7ff bfa5 	b.w	8008f24 <_puts_r>
 8008fda:	bf00      	nop
 8008fdc:	2000002c 	.word	0x2000002c

08008fe0 <siprintf>:
 8008fe0:	b40e      	push	{r1, r2, r3}
 8008fe2:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8008fe6:	b500      	push	{lr}
 8008fe8:	b09c      	sub	sp, #112	@ 0x70
 8008fea:	ab1d      	add	r3, sp, #116	@ 0x74
 8008fec:	9002      	str	r0, [sp, #8]
 8008fee:	9006      	str	r0, [sp, #24]
 8008ff0:	9107      	str	r1, [sp, #28]
 8008ff2:	9104      	str	r1, [sp, #16]
 8008ff4:	4808      	ldr	r0, [pc, #32]	@ (8009018 <siprintf+0x38>)
 8008ff6:	4909      	ldr	r1, [pc, #36]	@ (800901c <siprintf+0x3c>)
 8008ff8:	f853 2b04 	ldr.w	r2, [r3], #4
 8008ffc:	9105      	str	r1, [sp, #20]
 8008ffe:	6800      	ldr	r0, [r0, #0]
 8009000:	a902      	add	r1, sp, #8
 8009002:	9301      	str	r3, [sp, #4]
 8009004:	f001 fcaa 	bl	800a95c <_svfiprintf_r>
 8009008:	2200      	movs	r2, #0
 800900a:	9b02      	ldr	r3, [sp, #8]
 800900c:	701a      	strb	r2, [r3, #0]
 800900e:	b01c      	add	sp, #112	@ 0x70
 8009010:	f85d eb04 	ldr.w	lr, [sp], #4
 8009014:	b003      	add	sp, #12
 8009016:	4770      	bx	lr
 8009018:	2000002c 	.word	0x2000002c
 800901c:	ffff0208 	.word	0xffff0208

08009020 <__sread>:
 8009020:	b510      	push	{r4, lr}
 8009022:	460c      	mov	r4, r1
 8009024:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009028:	f000 f900 	bl	800922c <_read_r>
 800902c:	2800      	cmp	r0, #0
 800902e:	bfab      	itete	ge
 8009030:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8009032:	89a3      	ldrhlt	r3, [r4, #12]
 8009034:	181b      	addge	r3, r3, r0
 8009036:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800903a:	bfac      	ite	ge
 800903c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800903e:	81a3      	strhlt	r3, [r4, #12]
 8009040:	bd10      	pop	{r4, pc}

08009042 <__swrite>:
 8009042:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009046:	461f      	mov	r7, r3
 8009048:	898b      	ldrh	r3, [r1, #12]
 800904a:	4605      	mov	r5, r0
 800904c:	05db      	lsls	r3, r3, #23
 800904e:	460c      	mov	r4, r1
 8009050:	4616      	mov	r6, r2
 8009052:	d505      	bpl.n	8009060 <__swrite+0x1e>
 8009054:	2302      	movs	r3, #2
 8009056:	2200      	movs	r2, #0
 8009058:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800905c:	f000 f8d4 	bl	8009208 <_lseek_r>
 8009060:	89a3      	ldrh	r3, [r4, #12]
 8009062:	4632      	mov	r2, r6
 8009064:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8009068:	81a3      	strh	r3, [r4, #12]
 800906a:	4628      	mov	r0, r5
 800906c:	463b      	mov	r3, r7
 800906e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009072:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009076:	f000 b8eb 	b.w	8009250 <_write_r>

0800907a <__sseek>:
 800907a:	b510      	push	{r4, lr}
 800907c:	460c      	mov	r4, r1
 800907e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009082:	f000 f8c1 	bl	8009208 <_lseek_r>
 8009086:	1c43      	adds	r3, r0, #1
 8009088:	89a3      	ldrh	r3, [r4, #12]
 800908a:	bf15      	itete	ne
 800908c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800908e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8009092:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8009096:	81a3      	strheq	r3, [r4, #12]
 8009098:	bf18      	it	ne
 800909a:	81a3      	strhne	r3, [r4, #12]
 800909c:	bd10      	pop	{r4, pc}

0800909e <__sclose>:
 800909e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80090a2:	f000 b8a1 	b.w	80091e8 <_close_r>

080090a6 <__swbuf_r>:
 80090a6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80090a8:	460e      	mov	r6, r1
 80090aa:	4614      	mov	r4, r2
 80090ac:	4605      	mov	r5, r0
 80090ae:	b118      	cbz	r0, 80090b8 <__swbuf_r+0x12>
 80090b0:	6a03      	ldr	r3, [r0, #32]
 80090b2:	b90b      	cbnz	r3, 80090b8 <__swbuf_r+0x12>
 80090b4:	f7ff ff00 	bl	8008eb8 <__sinit>
 80090b8:	69a3      	ldr	r3, [r4, #24]
 80090ba:	60a3      	str	r3, [r4, #8]
 80090bc:	89a3      	ldrh	r3, [r4, #12]
 80090be:	071a      	lsls	r2, r3, #28
 80090c0:	d501      	bpl.n	80090c6 <__swbuf_r+0x20>
 80090c2:	6923      	ldr	r3, [r4, #16]
 80090c4:	b943      	cbnz	r3, 80090d8 <__swbuf_r+0x32>
 80090c6:	4621      	mov	r1, r4
 80090c8:	4628      	mov	r0, r5
 80090ca:	f000 f82b 	bl	8009124 <__swsetup_r>
 80090ce:	b118      	cbz	r0, 80090d8 <__swbuf_r+0x32>
 80090d0:	f04f 37ff 	mov.w	r7, #4294967295
 80090d4:	4638      	mov	r0, r7
 80090d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80090d8:	6823      	ldr	r3, [r4, #0]
 80090da:	6922      	ldr	r2, [r4, #16]
 80090dc:	b2f6      	uxtb	r6, r6
 80090de:	1a98      	subs	r0, r3, r2
 80090e0:	6963      	ldr	r3, [r4, #20]
 80090e2:	4637      	mov	r7, r6
 80090e4:	4283      	cmp	r3, r0
 80090e6:	dc05      	bgt.n	80090f4 <__swbuf_r+0x4e>
 80090e8:	4621      	mov	r1, r4
 80090ea:	4628      	mov	r0, r5
 80090ec:	f001 fdb2 	bl	800ac54 <_fflush_r>
 80090f0:	2800      	cmp	r0, #0
 80090f2:	d1ed      	bne.n	80090d0 <__swbuf_r+0x2a>
 80090f4:	68a3      	ldr	r3, [r4, #8]
 80090f6:	3b01      	subs	r3, #1
 80090f8:	60a3      	str	r3, [r4, #8]
 80090fa:	6823      	ldr	r3, [r4, #0]
 80090fc:	1c5a      	adds	r2, r3, #1
 80090fe:	6022      	str	r2, [r4, #0]
 8009100:	701e      	strb	r6, [r3, #0]
 8009102:	6962      	ldr	r2, [r4, #20]
 8009104:	1c43      	adds	r3, r0, #1
 8009106:	429a      	cmp	r2, r3
 8009108:	d004      	beq.n	8009114 <__swbuf_r+0x6e>
 800910a:	89a3      	ldrh	r3, [r4, #12]
 800910c:	07db      	lsls	r3, r3, #31
 800910e:	d5e1      	bpl.n	80090d4 <__swbuf_r+0x2e>
 8009110:	2e0a      	cmp	r6, #10
 8009112:	d1df      	bne.n	80090d4 <__swbuf_r+0x2e>
 8009114:	4621      	mov	r1, r4
 8009116:	4628      	mov	r0, r5
 8009118:	f001 fd9c 	bl	800ac54 <_fflush_r>
 800911c:	2800      	cmp	r0, #0
 800911e:	d0d9      	beq.n	80090d4 <__swbuf_r+0x2e>
 8009120:	e7d6      	b.n	80090d0 <__swbuf_r+0x2a>
	...

08009124 <__swsetup_r>:
 8009124:	b538      	push	{r3, r4, r5, lr}
 8009126:	4b29      	ldr	r3, [pc, #164]	@ (80091cc <__swsetup_r+0xa8>)
 8009128:	4605      	mov	r5, r0
 800912a:	6818      	ldr	r0, [r3, #0]
 800912c:	460c      	mov	r4, r1
 800912e:	b118      	cbz	r0, 8009138 <__swsetup_r+0x14>
 8009130:	6a03      	ldr	r3, [r0, #32]
 8009132:	b90b      	cbnz	r3, 8009138 <__swsetup_r+0x14>
 8009134:	f7ff fec0 	bl	8008eb8 <__sinit>
 8009138:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800913c:	0719      	lsls	r1, r3, #28
 800913e:	d422      	bmi.n	8009186 <__swsetup_r+0x62>
 8009140:	06da      	lsls	r2, r3, #27
 8009142:	d407      	bmi.n	8009154 <__swsetup_r+0x30>
 8009144:	2209      	movs	r2, #9
 8009146:	602a      	str	r2, [r5, #0]
 8009148:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800914c:	f04f 30ff 	mov.w	r0, #4294967295
 8009150:	81a3      	strh	r3, [r4, #12]
 8009152:	e033      	b.n	80091bc <__swsetup_r+0x98>
 8009154:	0758      	lsls	r0, r3, #29
 8009156:	d512      	bpl.n	800917e <__swsetup_r+0x5a>
 8009158:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800915a:	b141      	cbz	r1, 800916e <__swsetup_r+0x4a>
 800915c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009160:	4299      	cmp	r1, r3
 8009162:	d002      	beq.n	800916a <__swsetup_r+0x46>
 8009164:	4628      	mov	r0, r5
 8009166:	f000 ff1f 	bl	8009fa8 <_free_r>
 800916a:	2300      	movs	r3, #0
 800916c:	6363      	str	r3, [r4, #52]	@ 0x34
 800916e:	89a3      	ldrh	r3, [r4, #12]
 8009170:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8009174:	81a3      	strh	r3, [r4, #12]
 8009176:	2300      	movs	r3, #0
 8009178:	6063      	str	r3, [r4, #4]
 800917a:	6923      	ldr	r3, [r4, #16]
 800917c:	6023      	str	r3, [r4, #0]
 800917e:	89a3      	ldrh	r3, [r4, #12]
 8009180:	f043 0308 	orr.w	r3, r3, #8
 8009184:	81a3      	strh	r3, [r4, #12]
 8009186:	6923      	ldr	r3, [r4, #16]
 8009188:	b94b      	cbnz	r3, 800919e <__swsetup_r+0x7a>
 800918a:	89a3      	ldrh	r3, [r4, #12]
 800918c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8009190:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009194:	d003      	beq.n	800919e <__swsetup_r+0x7a>
 8009196:	4621      	mov	r1, r4
 8009198:	4628      	mov	r0, r5
 800919a:	f001 fda8 	bl	800acee <__smakebuf_r>
 800919e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80091a2:	f013 0201 	ands.w	r2, r3, #1
 80091a6:	d00a      	beq.n	80091be <__swsetup_r+0x9a>
 80091a8:	2200      	movs	r2, #0
 80091aa:	60a2      	str	r2, [r4, #8]
 80091ac:	6962      	ldr	r2, [r4, #20]
 80091ae:	4252      	negs	r2, r2
 80091b0:	61a2      	str	r2, [r4, #24]
 80091b2:	6922      	ldr	r2, [r4, #16]
 80091b4:	b942      	cbnz	r2, 80091c8 <__swsetup_r+0xa4>
 80091b6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80091ba:	d1c5      	bne.n	8009148 <__swsetup_r+0x24>
 80091bc:	bd38      	pop	{r3, r4, r5, pc}
 80091be:	0799      	lsls	r1, r3, #30
 80091c0:	bf58      	it	pl
 80091c2:	6962      	ldrpl	r2, [r4, #20]
 80091c4:	60a2      	str	r2, [r4, #8]
 80091c6:	e7f4      	b.n	80091b2 <__swsetup_r+0x8e>
 80091c8:	2000      	movs	r0, #0
 80091ca:	e7f7      	b.n	80091bc <__swsetup_r+0x98>
 80091cc:	2000002c 	.word	0x2000002c

080091d0 <memset>:
 80091d0:	4603      	mov	r3, r0
 80091d2:	4402      	add	r2, r0
 80091d4:	4293      	cmp	r3, r2
 80091d6:	d100      	bne.n	80091da <memset+0xa>
 80091d8:	4770      	bx	lr
 80091da:	f803 1b01 	strb.w	r1, [r3], #1
 80091de:	e7f9      	b.n	80091d4 <memset+0x4>

080091e0 <_localeconv_r>:
 80091e0:	4800      	ldr	r0, [pc, #0]	@ (80091e4 <_localeconv_r+0x4>)
 80091e2:	4770      	bx	lr
 80091e4:	2000016c 	.word	0x2000016c

080091e8 <_close_r>:
 80091e8:	b538      	push	{r3, r4, r5, lr}
 80091ea:	2300      	movs	r3, #0
 80091ec:	4d05      	ldr	r5, [pc, #20]	@ (8009204 <_close_r+0x1c>)
 80091ee:	4604      	mov	r4, r0
 80091f0:	4608      	mov	r0, r1
 80091f2:	602b      	str	r3, [r5, #0]
 80091f4:	f7f8 fd81 	bl	8001cfa <_close>
 80091f8:	1c43      	adds	r3, r0, #1
 80091fa:	d102      	bne.n	8009202 <_close_r+0x1a>
 80091fc:	682b      	ldr	r3, [r5, #0]
 80091fe:	b103      	cbz	r3, 8009202 <_close_r+0x1a>
 8009200:	6023      	str	r3, [r4, #0]
 8009202:	bd38      	pop	{r3, r4, r5, pc}
 8009204:	20001e34 	.word	0x20001e34

08009208 <_lseek_r>:
 8009208:	b538      	push	{r3, r4, r5, lr}
 800920a:	4604      	mov	r4, r0
 800920c:	4608      	mov	r0, r1
 800920e:	4611      	mov	r1, r2
 8009210:	2200      	movs	r2, #0
 8009212:	4d05      	ldr	r5, [pc, #20]	@ (8009228 <_lseek_r+0x20>)
 8009214:	602a      	str	r2, [r5, #0]
 8009216:	461a      	mov	r2, r3
 8009218:	f7f8 fd93 	bl	8001d42 <_lseek>
 800921c:	1c43      	adds	r3, r0, #1
 800921e:	d102      	bne.n	8009226 <_lseek_r+0x1e>
 8009220:	682b      	ldr	r3, [r5, #0]
 8009222:	b103      	cbz	r3, 8009226 <_lseek_r+0x1e>
 8009224:	6023      	str	r3, [r4, #0]
 8009226:	bd38      	pop	{r3, r4, r5, pc}
 8009228:	20001e34 	.word	0x20001e34

0800922c <_read_r>:
 800922c:	b538      	push	{r3, r4, r5, lr}
 800922e:	4604      	mov	r4, r0
 8009230:	4608      	mov	r0, r1
 8009232:	4611      	mov	r1, r2
 8009234:	2200      	movs	r2, #0
 8009236:	4d05      	ldr	r5, [pc, #20]	@ (800924c <_read_r+0x20>)
 8009238:	602a      	str	r2, [r5, #0]
 800923a:	461a      	mov	r2, r3
 800923c:	f7f8 fd24 	bl	8001c88 <_read>
 8009240:	1c43      	adds	r3, r0, #1
 8009242:	d102      	bne.n	800924a <_read_r+0x1e>
 8009244:	682b      	ldr	r3, [r5, #0]
 8009246:	b103      	cbz	r3, 800924a <_read_r+0x1e>
 8009248:	6023      	str	r3, [r4, #0]
 800924a:	bd38      	pop	{r3, r4, r5, pc}
 800924c:	20001e34 	.word	0x20001e34

08009250 <_write_r>:
 8009250:	b538      	push	{r3, r4, r5, lr}
 8009252:	4604      	mov	r4, r0
 8009254:	4608      	mov	r0, r1
 8009256:	4611      	mov	r1, r2
 8009258:	2200      	movs	r2, #0
 800925a:	4d05      	ldr	r5, [pc, #20]	@ (8009270 <_write_r+0x20>)
 800925c:	602a      	str	r2, [r5, #0]
 800925e:	461a      	mov	r2, r3
 8009260:	f7f8 fd2f 	bl	8001cc2 <_write>
 8009264:	1c43      	adds	r3, r0, #1
 8009266:	d102      	bne.n	800926e <_write_r+0x1e>
 8009268:	682b      	ldr	r3, [r5, #0]
 800926a:	b103      	cbz	r3, 800926e <_write_r+0x1e>
 800926c:	6023      	str	r3, [r4, #0]
 800926e:	bd38      	pop	{r3, r4, r5, pc}
 8009270:	20001e34 	.word	0x20001e34

08009274 <__errno>:
 8009274:	4b01      	ldr	r3, [pc, #4]	@ (800927c <__errno+0x8>)
 8009276:	6818      	ldr	r0, [r3, #0]
 8009278:	4770      	bx	lr
 800927a:	bf00      	nop
 800927c:	2000002c 	.word	0x2000002c

08009280 <__libc_init_array>:
 8009280:	b570      	push	{r4, r5, r6, lr}
 8009282:	2600      	movs	r6, #0
 8009284:	4d0c      	ldr	r5, [pc, #48]	@ (80092b8 <__libc_init_array+0x38>)
 8009286:	4c0d      	ldr	r4, [pc, #52]	@ (80092bc <__libc_init_array+0x3c>)
 8009288:	1b64      	subs	r4, r4, r5
 800928a:	10a4      	asrs	r4, r4, #2
 800928c:	42a6      	cmp	r6, r4
 800928e:	d109      	bne.n	80092a4 <__libc_init_array+0x24>
 8009290:	f001 ffda 	bl	800b248 <_init>
 8009294:	2600      	movs	r6, #0
 8009296:	4d0a      	ldr	r5, [pc, #40]	@ (80092c0 <__libc_init_array+0x40>)
 8009298:	4c0a      	ldr	r4, [pc, #40]	@ (80092c4 <__libc_init_array+0x44>)
 800929a:	1b64      	subs	r4, r4, r5
 800929c:	10a4      	asrs	r4, r4, #2
 800929e:	42a6      	cmp	r6, r4
 80092a0:	d105      	bne.n	80092ae <__libc_init_array+0x2e>
 80092a2:	bd70      	pop	{r4, r5, r6, pc}
 80092a4:	f855 3b04 	ldr.w	r3, [r5], #4
 80092a8:	4798      	blx	r3
 80092aa:	3601      	adds	r6, #1
 80092ac:	e7ee      	b.n	800928c <__libc_init_array+0xc>
 80092ae:	f855 3b04 	ldr.w	r3, [r5], #4
 80092b2:	4798      	blx	r3
 80092b4:	3601      	adds	r6, #1
 80092b6:	e7f2      	b.n	800929e <__libc_init_array+0x1e>
 80092b8:	0800b7b8 	.word	0x0800b7b8
 80092bc:	0800b7b8 	.word	0x0800b7b8
 80092c0:	0800b7b8 	.word	0x0800b7b8
 80092c4:	0800b7bc 	.word	0x0800b7bc

080092c8 <__retarget_lock_init_recursive>:
 80092c8:	4770      	bx	lr

080092ca <__retarget_lock_acquire_recursive>:
 80092ca:	4770      	bx	lr

080092cc <__retarget_lock_release_recursive>:
 80092cc:	4770      	bx	lr

080092ce <memchr>:
 80092ce:	4603      	mov	r3, r0
 80092d0:	b510      	push	{r4, lr}
 80092d2:	b2c9      	uxtb	r1, r1
 80092d4:	4402      	add	r2, r0
 80092d6:	4293      	cmp	r3, r2
 80092d8:	4618      	mov	r0, r3
 80092da:	d101      	bne.n	80092e0 <memchr+0x12>
 80092dc:	2000      	movs	r0, #0
 80092de:	e003      	b.n	80092e8 <memchr+0x1a>
 80092e0:	7804      	ldrb	r4, [r0, #0]
 80092e2:	3301      	adds	r3, #1
 80092e4:	428c      	cmp	r4, r1
 80092e6:	d1f6      	bne.n	80092d6 <memchr+0x8>
 80092e8:	bd10      	pop	{r4, pc}

080092ea <memcpy>:
 80092ea:	440a      	add	r2, r1
 80092ec:	4291      	cmp	r1, r2
 80092ee:	f100 33ff 	add.w	r3, r0, #4294967295
 80092f2:	d100      	bne.n	80092f6 <memcpy+0xc>
 80092f4:	4770      	bx	lr
 80092f6:	b510      	push	{r4, lr}
 80092f8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80092fc:	4291      	cmp	r1, r2
 80092fe:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009302:	d1f9      	bne.n	80092f8 <memcpy+0xe>
 8009304:	bd10      	pop	{r4, pc}

08009306 <quorem>:
 8009306:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800930a:	6903      	ldr	r3, [r0, #16]
 800930c:	690c      	ldr	r4, [r1, #16]
 800930e:	4607      	mov	r7, r0
 8009310:	42a3      	cmp	r3, r4
 8009312:	db7e      	blt.n	8009412 <quorem+0x10c>
 8009314:	3c01      	subs	r4, #1
 8009316:	00a3      	lsls	r3, r4, #2
 8009318:	f100 0514 	add.w	r5, r0, #20
 800931c:	f101 0814 	add.w	r8, r1, #20
 8009320:	9300      	str	r3, [sp, #0]
 8009322:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009326:	9301      	str	r3, [sp, #4]
 8009328:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800932c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009330:	3301      	adds	r3, #1
 8009332:	429a      	cmp	r2, r3
 8009334:	fbb2 f6f3 	udiv	r6, r2, r3
 8009338:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800933c:	d32e      	bcc.n	800939c <quorem+0x96>
 800933e:	f04f 0a00 	mov.w	sl, #0
 8009342:	46c4      	mov	ip, r8
 8009344:	46ae      	mov	lr, r5
 8009346:	46d3      	mov	fp, sl
 8009348:	f85c 3b04 	ldr.w	r3, [ip], #4
 800934c:	b298      	uxth	r0, r3
 800934e:	fb06 a000 	mla	r0, r6, r0, sl
 8009352:	0c1b      	lsrs	r3, r3, #16
 8009354:	0c02      	lsrs	r2, r0, #16
 8009356:	fb06 2303 	mla	r3, r6, r3, r2
 800935a:	f8de 2000 	ldr.w	r2, [lr]
 800935e:	b280      	uxth	r0, r0
 8009360:	b292      	uxth	r2, r2
 8009362:	1a12      	subs	r2, r2, r0
 8009364:	445a      	add	r2, fp
 8009366:	f8de 0000 	ldr.w	r0, [lr]
 800936a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800936e:	b29b      	uxth	r3, r3
 8009370:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8009374:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8009378:	b292      	uxth	r2, r2
 800937a:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800937e:	45e1      	cmp	r9, ip
 8009380:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8009384:	f84e 2b04 	str.w	r2, [lr], #4
 8009388:	d2de      	bcs.n	8009348 <quorem+0x42>
 800938a:	9b00      	ldr	r3, [sp, #0]
 800938c:	58eb      	ldr	r3, [r5, r3]
 800938e:	b92b      	cbnz	r3, 800939c <quorem+0x96>
 8009390:	9b01      	ldr	r3, [sp, #4]
 8009392:	3b04      	subs	r3, #4
 8009394:	429d      	cmp	r5, r3
 8009396:	461a      	mov	r2, r3
 8009398:	d32f      	bcc.n	80093fa <quorem+0xf4>
 800939a:	613c      	str	r4, [r7, #16]
 800939c:	4638      	mov	r0, r7
 800939e:	f001 f979 	bl	800a694 <__mcmp>
 80093a2:	2800      	cmp	r0, #0
 80093a4:	db25      	blt.n	80093f2 <quorem+0xec>
 80093a6:	4629      	mov	r1, r5
 80093a8:	2000      	movs	r0, #0
 80093aa:	f858 2b04 	ldr.w	r2, [r8], #4
 80093ae:	f8d1 c000 	ldr.w	ip, [r1]
 80093b2:	fa1f fe82 	uxth.w	lr, r2
 80093b6:	fa1f f38c 	uxth.w	r3, ip
 80093ba:	eba3 030e 	sub.w	r3, r3, lr
 80093be:	4403      	add	r3, r0
 80093c0:	0c12      	lsrs	r2, r2, #16
 80093c2:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80093c6:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80093ca:	b29b      	uxth	r3, r3
 80093cc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80093d0:	45c1      	cmp	r9, r8
 80093d2:	ea4f 4022 	mov.w	r0, r2, asr #16
 80093d6:	f841 3b04 	str.w	r3, [r1], #4
 80093da:	d2e6      	bcs.n	80093aa <quorem+0xa4>
 80093dc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80093e0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80093e4:	b922      	cbnz	r2, 80093f0 <quorem+0xea>
 80093e6:	3b04      	subs	r3, #4
 80093e8:	429d      	cmp	r5, r3
 80093ea:	461a      	mov	r2, r3
 80093ec:	d30b      	bcc.n	8009406 <quorem+0x100>
 80093ee:	613c      	str	r4, [r7, #16]
 80093f0:	3601      	adds	r6, #1
 80093f2:	4630      	mov	r0, r6
 80093f4:	b003      	add	sp, #12
 80093f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80093fa:	6812      	ldr	r2, [r2, #0]
 80093fc:	3b04      	subs	r3, #4
 80093fe:	2a00      	cmp	r2, #0
 8009400:	d1cb      	bne.n	800939a <quorem+0x94>
 8009402:	3c01      	subs	r4, #1
 8009404:	e7c6      	b.n	8009394 <quorem+0x8e>
 8009406:	6812      	ldr	r2, [r2, #0]
 8009408:	3b04      	subs	r3, #4
 800940a:	2a00      	cmp	r2, #0
 800940c:	d1ef      	bne.n	80093ee <quorem+0xe8>
 800940e:	3c01      	subs	r4, #1
 8009410:	e7ea      	b.n	80093e8 <quorem+0xe2>
 8009412:	2000      	movs	r0, #0
 8009414:	e7ee      	b.n	80093f4 <quorem+0xee>
	...

08009418 <_dtoa_r>:
 8009418:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800941c:	4614      	mov	r4, r2
 800941e:	461d      	mov	r5, r3
 8009420:	69c7      	ldr	r7, [r0, #28]
 8009422:	b097      	sub	sp, #92	@ 0x5c
 8009424:	4683      	mov	fp, r0
 8009426:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800942a:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 800942c:	b97f      	cbnz	r7, 800944e <_dtoa_r+0x36>
 800942e:	2010      	movs	r0, #16
 8009430:	f000 fe02 	bl	800a038 <malloc>
 8009434:	4602      	mov	r2, r0
 8009436:	f8cb 001c 	str.w	r0, [fp, #28]
 800943a:	b920      	cbnz	r0, 8009446 <_dtoa_r+0x2e>
 800943c:	21ef      	movs	r1, #239	@ 0xef
 800943e:	4ba8      	ldr	r3, [pc, #672]	@ (80096e0 <_dtoa_r+0x2c8>)
 8009440:	48a8      	ldr	r0, [pc, #672]	@ (80096e4 <_dtoa_r+0x2cc>)
 8009442:	f001 fcdd 	bl	800ae00 <__assert_func>
 8009446:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800944a:	6007      	str	r7, [r0, #0]
 800944c:	60c7      	str	r7, [r0, #12]
 800944e:	f8db 301c 	ldr.w	r3, [fp, #28]
 8009452:	6819      	ldr	r1, [r3, #0]
 8009454:	b159      	cbz	r1, 800946e <_dtoa_r+0x56>
 8009456:	685a      	ldr	r2, [r3, #4]
 8009458:	2301      	movs	r3, #1
 800945a:	4093      	lsls	r3, r2
 800945c:	604a      	str	r2, [r1, #4]
 800945e:	608b      	str	r3, [r1, #8]
 8009460:	4658      	mov	r0, fp
 8009462:	f000 fedf 	bl	800a224 <_Bfree>
 8009466:	2200      	movs	r2, #0
 8009468:	f8db 301c 	ldr.w	r3, [fp, #28]
 800946c:	601a      	str	r2, [r3, #0]
 800946e:	1e2b      	subs	r3, r5, #0
 8009470:	bfaf      	iteee	ge
 8009472:	2300      	movge	r3, #0
 8009474:	2201      	movlt	r2, #1
 8009476:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800947a:	9303      	strlt	r3, [sp, #12]
 800947c:	bfa8      	it	ge
 800947e:	6033      	strge	r3, [r6, #0]
 8009480:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8009484:	4b98      	ldr	r3, [pc, #608]	@ (80096e8 <_dtoa_r+0x2d0>)
 8009486:	bfb8      	it	lt
 8009488:	6032      	strlt	r2, [r6, #0]
 800948a:	ea33 0308 	bics.w	r3, r3, r8
 800948e:	d112      	bne.n	80094b6 <_dtoa_r+0x9e>
 8009490:	f242 730f 	movw	r3, #9999	@ 0x270f
 8009494:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8009496:	6013      	str	r3, [r2, #0]
 8009498:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800949c:	4323      	orrs	r3, r4
 800949e:	f000 8550 	beq.w	8009f42 <_dtoa_r+0xb2a>
 80094a2:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80094a4:	f8df a244 	ldr.w	sl, [pc, #580]	@ 80096ec <_dtoa_r+0x2d4>
 80094a8:	2b00      	cmp	r3, #0
 80094aa:	f000 8552 	beq.w	8009f52 <_dtoa_r+0xb3a>
 80094ae:	f10a 0303 	add.w	r3, sl, #3
 80094b2:	f000 bd4c 	b.w	8009f4e <_dtoa_r+0xb36>
 80094b6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80094ba:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 80094be:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80094c2:	2200      	movs	r2, #0
 80094c4:	2300      	movs	r3, #0
 80094c6:	f7f7 fa6f 	bl	80009a8 <__aeabi_dcmpeq>
 80094ca:	4607      	mov	r7, r0
 80094cc:	b158      	cbz	r0, 80094e6 <_dtoa_r+0xce>
 80094ce:	2301      	movs	r3, #1
 80094d0:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 80094d2:	6013      	str	r3, [r2, #0]
 80094d4:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80094d6:	b113      	cbz	r3, 80094de <_dtoa_r+0xc6>
 80094d8:	4b85      	ldr	r3, [pc, #532]	@ (80096f0 <_dtoa_r+0x2d8>)
 80094da:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 80094dc:	6013      	str	r3, [r2, #0]
 80094de:	f8df a214 	ldr.w	sl, [pc, #532]	@ 80096f4 <_dtoa_r+0x2dc>
 80094e2:	f000 bd36 	b.w	8009f52 <_dtoa_r+0xb3a>
 80094e6:	ab14      	add	r3, sp, #80	@ 0x50
 80094e8:	9301      	str	r3, [sp, #4]
 80094ea:	ab15      	add	r3, sp, #84	@ 0x54
 80094ec:	9300      	str	r3, [sp, #0]
 80094ee:	4658      	mov	r0, fp
 80094f0:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 80094f4:	f001 f97e 	bl	800a7f4 <__d2b>
 80094f8:	f3c8 560a 	ubfx	r6, r8, #20, #11
 80094fc:	4681      	mov	r9, r0
 80094fe:	2e00      	cmp	r6, #0
 8009500:	d077      	beq.n	80095f2 <_dtoa_r+0x1da>
 8009502:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009506:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009508:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800950c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009510:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8009514:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8009518:	9712      	str	r7, [sp, #72]	@ 0x48
 800951a:	4619      	mov	r1, r3
 800951c:	2200      	movs	r2, #0
 800951e:	4b76      	ldr	r3, [pc, #472]	@ (80096f8 <_dtoa_r+0x2e0>)
 8009520:	f7f6 fe22 	bl	8000168 <__aeabi_dsub>
 8009524:	a368      	add	r3, pc, #416	@ (adr r3, 80096c8 <_dtoa_r+0x2b0>)
 8009526:	e9d3 2300 	ldrd	r2, r3, [r3]
 800952a:	f7f6 ffd5 	bl	80004d8 <__aeabi_dmul>
 800952e:	a368      	add	r3, pc, #416	@ (adr r3, 80096d0 <_dtoa_r+0x2b8>)
 8009530:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009534:	f7f6 fe1a 	bl	800016c <__adddf3>
 8009538:	4604      	mov	r4, r0
 800953a:	4630      	mov	r0, r6
 800953c:	460d      	mov	r5, r1
 800953e:	f7f6 ff61 	bl	8000404 <__aeabi_i2d>
 8009542:	a365      	add	r3, pc, #404	@ (adr r3, 80096d8 <_dtoa_r+0x2c0>)
 8009544:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009548:	f7f6 ffc6 	bl	80004d8 <__aeabi_dmul>
 800954c:	4602      	mov	r2, r0
 800954e:	460b      	mov	r3, r1
 8009550:	4620      	mov	r0, r4
 8009552:	4629      	mov	r1, r5
 8009554:	f7f6 fe0a 	bl	800016c <__adddf3>
 8009558:	4604      	mov	r4, r0
 800955a:	460d      	mov	r5, r1
 800955c:	f7f7 fa6c 	bl	8000a38 <__aeabi_d2iz>
 8009560:	2200      	movs	r2, #0
 8009562:	4607      	mov	r7, r0
 8009564:	2300      	movs	r3, #0
 8009566:	4620      	mov	r0, r4
 8009568:	4629      	mov	r1, r5
 800956a:	f7f7 fa27 	bl	80009bc <__aeabi_dcmplt>
 800956e:	b140      	cbz	r0, 8009582 <_dtoa_r+0x16a>
 8009570:	4638      	mov	r0, r7
 8009572:	f7f6 ff47 	bl	8000404 <__aeabi_i2d>
 8009576:	4622      	mov	r2, r4
 8009578:	462b      	mov	r3, r5
 800957a:	f7f7 fa15 	bl	80009a8 <__aeabi_dcmpeq>
 800957e:	b900      	cbnz	r0, 8009582 <_dtoa_r+0x16a>
 8009580:	3f01      	subs	r7, #1
 8009582:	2f16      	cmp	r7, #22
 8009584:	d853      	bhi.n	800962e <_dtoa_r+0x216>
 8009586:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800958a:	4b5c      	ldr	r3, [pc, #368]	@ (80096fc <_dtoa_r+0x2e4>)
 800958c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8009590:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009594:	f7f7 fa12 	bl	80009bc <__aeabi_dcmplt>
 8009598:	2800      	cmp	r0, #0
 800959a:	d04a      	beq.n	8009632 <_dtoa_r+0x21a>
 800959c:	2300      	movs	r3, #0
 800959e:	3f01      	subs	r7, #1
 80095a0:	930f      	str	r3, [sp, #60]	@ 0x3c
 80095a2:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80095a4:	1b9b      	subs	r3, r3, r6
 80095a6:	1e5a      	subs	r2, r3, #1
 80095a8:	bf46      	itte	mi
 80095aa:	f1c3 0801 	rsbmi	r8, r3, #1
 80095ae:	2300      	movmi	r3, #0
 80095b0:	f04f 0800 	movpl.w	r8, #0
 80095b4:	9209      	str	r2, [sp, #36]	@ 0x24
 80095b6:	bf48      	it	mi
 80095b8:	9309      	strmi	r3, [sp, #36]	@ 0x24
 80095ba:	2f00      	cmp	r7, #0
 80095bc:	db3b      	blt.n	8009636 <_dtoa_r+0x21e>
 80095be:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80095c0:	970e      	str	r7, [sp, #56]	@ 0x38
 80095c2:	443b      	add	r3, r7
 80095c4:	9309      	str	r3, [sp, #36]	@ 0x24
 80095c6:	2300      	movs	r3, #0
 80095c8:	930a      	str	r3, [sp, #40]	@ 0x28
 80095ca:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80095cc:	2b09      	cmp	r3, #9
 80095ce:	d866      	bhi.n	800969e <_dtoa_r+0x286>
 80095d0:	2b05      	cmp	r3, #5
 80095d2:	bfc4      	itt	gt
 80095d4:	3b04      	subgt	r3, #4
 80095d6:	9320      	strgt	r3, [sp, #128]	@ 0x80
 80095d8:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80095da:	bfc8      	it	gt
 80095dc:	2400      	movgt	r4, #0
 80095de:	f1a3 0302 	sub.w	r3, r3, #2
 80095e2:	bfd8      	it	le
 80095e4:	2401      	movle	r4, #1
 80095e6:	2b03      	cmp	r3, #3
 80095e8:	d864      	bhi.n	80096b4 <_dtoa_r+0x29c>
 80095ea:	e8df f003 	tbb	[pc, r3]
 80095ee:	382b      	.short	0x382b
 80095f0:	5636      	.short	0x5636
 80095f2:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 80095f6:	441e      	add	r6, r3
 80095f8:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80095fc:	2b20      	cmp	r3, #32
 80095fe:	bfc1      	itttt	gt
 8009600:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8009604:	fa08 f803 	lslgt.w	r8, r8, r3
 8009608:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800960c:	fa24 f303 	lsrgt.w	r3, r4, r3
 8009610:	bfd6      	itet	le
 8009612:	f1c3 0320 	rsble	r3, r3, #32
 8009616:	ea48 0003 	orrgt.w	r0, r8, r3
 800961a:	fa04 f003 	lslle.w	r0, r4, r3
 800961e:	f7f6 fee1 	bl	80003e4 <__aeabi_ui2d>
 8009622:	2201      	movs	r2, #1
 8009624:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8009628:	3e01      	subs	r6, #1
 800962a:	9212      	str	r2, [sp, #72]	@ 0x48
 800962c:	e775      	b.n	800951a <_dtoa_r+0x102>
 800962e:	2301      	movs	r3, #1
 8009630:	e7b6      	b.n	80095a0 <_dtoa_r+0x188>
 8009632:	900f      	str	r0, [sp, #60]	@ 0x3c
 8009634:	e7b5      	b.n	80095a2 <_dtoa_r+0x18a>
 8009636:	427b      	negs	r3, r7
 8009638:	930a      	str	r3, [sp, #40]	@ 0x28
 800963a:	2300      	movs	r3, #0
 800963c:	eba8 0807 	sub.w	r8, r8, r7
 8009640:	930e      	str	r3, [sp, #56]	@ 0x38
 8009642:	e7c2      	b.n	80095ca <_dtoa_r+0x1b2>
 8009644:	2300      	movs	r3, #0
 8009646:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009648:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800964a:	2b00      	cmp	r3, #0
 800964c:	dc35      	bgt.n	80096ba <_dtoa_r+0x2a2>
 800964e:	2301      	movs	r3, #1
 8009650:	461a      	mov	r2, r3
 8009652:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8009656:	9221      	str	r2, [sp, #132]	@ 0x84
 8009658:	e00b      	b.n	8009672 <_dtoa_r+0x25a>
 800965a:	2301      	movs	r3, #1
 800965c:	e7f3      	b.n	8009646 <_dtoa_r+0x22e>
 800965e:	2300      	movs	r3, #0
 8009660:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009662:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8009664:	18fb      	adds	r3, r7, r3
 8009666:	9308      	str	r3, [sp, #32]
 8009668:	3301      	adds	r3, #1
 800966a:	2b01      	cmp	r3, #1
 800966c:	9307      	str	r3, [sp, #28]
 800966e:	bfb8      	it	lt
 8009670:	2301      	movlt	r3, #1
 8009672:	2100      	movs	r1, #0
 8009674:	2204      	movs	r2, #4
 8009676:	f8db 001c 	ldr.w	r0, [fp, #28]
 800967a:	f102 0514 	add.w	r5, r2, #20
 800967e:	429d      	cmp	r5, r3
 8009680:	d91f      	bls.n	80096c2 <_dtoa_r+0x2aa>
 8009682:	6041      	str	r1, [r0, #4]
 8009684:	4658      	mov	r0, fp
 8009686:	f000 fd8d 	bl	800a1a4 <_Balloc>
 800968a:	4682      	mov	sl, r0
 800968c:	2800      	cmp	r0, #0
 800968e:	d139      	bne.n	8009704 <_dtoa_r+0x2ec>
 8009690:	4602      	mov	r2, r0
 8009692:	f240 11af 	movw	r1, #431	@ 0x1af
 8009696:	4b1a      	ldr	r3, [pc, #104]	@ (8009700 <_dtoa_r+0x2e8>)
 8009698:	e6d2      	b.n	8009440 <_dtoa_r+0x28>
 800969a:	2301      	movs	r3, #1
 800969c:	e7e0      	b.n	8009660 <_dtoa_r+0x248>
 800969e:	2401      	movs	r4, #1
 80096a0:	2300      	movs	r3, #0
 80096a2:	940b      	str	r4, [sp, #44]	@ 0x2c
 80096a4:	9320      	str	r3, [sp, #128]	@ 0x80
 80096a6:	f04f 33ff 	mov.w	r3, #4294967295
 80096aa:	2200      	movs	r2, #0
 80096ac:	e9cd 3307 	strd	r3, r3, [sp, #28]
 80096b0:	2312      	movs	r3, #18
 80096b2:	e7d0      	b.n	8009656 <_dtoa_r+0x23e>
 80096b4:	2301      	movs	r3, #1
 80096b6:	930b      	str	r3, [sp, #44]	@ 0x2c
 80096b8:	e7f5      	b.n	80096a6 <_dtoa_r+0x28e>
 80096ba:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80096bc:	e9cd 3307 	strd	r3, r3, [sp, #28]
 80096c0:	e7d7      	b.n	8009672 <_dtoa_r+0x25a>
 80096c2:	3101      	adds	r1, #1
 80096c4:	0052      	lsls	r2, r2, #1
 80096c6:	e7d8      	b.n	800967a <_dtoa_r+0x262>
 80096c8:	636f4361 	.word	0x636f4361
 80096cc:	3fd287a7 	.word	0x3fd287a7
 80096d0:	8b60c8b3 	.word	0x8b60c8b3
 80096d4:	3fc68a28 	.word	0x3fc68a28
 80096d8:	509f79fb 	.word	0x509f79fb
 80096dc:	3fd34413 	.word	0x3fd34413
 80096e0:	0800b47f 	.word	0x0800b47f
 80096e4:	0800b496 	.word	0x0800b496
 80096e8:	7ff00000 	.word	0x7ff00000
 80096ec:	0800b47b 	.word	0x0800b47b
 80096f0:	0800b44f 	.word	0x0800b44f
 80096f4:	0800b44e 	.word	0x0800b44e
 80096f8:	3ff80000 	.word	0x3ff80000
 80096fc:	0800b590 	.word	0x0800b590
 8009700:	0800b4ee 	.word	0x0800b4ee
 8009704:	f8db 301c 	ldr.w	r3, [fp, #28]
 8009708:	6018      	str	r0, [r3, #0]
 800970a:	9b07      	ldr	r3, [sp, #28]
 800970c:	2b0e      	cmp	r3, #14
 800970e:	f200 80a4 	bhi.w	800985a <_dtoa_r+0x442>
 8009712:	2c00      	cmp	r4, #0
 8009714:	f000 80a1 	beq.w	800985a <_dtoa_r+0x442>
 8009718:	2f00      	cmp	r7, #0
 800971a:	dd33      	ble.n	8009784 <_dtoa_r+0x36c>
 800971c:	4b86      	ldr	r3, [pc, #536]	@ (8009938 <_dtoa_r+0x520>)
 800971e:	f007 020f 	and.w	r2, r7, #15
 8009722:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009726:	05f8      	lsls	r0, r7, #23
 8009728:	e9d3 3400 	ldrd	r3, r4, [r3]
 800972c:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8009730:	ea4f 1427 	mov.w	r4, r7, asr #4
 8009734:	d516      	bpl.n	8009764 <_dtoa_r+0x34c>
 8009736:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800973a:	4b80      	ldr	r3, [pc, #512]	@ (800993c <_dtoa_r+0x524>)
 800973c:	2603      	movs	r6, #3
 800973e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009742:	f7f6 fff3 	bl	800072c <__aeabi_ddiv>
 8009746:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800974a:	f004 040f 	and.w	r4, r4, #15
 800974e:	4d7b      	ldr	r5, [pc, #492]	@ (800993c <_dtoa_r+0x524>)
 8009750:	b954      	cbnz	r4, 8009768 <_dtoa_r+0x350>
 8009752:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009756:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800975a:	f7f6 ffe7 	bl	800072c <__aeabi_ddiv>
 800975e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009762:	e028      	b.n	80097b6 <_dtoa_r+0x39e>
 8009764:	2602      	movs	r6, #2
 8009766:	e7f2      	b.n	800974e <_dtoa_r+0x336>
 8009768:	07e1      	lsls	r1, r4, #31
 800976a:	d508      	bpl.n	800977e <_dtoa_r+0x366>
 800976c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009770:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009774:	f7f6 feb0 	bl	80004d8 <__aeabi_dmul>
 8009778:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800977c:	3601      	adds	r6, #1
 800977e:	1064      	asrs	r4, r4, #1
 8009780:	3508      	adds	r5, #8
 8009782:	e7e5      	b.n	8009750 <_dtoa_r+0x338>
 8009784:	f000 80d2 	beq.w	800992c <_dtoa_r+0x514>
 8009788:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800978c:	427c      	negs	r4, r7
 800978e:	4b6a      	ldr	r3, [pc, #424]	@ (8009938 <_dtoa_r+0x520>)
 8009790:	f004 020f 	and.w	r2, r4, #15
 8009794:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009798:	e9d3 2300 	ldrd	r2, r3, [r3]
 800979c:	f7f6 fe9c 	bl	80004d8 <__aeabi_dmul>
 80097a0:	2602      	movs	r6, #2
 80097a2:	2300      	movs	r3, #0
 80097a4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80097a8:	4d64      	ldr	r5, [pc, #400]	@ (800993c <_dtoa_r+0x524>)
 80097aa:	1124      	asrs	r4, r4, #4
 80097ac:	2c00      	cmp	r4, #0
 80097ae:	f040 80b2 	bne.w	8009916 <_dtoa_r+0x4fe>
 80097b2:	2b00      	cmp	r3, #0
 80097b4:	d1d3      	bne.n	800975e <_dtoa_r+0x346>
 80097b6:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80097ba:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80097bc:	2b00      	cmp	r3, #0
 80097be:	f000 80b7 	beq.w	8009930 <_dtoa_r+0x518>
 80097c2:	2200      	movs	r2, #0
 80097c4:	4620      	mov	r0, r4
 80097c6:	4629      	mov	r1, r5
 80097c8:	4b5d      	ldr	r3, [pc, #372]	@ (8009940 <_dtoa_r+0x528>)
 80097ca:	f7f7 f8f7 	bl	80009bc <__aeabi_dcmplt>
 80097ce:	2800      	cmp	r0, #0
 80097d0:	f000 80ae 	beq.w	8009930 <_dtoa_r+0x518>
 80097d4:	9b07      	ldr	r3, [sp, #28]
 80097d6:	2b00      	cmp	r3, #0
 80097d8:	f000 80aa 	beq.w	8009930 <_dtoa_r+0x518>
 80097dc:	9b08      	ldr	r3, [sp, #32]
 80097de:	2b00      	cmp	r3, #0
 80097e0:	dd37      	ble.n	8009852 <_dtoa_r+0x43a>
 80097e2:	1e7b      	subs	r3, r7, #1
 80097e4:	4620      	mov	r0, r4
 80097e6:	9304      	str	r3, [sp, #16]
 80097e8:	2200      	movs	r2, #0
 80097ea:	4629      	mov	r1, r5
 80097ec:	4b55      	ldr	r3, [pc, #340]	@ (8009944 <_dtoa_r+0x52c>)
 80097ee:	f7f6 fe73 	bl	80004d8 <__aeabi_dmul>
 80097f2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80097f6:	9c08      	ldr	r4, [sp, #32]
 80097f8:	3601      	adds	r6, #1
 80097fa:	4630      	mov	r0, r6
 80097fc:	f7f6 fe02 	bl	8000404 <__aeabi_i2d>
 8009800:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009804:	f7f6 fe68 	bl	80004d8 <__aeabi_dmul>
 8009808:	2200      	movs	r2, #0
 800980a:	4b4f      	ldr	r3, [pc, #316]	@ (8009948 <_dtoa_r+0x530>)
 800980c:	f7f6 fcae 	bl	800016c <__adddf3>
 8009810:	4605      	mov	r5, r0
 8009812:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8009816:	2c00      	cmp	r4, #0
 8009818:	f040 809a 	bne.w	8009950 <_dtoa_r+0x538>
 800981c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009820:	2200      	movs	r2, #0
 8009822:	4b4a      	ldr	r3, [pc, #296]	@ (800994c <_dtoa_r+0x534>)
 8009824:	f7f6 fca0 	bl	8000168 <__aeabi_dsub>
 8009828:	4602      	mov	r2, r0
 800982a:	460b      	mov	r3, r1
 800982c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009830:	462a      	mov	r2, r5
 8009832:	4633      	mov	r3, r6
 8009834:	f7f7 f8e0 	bl	80009f8 <__aeabi_dcmpgt>
 8009838:	2800      	cmp	r0, #0
 800983a:	f040 828e 	bne.w	8009d5a <_dtoa_r+0x942>
 800983e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009842:	462a      	mov	r2, r5
 8009844:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8009848:	f7f7 f8b8 	bl	80009bc <__aeabi_dcmplt>
 800984c:	2800      	cmp	r0, #0
 800984e:	f040 8127 	bne.w	8009aa0 <_dtoa_r+0x688>
 8009852:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8009856:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800985a:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800985c:	2b00      	cmp	r3, #0
 800985e:	f2c0 8163 	blt.w	8009b28 <_dtoa_r+0x710>
 8009862:	2f0e      	cmp	r7, #14
 8009864:	f300 8160 	bgt.w	8009b28 <_dtoa_r+0x710>
 8009868:	4b33      	ldr	r3, [pc, #204]	@ (8009938 <_dtoa_r+0x520>)
 800986a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800986e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8009872:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8009876:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8009878:	2b00      	cmp	r3, #0
 800987a:	da03      	bge.n	8009884 <_dtoa_r+0x46c>
 800987c:	9b07      	ldr	r3, [sp, #28]
 800987e:	2b00      	cmp	r3, #0
 8009880:	f340 8100 	ble.w	8009a84 <_dtoa_r+0x66c>
 8009884:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8009888:	4656      	mov	r6, sl
 800988a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800988e:	4620      	mov	r0, r4
 8009890:	4629      	mov	r1, r5
 8009892:	f7f6 ff4b 	bl	800072c <__aeabi_ddiv>
 8009896:	f7f7 f8cf 	bl	8000a38 <__aeabi_d2iz>
 800989a:	4680      	mov	r8, r0
 800989c:	f7f6 fdb2 	bl	8000404 <__aeabi_i2d>
 80098a0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80098a4:	f7f6 fe18 	bl	80004d8 <__aeabi_dmul>
 80098a8:	4602      	mov	r2, r0
 80098aa:	460b      	mov	r3, r1
 80098ac:	4620      	mov	r0, r4
 80098ae:	4629      	mov	r1, r5
 80098b0:	f7f6 fc5a 	bl	8000168 <__aeabi_dsub>
 80098b4:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80098b8:	9d07      	ldr	r5, [sp, #28]
 80098ba:	f806 4b01 	strb.w	r4, [r6], #1
 80098be:	eba6 040a 	sub.w	r4, r6, sl
 80098c2:	42a5      	cmp	r5, r4
 80098c4:	4602      	mov	r2, r0
 80098c6:	460b      	mov	r3, r1
 80098c8:	f040 8116 	bne.w	8009af8 <_dtoa_r+0x6e0>
 80098cc:	f7f6 fc4e 	bl	800016c <__adddf3>
 80098d0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80098d4:	4604      	mov	r4, r0
 80098d6:	460d      	mov	r5, r1
 80098d8:	f7f7 f88e 	bl	80009f8 <__aeabi_dcmpgt>
 80098dc:	2800      	cmp	r0, #0
 80098de:	f040 80f8 	bne.w	8009ad2 <_dtoa_r+0x6ba>
 80098e2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80098e6:	4620      	mov	r0, r4
 80098e8:	4629      	mov	r1, r5
 80098ea:	f7f7 f85d 	bl	80009a8 <__aeabi_dcmpeq>
 80098ee:	b118      	cbz	r0, 80098f8 <_dtoa_r+0x4e0>
 80098f0:	f018 0f01 	tst.w	r8, #1
 80098f4:	f040 80ed 	bne.w	8009ad2 <_dtoa_r+0x6ba>
 80098f8:	4649      	mov	r1, r9
 80098fa:	4658      	mov	r0, fp
 80098fc:	f000 fc92 	bl	800a224 <_Bfree>
 8009900:	2300      	movs	r3, #0
 8009902:	7033      	strb	r3, [r6, #0]
 8009904:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8009906:	3701      	adds	r7, #1
 8009908:	601f      	str	r7, [r3, #0]
 800990a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800990c:	2b00      	cmp	r3, #0
 800990e:	f000 8320 	beq.w	8009f52 <_dtoa_r+0xb3a>
 8009912:	601e      	str	r6, [r3, #0]
 8009914:	e31d      	b.n	8009f52 <_dtoa_r+0xb3a>
 8009916:	07e2      	lsls	r2, r4, #31
 8009918:	d505      	bpl.n	8009926 <_dtoa_r+0x50e>
 800991a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800991e:	f7f6 fddb 	bl	80004d8 <__aeabi_dmul>
 8009922:	2301      	movs	r3, #1
 8009924:	3601      	adds	r6, #1
 8009926:	1064      	asrs	r4, r4, #1
 8009928:	3508      	adds	r5, #8
 800992a:	e73f      	b.n	80097ac <_dtoa_r+0x394>
 800992c:	2602      	movs	r6, #2
 800992e:	e742      	b.n	80097b6 <_dtoa_r+0x39e>
 8009930:	9c07      	ldr	r4, [sp, #28]
 8009932:	9704      	str	r7, [sp, #16]
 8009934:	e761      	b.n	80097fa <_dtoa_r+0x3e2>
 8009936:	bf00      	nop
 8009938:	0800b590 	.word	0x0800b590
 800993c:	0800b568 	.word	0x0800b568
 8009940:	3ff00000 	.word	0x3ff00000
 8009944:	40240000 	.word	0x40240000
 8009948:	401c0000 	.word	0x401c0000
 800994c:	40140000 	.word	0x40140000
 8009950:	4b70      	ldr	r3, [pc, #448]	@ (8009b14 <_dtoa_r+0x6fc>)
 8009952:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8009954:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8009958:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800995c:	4454      	add	r4, sl
 800995e:	2900      	cmp	r1, #0
 8009960:	d045      	beq.n	80099ee <_dtoa_r+0x5d6>
 8009962:	2000      	movs	r0, #0
 8009964:	496c      	ldr	r1, [pc, #432]	@ (8009b18 <_dtoa_r+0x700>)
 8009966:	f7f6 fee1 	bl	800072c <__aeabi_ddiv>
 800996a:	4633      	mov	r3, r6
 800996c:	462a      	mov	r2, r5
 800996e:	f7f6 fbfb 	bl	8000168 <__aeabi_dsub>
 8009972:	4656      	mov	r6, sl
 8009974:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8009978:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800997c:	f7f7 f85c 	bl	8000a38 <__aeabi_d2iz>
 8009980:	4605      	mov	r5, r0
 8009982:	f7f6 fd3f 	bl	8000404 <__aeabi_i2d>
 8009986:	4602      	mov	r2, r0
 8009988:	460b      	mov	r3, r1
 800998a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800998e:	f7f6 fbeb 	bl	8000168 <__aeabi_dsub>
 8009992:	4602      	mov	r2, r0
 8009994:	460b      	mov	r3, r1
 8009996:	3530      	adds	r5, #48	@ 0x30
 8009998:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800999c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80099a0:	f806 5b01 	strb.w	r5, [r6], #1
 80099a4:	f7f7 f80a 	bl	80009bc <__aeabi_dcmplt>
 80099a8:	2800      	cmp	r0, #0
 80099aa:	d163      	bne.n	8009a74 <_dtoa_r+0x65c>
 80099ac:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80099b0:	2000      	movs	r0, #0
 80099b2:	495a      	ldr	r1, [pc, #360]	@ (8009b1c <_dtoa_r+0x704>)
 80099b4:	f7f6 fbd8 	bl	8000168 <__aeabi_dsub>
 80099b8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80099bc:	f7f6 fffe 	bl	80009bc <__aeabi_dcmplt>
 80099c0:	2800      	cmp	r0, #0
 80099c2:	f040 8087 	bne.w	8009ad4 <_dtoa_r+0x6bc>
 80099c6:	42a6      	cmp	r6, r4
 80099c8:	f43f af43 	beq.w	8009852 <_dtoa_r+0x43a>
 80099cc:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80099d0:	2200      	movs	r2, #0
 80099d2:	4b53      	ldr	r3, [pc, #332]	@ (8009b20 <_dtoa_r+0x708>)
 80099d4:	f7f6 fd80 	bl	80004d8 <__aeabi_dmul>
 80099d8:	2200      	movs	r2, #0
 80099da:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80099de:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80099e2:	4b4f      	ldr	r3, [pc, #316]	@ (8009b20 <_dtoa_r+0x708>)
 80099e4:	f7f6 fd78 	bl	80004d8 <__aeabi_dmul>
 80099e8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80099ec:	e7c4      	b.n	8009978 <_dtoa_r+0x560>
 80099ee:	4631      	mov	r1, r6
 80099f0:	4628      	mov	r0, r5
 80099f2:	f7f6 fd71 	bl	80004d8 <__aeabi_dmul>
 80099f6:	4656      	mov	r6, sl
 80099f8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80099fc:	9413      	str	r4, [sp, #76]	@ 0x4c
 80099fe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009a02:	f7f7 f819 	bl	8000a38 <__aeabi_d2iz>
 8009a06:	4605      	mov	r5, r0
 8009a08:	f7f6 fcfc 	bl	8000404 <__aeabi_i2d>
 8009a0c:	4602      	mov	r2, r0
 8009a0e:	460b      	mov	r3, r1
 8009a10:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009a14:	f7f6 fba8 	bl	8000168 <__aeabi_dsub>
 8009a18:	4602      	mov	r2, r0
 8009a1a:	460b      	mov	r3, r1
 8009a1c:	3530      	adds	r5, #48	@ 0x30
 8009a1e:	f806 5b01 	strb.w	r5, [r6], #1
 8009a22:	42a6      	cmp	r6, r4
 8009a24:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009a28:	f04f 0200 	mov.w	r2, #0
 8009a2c:	d124      	bne.n	8009a78 <_dtoa_r+0x660>
 8009a2e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8009a32:	4b39      	ldr	r3, [pc, #228]	@ (8009b18 <_dtoa_r+0x700>)
 8009a34:	f7f6 fb9a 	bl	800016c <__adddf3>
 8009a38:	4602      	mov	r2, r0
 8009a3a:	460b      	mov	r3, r1
 8009a3c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009a40:	f7f6 ffda 	bl	80009f8 <__aeabi_dcmpgt>
 8009a44:	2800      	cmp	r0, #0
 8009a46:	d145      	bne.n	8009ad4 <_dtoa_r+0x6bc>
 8009a48:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8009a4c:	2000      	movs	r0, #0
 8009a4e:	4932      	ldr	r1, [pc, #200]	@ (8009b18 <_dtoa_r+0x700>)
 8009a50:	f7f6 fb8a 	bl	8000168 <__aeabi_dsub>
 8009a54:	4602      	mov	r2, r0
 8009a56:	460b      	mov	r3, r1
 8009a58:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009a5c:	f7f6 ffae 	bl	80009bc <__aeabi_dcmplt>
 8009a60:	2800      	cmp	r0, #0
 8009a62:	f43f aef6 	beq.w	8009852 <_dtoa_r+0x43a>
 8009a66:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8009a68:	1e73      	subs	r3, r6, #1
 8009a6a:	9313      	str	r3, [sp, #76]	@ 0x4c
 8009a6c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8009a70:	2b30      	cmp	r3, #48	@ 0x30
 8009a72:	d0f8      	beq.n	8009a66 <_dtoa_r+0x64e>
 8009a74:	9f04      	ldr	r7, [sp, #16]
 8009a76:	e73f      	b.n	80098f8 <_dtoa_r+0x4e0>
 8009a78:	4b29      	ldr	r3, [pc, #164]	@ (8009b20 <_dtoa_r+0x708>)
 8009a7a:	f7f6 fd2d 	bl	80004d8 <__aeabi_dmul>
 8009a7e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009a82:	e7bc      	b.n	80099fe <_dtoa_r+0x5e6>
 8009a84:	d10c      	bne.n	8009aa0 <_dtoa_r+0x688>
 8009a86:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009a8a:	2200      	movs	r2, #0
 8009a8c:	4b25      	ldr	r3, [pc, #148]	@ (8009b24 <_dtoa_r+0x70c>)
 8009a8e:	f7f6 fd23 	bl	80004d8 <__aeabi_dmul>
 8009a92:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009a96:	f7f6 ffa5 	bl	80009e4 <__aeabi_dcmpge>
 8009a9a:	2800      	cmp	r0, #0
 8009a9c:	f000 815b 	beq.w	8009d56 <_dtoa_r+0x93e>
 8009aa0:	2400      	movs	r4, #0
 8009aa2:	4625      	mov	r5, r4
 8009aa4:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8009aa6:	4656      	mov	r6, sl
 8009aa8:	43db      	mvns	r3, r3
 8009aaa:	9304      	str	r3, [sp, #16]
 8009aac:	2700      	movs	r7, #0
 8009aae:	4621      	mov	r1, r4
 8009ab0:	4658      	mov	r0, fp
 8009ab2:	f000 fbb7 	bl	800a224 <_Bfree>
 8009ab6:	2d00      	cmp	r5, #0
 8009ab8:	d0dc      	beq.n	8009a74 <_dtoa_r+0x65c>
 8009aba:	b12f      	cbz	r7, 8009ac8 <_dtoa_r+0x6b0>
 8009abc:	42af      	cmp	r7, r5
 8009abe:	d003      	beq.n	8009ac8 <_dtoa_r+0x6b0>
 8009ac0:	4639      	mov	r1, r7
 8009ac2:	4658      	mov	r0, fp
 8009ac4:	f000 fbae 	bl	800a224 <_Bfree>
 8009ac8:	4629      	mov	r1, r5
 8009aca:	4658      	mov	r0, fp
 8009acc:	f000 fbaa 	bl	800a224 <_Bfree>
 8009ad0:	e7d0      	b.n	8009a74 <_dtoa_r+0x65c>
 8009ad2:	9704      	str	r7, [sp, #16]
 8009ad4:	4633      	mov	r3, r6
 8009ad6:	461e      	mov	r6, r3
 8009ad8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009adc:	2a39      	cmp	r2, #57	@ 0x39
 8009ade:	d107      	bne.n	8009af0 <_dtoa_r+0x6d8>
 8009ae0:	459a      	cmp	sl, r3
 8009ae2:	d1f8      	bne.n	8009ad6 <_dtoa_r+0x6be>
 8009ae4:	9a04      	ldr	r2, [sp, #16]
 8009ae6:	3201      	adds	r2, #1
 8009ae8:	9204      	str	r2, [sp, #16]
 8009aea:	2230      	movs	r2, #48	@ 0x30
 8009aec:	f88a 2000 	strb.w	r2, [sl]
 8009af0:	781a      	ldrb	r2, [r3, #0]
 8009af2:	3201      	adds	r2, #1
 8009af4:	701a      	strb	r2, [r3, #0]
 8009af6:	e7bd      	b.n	8009a74 <_dtoa_r+0x65c>
 8009af8:	2200      	movs	r2, #0
 8009afa:	4b09      	ldr	r3, [pc, #36]	@ (8009b20 <_dtoa_r+0x708>)
 8009afc:	f7f6 fcec 	bl	80004d8 <__aeabi_dmul>
 8009b00:	2200      	movs	r2, #0
 8009b02:	2300      	movs	r3, #0
 8009b04:	4604      	mov	r4, r0
 8009b06:	460d      	mov	r5, r1
 8009b08:	f7f6 ff4e 	bl	80009a8 <__aeabi_dcmpeq>
 8009b0c:	2800      	cmp	r0, #0
 8009b0e:	f43f aebc 	beq.w	800988a <_dtoa_r+0x472>
 8009b12:	e6f1      	b.n	80098f8 <_dtoa_r+0x4e0>
 8009b14:	0800b590 	.word	0x0800b590
 8009b18:	3fe00000 	.word	0x3fe00000
 8009b1c:	3ff00000 	.word	0x3ff00000
 8009b20:	40240000 	.word	0x40240000
 8009b24:	40140000 	.word	0x40140000
 8009b28:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8009b2a:	2a00      	cmp	r2, #0
 8009b2c:	f000 80db 	beq.w	8009ce6 <_dtoa_r+0x8ce>
 8009b30:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8009b32:	2a01      	cmp	r2, #1
 8009b34:	f300 80bf 	bgt.w	8009cb6 <_dtoa_r+0x89e>
 8009b38:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8009b3a:	2a00      	cmp	r2, #0
 8009b3c:	f000 80b7 	beq.w	8009cae <_dtoa_r+0x896>
 8009b40:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8009b44:	4646      	mov	r6, r8
 8009b46:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8009b48:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009b4a:	2101      	movs	r1, #1
 8009b4c:	441a      	add	r2, r3
 8009b4e:	4658      	mov	r0, fp
 8009b50:	4498      	add	r8, r3
 8009b52:	9209      	str	r2, [sp, #36]	@ 0x24
 8009b54:	f000 fc1a 	bl	800a38c <__i2b>
 8009b58:	4605      	mov	r5, r0
 8009b5a:	b15e      	cbz	r6, 8009b74 <_dtoa_r+0x75c>
 8009b5c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009b5e:	2b00      	cmp	r3, #0
 8009b60:	dd08      	ble.n	8009b74 <_dtoa_r+0x75c>
 8009b62:	42b3      	cmp	r3, r6
 8009b64:	bfa8      	it	ge
 8009b66:	4633      	movge	r3, r6
 8009b68:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009b6a:	eba8 0803 	sub.w	r8, r8, r3
 8009b6e:	1af6      	subs	r6, r6, r3
 8009b70:	1ad3      	subs	r3, r2, r3
 8009b72:	9309      	str	r3, [sp, #36]	@ 0x24
 8009b74:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009b76:	b1f3      	cbz	r3, 8009bb6 <_dtoa_r+0x79e>
 8009b78:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009b7a:	2b00      	cmp	r3, #0
 8009b7c:	f000 80b7 	beq.w	8009cee <_dtoa_r+0x8d6>
 8009b80:	b18c      	cbz	r4, 8009ba6 <_dtoa_r+0x78e>
 8009b82:	4629      	mov	r1, r5
 8009b84:	4622      	mov	r2, r4
 8009b86:	4658      	mov	r0, fp
 8009b88:	f000 fcbe 	bl	800a508 <__pow5mult>
 8009b8c:	464a      	mov	r2, r9
 8009b8e:	4601      	mov	r1, r0
 8009b90:	4605      	mov	r5, r0
 8009b92:	4658      	mov	r0, fp
 8009b94:	f000 fc10 	bl	800a3b8 <__multiply>
 8009b98:	4649      	mov	r1, r9
 8009b9a:	9004      	str	r0, [sp, #16]
 8009b9c:	4658      	mov	r0, fp
 8009b9e:	f000 fb41 	bl	800a224 <_Bfree>
 8009ba2:	9b04      	ldr	r3, [sp, #16]
 8009ba4:	4699      	mov	r9, r3
 8009ba6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009ba8:	1b1a      	subs	r2, r3, r4
 8009baa:	d004      	beq.n	8009bb6 <_dtoa_r+0x79e>
 8009bac:	4649      	mov	r1, r9
 8009bae:	4658      	mov	r0, fp
 8009bb0:	f000 fcaa 	bl	800a508 <__pow5mult>
 8009bb4:	4681      	mov	r9, r0
 8009bb6:	2101      	movs	r1, #1
 8009bb8:	4658      	mov	r0, fp
 8009bba:	f000 fbe7 	bl	800a38c <__i2b>
 8009bbe:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009bc0:	4604      	mov	r4, r0
 8009bc2:	2b00      	cmp	r3, #0
 8009bc4:	f000 81c9 	beq.w	8009f5a <_dtoa_r+0xb42>
 8009bc8:	461a      	mov	r2, r3
 8009bca:	4601      	mov	r1, r0
 8009bcc:	4658      	mov	r0, fp
 8009bce:	f000 fc9b 	bl	800a508 <__pow5mult>
 8009bd2:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8009bd4:	4604      	mov	r4, r0
 8009bd6:	2b01      	cmp	r3, #1
 8009bd8:	f300 808f 	bgt.w	8009cfa <_dtoa_r+0x8e2>
 8009bdc:	9b02      	ldr	r3, [sp, #8]
 8009bde:	2b00      	cmp	r3, #0
 8009be0:	f040 8087 	bne.w	8009cf2 <_dtoa_r+0x8da>
 8009be4:	9b03      	ldr	r3, [sp, #12]
 8009be6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009bea:	2b00      	cmp	r3, #0
 8009bec:	f040 8083 	bne.w	8009cf6 <_dtoa_r+0x8de>
 8009bf0:	9b03      	ldr	r3, [sp, #12]
 8009bf2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8009bf6:	0d1b      	lsrs	r3, r3, #20
 8009bf8:	051b      	lsls	r3, r3, #20
 8009bfa:	b12b      	cbz	r3, 8009c08 <_dtoa_r+0x7f0>
 8009bfc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009bfe:	f108 0801 	add.w	r8, r8, #1
 8009c02:	3301      	adds	r3, #1
 8009c04:	9309      	str	r3, [sp, #36]	@ 0x24
 8009c06:	2301      	movs	r3, #1
 8009c08:	930a      	str	r3, [sp, #40]	@ 0x28
 8009c0a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009c0c:	2b00      	cmp	r3, #0
 8009c0e:	f000 81aa 	beq.w	8009f66 <_dtoa_r+0xb4e>
 8009c12:	6923      	ldr	r3, [r4, #16]
 8009c14:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009c18:	6918      	ldr	r0, [r3, #16]
 8009c1a:	f000 fb6b 	bl	800a2f4 <__hi0bits>
 8009c1e:	f1c0 0020 	rsb	r0, r0, #32
 8009c22:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009c24:	4418      	add	r0, r3
 8009c26:	f010 001f 	ands.w	r0, r0, #31
 8009c2a:	d071      	beq.n	8009d10 <_dtoa_r+0x8f8>
 8009c2c:	f1c0 0320 	rsb	r3, r0, #32
 8009c30:	2b04      	cmp	r3, #4
 8009c32:	dd65      	ble.n	8009d00 <_dtoa_r+0x8e8>
 8009c34:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009c36:	f1c0 001c 	rsb	r0, r0, #28
 8009c3a:	4403      	add	r3, r0
 8009c3c:	4480      	add	r8, r0
 8009c3e:	4406      	add	r6, r0
 8009c40:	9309      	str	r3, [sp, #36]	@ 0x24
 8009c42:	f1b8 0f00 	cmp.w	r8, #0
 8009c46:	dd05      	ble.n	8009c54 <_dtoa_r+0x83c>
 8009c48:	4649      	mov	r1, r9
 8009c4a:	4642      	mov	r2, r8
 8009c4c:	4658      	mov	r0, fp
 8009c4e:	f000 fcb5 	bl	800a5bc <__lshift>
 8009c52:	4681      	mov	r9, r0
 8009c54:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009c56:	2b00      	cmp	r3, #0
 8009c58:	dd05      	ble.n	8009c66 <_dtoa_r+0x84e>
 8009c5a:	4621      	mov	r1, r4
 8009c5c:	461a      	mov	r2, r3
 8009c5e:	4658      	mov	r0, fp
 8009c60:	f000 fcac 	bl	800a5bc <__lshift>
 8009c64:	4604      	mov	r4, r0
 8009c66:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009c68:	2b00      	cmp	r3, #0
 8009c6a:	d053      	beq.n	8009d14 <_dtoa_r+0x8fc>
 8009c6c:	4621      	mov	r1, r4
 8009c6e:	4648      	mov	r0, r9
 8009c70:	f000 fd10 	bl	800a694 <__mcmp>
 8009c74:	2800      	cmp	r0, #0
 8009c76:	da4d      	bge.n	8009d14 <_dtoa_r+0x8fc>
 8009c78:	1e7b      	subs	r3, r7, #1
 8009c7a:	4649      	mov	r1, r9
 8009c7c:	9304      	str	r3, [sp, #16]
 8009c7e:	220a      	movs	r2, #10
 8009c80:	2300      	movs	r3, #0
 8009c82:	4658      	mov	r0, fp
 8009c84:	f000 faf0 	bl	800a268 <__multadd>
 8009c88:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009c8a:	4681      	mov	r9, r0
 8009c8c:	2b00      	cmp	r3, #0
 8009c8e:	f000 816c 	beq.w	8009f6a <_dtoa_r+0xb52>
 8009c92:	2300      	movs	r3, #0
 8009c94:	4629      	mov	r1, r5
 8009c96:	220a      	movs	r2, #10
 8009c98:	4658      	mov	r0, fp
 8009c9a:	f000 fae5 	bl	800a268 <__multadd>
 8009c9e:	9b08      	ldr	r3, [sp, #32]
 8009ca0:	4605      	mov	r5, r0
 8009ca2:	2b00      	cmp	r3, #0
 8009ca4:	dc61      	bgt.n	8009d6a <_dtoa_r+0x952>
 8009ca6:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8009ca8:	2b02      	cmp	r3, #2
 8009caa:	dc3b      	bgt.n	8009d24 <_dtoa_r+0x90c>
 8009cac:	e05d      	b.n	8009d6a <_dtoa_r+0x952>
 8009cae:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8009cb0:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8009cb4:	e746      	b.n	8009b44 <_dtoa_r+0x72c>
 8009cb6:	9b07      	ldr	r3, [sp, #28]
 8009cb8:	1e5c      	subs	r4, r3, #1
 8009cba:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009cbc:	42a3      	cmp	r3, r4
 8009cbe:	bfbf      	itttt	lt
 8009cc0:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8009cc2:	9a0e      	ldrlt	r2, [sp, #56]	@ 0x38
 8009cc4:	1ae3      	sublt	r3, r4, r3
 8009cc6:	18d2      	addlt	r2, r2, r3
 8009cc8:	bfa8      	it	ge
 8009cca:	1b1c      	subge	r4, r3, r4
 8009ccc:	9b07      	ldr	r3, [sp, #28]
 8009cce:	bfbe      	ittt	lt
 8009cd0:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8009cd2:	920e      	strlt	r2, [sp, #56]	@ 0x38
 8009cd4:	2400      	movlt	r4, #0
 8009cd6:	2b00      	cmp	r3, #0
 8009cd8:	bfb5      	itete	lt
 8009cda:	eba8 0603 	sublt.w	r6, r8, r3
 8009cde:	4646      	movge	r6, r8
 8009ce0:	2300      	movlt	r3, #0
 8009ce2:	9b07      	ldrge	r3, [sp, #28]
 8009ce4:	e730      	b.n	8009b48 <_dtoa_r+0x730>
 8009ce6:	4646      	mov	r6, r8
 8009ce8:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8009cea:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8009cec:	e735      	b.n	8009b5a <_dtoa_r+0x742>
 8009cee:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009cf0:	e75c      	b.n	8009bac <_dtoa_r+0x794>
 8009cf2:	2300      	movs	r3, #0
 8009cf4:	e788      	b.n	8009c08 <_dtoa_r+0x7f0>
 8009cf6:	9b02      	ldr	r3, [sp, #8]
 8009cf8:	e786      	b.n	8009c08 <_dtoa_r+0x7f0>
 8009cfa:	2300      	movs	r3, #0
 8009cfc:	930a      	str	r3, [sp, #40]	@ 0x28
 8009cfe:	e788      	b.n	8009c12 <_dtoa_r+0x7fa>
 8009d00:	d09f      	beq.n	8009c42 <_dtoa_r+0x82a>
 8009d02:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009d04:	331c      	adds	r3, #28
 8009d06:	441a      	add	r2, r3
 8009d08:	4498      	add	r8, r3
 8009d0a:	441e      	add	r6, r3
 8009d0c:	9209      	str	r2, [sp, #36]	@ 0x24
 8009d0e:	e798      	b.n	8009c42 <_dtoa_r+0x82a>
 8009d10:	4603      	mov	r3, r0
 8009d12:	e7f6      	b.n	8009d02 <_dtoa_r+0x8ea>
 8009d14:	9b07      	ldr	r3, [sp, #28]
 8009d16:	9704      	str	r7, [sp, #16]
 8009d18:	2b00      	cmp	r3, #0
 8009d1a:	dc20      	bgt.n	8009d5e <_dtoa_r+0x946>
 8009d1c:	9308      	str	r3, [sp, #32]
 8009d1e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8009d20:	2b02      	cmp	r3, #2
 8009d22:	dd1e      	ble.n	8009d62 <_dtoa_r+0x94a>
 8009d24:	9b08      	ldr	r3, [sp, #32]
 8009d26:	2b00      	cmp	r3, #0
 8009d28:	f47f aebc 	bne.w	8009aa4 <_dtoa_r+0x68c>
 8009d2c:	4621      	mov	r1, r4
 8009d2e:	2205      	movs	r2, #5
 8009d30:	4658      	mov	r0, fp
 8009d32:	f000 fa99 	bl	800a268 <__multadd>
 8009d36:	4601      	mov	r1, r0
 8009d38:	4604      	mov	r4, r0
 8009d3a:	4648      	mov	r0, r9
 8009d3c:	f000 fcaa 	bl	800a694 <__mcmp>
 8009d40:	2800      	cmp	r0, #0
 8009d42:	f77f aeaf 	ble.w	8009aa4 <_dtoa_r+0x68c>
 8009d46:	2331      	movs	r3, #49	@ 0x31
 8009d48:	4656      	mov	r6, sl
 8009d4a:	f806 3b01 	strb.w	r3, [r6], #1
 8009d4e:	9b04      	ldr	r3, [sp, #16]
 8009d50:	3301      	adds	r3, #1
 8009d52:	9304      	str	r3, [sp, #16]
 8009d54:	e6aa      	b.n	8009aac <_dtoa_r+0x694>
 8009d56:	9c07      	ldr	r4, [sp, #28]
 8009d58:	9704      	str	r7, [sp, #16]
 8009d5a:	4625      	mov	r5, r4
 8009d5c:	e7f3      	b.n	8009d46 <_dtoa_r+0x92e>
 8009d5e:	9b07      	ldr	r3, [sp, #28]
 8009d60:	9308      	str	r3, [sp, #32]
 8009d62:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009d64:	2b00      	cmp	r3, #0
 8009d66:	f000 8104 	beq.w	8009f72 <_dtoa_r+0xb5a>
 8009d6a:	2e00      	cmp	r6, #0
 8009d6c:	dd05      	ble.n	8009d7a <_dtoa_r+0x962>
 8009d6e:	4629      	mov	r1, r5
 8009d70:	4632      	mov	r2, r6
 8009d72:	4658      	mov	r0, fp
 8009d74:	f000 fc22 	bl	800a5bc <__lshift>
 8009d78:	4605      	mov	r5, r0
 8009d7a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009d7c:	2b00      	cmp	r3, #0
 8009d7e:	d05a      	beq.n	8009e36 <_dtoa_r+0xa1e>
 8009d80:	4658      	mov	r0, fp
 8009d82:	6869      	ldr	r1, [r5, #4]
 8009d84:	f000 fa0e 	bl	800a1a4 <_Balloc>
 8009d88:	4606      	mov	r6, r0
 8009d8a:	b928      	cbnz	r0, 8009d98 <_dtoa_r+0x980>
 8009d8c:	4602      	mov	r2, r0
 8009d8e:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8009d92:	4b83      	ldr	r3, [pc, #524]	@ (8009fa0 <_dtoa_r+0xb88>)
 8009d94:	f7ff bb54 	b.w	8009440 <_dtoa_r+0x28>
 8009d98:	692a      	ldr	r2, [r5, #16]
 8009d9a:	f105 010c 	add.w	r1, r5, #12
 8009d9e:	3202      	adds	r2, #2
 8009da0:	0092      	lsls	r2, r2, #2
 8009da2:	300c      	adds	r0, #12
 8009da4:	f7ff faa1 	bl	80092ea <memcpy>
 8009da8:	2201      	movs	r2, #1
 8009daa:	4631      	mov	r1, r6
 8009dac:	4658      	mov	r0, fp
 8009dae:	f000 fc05 	bl	800a5bc <__lshift>
 8009db2:	462f      	mov	r7, r5
 8009db4:	4605      	mov	r5, r0
 8009db6:	f10a 0301 	add.w	r3, sl, #1
 8009dba:	9307      	str	r3, [sp, #28]
 8009dbc:	9b08      	ldr	r3, [sp, #32]
 8009dbe:	4453      	add	r3, sl
 8009dc0:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009dc2:	9b02      	ldr	r3, [sp, #8]
 8009dc4:	f003 0301 	and.w	r3, r3, #1
 8009dc8:	930a      	str	r3, [sp, #40]	@ 0x28
 8009dca:	9b07      	ldr	r3, [sp, #28]
 8009dcc:	4621      	mov	r1, r4
 8009dce:	3b01      	subs	r3, #1
 8009dd0:	4648      	mov	r0, r9
 8009dd2:	9302      	str	r3, [sp, #8]
 8009dd4:	f7ff fa97 	bl	8009306 <quorem>
 8009dd8:	4639      	mov	r1, r7
 8009dda:	9008      	str	r0, [sp, #32]
 8009ddc:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8009de0:	4648      	mov	r0, r9
 8009de2:	f000 fc57 	bl	800a694 <__mcmp>
 8009de6:	462a      	mov	r2, r5
 8009de8:	9009      	str	r0, [sp, #36]	@ 0x24
 8009dea:	4621      	mov	r1, r4
 8009dec:	4658      	mov	r0, fp
 8009dee:	f000 fc6d 	bl	800a6cc <__mdiff>
 8009df2:	68c2      	ldr	r2, [r0, #12]
 8009df4:	4606      	mov	r6, r0
 8009df6:	bb02      	cbnz	r2, 8009e3a <_dtoa_r+0xa22>
 8009df8:	4601      	mov	r1, r0
 8009dfa:	4648      	mov	r0, r9
 8009dfc:	f000 fc4a 	bl	800a694 <__mcmp>
 8009e00:	4602      	mov	r2, r0
 8009e02:	4631      	mov	r1, r6
 8009e04:	4658      	mov	r0, fp
 8009e06:	920c      	str	r2, [sp, #48]	@ 0x30
 8009e08:	f000 fa0c 	bl	800a224 <_Bfree>
 8009e0c:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8009e0e:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8009e10:	9e07      	ldr	r6, [sp, #28]
 8009e12:	ea43 0102 	orr.w	r1, r3, r2
 8009e16:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009e18:	4319      	orrs	r1, r3
 8009e1a:	d110      	bne.n	8009e3e <_dtoa_r+0xa26>
 8009e1c:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8009e20:	d029      	beq.n	8009e76 <_dtoa_r+0xa5e>
 8009e22:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009e24:	2b00      	cmp	r3, #0
 8009e26:	dd02      	ble.n	8009e2e <_dtoa_r+0xa16>
 8009e28:	9b08      	ldr	r3, [sp, #32]
 8009e2a:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8009e2e:	9b02      	ldr	r3, [sp, #8]
 8009e30:	f883 8000 	strb.w	r8, [r3]
 8009e34:	e63b      	b.n	8009aae <_dtoa_r+0x696>
 8009e36:	4628      	mov	r0, r5
 8009e38:	e7bb      	b.n	8009db2 <_dtoa_r+0x99a>
 8009e3a:	2201      	movs	r2, #1
 8009e3c:	e7e1      	b.n	8009e02 <_dtoa_r+0x9ea>
 8009e3e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009e40:	2b00      	cmp	r3, #0
 8009e42:	db04      	blt.n	8009e4e <_dtoa_r+0xa36>
 8009e44:	9920      	ldr	r1, [sp, #128]	@ 0x80
 8009e46:	430b      	orrs	r3, r1
 8009e48:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8009e4a:	430b      	orrs	r3, r1
 8009e4c:	d120      	bne.n	8009e90 <_dtoa_r+0xa78>
 8009e4e:	2a00      	cmp	r2, #0
 8009e50:	dded      	ble.n	8009e2e <_dtoa_r+0xa16>
 8009e52:	4649      	mov	r1, r9
 8009e54:	2201      	movs	r2, #1
 8009e56:	4658      	mov	r0, fp
 8009e58:	f000 fbb0 	bl	800a5bc <__lshift>
 8009e5c:	4621      	mov	r1, r4
 8009e5e:	4681      	mov	r9, r0
 8009e60:	f000 fc18 	bl	800a694 <__mcmp>
 8009e64:	2800      	cmp	r0, #0
 8009e66:	dc03      	bgt.n	8009e70 <_dtoa_r+0xa58>
 8009e68:	d1e1      	bne.n	8009e2e <_dtoa_r+0xa16>
 8009e6a:	f018 0f01 	tst.w	r8, #1
 8009e6e:	d0de      	beq.n	8009e2e <_dtoa_r+0xa16>
 8009e70:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8009e74:	d1d8      	bne.n	8009e28 <_dtoa_r+0xa10>
 8009e76:	2339      	movs	r3, #57	@ 0x39
 8009e78:	9a02      	ldr	r2, [sp, #8]
 8009e7a:	7013      	strb	r3, [r2, #0]
 8009e7c:	4633      	mov	r3, r6
 8009e7e:	461e      	mov	r6, r3
 8009e80:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8009e84:	3b01      	subs	r3, #1
 8009e86:	2a39      	cmp	r2, #57	@ 0x39
 8009e88:	d052      	beq.n	8009f30 <_dtoa_r+0xb18>
 8009e8a:	3201      	adds	r2, #1
 8009e8c:	701a      	strb	r2, [r3, #0]
 8009e8e:	e60e      	b.n	8009aae <_dtoa_r+0x696>
 8009e90:	2a00      	cmp	r2, #0
 8009e92:	dd07      	ble.n	8009ea4 <_dtoa_r+0xa8c>
 8009e94:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8009e98:	d0ed      	beq.n	8009e76 <_dtoa_r+0xa5e>
 8009e9a:	9a02      	ldr	r2, [sp, #8]
 8009e9c:	f108 0301 	add.w	r3, r8, #1
 8009ea0:	7013      	strb	r3, [r2, #0]
 8009ea2:	e604      	b.n	8009aae <_dtoa_r+0x696>
 8009ea4:	9b07      	ldr	r3, [sp, #28]
 8009ea6:	9a07      	ldr	r2, [sp, #28]
 8009ea8:	f803 8c01 	strb.w	r8, [r3, #-1]
 8009eac:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009eae:	4293      	cmp	r3, r2
 8009eb0:	d028      	beq.n	8009f04 <_dtoa_r+0xaec>
 8009eb2:	4649      	mov	r1, r9
 8009eb4:	2300      	movs	r3, #0
 8009eb6:	220a      	movs	r2, #10
 8009eb8:	4658      	mov	r0, fp
 8009eba:	f000 f9d5 	bl	800a268 <__multadd>
 8009ebe:	42af      	cmp	r7, r5
 8009ec0:	4681      	mov	r9, r0
 8009ec2:	f04f 0300 	mov.w	r3, #0
 8009ec6:	f04f 020a 	mov.w	r2, #10
 8009eca:	4639      	mov	r1, r7
 8009ecc:	4658      	mov	r0, fp
 8009ece:	d107      	bne.n	8009ee0 <_dtoa_r+0xac8>
 8009ed0:	f000 f9ca 	bl	800a268 <__multadd>
 8009ed4:	4607      	mov	r7, r0
 8009ed6:	4605      	mov	r5, r0
 8009ed8:	9b07      	ldr	r3, [sp, #28]
 8009eda:	3301      	adds	r3, #1
 8009edc:	9307      	str	r3, [sp, #28]
 8009ede:	e774      	b.n	8009dca <_dtoa_r+0x9b2>
 8009ee0:	f000 f9c2 	bl	800a268 <__multadd>
 8009ee4:	4629      	mov	r1, r5
 8009ee6:	4607      	mov	r7, r0
 8009ee8:	2300      	movs	r3, #0
 8009eea:	220a      	movs	r2, #10
 8009eec:	4658      	mov	r0, fp
 8009eee:	f000 f9bb 	bl	800a268 <__multadd>
 8009ef2:	4605      	mov	r5, r0
 8009ef4:	e7f0      	b.n	8009ed8 <_dtoa_r+0xac0>
 8009ef6:	9b08      	ldr	r3, [sp, #32]
 8009ef8:	2700      	movs	r7, #0
 8009efa:	2b00      	cmp	r3, #0
 8009efc:	bfcc      	ite	gt
 8009efe:	461e      	movgt	r6, r3
 8009f00:	2601      	movle	r6, #1
 8009f02:	4456      	add	r6, sl
 8009f04:	4649      	mov	r1, r9
 8009f06:	2201      	movs	r2, #1
 8009f08:	4658      	mov	r0, fp
 8009f0a:	f000 fb57 	bl	800a5bc <__lshift>
 8009f0e:	4621      	mov	r1, r4
 8009f10:	4681      	mov	r9, r0
 8009f12:	f000 fbbf 	bl	800a694 <__mcmp>
 8009f16:	2800      	cmp	r0, #0
 8009f18:	dcb0      	bgt.n	8009e7c <_dtoa_r+0xa64>
 8009f1a:	d102      	bne.n	8009f22 <_dtoa_r+0xb0a>
 8009f1c:	f018 0f01 	tst.w	r8, #1
 8009f20:	d1ac      	bne.n	8009e7c <_dtoa_r+0xa64>
 8009f22:	4633      	mov	r3, r6
 8009f24:	461e      	mov	r6, r3
 8009f26:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009f2a:	2a30      	cmp	r2, #48	@ 0x30
 8009f2c:	d0fa      	beq.n	8009f24 <_dtoa_r+0xb0c>
 8009f2e:	e5be      	b.n	8009aae <_dtoa_r+0x696>
 8009f30:	459a      	cmp	sl, r3
 8009f32:	d1a4      	bne.n	8009e7e <_dtoa_r+0xa66>
 8009f34:	9b04      	ldr	r3, [sp, #16]
 8009f36:	3301      	adds	r3, #1
 8009f38:	9304      	str	r3, [sp, #16]
 8009f3a:	2331      	movs	r3, #49	@ 0x31
 8009f3c:	f88a 3000 	strb.w	r3, [sl]
 8009f40:	e5b5      	b.n	8009aae <_dtoa_r+0x696>
 8009f42:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8009f44:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8009fa4 <_dtoa_r+0xb8c>
 8009f48:	b11b      	cbz	r3, 8009f52 <_dtoa_r+0xb3a>
 8009f4a:	f10a 0308 	add.w	r3, sl, #8
 8009f4e:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8009f50:	6013      	str	r3, [r2, #0]
 8009f52:	4650      	mov	r0, sl
 8009f54:	b017      	add	sp, #92	@ 0x5c
 8009f56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f5a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8009f5c:	2b01      	cmp	r3, #1
 8009f5e:	f77f ae3d 	ble.w	8009bdc <_dtoa_r+0x7c4>
 8009f62:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009f64:	930a      	str	r3, [sp, #40]	@ 0x28
 8009f66:	2001      	movs	r0, #1
 8009f68:	e65b      	b.n	8009c22 <_dtoa_r+0x80a>
 8009f6a:	9b08      	ldr	r3, [sp, #32]
 8009f6c:	2b00      	cmp	r3, #0
 8009f6e:	f77f aed6 	ble.w	8009d1e <_dtoa_r+0x906>
 8009f72:	4656      	mov	r6, sl
 8009f74:	4621      	mov	r1, r4
 8009f76:	4648      	mov	r0, r9
 8009f78:	f7ff f9c5 	bl	8009306 <quorem>
 8009f7c:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8009f80:	9b08      	ldr	r3, [sp, #32]
 8009f82:	f806 8b01 	strb.w	r8, [r6], #1
 8009f86:	eba6 020a 	sub.w	r2, r6, sl
 8009f8a:	4293      	cmp	r3, r2
 8009f8c:	ddb3      	ble.n	8009ef6 <_dtoa_r+0xade>
 8009f8e:	4649      	mov	r1, r9
 8009f90:	2300      	movs	r3, #0
 8009f92:	220a      	movs	r2, #10
 8009f94:	4658      	mov	r0, fp
 8009f96:	f000 f967 	bl	800a268 <__multadd>
 8009f9a:	4681      	mov	r9, r0
 8009f9c:	e7ea      	b.n	8009f74 <_dtoa_r+0xb5c>
 8009f9e:	bf00      	nop
 8009fa0:	0800b4ee 	.word	0x0800b4ee
 8009fa4:	0800b472 	.word	0x0800b472

08009fa8 <_free_r>:
 8009fa8:	b538      	push	{r3, r4, r5, lr}
 8009faa:	4605      	mov	r5, r0
 8009fac:	2900      	cmp	r1, #0
 8009fae:	d040      	beq.n	800a032 <_free_r+0x8a>
 8009fb0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009fb4:	1f0c      	subs	r4, r1, #4
 8009fb6:	2b00      	cmp	r3, #0
 8009fb8:	bfb8      	it	lt
 8009fba:	18e4      	addlt	r4, r4, r3
 8009fbc:	f000 f8e6 	bl	800a18c <__malloc_lock>
 8009fc0:	4a1c      	ldr	r2, [pc, #112]	@ (800a034 <_free_r+0x8c>)
 8009fc2:	6813      	ldr	r3, [r2, #0]
 8009fc4:	b933      	cbnz	r3, 8009fd4 <_free_r+0x2c>
 8009fc6:	6063      	str	r3, [r4, #4]
 8009fc8:	6014      	str	r4, [r2, #0]
 8009fca:	4628      	mov	r0, r5
 8009fcc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009fd0:	f000 b8e2 	b.w	800a198 <__malloc_unlock>
 8009fd4:	42a3      	cmp	r3, r4
 8009fd6:	d908      	bls.n	8009fea <_free_r+0x42>
 8009fd8:	6820      	ldr	r0, [r4, #0]
 8009fda:	1821      	adds	r1, r4, r0
 8009fdc:	428b      	cmp	r3, r1
 8009fde:	bf01      	itttt	eq
 8009fe0:	6819      	ldreq	r1, [r3, #0]
 8009fe2:	685b      	ldreq	r3, [r3, #4]
 8009fe4:	1809      	addeq	r1, r1, r0
 8009fe6:	6021      	streq	r1, [r4, #0]
 8009fe8:	e7ed      	b.n	8009fc6 <_free_r+0x1e>
 8009fea:	461a      	mov	r2, r3
 8009fec:	685b      	ldr	r3, [r3, #4]
 8009fee:	b10b      	cbz	r3, 8009ff4 <_free_r+0x4c>
 8009ff0:	42a3      	cmp	r3, r4
 8009ff2:	d9fa      	bls.n	8009fea <_free_r+0x42>
 8009ff4:	6811      	ldr	r1, [r2, #0]
 8009ff6:	1850      	adds	r0, r2, r1
 8009ff8:	42a0      	cmp	r0, r4
 8009ffa:	d10b      	bne.n	800a014 <_free_r+0x6c>
 8009ffc:	6820      	ldr	r0, [r4, #0]
 8009ffe:	4401      	add	r1, r0
 800a000:	1850      	adds	r0, r2, r1
 800a002:	4283      	cmp	r3, r0
 800a004:	6011      	str	r1, [r2, #0]
 800a006:	d1e0      	bne.n	8009fca <_free_r+0x22>
 800a008:	6818      	ldr	r0, [r3, #0]
 800a00a:	685b      	ldr	r3, [r3, #4]
 800a00c:	4408      	add	r0, r1
 800a00e:	6010      	str	r0, [r2, #0]
 800a010:	6053      	str	r3, [r2, #4]
 800a012:	e7da      	b.n	8009fca <_free_r+0x22>
 800a014:	d902      	bls.n	800a01c <_free_r+0x74>
 800a016:	230c      	movs	r3, #12
 800a018:	602b      	str	r3, [r5, #0]
 800a01a:	e7d6      	b.n	8009fca <_free_r+0x22>
 800a01c:	6820      	ldr	r0, [r4, #0]
 800a01e:	1821      	adds	r1, r4, r0
 800a020:	428b      	cmp	r3, r1
 800a022:	bf01      	itttt	eq
 800a024:	6819      	ldreq	r1, [r3, #0]
 800a026:	685b      	ldreq	r3, [r3, #4]
 800a028:	1809      	addeq	r1, r1, r0
 800a02a:	6021      	streq	r1, [r4, #0]
 800a02c:	6063      	str	r3, [r4, #4]
 800a02e:	6054      	str	r4, [r2, #4]
 800a030:	e7cb      	b.n	8009fca <_free_r+0x22>
 800a032:	bd38      	pop	{r3, r4, r5, pc}
 800a034:	20001e40 	.word	0x20001e40

0800a038 <malloc>:
 800a038:	4b02      	ldr	r3, [pc, #8]	@ (800a044 <malloc+0xc>)
 800a03a:	4601      	mov	r1, r0
 800a03c:	6818      	ldr	r0, [r3, #0]
 800a03e:	f000 b825 	b.w	800a08c <_malloc_r>
 800a042:	bf00      	nop
 800a044:	2000002c 	.word	0x2000002c

0800a048 <sbrk_aligned>:
 800a048:	b570      	push	{r4, r5, r6, lr}
 800a04a:	4e0f      	ldr	r6, [pc, #60]	@ (800a088 <sbrk_aligned+0x40>)
 800a04c:	460c      	mov	r4, r1
 800a04e:	6831      	ldr	r1, [r6, #0]
 800a050:	4605      	mov	r5, r0
 800a052:	b911      	cbnz	r1, 800a05a <sbrk_aligned+0x12>
 800a054:	f000 fec4 	bl	800ade0 <_sbrk_r>
 800a058:	6030      	str	r0, [r6, #0]
 800a05a:	4621      	mov	r1, r4
 800a05c:	4628      	mov	r0, r5
 800a05e:	f000 febf 	bl	800ade0 <_sbrk_r>
 800a062:	1c43      	adds	r3, r0, #1
 800a064:	d103      	bne.n	800a06e <sbrk_aligned+0x26>
 800a066:	f04f 34ff 	mov.w	r4, #4294967295
 800a06a:	4620      	mov	r0, r4
 800a06c:	bd70      	pop	{r4, r5, r6, pc}
 800a06e:	1cc4      	adds	r4, r0, #3
 800a070:	f024 0403 	bic.w	r4, r4, #3
 800a074:	42a0      	cmp	r0, r4
 800a076:	d0f8      	beq.n	800a06a <sbrk_aligned+0x22>
 800a078:	1a21      	subs	r1, r4, r0
 800a07a:	4628      	mov	r0, r5
 800a07c:	f000 feb0 	bl	800ade0 <_sbrk_r>
 800a080:	3001      	adds	r0, #1
 800a082:	d1f2      	bne.n	800a06a <sbrk_aligned+0x22>
 800a084:	e7ef      	b.n	800a066 <sbrk_aligned+0x1e>
 800a086:	bf00      	nop
 800a088:	20001e3c 	.word	0x20001e3c

0800a08c <_malloc_r>:
 800a08c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a090:	1ccd      	adds	r5, r1, #3
 800a092:	f025 0503 	bic.w	r5, r5, #3
 800a096:	3508      	adds	r5, #8
 800a098:	2d0c      	cmp	r5, #12
 800a09a:	bf38      	it	cc
 800a09c:	250c      	movcc	r5, #12
 800a09e:	2d00      	cmp	r5, #0
 800a0a0:	4606      	mov	r6, r0
 800a0a2:	db01      	blt.n	800a0a8 <_malloc_r+0x1c>
 800a0a4:	42a9      	cmp	r1, r5
 800a0a6:	d904      	bls.n	800a0b2 <_malloc_r+0x26>
 800a0a8:	230c      	movs	r3, #12
 800a0aa:	6033      	str	r3, [r6, #0]
 800a0ac:	2000      	movs	r0, #0
 800a0ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a0b2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800a188 <_malloc_r+0xfc>
 800a0b6:	f000 f869 	bl	800a18c <__malloc_lock>
 800a0ba:	f8d8 3000 	ldr.w	r3, [r8]
 800a0be:	461c      	mov	r4, r3
 800a0c0:	bb44      	cbnz	r4, 800a114 <_malloc_r+0x88>
 800a0c2:	4629      	mov	r1, r5
 800a0c4:	4630      	mov	r0, r6
 800a0c6:	f7ff ffbf 	bl	800a048 <sbrk_aligned>
 800a0ca:	1c43      	adds	r3, r0, #1
 800a0cc:	4604      	mov	r4, r0
 800a0ce:	d158      	bne.n	800a182 <_malloc_r+0xf6>
 800a0d0:	f8d8 4000 	ldr.w	r4, [r8]
 800a0d4:	4627      	mov	r7, r4
 800a0d6:	2f00      	cmp	r7, #0
 800a0d8:	d143      	bne.n	800a162 <_malloc_r+0xd6>
 800a0da:	2c00      	cmp	r4, #0
 800a0dc:	d04b      	beq.n	800a176 <_malloc_r+0xea>
 800a0de:	6823      	ldr	r3, [r4, #0]
 800a0e0:	4639      	mov	r1, r7
 800a0e2:	4630      	mov	r0, r6
 800a0e4:	eb04 0903 	add.w	r9, r4, r3
 800a0e8:	f000 fe7a 	bl	800ade0 <_sbrk_r>
 800a0ec:	4581      	cmp	r9, r0
 800a0ee:	d142      	bne.n	800a176 <_malloc_r+0xea>
 800a0f0:	6821      	ldr	r1, [r4, #0]
 800a0f2:	4630      	mov	r0, r6
 800a0f4:	1a6d      	subs	r5, r5, r1
 800a0f6:	4629      	mov	r1, r5
 800a0f8:	f7ff ffa6 	bl	800a048 <sbrk_aligned>
 800a0fc:	3001      	adds	r0, #1
 800a0fe:	d03a      	beq.n	800a176 <_malloc_r+0xea>
 800a100:	6823      	ldr	r3, [r4, #0]
 800a102:	442b      	add	r3, r5
 800a104:	6023      	str	r3, [r4, #0]
 800a106:	f8d8 3000 	ldr.w	r3, [r8]
 800a10a:	685a      	ldr	r2, [r3, #4]
 800a10c:	bb62      	cbnz	r2, 800a168 <_malloc_r+0xdc>
 800a10e:	f8c8 7000 	str.w	r7, [r8]
 800a112:	e00f      	b.n	800a134 <_malloc_r+0xa8>
 800a114:	6822      	ldr	r2, [r4, #0]
 800a116:	1b52      	subs	r2, r2, r5
 800a118:	d420      	bmi.n	800a15c <_malloc_r+0xd0>
 800a11a:	2a0b      	cmp	r2, #11
 800a11c:	d917      	bls.n	800a14e <_malloc_r+0xc2>
 800a11e:	1961      	adds	r1, r4, r5
 800a120:	42a3      	cmp	r3, r4
 800a122:	6025      	str	r5, [r4, #0]
 800a124:	bf18      	it	ne
 800a126:	6059      	strne	r1, [r3, #4]
 800a128:	6863      	ldr	r3, [r4, #4]
 800a12a:	bf08      	it	eq
 800a12c:	f8c8 1000 	streq.w	r1, [r8]
 800a130:	5162      	str	r2, [r4, r5]
 800a132:	604b      	str	r3, [r1, #4]
 800a134:	4630      	mov	r0, r6
 800a136:	f000 f82f 	bl	800a198 <__malloc_unlock>
 800a13a:	f104 000b 	add.w	r0, r4, #11
 800a13e:	1d23      	adds	r3, r4, #4
 800a140:	f020 0007 	bic.w	r0, r0, #7
 800a144:	1ac2      	subs	r2, r0, r3
 800a146:	bf1c      	itt	ne
 800a148:	1a1b      	subne	r3, r3, r0
 800a14a:	50a3      	strne	r3, [r4, r2]
 800a14c:	e7af      	b.n	800a0ae <_malloc_r+0x22>
 800a14e:	6862      	ldr	r2, [r4, #4]
 800a150:	42a3      	cmp	r3, r4
 800a152:	bf0c      	ite	eq
 800a154:	f8c8 2000 	streq.w	r2, [r8]
 800a158:	605a      	strne	r2, [r3, #4]
 800a15a:	e7eb      	b.n	800a134 <_malloc_r+0xa8>
 800a15c:	4623      	mov	r3, r4
 800a15e:	6864      	ldr	r4, [r4, #4]
 800a160:	e7ae      	b.n	800a0c0 <_malloc_r+0x34>
 800a162:	463c      	mov	r4, r7
 800a164:	687f      	ldr	r7, [r7, #4]
 800a166:	e7b6      	b.n	800a0d6 <_malloc_r+0x4a>
 800a168:	461a      	mov	r2, r3
 800a16a:	685b      	ldr	r3, [r3, #4]
 800a16c:	42a3      	cmp	r3, r4
 800a16e:	d1fb      	bne.n	800a168 <_malloc_r+0xdc>
 800a170:	2300      	movs	r3, #0
 800a172:	6053      	str	r3, [r2, #4]
 800a174:	e7de      	b.n	800a134 <_malloc_r+0xa8>
 800a176:	230c      	movs	r3, #12
 800a178:	4630      	mov	r0, r6
 800a17a:	6033      	str	r3, [r6, #0]
 800a17c:	f000 f80c 	bl	800a198 <__malloc_unlock>
 800a180:	e794      	b.n	800a0ac <_malloc_r+0x20>
 800a182:	6005      	str	r5, [r0, #0]
 800a184:	e7d6      	b.n	800a134 <_malloc_r+0xa8>
 800a186:	bf00      	nop
 800a188:	20001e40 	.word	0x20001e40

0800a18c <__malloc_lock>:
 800a18c:	4801      	ldr	r0, [pc, #4]	@ (800a194 <__malloc_lock+0x8>)
 800a18e:	f7ff b89c 	b.w	80092ca <__retarget_lock_acquire_recursive>
 800a192:	bf00      	nop
 800a194:	20001e38 	.word	0x20001e38

0800a198 <__malloc_unlock>:
 800a198:	4801      	ldr	r0, [pc, #4]	@ (800a1a0 <__malloc_unlock+0x8>)
 800a19a:	f7ff b897 	b.w	80092cc <__retarget_lock_release_recursive>
 800a19e:	bf00      	nop
 800a1a0:	20001e38 	.word	0x20001e38

0800a1a4 <_Balloc>:
 800a1a4:	b570      	push	{r4, r5, r6, lr}
 800a1a6:	69c6      	ldr	r6, [r0, #28]
 800a1a8:	4604      	mov	r4, r0
 800a1aa:	460d      	mov	r5, r1
 800a1ac:	b976      	cbnz	r6, 800a1cc <_Balloc+0x28>
 800a1ae:	2010      	movs	r0, #16
 800a1b0:	f7ff ff42 	bl	800a038 <malloc>
 800a1b4:	4602      	mov	r2, r0
 800a1b6:	61e0      	str	r0, [r4, #28]
 800a1b8:	b920      	cbnz	r0, 800a1c4 <_Balloc+0x20>
 800a1ba:	216b      	movs	r1, #107	@ 0x6b
 800a1bc:	4b17      	ldr	r3, [pc, #92]	@ (800a21c <_Balloc+0x78>)
 800a1be:	4818      	ldr	r0, [pc, #96]	@ (800a220 <_Balloc+0x7c>)
 800a1c0:	f000 fe1e 	bl	800ae00 <__assert_func>
 800a1c4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a1c8:	6006      	str	r6, [r0, #0]
 800a1ca:	60c6      	str	r6, [r0, #12]
 800a1cc:	69e6      	ldr	r6, [r4, #28]
 800a1ce:	68f3      	ldr	r3, [r6, #12]
 800a1d0:	b183      	cbz	r3, 800a1f4 <_Balloc+0x50>
 800a1d2:	69e3      	ldr	r3, [r4, #28]
 800a1d4:	68db      	ldr	r3, [r3, #12]
 800a1d6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a1da:	b9b8      	cbnz	r0, 800a20c <_Balloc+0x68>
 800a1dc:	2101      	movs	r1, #1
 800a1de:	fa01 f605 	lsl.w	r6, r1, r5
 800a1e2:	1d72      	adds	r2, r6, #5
 800a1e4:	4620      	mov	r0, r4
 800a1e6:	0092      	lsls	r2, r2, #2
 800a1e8:	f000 fe28 	bl	800ae3c <_calloc_r>
 800a1ec:	b160      	cbz	r0, 800a208 <_Balloc+0x64>
 800a1ee:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a1f2:	e00e      	b.n	800a212 <_Balloc+0x6e>
 800a1f4:	2221      	movs	r2, #33	@ 0x21
 800a1f6:	2104      	movs	r1, #4
 800a1f8:	4620      	mov	r0, r4
 800a1fa:	f000 fe1f 	bl	800ae3c <_calloc_r>
 800a1fe:	69e3      	ldr	r3, [r4, #28]
 800a200:	60f0      	str	r0, [r6, #12]
 800a202:	68db      	ldr	r3, [r3, #12]
 800a204:	2b00      	cmp	r3, #0
 800a206:	d1e4      	bne.n	800a1d2 <_Balloc+0x2e>
 800a208:	2000      	movs	r0, #0
 800a20a:	bd70      	pop	{r4, r5, r6, pc}
 800a20c:	6802      	ldr	r2, [r0, #0]
 800a20e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a212:	2300      	movs	r3, #0
 800a214:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a218:	e7f7      	b.n	800a20a <_Balloc+0x66>
 800a21a:	bf00      	nop
 800a21c:	0800b47f 	.word	0x0800b47f
 800a220:	0800b4ff 	.word	0x0800b4ff

0800a224 <_Bfree>:
 800a224:	b570      	push	{r4, r5, r6, lr}
 800a226:	69c6      	ldr	r6, [r0, #28]
 800a228:	4605      	mov	r5, r0
 800a22a:	460c      	mov	r4, r1
 800a22c:	b976      	cbnz	r6, 800a24c <_Bfree+0x28>
 800a22e:	2010      	movs	r0, #16
 800a230:	f7ff ff02 	bl	800a038 <malloc>
 800a234:	4602      	mov	r2, r0
 800a236:	61e8      	str	r0, [r5, #28]
 800a238:	b920      	cbnz	r0, 800a244 <_Bfree+0x20>
 800a23a:	218f      	movs	r1, #143	@ 0x8f
 800a23c:	4b08      	ldr	r3, [pc, #32]	@ (800a260 <_Bfree+0x3c>)
 800a23e:	4809      	ldr	r0, [pc, #36]	@ (800a264 <_Bfree+0x40>)
 800a240:	f000 fdde 	bl	800ae00 <__assert_func>
 800a244:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a248:	6006      	str	r6, [r0, #0]
 800a24a:	60c6      	str	r6, [r0, #12]
 800a24c:	b13c      	cbz	r4, 800a25e <_Bfree+0x3a>
 800a24e:	69eb      	ldr	r3, [r5, #28]
 800a250:	6862      	ldr	r2, [r4, #4]
 800a252:	68db      	ldr	r3, [r3, #12]
 800a254:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a258:	6021      	str	r1, [r4, #0]
 800a25a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a25e:	bd70      	pop	{r4, r5, r6, pc}
 800a260:	0800b47f 	.word	0x0800b47f
 800a264:	0800b4ff 	.word	0x0800b4ff

0800a268 <__multadd>:
 800a268:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a26c:	4607      	mov	r7, r0
 800a26e:	460c      	mov	r4, r1
 800a270:	461e      	mov	r6, r3
 800a272:	2000      	movs	r0, #0
 800a274:	690d      	ldr	r5, [r1, #16]
 800a276:	f101 0c14 	add.w	ip, r1, #20
 800a27a:	f8dc 3000 	ldr.w	r3, [ip]
 800a27e:	3001      	adds	r0, #1
 800a280:	b299      	uxth	r1, r3
 800a282:	fb02 6101 	mla	r1, r2, r1, r6
 800a286:	0c1e      	lsrs	r6, r3, #16
 800a288:	0c0b      	lsrs	r3, r1, #16
 800a28a:	fb02 3306 	mla	r3, r2, r6, r3
 800a28e:	b289      	uxth	r1, r1
 800a290:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800a294:	4285      	cmp	r5, r0
 800a296:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800a29a:	f84c 1b04 	str.w	r1, [ip], #4
 800a29e:	dcec      	bgt.n	800a27a <__multadd+0x12>
 800a2a0:	b30e      	cbz	r6, 800a2e6 <__multadd+0x7e>
 800a2a2:	68a3      	ldr	r3, [r4, #8]
 800a2a4:	42ab      	cmp	r3, r5
 800a2a6:	dc19      	bgt.n	800a2dc <__multadd+0x74>
 800a2a8:	6861      	ldr	r1, [r4, #4]
 800a2aa:	4638      	mov	r0, r7
 800a2ac:	3101      	adds	r1, #1
 800a2ae:	f7ff ff79 	bl	800a1a4 <_Balloc>
 800a2b2:	4680      	mov	r8, r0
 800a2b4:	b928      	cbnz	r0, 800a2c2 <__multadd+0x5a>
 800a2b6:	4602      	mov	r2, r0
 800a2b8:	21ba      	movs	r1, #186	@ 0xba
 800a2ba:	4b0c      	ldr	r3, [pc, #48]	@ (800a2ec <__multadd+0x84>)
 800a2bc:	480c      	ldr	r0, [pc, #48]	@ (800a2f0 <__multadd+0x88>)
 800a2be:	f000 fd9f 	bl	800ae00 <__assert_func>
 800a2c2:	6922      	ldr	r2, [r4, #16]
 800a2c4:	f104 010c 	add.w	r1, r4, #12
 800a2c8:	3202      	adds	r2, #2
 800a2ca:	0092      	lsls	r2, r2, #2
 800a2cc:	300c      	adds	r0, #12
 800a2ce:	f7ff f80c 	bl	80092ea <memcpy>
 800a2d2:	4621      	mov	r1, r4
 800a2d4:	4638      	mov	r0, r7
 800a2d6:	f7ff ffa5 	bl	800a224 <_Bfree>
 800a2da:	4644      	mov	r4, r8
 800a2dc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a2e0:	3501      	adds	r5, #1
 800a2e2:	615e      	str	r6, [r3, #20]
 800a2e4:	6125      	str	r5, [r4, #16]
 800a2e6:	4620      	mov	r0, r4
 800a2e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a2ec:	0800b4ee 	.word	0x0800b4ee
 800a2f0:	0800b4ff 	.word	0x0800b4ff

0800a2f4 <__hi0bits>:
 800a2f4:	4603      	mov	r3, r0
 800a2f6:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800a2fa:	bf3a      	itte	cc
 800a2fc:	0403      	lslcc	r3, r0, #16
 800a2fe:	2010      	movcc	r0, #16
 800a300:	2000      	movcs	r0, #0
 800a302:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800a306:	bf3c      	itt	cc
 800a308:	021b      	lslcc	r3, r3, #8
 800a30a:	3008      	addcc	r0, #8
 800a30c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a310:	bf3c      	itt	cc
 800a312:	011b      	lslcc	r3, r3, #4
 800a314:	3004      	addcc	r0, #4
 800a316:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a31a:	bf3c      	itt	cc
 800a31c:	009b      	lslcc	r3, r3, #2
 800a31e:	3002      	addcc	r0, #2
 800a320:	2b00      	cmp	r3, #0
 800a322:	db05      	blt.n	800a330 <__hi0bits+0x3c>
 800a324:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800a328:	f100 0001 	add.w	r0, r0, #1
 800a32c:	bf08      	it	eq
 800a32e:	2020      	moveq	r0, #32
 800a330:	4770      	bx	lr

0800a332 <__lo0bits>:
 800a332:	6803      	ldr	r3, [r0, #0]
 800a334:	4602      	mov	r2, r0
 800a336:	f013 0007 	ands.w	r0, r3, #7
 800a33a:	d00b      	beq.n	800a354 <__lo0bits+0x22>
 800a33c:	07d9      	lsls	r1, r3, #31
 800a33e:	d421      	bmi.n	800a384 <__lo0bits+0x52>
 800a340:	0798      	lsls	r0, r3, #30
 800a342:	bf49      	itett	mi
 800a344:	085b      	lsrmi	r3, r3, #1
 800a346:	089b      	lsrpl	r3, r3, #2
 800a348:	2001      	movmi	r0, #1
 800a34a:	6013      	strmi	r3, [r2, #0]
 800a34c:	bf5c      	itt	pl
 800a34e:	2002      	movpl	r0, #2
 800a350:	6013      	strpl	r3, [r2, #0]
 800a352:	4770      	bx	lr
 800a354:	b299      	uxth	r1, r3
 800a356:	b909      	cbnz	r1, 800a35c <__lo0bits+0x2a>
 800a358:	2010      	movs	r0, #16
 800a35a:	0c1b      	lsrs	r3, r3, #16
 800a35c:	b2d9      	uxtb	r1, r3
 800a35e:	b909      	cbnz	r1, 800a364 <__lo0bits+0x32>
 800a360:	3008      	adds	r0, #8
 800a362:	0a1b      	lsrs	r3, r3, #8
 800a364:	0719      	lsls	r1, r3, #28
 800a366:	bf04      	itt	eq
 800a368:	091b      	lsreq	r3, r3, #4
 800a36a:	3004      	addeq	r0, #4
 800a36c:	0799      	lsls	r1, r3, #30
 800a36e:	bf04      	itt	eq
 800a370:	089b      	lsreq	r3, r3, #2
 800a372:	3002      	addeq	r0, #2
 800a374:	07d9      	lsls	r1, r3, #31
 800a376:	d403      	bmi.n	800a380 <__lo0bits+0x4e>
 800a378:	085b      	lsrs	r3, r3, #1
 800a37a:	f100 0001 	add.w	r0, r0, #1
 800a37e:	d003      	beq.n	800a388 <__lo0bits+0x56>
 800a380:	6013      	str	r3, [r2, #0]
 800a382:	4770      	bx	lr
 800a384:	2000      	movs	r0, #0
 800a386:	4770      	bx	lr
 800a388:	2020      	movs	r0, #32
 800a38a:	4770      	bx	lr

0800a38c <__i2b>:
 800a38c:	b510      	push	{r4, lr}
 800a38e:	460c      	mov	r4, r1
 800a390:	2101      	movs	r1, #1
 800a392:	f7ff ff07 	bl	800a1a4 <_Balloc>
 800a396:	4602      	mov	r2, r0
 800a398:	b928      	cbnz	r0, 800a3a6 <__i2b+0x1a>
 800a39a:	f240 1145 	movw	r1, #325	@ 0x145
 800a39e:	4b04      	ldr	r3, [pc, #16]	@ (800a3b0 <__i2b+0x24>)
 800a3a0:	4804      	ldr	r0, [pc, #16]	@ (800a3b4 <__i2b+0x28>)
 800a3a2:	f000 fd2d 	bl	800ae00 <__assert_func>
 800a3a6:	2301      	movs	r3, #1
 800a3a8:	6144      	str	r4, [r0, #20]
 800a3aa:	6103      	str	r3, [r0, #16]
 800a3ac:	bd10      	pop	{r4, pc}
 800a3ae:	bf00      	nop
 800a3b0:	0800b4ee 	.word	0x0800b4ee
 800a3b4:	0800b4ff 	.word	0x0800b4ff

0800a3b8 <__multiply>:
 800a3b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a3bc:	4614      	mov	r4, r2
 800a3be:	690a      	ldr	r2, [r1, #16]
 800a3c0:	6923      	ldr	r3, [r4, #16]
 800a3c2:	460f      	mov	r7, r1
 800a3c4:	429a      	cmp	r2, r3
 800a3c6:	bfa2      	ittt	ge
 800a3c8:	4623      	movge	r3, r4
 800a3ca:	460c      	movge	r4, r1
 800a3cc:	461f      	movge	r7, r3
 800a3ce:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800a3d2:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800a3d6:	68a3      	ldr	r3, [r4, #8]
 800a3d8:	6861      	ldr	r1, [r4, #4]
 800a3da:	eb0a 0609 	add.w	r6, sl, r9
 800a3de:	42b3      	cmp	r3, r6
 800a3e0:	b085      	sub	sp, #20
 800a3e2:	bfb8      	it	lt
 800a3e4:	3101      	addlt	r1, #1
 800a3e6:	f7ff fedd 	bl	800a1a4 <_Balloc>
 800a3ea:	b930      	cbnz	r0, 800a3fa <__multiply+0x42>
 800a3ec:	4602      	mov	r2, r0
 800a3ee:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800a3f2:	4b43      	ldr	r3, [pc, #268]	@ (800a500 <__multiply+0x148>)
 800a3f4:	4843      	ldr	r0, [pc, #268]	@ (800a504 <__multiply+0x14c>)
 800a3f6:	f000 fd03 	bl	800ae00 <__assert_func>
 800a3fa:	f100 0514 	add.w	r5, r0, #20
 800a3fe:	462b      	mov	r3, r5
 800a400:	2200      	movs	r2, #0
 800a402:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800a406:	4543      	cmp	r3, r8
 800a408:	d321      	bcc.n	800a44e <__multiply+0x96>
 800a40a:	f107 0114 	add.w	r1, r7, #20
 800a40e:	f104 0214 	add.w	r2, r4, #20
 800a412:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800a416:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800a41a:	9302      	str	r3, [sp, #8]
 800a41c:	1b13      	subs	r3, r2, r4
 800a41e:	3b15      	subs	r3, #21
 800a420:	f023 0303 	bic.w	r3, r3, #3
 800a424:	3304      	adds	r3, #4
 800a426:	f104 0715 	add.w	r7, r4, #21
 800a42a:	42ba      	cmp	r2, r7
 800a42c:	bf38      	it	cc
 800a42e:	2304      	movcc	r3, #4
 800a430:	9301      	str	r3, [sp, #4]
 800a432:	9b02      	ldr	r3, [sp, #8]
 800a434:	9103      	str	r1, [sp, #12]
 800a436:	428b      	cmp	r3, r1
 800a438:	d80c      	bhi.n	800a454 <__multiply+0x9c>
 800a43a:	2e00      	cmp	r6, #0
 800a43c:	dd03      	ble.n	800a446 <__multiply+0x8e>
 800a43e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800a442:	2b00      	cmp	r3, #0
 800a444:	d05a      	beq.n	800a4fc <__multiply+0x144>
 800a446:	6106      	str	r6, [r0, #16]
 800a448:	b005      	add	sp, #20
 800a44a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a44e:	f843 2b04 	str.w	r2, [r3], #4
 800a452:	e7d8      	b.n	800a406 <__multiply+0x4e>
 800a454:	f8b1 a000 	ldrh.w	sl, [r1]
 800a458:	f1ba 0f00 	cmp.w	sl, #0
 800a45c:	d023      	beq.n	800a4a6 <__multiply+0xee>
 800a45e:	46a9      	mov	r9, r5
 800a460:	f04f 0c00 	mov.w	ip, #0
 800a464:	f104 0e14 	add.w	lr, r4, #20
 800a468:	f85e 7b04 	ldr.w	r7, [lr], #4
 800a46c:	f8d9 3000 	ldr.w	r3, [r9]
 800a470:	fa1f fb87 	uxth.w	fp, r7
 800a474:	b29b      	uxth	r3, r3
 800a476:	fb0a 330b 	mla	r3, sl, fp, r3
 800a47a:	4463      	add	r3, ip
 800a47c:	f8d9 c000 	ldr.w	ip, [r9]
 800a480:	0c3f      	lsrs	r7, r7, #16
 800a482:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800a486:	fb0a c707 	mla	r7, sl, r7, ip
 800a48a:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800a48e:	b29b      	uxth	r3, r3
 800a490:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800a494:	4572      	cmp	r2, lr
 800a496:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800a49a:	f849 3b04 	str.w	r3, [r9], #4
 800a49e:	d8e3      	bhi.n	800a468 <__multiply+0xb0>
 800a4a0:	9b01      	ldr	r3, [sp, #4]
 800a4a2:	f845 c003 	str.w	ip, [r5, r3]
 800a4a6:	9b03      	ldr	r3, [sp, #12]
 800a4a8:	3104      	adds	r1, #4
 800a4aa:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800a4ae:	f1b9 0f00 	cmp.w	r9, #0
 800a4b2:	d021      	beq.n	800a4f8 <__multiply+0x140>
 800a4b4:	46ae      	mov	lr, r5
 800a4b6:	f04f 0a00 	mov.w	sl, #0
 800a4ba:	682b      	ldr	r3, [r5, #0]
 800a4bc:	f104 0c14 	add.w	ip, r4, #20
 800a4c0:	f8bc b000 	ldrh.w	fp, [ip]
 800a4c4:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800a4c8:	b29b      	uxth	r3, r3
 800a4ca:	fb09 770b 	mla	r7, r9, fp, r7
 800a4ce:	4457      	add	r7, sl
 800a4d0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800a4d4:	f84e 3b04 	str.w	r3, [lr], #4
 800a4d8:	f85c 3b04 	ldr.w	r3, [ip], #4
 800a4dc:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a4e0:	f8be 3000 	ldrh.w	r3, [lr]
 800a4e4:	4562      	cmp	r2, ip
 800a4e6:	fb09 330a 	mla	r3, r9, sl, r3
 800a4ea:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800a4ee:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a4f2:	d8e5      	bhi.n	800a4c0 <__multiply+0x108>
 800a4f4:	9f01      	ldr	r7, [sp, #4]
 800a4f6:	51eb      	str	r3, [r5, r7]
 800a4f8:	3504      	adds	r5, #4
 800a4fa:	e79a      	b.n	800a432 <__multiply+0x7a>
 800a4fc:	3e01      	subs	r6, #1
 800a4fe:	e79c      	b.n	800a43a <__multiply+0x82>
 800a500:	0800b4ee 	.word	0x0800b4ee
 800a504:	0800b4ff 	.word	0x0800b4ff

0800a508 <__pow5mult>:
 800a508:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a50c:	4615      	mov	r5, r2
 800a50e:	f012 0203 	ands.w	r2, r2, #3
 800a512:	4607      	mov	r7, r0
 800a514:	460e      	mov	r6, r1
 800a516:	d007      	beq.n	800a528 <__pow5mult+0x20>
 800a518:	4c25      	ldr	r4, [pc, #148]	@ (800a5b0 <__pow5mult+0xa8>)
 800a51a:	3a01      	subs	r2, #1
 800a51c:	2300      	movs	r3, #0
 800a51e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a522:	f7ff fea1 	bl	800a268 <__multadd>
 800a526:	4606      	mov	r6, r0
 800a528:	10ad      	asrs	r5, r5, #2
 800a52a:	d03d      	beq.n	800a5a8 <__pow5mult+0xa0>
 800a52c:	69fc      	ldr	r4, [r7, #28]
 800a52e:	b97c      	cbnz	r4, 800a550 <__pow5mult+0x48>
 800a530:	2010      	movs	r0, #16
 800a532:	f7ff fd81 	bl	800a038 <malloc>
 800a536:	4602      	mov	r2, r0
 800a538:	61f8      	str	r0, [r7, #28]
 800a53a:	b928      	cbnz	r0, 800a548 <__pow5mult+0x40>
 800a53c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800a540:	4b1c      	ldr	r3, [pc, #112]	@ (800a5b4 <__pow5mult+0xac>)
 800a542:	481d      	ldr	r0, [pc, #116]	@ (800a5b8 <__pow5mult+0xb0>)
 800a544:	f000 fc5c 	bl	800ae00 <__assert_func>
 800a548:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a54c:	6004      	str	r4, [r0, #0]
 800a54e:	60c4      	str	r4, [r0, #12]
 800a550:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800a554:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a558:	b94c      	cbnz	r4, 800a56e <__pow5mult+0x66>
 800a55a:	f240 2171 	movw	r1, #625	@ 0x271
 800a55e:	4638      	mov	r0, r7
 800a560:	f7ff ff14 	bl	800a38c <__i2b>
 800a564:	2300      	movs	r3, #0
 800a566:	4604      	mov	r4, r0
 800a568:	f8c8 0008 	str.w	r0, [r8, #8]
 800a56c:	6003      	str	r3, [r0, #0]
 800a56e:	f04f 0900 	mov.w	r9, #0
 800a572:	07eb      	lsls	r3, r5, #31
 800a574:	d50a      	bpl.n	800a58c <__pow5mult+0x84>
 800a576:	4631      	mov	r1, r6
 800a578:	4622      	mov	r2, r4
 800a57a:	4638      	mov	r0, r7
 800a57c:	f7ff ff1c 	bl	800a3b8 <__multiply>
 800a580:	4680      	mov	r8, r0
 800a582:	4631      	mov	r1, r6
 800a584:	4638      	mov	r0, r7
 800a586:	f7ff fe4d 	bl	800a224 <_Bfree>
 800a58a:	4646      	mov	r6, r8
 800a58c:	106d      	asrs	r5, r5, #1
 800a58e:	d00b      	beq.n	800a5a8 <__pow5mult+0xa0>
 800a590:	6820      	ldr	r0, [r4, #0]
 800a592:	b938      	cbnz	r0, 800a5a4 <__pow5mult+0x9c>
 800a594:	4622      	mov	r2, r4
 800a596:	4621      	mov	r1, r4
 800a598:	4638      	mov	r0, r7
 800a59a:	f7ff ff0d 	bl	800a3b8 <__multiply>
 800a59e:	6020      	str	r0, [r4, #0]
 800a5a0:	f8c0 9000 	str.w	r9, [r0]
 800a5a4:	4604      	mov	r4, r0
 800a5a6:	e7e4      	b.n	800a572 <__pow5mult+0x6a>
 800a5a8:	4630      	mov	r0, r6
 800a5aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a5ae:	bf00      	nop
 800a5b0:	0800b558 	.word	0x0800b558
 800a5b4:	0800b47f 	.word	0x0800b47f
 800a5b8:	0800b4ff 	.word	0x0800b4ff

0800a5bc <__lshift>:
 800a5bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a5c0:	460c      	mov	r4, r1
 800a5c2:	4607      	mov	r7, r0
 800a5c4:	4691      	mov	r9, r2
 800a5c6:	6923      	ldr	r3, [r4, #16]
 800a5c8:	6849      	ldr	r1, [r1, #4]
 800a5ca:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a5ce:	68a3      	ldr	r3, [r4, #8]
 800a5d0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a5d4:	f108 0601 	add.w	r6, r8, #1
 800a5d8:	42b3      	cmp	r3, r6
 800a5da:	db0b      	blt.n	800a5f4 <__lshift+0x38>
 800a5dc:	4638      	mov	r0, r7
 800a5de:	f7ff fde1 	bl	800a1a4 <_Balloc>
 800a5e2:	4605      	mov	r5, r0
 800a5e4:	b948      	cbnz	r0, 800a5fa <__lshift+0x3e>
 800a5e6:	4602      	mov	r2, r0
 800a5e8:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800a5ec:	4b27      	ldr	r3, [pc, #156]	@ (800a68c <__lshift+0xd0>)
 800a5ee:	4828      	ldr	r0, [pc, #160]	@ (800a690 <__lshift+0xd4>)
 800a5f0:	f000 fc06 	bl	800ae00 <__assert_func>
 800a5f4:	3101      	adds	r1, #1
 800a5f6:	005b      	lsls	r3, r3, #1
 800a5f8:	e7ee      	b.n	800a5d8 <__lshift+0x1c>
 800a5fa:	2300      	movs	r3, #0
 800a5fc:	f100 0114 	add.w	r1, r0, #20
 800a600:	f100 0210 	add.w	r2, r0, #16
 800a604:	4618      	mov	r0, r3
 800a606:	4553      	cmp	r3, sl
 800a608:	db33      	blt.n	800a672 <__lshift+0xb6>
 800a60a:	6920      	ldr	r0, [r4, #16]
 800a60c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a610:	f104 0314 	add.w	r3, r4, #20
 800a614:	f019 091f 	ands.w	r9, r9, #31
 800a618:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a61c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800a620:	d02b      	beq.n	800a67a <__lshift+0xbe>
 800a622:	468a      	mov	sl, r1
 800a624:	2200      	movs	r2, #0
 800a626:	f1c9 0e20 	rsb	lr, r9, #32
 800a62a:	6818      	ldr	r0, [r3, #0]
 800a62c:	fa00 f009 	lsl.w	r0, r0, r9
 800a630:	4310      	orrs	r0, r2
 800a632:	f84a 0b04 	str.w	r0, [sl], #4
 800a636:	f853 2b04 	ldr.w	r2, [r3], #4
 800a63a:	459c      	cmp	ip, r3
 800a63c:	fa22 f20e 	lsr.w	r2, r2, lr
 800a640:	d8f3      	bhi.n	800a62a <__lshift+0x6e>
 800a642:	ebac 0304 	sub.w	r3, ip, r4
 800a646:	3b15      	subs	r3, #21
 800a648:	f023 0303 	bic.w	r3, r3, #3
 800a64c:	3304      	adds	r3, #4
 800a64e:	f104 0015 	add.w	r0, r4, #21
 800a652:	4584      	cmp	ip, r0
 800a654:	bf38      	it	cc
 800a656:	2304      	movcc	r3, #4
 800a658:	50ca      	str	r2, [r1, r3]
 800a65a:	b10a      	cbz	r2, 800a660 <__lshift+0xa4>
 800a65c:	f108 0602 	add.w	r6, r8, #2
 800a660:	3e01      	subs	r6, #1
 800a662:	4638      	mov	r0, r7
 800a664:	4621      	mov	r1, r4
 800a666:	612e      	str	r6, [r5, #16]
 800a668:	f7ff fddc 	bl	800a224 <_Bfree>
 800a66c:	4628      	mov	r0, r5
 800a66e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a672:	f842 0f04 	str.w	r0, [r2, #4]!
 800a676:	3301      	adds	r3, #1
 800a678:	e7c5      	b.n	800a606 <__lshift+0x4a>
 800a67a:	3904      	subs	r1, #4
 800a67c:	f853 2b04 	ldr.w	r2, [r3], #4
 800a680:	459c      	cmp	ip, r3
 800a682:	f841 2f04 	str.w	r2, [r1, #4]!
 800a686:	d8f9      	bhi.n	800a67c <__lshift+0xc0>
 800a688:	e7ea      	b.n	800a660 <__lshift+0xa4>
 800a68a:	bf00      	nop
 800a68c:	0800b4ee 	.word	0x0800b4ee
 800a690:	0800b4ff 	.word	0x0800b4ff

0800a694 <__mcmp>:
 800a694:	4603      	mov	r3, r0
 800a696:	690a      	ldr	r2, [r1, #16]
 800a698:	6900      	ldr	r0, [r0, #16]
 800a69a:	b530      	push	{r4, r5, lr}
 800a69c:	1a80      	subs	r0, r0, r2
 800a69e:	d10e      	bne.n	800a6be <__mcmp+0x2a>
 800a6a0:	3314      	adds	r3, #20
 800a6a2:	3114      	adds	r1, #20
 800a6a4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800a6a8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800a6ac:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800a6b0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800a6b4:	4295      	cmp	r5, r2
 800a6b6:	d003      	beq.n	800a6c0 <__mcmp+0x2c>
 800a6b8:	d205      	bcs.n	800a6c6 <__mcmp+0x32>
 800a6ba:	f04f 30ff 	mov.w	r0, #4294967295
 800a6be:	bd30      	pop	{r4, r5, pc}
 800a6c0:	42a3      	cmp	r3, r4
 800a6c2:	d3f3      	bcc.n	800a6ac <__mcmp+0x18>
 800a6c4:	e7fb      	b.n	800a6be <__mcmp+0x2a>
 800a6c6:	2001      	movs	r0, #1
 800a6c8:	e7f9      	b.n	800a6be <__mcmp+0x2a>
	...

0800a6cc <__mdiff>:
 800a6cc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a6d0:	4689      	mov	r9, r1
 800a6d2:	4606      	mov	r6, r0
 800a6d4:	4611      	mov	r1, r2
 800a6d6:	4648      	mov	r0, r9
 800a6d8:	4614      	mov	r4, r2
 800a6da:	f7ff ffdb 	bl	800a694 <__mcmp>
 800a6de:	1e05      	subs	r5, r0, #0
 800a6e0:	d112      	bne.n	800a708 <__mdiff+0x3c>
 800a6e2:	4629      	mov	r1, r5
 800a6e4:	4630      	mov	r0, r6
 800a6e6:	f7ff fd5d 	bl	800a1a4 <_Balloc>
 800a6ea:	4602      	mov	r2, r0
 800a6ec:	b928      	cbnz	r0, 800a6fa <__mdiff+0x2e>
 800a6ee:	f240 2137 	movw	r1, #567	@ 0x237
 800a6f2:	4b3e      	ldr	r3, [pc, #248]	@ (800a7ec <__mdiff+0x120>)
 800a6f4:	483e      	ldr	r0, [pc, #248]	@ (800a7f0 <__mdiff+0x124>)
 800a6f6:	f000 fb83 	bl	800ae00 <__assert_func>
 800a6fa:	2301      	movs	r3, #1
 800a6fc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a700:	4610      	mov	r0, r2
 800a702:	b003      	add	sp, #12
 800a704:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a708:	bfbc      	itt	lt
 800a70a:	464b      	movlt	r3, r9
 800a70c:	46a1      	movlt	r9, r4
 800a70e:	4630      	mov	r0, r6
 800a710:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800a714:	bfba      	itte	lt
 800a716:	461c      	movlt	r4, r3
 800a718:	2501      	movlt	r5, #1
 800a71a:	2500      	movge	r5, #0
 800a71c:	f7ff fd42 	bl	800a1a4 <_Balloc>
 800a720:	4602      	mov	r2, r0
 800a722:	b918      	cbnz	r0, 800a72c <__mdiff+0x60>
 800a724:	f240 2145 	movw	r1, #581	@ 0x245
 800a728:	4b30      	ldr	r3, [pc, #192]	@ (800a7ec <__mdiff+0x120>)
 800a72a:	e7e3      	b.n	800a6f4 <__mdiff+0x28>
 800a72c:	f100 0b14 	add.w	fp, r0, #20
 800a730:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800a734:	f109 0310 	add.w	r3, r9, #16
 800a738:	60c5      	str	r5, [r0, #12]
 800a73a:	f04f 0c00 	mov.w	ip, #0
 800a73e:	f109 0514 	add.w	r5, r9, #20
 800a742:	46d9      	mov	r9, fp
 800a744:	6926      	ldr	r6, [r4, #16]
 800a746:	f104 0e14 	add.w	lr, r4, #20
 800a74a:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800a74e:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800a752:	9301      	str	r3, [sp, #4]
 800a754:	9b01      	ldr	r3, [sp, #4]
 800a756:	f85e 0b04 	ldr.w	r0, [lr], #4
 800a75a:	f853 af04 	ldr.w	sl, [r3, #4]!
 800a75e:	b281      	uxth	r1, r0
 800a760:	9301      	str	r3, [sp, #4]
 800a762:	fa1f f38a 	uxth.w	r3, sl
 800a766:	1a5b      	subs	r3, r3, r1
 800a768:	0c00      	lsrs	r0, r0, #16
 800a76a:	4463      	add	r3, ip
 800a76c:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800a770:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800a774:	b29b      	uxth	r3, r3
 800a776:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800a77a:	4576      	cmp	r6, lr
 800a77c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800a780:	f849 3b04 	str.w	r3, [r9], #4
 800a784:	d8e6      	bhi.n	800a754 <__mdiff+0x88>
 800a786:	1b33      	subs	r3, r6, r4
 800a788:	3b15      	subs	r3, #21
 800a78a:	f023 0303 	bic.w	r3, r3, #3
 800a78e:	3415      	adds	r4, #21
 800a790:	3304      	adds	r3, #4
 800a792:	42a6      	cmp	r6, r4
 800a794:	bf38      	it	cc
 800a796:	2304      	movcc	r3, #4
 800a798:	441d      	add	r5, r3
 800a79a:	445b      	add	r3, fp
 800a79c:	461e      	mov	r6, r3
 800a79e:	462c      	mov	r4, r5
 800a7a0:	4544      	cmp	r4, r8
 800a7a2:	d30e      	bcc.n	800a7c2 <__mdiff+0xf6>
 800a7a4:	f108 0103 	add.w	r1, r8, #3
 800a7a8:	1b49      	subs	r1, r1, r5
 800a7aa:	f021 0103 	bic.w	r1, r1, #3
 800a7ae:	3d03      	subs	r5, #3
 800a7b0:	45a8      	cmp	r8, r5
 800a7b2:	bf38      	it	cc
 800a7b4:	2100      	movcc	r1, #0
 800a7b6:	440b      	add	r3, r1
 800a7b8:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a7bc:	b199      	cbz	r1, 800a7e6 <__mdiff+0x11a>
 800a7be:	6117      	str	r7, [r2, #16]
 800a7c0:	e79e      	b.n	800a700 <__mdiff+0x34>
 800a7c2:	46e6      	mov	lr, ip
 800a7c4:	f854 1b04 	ldr.w	r1, [r4], #4
 800a7c8:	fa1f fc81 	uxth.w	ip, r1
 800a7cc:	44f4      	add	ip, lr
 800a7ce:	0c08      	lsrs	r0, r1, #16
 800a7d0:	4471      	add	r1, lr
 800a7d2:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800a7d6:	b289      	uxth	r1, r1
 800a7d8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800a7dc:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800a7e0:	f846 1b04 	str.w	r1, [r6], #4
 800a7e4:	e7dc      	b.n	800a7a0 <__mdiff+0xd4>
 800a7e6:	3f01      	subs	r7, #1
 800a7e8:	e7e6      	b.n	800a7b8 <__mdiff+0xec>
 800a7ea:	bf00      	nop
 800a7ec:	0800b4ee 	.word	0x0800b4ee
 800a7f0:	0800b4ff 	.word	0x0800b4ff

0800a7f4 <__d2b>:
 800a7f4:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 800a7f8:	2101      	movs	r1, #1
 800a7fa:	4690      	mov	r8, r2
 800a7fc:	4699      	mov	r9, r3
 800a7fe:	9e08      	ldr	r6, [sp, #32]
 800a800:	f7ff fcd0 	bl	800a1a4 <_Balloc>
 800a804:	4604      	mov	r4, r0
 800a806:	b930      	cbnz	r0, 800a816 <__d2b+0x22>
 800a808:	4602      	mov	r2, r0
 800a80a:	f240 310f 	movw	r1, #783	@ 0x30f
 800a80e:	4b23      	ldr	r3, [pc, #140]	@ (800a89c <__d2b+0xa8>)
 800a810:	4823      	ldr	r0, [pc, #140]	@ (800a8a0 <__d2b+0xac>)
 800a812:	f000 faf5 	bl	800ae00 <__assert_func>
 800a816:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800a81a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a81e:	b10d      	cbz	r5, 800a824 <__d2b+0x30>
 800a820:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800a824:	9301      	str	r3, [sp, #4]
 800a826:	f1b8 0300 	subs.w	r3, r8, #0
 800a82a:	d024      	beq.n	800a876 <__d2b+0x82>
 800a82c:	4668      	mov	r0, sp
 800a82e:	9300      	str	r3, [sp, #0]
 800a830:	f7ff fd7f 	bl	800a332 <__lo0bits>
 800a834:	e9dd 1200 	ldrd	r1, r2, [sp]
 800a838:	b1d8      	cbz	r0, 800a872 <__d2b+0x7e>
 800a83a:	f1c0 0320 	rsb	r3, r0, #32
 800a83e:	fa02 f303 	lsl.w	r3, r2, r3
 800a842:	430b      	orrs	r3, r1
 800a844:	40c2      	lsrs	r2, r0
 800a846:	6163      	str	r3, [r4, #20]
 800a848:	9201      	str	r2, [sp, #4]
 800a84a:	9b01      	ldr	r3, [sp, #4]
 800a84c:	2b00      	cmp	r3, #0
 800a84e:	bf0c      	ite	eq
 800a850:	2201      	moveq	r2, #1
 800a852:	2202      	movne	r2, #2
 800a854:	61a3      	str	r3, [r4, #24]
 800a856:	6122      	str	r2, [r4, #16]
 800a858:	b1ad      	cbz	r5, 800a886 <__d2b+0x92>
 800a85a:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800a85e:	4405      	add	r5, r0
 800a860:	6035      	str	r5, [r6, #0]
 800a862:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800a866:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a868:	6018      	str	r0, [r3, #0]
 800a86a:	4620      	mov	r0, r4
 800a86c:	b002      	add	sp, #8
 800a86e:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 800a872:	6161      	str	r1, [r4, #20]
 800a874:	e7e9      	b.n	800a84a <__d2b+0x56>
 800a876:	a801      	add	r0, sp, #4
 800a878:	f7ff fd5b 	bl	800a332 <__lo0bits>
 800a87c:	9b01      	ldr	r3, [sp, #4]
 800a87e:	2201      	movs	r2, #1
 800a880:	6163      	str	r3, [r4, #20]
 800a882:	3020      	adds	r0, #32
 800a884:	e7e7      	b.n	800a856 <__d2b+0x62>
 800a886:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800a88a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a88e:	6030      	str	r0, [r6, #0]
 800a890:	6918      	ldr	r0, [r3, #16]
 800a892:	f7ff fd2f 	bl	800a2f4 <__hi0bits>
 800a896:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a89a:	e7e4      	b.n	800a866 <__d2b+0x72>
 800a89c:	0800b4ee 	.word	0x0800b4ee
 800a8a0:	0800b4ff 	.word	0x0800b4ff

0800a8a4 <__ssputs_r>:
 800a8a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a8a8:	461f      	mov	r7, r3
 800a8aa:	688e      	ldr	r6, [r1, #8]
 800a8ac:	4682      	mov	sl, r0
 800a8ae:	42be      	cmp	r6, r7
 800a8b0:	460c      	mov	r4, r1
 800a8b2:	4690      	mov	r8, r2
 800a8b4:	680b      	ldr	r3, [r1, #0]
 800a8b6:	d82d      	bhi.n	800a914 <__ssputs_r+0x70>
 800a8b8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a8bc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800a8c0:	d026      	beq.n	800a910 <__ssputs_r+0x6c>
 800a8c2:	6965      	ldr	r5, [r4, #20]
 800a8c4:	6909      	ldr	r1, [r1, #16]
 800a8c6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a8ca:	eba3 0901 	sub.w	r9, r3, r1
 800a8ce:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a8d2:	1c7b      	adds	r3, r7, #1
 800a8d4:	444b      	add	r3, r9
 800a8d6:	106d      	asrs	r5, r5, #1
 800a8d8:	429d      	cmp	r5, r3
 800a8da:	bf38      	it	cc
 800a8dc:	461d      	movcc	r5, r3
 800a8de:	0553      	lsls	r3, r2, #21
 800a8e0:	d527      	bpl.n	800a932 <__ssputs_r+0x8e>
 800a8e2:	4629      	mov	r1, r5
 800a8e4:	f7ff fbd2 	bl	800a08c <_malloc_r>
 800a8e8:	4606      	mov	r6, r0
 800a8ea:	b360      	cbz	r0, 800a946 <__ssputs_r+0xa2>
 800a8ec:	464a      	mov	r2, r9
 800a8ee:	6921      	ldr	r1, [r4, #16]
 800a8f0:	f7fe fcfb 	bl	80092ea <memcpy>
 800a8f4:	89a3      	ldrh	r3, [r4, #12]
 800a8f6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800a8fa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a8fe:	81a3      	strh	r3, [r4, #12]
 800a900:	6126      	str	r6, [r4, #16]
 800a902:	444e      	add	r6, r9
 800a904:	6026      	str	r6, [r4, #0]
 800a906:	463e      	mov	r6, r7
 800a908:	6165      	str	r5, [r4, #20]
 800a90a:	eba5 0509 	sub.w	r5, r5, r9
 800a90e:	60a5      	str	r5, [r4, #8]
 800a910:	42be      	cmp	r6, r7
 800a912:	d900      	bls.n	800a916 <__ssputs_r+0x72>
 800a914:	463e      	mov	r6, r7
 800a916:	4632      	mov	r2, r6
 800a918:	4641      	mov	r1, r8
 800a91a:	6820      	ldr	r0, [r4, #0]
 800a91c:	f000 fa23 	bl	800ad66 <memmove>
 800a920:	2000      	movs	r0, #0
 800a922:	68a3      	ldr	r3, [r4, #8]
 800a924:	1b9b      	subs	r3, r3, r6
 800a926:	60a3      	str	r3, [r4, #8]
 800a928:	6823      	ldr	r3, [r4, #0]
 800a92a:	4433      	add	r3, r6
 800a92c:	6023      	str	r3, [r4, #0]
 800a92e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a932:	462a      	mov	r2, r5
 800a934:	f000 faa8 	bl	800ae88 <_realloc_r>
 800a938:	4606      	mov	r6, r0
 800a93a:	2800      	cmp	r0, #0
 800a93c:	d1e0      	bne.n	800a900 <__ssputs_r+0x5c>
 800a93e:	4650      	mov	r0, sl
 800a940:	6921      	ldr	r1, [r4, #16]
 800a942:	f7ff fb31 	bl	8009fa8 <_free_r>
 800a946:	230c      	movs	r3, #12
 800a948:	f8ca 3000 	str.w	r3, [sl]
 800a94c:	89a3      	ldrh	r3, [r4, #12]
 800a94e:	f04f 30ff 	mov.w	r0, #4294967295
 800a952:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a956:	81a3      	strh	r3, [r4, #12]
 800a958:	e7e9      	b.n	800a92e <__ssputs_r+0x8a>
	...

0800a95c <_svfiprintf_r>:
 800a95c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a960:	4698      	mov	r8, r3
 800a962:	898b      	ldrh	r3, [r1, #12]
 800a964:	4607      	mov	r7, r0
 800a966:	061b      	lsls	r3, r3, #24
 800a968:	460d      	mov	r5, r1
 800a96a:	4614      	mov	r4, r2
 800a96c:	b09d      	sub	sp, #116	@ 0x74
 800a96e:	d510      	bpl.n	800a992 <_svfiprintf_r+0x36>
 800a970:	690b      	ldr	r3, [r1, #16]
 800a972:	b973      	cbnz	r3, 800a992 <_svfiprintf_r+0x36>
 800a974:	2140      	movs	r1, #64	@ 0x40
 800a976:	f7ff fb89 	bl	800a08c <_malloc_r>
 800a97a:	6028      	str	r0, [r5, #0]
 800a97c:	6128      	str	r0, [r5, #16]
 800a97e:	b930      	cbnz	r0, 800a98e <_svfiprintf_r+0x32>
 800a980:	230c      	movs	r3, #12
 800a982:	603b      	str	r3, [r7, #0]
 800a984:	f04f 30ff 	mov.w	r0, #4294967295
 800a988:	b01d      	add	sp, #116	@ 0x74
 800a98a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a98e:	2340      	movs	r3, #64	@ 0x40
 800a990:	616b      	str	r3, [r5, #20]
 800a992:	2300      	movs	r3, #0
 800a994:	9309      	str	r3, [sp, #36]	@ 0x24
 800a996:	2320      	movs	r3, #32
 800a998:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a99c:	2330      	movs	r3, #48	@ 0x30
 800a99e:	f04f 0901 	mov.w	r9, #1
 800a9a2:	f8cd 800c 	str.w	r8, [sp, #12]
 800a9a6:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 800ab40 <_svfiprintf_r+0x1e4>
 800a9aa:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a9ae:	4623      	mov	r3, r4
 800a9b0:	469a      	mov	sl, r3
 800a9b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a9b6:	b10a      	cbz	r2, 800a9bc <_svfiprintf_r+0x60>
 800a9b8:	2a25      	cmp	r2, #37	@ 0x25
 800a9ba:	d1f9      	bne.n	800a9b0 <_svfiprintf_r+0x54>
 800a9bc:	ebba 0b04 	subs.w	fp, sl, r4
 800a9c0:	d00b      	beq.n	800a9da <_svfiprintf_r+0x7e>
 800a9c2:	465b      	mov	r3, fp
 800a9c4:	4622      	mov	r2, r4
 800a9c6:	4629      	mov	r1, r5
 800a9c8:	4638      	mov	r0, r7
 800a9ca:	f7ff ff6b 	bl	800a8a4 <__ssputs_r>
 800a9ce:	3001      	adds	r0, #1
 800a9d0:	f000 80a7 	beq.w	800ab22 <_svfiprintf_r+0x1c6>
 800a9d4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a9d6:	445a      	add	r2, fp
 800a9d8:	9209      	str	r2, [sp, #36]	@ 0x24
 800a9da:	f89a 3000 	ldrb.w	r3, [sl]
 800a9de:	2b00      	cmp	r3, #0
 800a9e0:	f000 809f 	beq.w	800ab22 <_svfiprintf_r+0x1c6>
 800a9e4:	2300      	movs	r3, #0
 800a9e6:	f04f 32ff 	mov.w	r2, #4294967295
 800a9ea:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a9ee:	f10a 0a01 	add.w	sl, sl, #1
 800a9f2:	9304      	str	r3, [sp, #16]
 800a9f4:	9307      	str	r3, [sp, #28]
 800a9f6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a9fa:	931a      	str	r3, [sp, #104]	@ 0x68
 800a9fc:	4654      	mov	r4, sl
 800a9fe:	2205      	movs	r2, #5
 800aa00:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aa04:	484e      	ldr	r0, [pc, #312]	@ (800ab40 <_svfiprintf_r+0x1e4>)
 800aa06:	f7fe fc62 	bl	80092ce <memchr>
 800aa0a:	9a04      	ldr	r2, [sp, #16]
 800aa0c:	b9d8      	cbnz	r0, 800aa46 <_svfiprintf_r+0xea>
 800aa0e:	06d0      	lsls	r0, r2, #27
 800aa10:	bf44      	itt	mi
 800aa12:	2320      	movmi	r3, #32
 800aa14:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800aa18:	0711      	lsls	r1, r2, #28
 800aa1a:	bf44      	itt	mi
 800aa1c:	232b      	movmi	r3, #43	@ 0x2b
 800aa1e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800aa22:	f89a 3000 	ldrb.w	r3, [sl]
 800aa26:	2b2a      	cmp	r3, #42	@ 0x2a
 800aa28:	d015      	beq.n	800aa56 <_svfiprintf_r+0xfa>
 800aa2a:	4654      	mov	r4, sl
 800aa2c:	2000      	movs	r0, #0
 800aa2e:	f04f 0c0a 	mov.w	ip, #10
 800aa32:	9a07      	ldr	r2, [sp, #28]
 800aa34:	4621      	mov	r1, r4
 800aa36:	f811 3b01 	ldrb.w	r3, [r1], #1
 800aa3a:	3b30      	subs	r3, #48	@ 0x30
 800aa3c:	2b09      	cmp	r3, #9
 800aa3e:	d94b      	bls.n	800aad8 <_svfiprintf_r+0x17c>
 800aa40:	b1b0      	cbz	r0, 800aa70 <_svfiprintf_r+0x114>
 800aa42:	9207      	str	r2, [sp, #28]
 800aa44:	e014      	b.n	800aa70 <_svfiprintf_r+0x114>
 800aa46:	eba0 0308 	sub.w	r3, r0, r8
 800aa4a:	fa09 f303 	lsl.w	r3, r9, r3
 800aa4e:	4313      	orrs	r3, r2
 800aa50:	46a2      	mov	sl, r4
 800aa52:	9304      	str	r3, [sp, #16]
 800aa54:	e7d2      	b.n	800a9fc <_svfiprintf_r+0xa0>
 800aa56:	9b03      	ldr	r3, [sp, #12]
 800aa58:	1d19      	adds	r1, r3, #4
 800aa5a:	681b      	ldr	r3, [r3, #0]
 800aa5c:	9103      	str	r1, [sp, #12]
 800aa5e:	2b00      	cmp	r3, #0
 800aa60:	bfbb      	ittet	lt
 800aa62:	425b      	neglt	r3, r3
 800aa64:	f042 0202 	orrlt.w	r2, r2, #2
 800aa68:	9307      	strge	r3, [sp, #28]
 800aa6a:	9307      	strlt	r3, [sp, #28]
 800aa6c:	bfb8      	it	lt
 800aa6e:	9204      	strlt	r2, [sp, #16]
 800aa70:	7823      	ldrb	r3, [r4, #0]
 800aa72:	2b2e      	cmp	r3, #46	@ 0x2e
 800aa74:	d10a      	bne.n	800aa8c <_svfiprintf_r+0x130>
 800aa76:	7863      	ldrb	r3, [r4, #1]
 800aa78:	2b2a      	cmp	r3, #42	@ 0x2a
 800aa7a:	d132      	bne.n	800aae2 <_svfiprintf_r+0x186>
 800aa7c:	9b03      	ldr	r3, [sp, #12]
 800aa7e:	3402      	adds	r4, #2
 800aa80:	1d1a      	adds	r2, r3, #4
 800aa82:	681b      	ldr	r3, [r3, #0]
 800aa84:	9203      	str	r2, [sp, #12]
 800aa86:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800aa8a:	9305      	str	r3, [sp, #20]
 800aa8c:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 800ab44 <_svfiprintf_r+0x1e8>
 800aa90:	2203      	movs	r2, #3
 800aa92:	4650      	mov	r0, sl
 800aa94:	7821      	ldrb	r1, [r4, #0]
 800aa96:	f7fe fc1a 	bl	80092ce <memchr>
 800aa9a:	b138      	cbz	r0, 800aaac <_svfiprintf_r+0x150>
 800aa9c:	2240      	movs	r2, #64	@ 0x40
 800aa9e:	9b04      	ldr	r3, [sp, #16]
 800aaa0:	eba0 000a 	sub.w	r0, r0, sl
 800aaa4:	4082      	lsls	r2, r0
 800aaa6:	4313      	orrs	r3, r2
 800aaa8:	3401      	adds	r4, #1
 800aaaa:	9304      	str	r3, [sp, #16]
 800aaac:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aab0:	2206      	movs	r2, #6
 800aab2:	4825      	ldr	r0, [pc, #148]	@ (800ab48 <_svfiprintf_r+0x1ec>)
 800aab4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800aab8:	f7fe fc09 	bl	80092ce <memchr>
 800aabc:	2800      	cmp	r0, #0
 800aabe:	d036      	beq.n	800ab2e <_svfiprintf_r+0x1d2>
 800aac0:	4b22      	ldr	r3, [pc, #136]	@ (800ab4c <_svfiprintf_r+0x1f0>)
 800aac2:	bb1b      	cbnz	r3, 800ab0c <_svfiprintf_r+0x1b0>
 800aac4:	9b03      	ldr	r3, [sp, #12]
 800aac6:	3307      	adds	r3, #7
 800aac8:	f023 0307 	bic.w	r3, r3, #7
 800aacc:	3308      	adds	r3, #8
 800aace:	9303      	str	r3, [sp, #12]
 800aad0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aad2:	4433      	add	r3, r6
 800aad4:	9309      	str	r3, [sp, #36]	@ 0x24
 800aad6:	e76a      	b.n	800a9ae <_svfiprintf_r+0x52>
 800aad8:	460c      	mov	r4, r1
 800aada:	2001      	movs	r0, #1
 800aadc:	fb0c 3202 	mla	r2, ip, r2, r3
 800aae0:	e7a8      	b.n	800aa34 <_svfiprintf_r+0xd8>
 800aae2:	2300      	movs	r3, #0
 800aae4:	f04f 0c0a 	mov.w	ip, #10
 800aae8:	4619      	mov	r1, r3
 800aaea:	3401      	adds	r4, #1
 800aaec:	9305      	str	r3, [sp, #20]
 800aaee:	4620      	mov	r0, r4
 800aaf0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800aaf4:	3a30      	subs	r2, #48	@ 0x30
 800aaf6:	2a09      	cmp	r2, #9
 800aaf8:	d903      	bls.n	800ab02 <_svfiprintf_r+0x1a6>
 800aafa:	2b00      	cmp	r3, #0
 800aafc:	d0c6      	beq.n	800aa8c <_svfiprintf_r+0x130>
 800aafe:	9105      	str	r1, [sp, #20]
 800ab00:	e7c4      	b.n	800aa8c <_svfiprintf_r+0x130>
 800ab02:	4604      	mov	r4, r0
 800ab04:	2301      	movs	r3, #1
 800ab06:	fb0c 2101 	mla	r1, ip, r1, r2
 800ab0a:	e7f0      	b.n	800aaee <_svfiprintf_r+0x192>
 800ab0c:	ab03      	add	r3, sp, #12
 800ab0e:	9300      	str	r3, [sp, #0]
 800ab10:	462a      	mov	r2, r5
 800ab12:	4638      	mov	r0, r7
 800ab14:	4b0e      	ldr	r3, [pc, #56]	@ (800ab50 <_svfiprintf_r+0x1f4>)
 800ab16:	a904      	add	r1, sp, #16
 800ab18:	f7fd fd84 	bl	8008624 <_printf_float>
 800ab1c:	1c42      	adds	r2, r0, #1
 800ab1e:	4606      	mov	r6, r0
 800ab20:	d1d6      	bne.n	800aad0 <_svfiprintf_r+0x174>
 800ab22:	89ab      	ldrh	r3, [r5, #12]
 800ab24:	065b      	lsls	r3, r3, #25
 800ab26:	f53f af2d 	bmi.w	800a984 <_svfiprintf_r+0x28>
 800ab2a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800ab2c:	e72c      	b.n	800a988 <_svfiprintf_r+0x2c>
 800ab2e:	ab03      	add	r3, sp, #12
 800ab30:	9300      	str	r3, [sp, #0]
 800ab32:	462a      	mov	r2, r5
 800ab34:	4638      	mov	r0, r7
 800ab36:	4b06      	ldr	r3, [pc, #24]	@ (800ab50 <_svfiprintf_r+0x1f4>)
 800ab38:	a904      	add	r1, sp, #16
 800ab3a:	f7fe f811 	bl	8008b60 <_printf_i>
 800ab3e:	e7ed      	b.n	800ab1c <_svfiprintf_r+0x1c0>
 800ab40:	0800b658 	.word	0x0800b658
 800ab44:	0800b65e 	.word	0x0800b65e
 800ab48:	0800b662 	.word	0x0800b662
 800ab4c:	08008625 	.word	0x08008625
 800ab50:	0800a8a5 	.word	0x0800a8a5

0800ab54 <__sflush_r>:
 800ab54:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800ab58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ab5a:	0716      	lsls	r6, r2, #28
 800ab5c:	4605      	mov	r5, r0
 800ab5e:	460c      	mov	r4, r1
 800ab60:	d454      	bmi.n	800ac0c <__sflush_r+0xb8>
 800ab62:	684b      	ldr	r3, [r1, #4]
 800ab64:	2b00      	cmp	r3, #0
 800ab66:	dc02      	bgt.n	800ab6e <__sflush_r+0x1a>
 800ab68:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800ab6a:	2b00      	cmp	r3, #0
 800ab6c:	dd48      	ble.n	800ac00 <__sflush_r+0xac>
 800ab6e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800ab70:	2e00      	cmp	r6, #0
 800ab72:	d045      	beq.n	800ac00 <__sflush_r+0xac>
 800ab74:	2300      	movs	r3, #0
 800ab76:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800ab7a:	682f      	ldr	r7, [r5, #0]
 800ab7c:	6a21      	ldr	r1, [r4, #32]
 800ab7e:	602b      	str	r3, [r5, #0]
 800ab80:	d030      	beq.n	800abe4 <__sflush_r+0x90>
 800ab82:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800ab84:	89a3      	ldrh	r3, [r4, #12]
 800ab86:	0759      	lsls	r1, r3, #29
 800ab88:	d505      	bpl.n	800ab96 <__sflush_r+0x42>
 800ab8a:	6863      	ldr	r3, [r4, #4]
 800ab8c:	1ad2      	subs	r2, r2, r3
 800ab8e:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800ab90:	b10b      	cbz	r3, 800ab96 <__sflush_r+0x42>
 800ab92:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800ab94:	1ad2      	subs	r2, r2, r3
 800ab96:	2300      	movs	r3, #0
 800ab98:	4628      	mov	r0, r5
 800ab9a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800ab9c:	6a21      	ldr	r1, [r4, #32]
 800ab9e:	47b0      	blx	r6
 800aba0:	1c43      	adds	r3, r0, #1
 800aba2:	89a3      	ldrh	r3, [r4, #12]
 800aba4:	d106      	bne.n	800abb4 <__sflush_r+0x60>
 800aba6:	6829      	ldr	r1, [r5, #0]
 800aba8:	291d      	cmp	r1, #29
 800abaa:	d82b      	bhi.n	800ac04 <__sflush_r+0xb0>
 800abac:	4a28      	ldr	r2, [pc, #160]	@ (800ac50 <__sflush_r+0xfc>)
 800abae:	410a      	asrs	r2, r1
 800abb0:	07d6      	lsls	r6, r2, #31
 800abb2:	d427      	bmi.n	800ac04 <__sflush_r+0xb0>
 800abb4:	2200      	movs	r2, #0
 800abb6:	6062      	str	r2, [r4, #4]
 800abb8:	6922      	ldr	r2, [r4, #16]
 800abba:	04d9      	lsls	r1, r3, #19
 800abbc:	6022      	str	r2, [r4, #0]
 800abbe:	d504      	bpl.n	800abca <__sflush_r+0x76>
 800abc0:	1c42      	adds	r2, r0, #1
 800abc2:	d101      	bne.n	800abc8 <__sflush_r+0x74>
 800abc4:	682b      	ldr	r3, [r5, #0]
 800abc6:	b903      	cbnz	r3, 800abca <__sflush_r+0x76>
 800abc8:	6560      	str	r0, [r4, #84]	@ 0x54
 800abca:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800abcc:	602f      	str	r7, [r5, #0]
 800abce:	b1b9      	cbz	r1, 800ac00 <__sflush_r+0xac>
 800abd0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800abd4:	4299      	cmp	r1, r3
 800abd6:	d002      	beq.n	800abde <__sflush_r+0x8a>
 800abd8:	4628      	mov	r0, r5
 800abda:	f7ff f9e5 	bl	8009fa8 <_free_r>
 800abde:	2300      	movs	r3, #0
 800abe0:	6363      	str	r3, [r4, #52]	@ 0x34
 800abe2:	e00d      	b.n	800ac00 <__sflush_r+0xac>
 800abe4:	2301      	movs	r3, #1
 800abe6:	4628      	mov	r0, r5
 800abe8:	47b0      	blx	r6
 800abea:	4602      	mov	r2, r0
 800abec:	1c50      	adds	r0, r2, #1
 800abee:	d1c9      	bne.n	800ab84 <__sflush_r+0x30>
 800abf0:	682b      	ldr	r3, [r5, #0]
 800abf2:	2b00      	cmp	r3, #0
 800abf4:	d0c6      	beq.n	800ab84 <__sflush_r+0x30>
 800abf6:	2b1d      	cmp	r3, #29
 800abf8:	d001      	beq.n	800abfe <__sflush_r+0xaa>
 800abfa:	2b16      	cmp	r3, #22
 800abfc:	d11d      	bne.n	800ac3a <__sflush_r+0xe6>
 800abfe:	602f      	str	r7, [r5, #0]
 800ac00:	2000      	movs	r0, #0
 800ac02:	e021      	b.n	800ac48 <__sflush_r+0xf4>
 800ac04:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ac08:	b21b      	sxth	r3, r3
 800ac0a:	e01a      	b.n	800ac42 <__sflush_r+0xee>
 800ac0c:	690f      	ldr	r7, [r1, #16]
 800ac0e:	2f00      	cmp	r7, #0
 800ac10:	d0f6      	beq.n	800ac00 <__sflush_r+0xac>
 800ac12:	0793      	lsls	r3, r2, #30
 800ac14:	bf18      	it	ne
 800ac16:	2300      	movne	r3, #0
 800ac18:	680e      	ldr	r6, [r1, #0]
 800ac1a:	bf08      	it	eq
 800ac1c:	694b      	ldreq	r3, [r1, #20]
 800ac1e:	1bf6      	subs	r6, r6, r7
 800ac20:	600f      	str	r7, [r1, #0]
 800ac22:	608b      	str	r3, [r1, #8]
 800ac24:	2e00      	cmp	r6, #0
 800ac26:	ddeb      	ble.n	800ac00 <__sflush_r+0xac>
 800ac28:	4633      	mov	r3, r6
 800ac2a:	463a      	mov	r2, r7
 800ac2c:	4628      	mov	r0, r5
 800ac2e:	6a21      	ldr	r1, [r4, #32]
 800ac30:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 800ac34:	47e0      	blx	ip
 800ac36:	2800      	cmp	r0, #0
 800ac38:	dc07      	bgt.n	800ac4a <__sflush_r+0xf6>
 800ac3a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ac3e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ac42:	f04f 30ff 	mov.w	r0, #4294967295
 800ac46:	81a3      	strh	r3, [r4, #12]
 800ac48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ac4a:	4407      	add	r7, r0
 800ac4c:	1a36      	subs	r6, r6, r0
 800ac4e:	e7e9      	b.n	800ac24 <__sflush_r+0xd0>
 800ac50:	dfbffffe 	.word	0xdfbffffe

0800ac54 <_fflush_r>:
 800ac54:	b538      	push	{r3, r4, r5, lr}
 800ac56:	690b      	ldr	r3, [r1, #16]
 800ac58:	4605      	mov	r5, r0
 800ac5a:	460c      	mov	r4, r1
 800ac5c:	b913      	cbnz	r3, 800ac64 <_fflush_r+0x10>
 800ac5e:	2500      	movs	r5, #0
 800ac60:	4628      	mov	r0, r5
 800ac62:	bd38      	pop	{r3, r4, r5, pc}
 800ac64:	b118      	cbz	r0, 800ac6e <_fflush_r+0x1a>
 800ac66:	6a03      	ldr	r3, [r0, #32]
 800ac68:	b90b      	cbnz	r3, 800ac6e <_fflush_r+0x1a>
 800ac6a:	f7fe f925 	bl	8008eb8 <__sinit>
 800ac6e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ac72:	2b00      	cmp	r3, #0
 800ac74:	d0f3      	beq.n	800ac5e <_fflush_r+0xa>
 800ac76:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800ac78:	07d0      	lsls	r0, r2, #31
 800ac7a:	d404      	bmi.n	800ac86 <_fflush_r+0x32>
 800ac7c:	0599      	lsls	r1, r3, #22
 800ac7e:	d402      	bmi.n	800ac86 <_fflush_r+0x32>
 800ac80:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ac82:	f7fe fb22 	bl	80092ca <__retarget_lock_acquire_recursive>
 800ac86:	4628      	mov	r0, r5
 800ac88:	4621      	mov	r1, r4
 800ac8a:	f7ff ff63 	bl	800ab54 <__sflush_r>
 800ac8e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800ac90:	4605      	mov	r5, r0
 800ac92:	07da      	lsls	r2, r3, #31
 800ac94:	d4e4      	bmi.n	800ac60 <_fflush_r+0xc>
 800ac96:	89a3      	ldrh	r3, [r4, #12]
 800ac98:	059b      	lsls	r3, r3, #22
 800ac9a:	d4e1      	bmi.n	800ac60 <_fflush_r+0xc>
 800ac9c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ac9e:	f7fe fb15 	bl	80092cc <__retarget_lock_release_recursive>
 800aca2:	e7dd      	b.n	800ac60 <_fflush_r+0xc>

0800aca4 <__swhatbuf_r>:
 800aca4:	b570      	push	{r4, r5, r6, lr}
 800aca6:	460c      	mov	r4, r1
 800aca8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800acac:	4615      	mov	r5, r2
 800acae:	2900      	cmp	r1, #0
 800acb0:	461e      	mov	r6, r3
 800acb2:	b096      	sub	sp, #88	@ 0x58
 800acb4:	da0c      	bge.n	800acd0 <__swhatbuf_r+0x2c>
 800acb6:	89a3      	ldrh	r3, [r4, #12]
 800acb8:	2100      	movs	r1, #0
 800acba:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800acbe:	bf14      	ite	ne
 800acc0:	2340      	movne	r3, #64	@ 0x40
 800acc2:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800acc6:	2000      	movs	r0, #0
 800acc8:	6031      	str	r1, [r6, #0]
 800acca:	602b      	str	r3, [r5, #0]
 800accc:	b016      	add	sp, #88	@ 0x58
 800acce:	bd70      	pop	{r4, r5, r6, pc}
 800acd0:	466a      	mov	r2, sp
 800acd2:	f000 f863 	bl	800ad9c <_fstat_r>
 800acd6:	2800      	cmp	r0, #0
 800acd8:	dbed      	blt.n	800acb6 <__swhatbuf_r+0x12>
 800acda:	9901      	ldr	r1, [sp, #4]
 800acdc:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800ace0:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800ace4:	4259      	negs	r1, r3
 800ace6:	4159      	adcs	r1, r3
 800ace8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800acec:	e7eb      	b.n	800acc6 <__swhatbuf_r+0x22>

0800acee <__smakebuf_r>:
 800acee:	898b      	ldrh	r3, [r1, #12]
 800acf0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800acf2:	079d      	lsls	r5, r3, #30
 800acf4:	4606      	mov	r6, r0
 800acf6:	460c      	mov	r4, r1
 800acf8:	d507      	bpl.n	800ad0a <__smakebuf_r+0x1c>
 800acfa:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800acfe:	6023      	str	r3, [r4, #0]
 800ad00:	6123      	str	r3, [r4, #16]
 800ad02:	2301      	movs	r3, #1
 800ad04:	6163      	str	r3, [r4, #20]
 800ad06:	b003      	add	sp, #12
 800ad08:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ad0a:	466a      	mov	r2, sp
 800ad0c:	ab01      	add	r3, sp, #4
 800ad0e:	f7ff ffc9 	bl	800aca4 <__swhatbuf_r>
 800ad12:	9f00      	ldr	r7, [sp, #0]
 800ad14:	4605      	mov	r5, r0
 800ad16:	4639      	mov	r1, r7
 800ad18:	4630      	mov	r0, r6
 800ad1a:	f7ff f9b7 	bl	800a08c <_malloc_r>
 800ad1e:	b948      	cbnz	r0, 800ad34 <__smakebuf_r+0x46>
 800ad20:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ad24:	059a      	lsls	r2, r3, #22
 800ad26:	d4ee      	bmi.n	800ad06 <__smakebuf_r+0x18>
 800ad28:	f023 0303 	bic.w	r3, r3, #3
 800ad2c:	f043 0302 	orr.w	r3, r3, #2
 800ad30:	81a3      	strh	r3, [r4, #12]
 800ad32:	e7e2      	b.n	800acfa <__smakebuf_r+0xc>
 800ad34:	89a3      	ldrh	r3, [r4, #12]
 800ad36:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800ad3a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ad3e:	81a3      	strh	r3, [r4, #12]
 800ad40:	9b01      	ldr	r3, [sp, #4]
 800ad42:	6020      	str	r0, [r4, #0]
 800ad44:	b15b      	cbz	r3, 800ad5e <__smakebuf_r+0x70>
 800ad46:	4630      	mov	r0, r6
 800ad48:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ad4c:	f000 f838 	bl	800adc0 <_isatty_r>
 800ad50:	b128      	cbz	r0, 800ad5e <__smakebuf_r+0x70>
 800ad52:	89a3      	ldrh	r3, [r4, #12]
 800ad54:	f023 0303 	bic.w	r3, r3, #3
 800ad58:	f043 0301 	orr.w	r3, r3, #1
 800ad5c:	81a3      	strh	r3, [r4, #12]
 800ad5e:	89a3      	ldrh	r3, [r4, #12]
 800ad60:	431d      	orrs	r5, r3
 800ad62:	81a5      	strh	r5, [r4, #12]
 800ad64:	e7cf      	b.n	800ad06 <__smakebuf_r+0x18>

0800ad66 <memmove>:
 800ad66:	4288      	cmp	r0, r1
 800ad68:	b510      	push	{r4, lr}
 800ad6a:	eb01 0402 	add.w	r4, r1, r2
 800ad6e:	d902      	bls.n	800ad76 <memmove+0x10>
 800ad70:	4284      	cmp	r4, r0
 800ad72:	4623      	mov	r3, r4
 800ad74:	d807      	bhi.n	800ad86 <memmove+0x20>
 800ad76:	1e43      	subs	r3, r0, #1
 800ad78:	42a1      	cmp	r1, r4
 800ad7a:	d008      	beq.n	800ad8e <memmove+0x28>
 800ad7c:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ad80:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ad84:	e7f8      	b.n	800ad78 <memmove+0x12>
 800ad86:	4601      	mov	r1, r0
 800ad88:	4402      	add	r2, r0
 800ad8a:	428a      	cmp	r2, r1
 800ad8c:	d100      	bne.n	800ad90 <memmove+0x2a>
 800ad8e:	bd10      	pop	{r4, pc}
 800ad90:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ad94:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ad98:	e7f7      	b.n	800ad8a <memmove+0x24>
	...

0800ad9c <_fstat_r>:
 800ad9c:	b538      	push	{r3, r4, r5, lr}
 800ad9e:	2300      	movs	r3, #0
 800ada0:	4d06      	ldr	r5, [pc, #24]	@ (800adbc <_fstat_r+0x20>)
 800ada2:	4604      	mov	r4, r0
 800ada4:	4608      	mov	r0, r1
 800ada6:	4611      	mov	r1, r2
 800ada8:	602b      	str	r3, [r5, #0]
 800adaa:	f7f6 ffb1 	bl	8001d10 <_fstat>
 800adae:	1c43      	adds	r3, r0, #1
 800adb0:	d102      	bne.n	800adb8 <_fstat_r+0x1c>
 800adb2:	682b      	ldr	r3, [r5, #0]
 800adb4:	b103      	cbz	r3, 800adb8 <_fstat_r+0x1c>
 800adb6:	6023      	str	r3, [r4, #0]
 800adb8:	bd38      	pop	{r3, r4, r5, pc}
 800adba:	bf00      	nop
 800adbc:	20001e34 	.word	0x20001e34

0800adc0 <_isatty_r>:
 800adc0:	b538      	push	{r3, r4, r5, lr}
 800adc2:	2300      	movs	r3, #0
 800adc4:	4d05      	ldr	r5, [pc, #20]	@ (800addc <_isatty_r+0x1c>)
 800adc6:	4604      	mov	r4, r0
 800adc8:	4608      	mov	r0, r1
 800adca:	602b      	str	r3, [r5, #0]
 800adcc:	f7f6 ffaf 	bl	8001d2e <_isatty>
 800add0:	1c43      	adds	r3, r0, #1
 800add2:	d102      	bne.n	800adda <_isatty_r+0x1a>
 800add4:	682b      	ldr	r3, [r5, #0]
 800add6:	b103      	cbz	r3, 800adda <_isatty_r+0x1a>
 800add8:	6023      	str	r3, [r4, #0]
 800adda:	bd38      	pop	{r3, r4, r5, pc}
 800addc:	20001e34 	.word	0x20001e34

0800ade0 <_sbrk_r>:
 800ade0:	b538      	push	{r3, r4, r5, lr}
 800ade2:	2300      	movs	r3, #0
 800ade4:	4d05      	ldr	r5, [pc, #20]	@ (800adfc <_sbrk_r+0x1c>)
 800ade6:	4604      	mov	r4, r0
 800ade8:	4608      	mov	r0, r1
 800adea:	602b      	str	r3, [r5, #0]
 800adec:	f7f6 ffb6 	bl	8001d5c <_sbrk>
 800adf0:	1c43      	adds	r3, r0, #1
 800adf2:	d102      	bne.n	800adfa <_sbrk_r+0x1a>
 800adf4:	682b      	ldr	r3, [r5, #0]
 800adf6:	b103      	cbz	r3, 800adfa <_sbrk_r+0x1a>
 800adf8:	6023      	str	r3, [r4, #0]
 800adfa:	bd38      	pop	{r3, r4, r5, pc}
 800adfc:	20001e34 	.word	0x20001e34

0800ae00 <__assert_func>:
 800ae00:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ae02:	4614      	mov	r4, r2
 800ae04:	461a      	mov	r2, r3
 800ae06:	4b09      	ldr	r3, [pc, #36]	@ (800ae2c <__assert_func+0x2c>)
 800ae08:	4605      	mov	r5, r0
 800ae0a:	681b      	ldr	r3, [r3, #0]
 800ae0c:	68d8      	ldr	r0, [r3, #12]
 800ae0e:	b954      	cbnz	r4, 800ae26 <__assert_func+0x26>
 800ae10:	4b07      	ldr	r3, [pc, #28]	@ (800ae30 <__assert_func+0x30>)
 800ae12:	461c      	mov	r4, r3
 800ae14:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ae18:	9100      	str	r1, [sp, #0]
 800ae1a:	462b      	mov	r3, r5
 800ae1c:	4905      	ldr	r1, [pc, #20]	@ (800ae34 <__assert_func+0x34>)
 800ae1e:	f000 f86f 	bl	800af00 <fiprintf>
 800ae22:	f000 f87f 	bl	800af24 <abort>
 800ae26:	4b04      	ldr	r3, [pc, #16]	@ (800ae38 <__assert_func+0x38>)
 800ae28:	e7f4      	b.n	800ae14 <__assert_func+0x14>
 800ae2a:	bf00      	nop
 800ae2c:	2000002c 	.word	0x2000002c
 800ae30:	0800b6ae 	.word	0x0800b6ae
 800ae34:	0800b680 	.word	0x0800b680
 800ae38:	0800b673 	.word	0x0800b673

0800ae3c <_calloc_r>:
 800ae3c:	b570      	push	{r4, r5, r6, lr}
 800ae3e:	fba1 5402 	umull	r5, r4, r1, r2
 800ae42:	b93c      	cbnz	r4, 800ae54 <_calloc_r+0x18>
 800ae44:	4629      	mov	r1, r5
 800ae46:	f7ff f921 	bl	800a08c <_malloc_r>
 800ae4a:	4606      	mov	r6, r0
 800ae4c:	b928      	cbnz	r0, 800ae5a <_calloc_r+0x1e>
 800ae4e:	2600      	movs	r6, #0
 800ae50:	4630      	mov	r0, r6
 800ae52:	bd70      	pop	{r4, r5, r6, pc}
 800ae54:	220c      	movs	r2, #12
 800ae56:	6002      	str	r2, [r0, #0]
 800ae58:	e7f9      	b.n	800ae4e <_calloc_r+0x12>
 800ae5a:	462a      	mov	r2, r5
 800ae5c:	4621      	mov	r1, r4
 800ae5e:	f7fe f9b7 	bl	80091d0 <memset>
 800ae62:	e7f5      	b.n	800ae50 <_calloc_r+0x14>

0800ae64 <__ascii_mbtowc>:
 800ae64:	b082      	sub	sp, #8
 800ae66:	b901      	cbnz	r1, 800ae6a <__ascii_mbtowc+0x6>
 800ae68:	a901      	add	r1, sp, #4
 800ae6a:	b142      	cbz	r2, 800ae7e <__ascii_mbtowc+0x1a>
 800ae6c:	b14b      	cbz	r3, 800ae82 <__ascii_mbtowc+0x1e>
 800ae6e:	7813      	ldrb	r3, [r2, #0]
 800ae70:	600b      	str	r3, [r1, #0]
 800ae72:	7812      	ldrb	r2, [r2, #0]
 800ae74:	1e10      	subs	r0, r2, #0
 800ae76:	bf18      	it	ne
 800ae78:	2001      	movne	r0, #1
 800ae7a:	b002      	add	sp, #8
 800ae7c:	4770      	bx	lr
 800ae7e:	4610      	mov	r0, r2
 800ae80:	e7fb      	b.n	800ae7a <__ascii_mbtowc+0x16>
 800ae82:	f06f 0001 	mvn.w	r0, #1
 800ae86:	e7f8      	b.n	800ae7a <__ascii_mbtowc+0x16>

0800ae88 <_realloc_r>:
 800ae88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ae8c:	4680      	mov	r8, r0
 800ae8e:	4615      	mov	r5, r2
 800ae90:	460c      	mov	r4, r1
 800ae92:	b921      	cbnz	r1, 800ae9e <_realloc_r+0x16>
 800ae94:	4611      	mov	r1, r2
 800ae96:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ae9a:	f7ff b8f7 	b.w	800a08c <_malloc_r>
 800ae9e:	b92a      	cbnz	r2, 800aeac <_realloc_r+0x24>
 800aea0:	f7ff f882 	bl	8009fa8 <_free_r>
 800aea4:	2400      	movs	r4, #0
 800aea6:	4620      	mov	r0, r4
 800aea8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aeac:	f000 f841 	bl	800af32 <_malloc_usable_size_r>
 800aeb0:	4285      	cmp	r5, r0
 800aeb2:	4606      	mov	r6, r0
 800aeb4:	d802      	bhi.n	800aebc <_realloc_r+0x34>
 800aeb6:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800aeba:	d8f4      	bhi.n	800aea6 <_realloc_r+0x1e>
 800aebc:	4629      	mov	r1, r5
 800aebe:	4640      	mov	r0, r8
 800aec0:	f7ff f8e4 	bl	800a08c <_malloc_r>
 800aec4:	4607      	mov	r7, r0
 800aec6:	2800      	cmp	r0, #0
 800aec8:	d0ec      	beq.n	800aea4 <_realloc_r+0x1c>
 800aeca:	42b5      	cmp	r5, r6
 800aecc:	462a      	mov	r2, r5
 800aece:	4621      	mov	r1, r4
 800aed0:	bf28      	it	cs
 800aed2:	4632      	movcs	r2, r6
 800aed4:	f7fe fa09 	bl	80092ea <memcpy>
 800aed8:	4621      	mov	r1, r4
 800aeda:	4640      	mov	r0, r8
 800aedc:	f7ff f864 	bl	8009fa8 <_free_r>
 800aee0:	463c      	mov	r4, r7
 800aee2:	e7e0      	b.n	800aea6 <_realloc_r+0x1e>

0800aee4 <__ascii_wctomb>:
 800aee4:	4603      	mov	r3, r0
 800aee6:	4608      	mov	r0, r1
 800aee8:	b141      	cbz	r1, 800aefc <__ascii_wctomb+0x18>
 800aeea:	2aff      	cmp	r2, #255	@ 0xff
 800aeec:	d904      	bls.n	800aef8 <__ascii_wctomb+0x14>
 800aeee:	228a      	movs	r2, #138	@ 0x8a
 800aef0:	f04f 30ff 	mov.w	r0, #4294967295
 800aef4:	601a      	str	r2, [r3, #0]
 800aef6:	4770      	bx	lr
 800aef8:	2001      	movs	r0, #1
 800aefa:	700a      	strb	r2, [r1, #0]
 800aefc:	4770      	bx	lr
	...

0800af00 <fiprintf>:
 800af00:	b40e      	push	{r1, r2, r3}
 800af02:	b503      	push	{r0, r1, lr}
 800af04:	4601      	mov	r1, r0
 800af06:	ab03      	add	r3, sp, #12
 800af08:	4805      	ldr	r0, [pc, #20]	@ (800af20 <fiprintf+0x20>)
 800af0a:	f853 2b04 	ldr.w	r2, [r3], #4
 800af0e:	6800      	ldr	r0, [r0, #0]
 800af10:	9301      	str	r3, [sp, #4]
 800af12:	f000 f83d 	bl	800af90 <_vfiprintf_r>
 800af16:	b002      	add	sp, #8
 800af18:	f85d eb04 	ldr.w	lr, [sp], #4
 800af1c:	b003      	add	sp, #12
 800af1e:	4770      	bx	lr
 800af20:	2000002c 	.word	0x2000002c

0800af24 <abort>:
 800af24:	2006      	movs	r0, #6
 800af26:	b508      	push	{r3, lr}
 800af28:	f000 f972 	bl	800b210 <raise>
 800af2c:	2001      	movs	r0, #1
 800af2e:	f7f6 fea0 	bl	8001c72 <_exit>

0800af32 <_malloc_usable_size_r>:
 800af32:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800af36:	1f18      	subs	r0, r3, #4
 800af38:	2b00      	cmp	r3, #0
 800af3a:	bfbc      	itt	lt
 800af3c:	580b      	ldrlt	r3, [r1, r0]
 800af3e:	18c0      	addlt	r0, r0, r3
 800af40:	4770      	bx	lr

0800af42 <__sfputc_r>:
 800af42:	6893      	ldr	r3, [r2, #8]
 800af44:	b410      	push	{r4}
 800af46:	3b01      	subs	r3, #1
 800af48:	2b00      	cmp	r3, #0
 800af4a:	6093      	str	r3, [r2, #8]
 800af4c:	da07      	bge.n	800af5e <__sfputc_r+0x1c>
 800af4e:	6994      	ldr	r4, [r2, #24]
 800af50:	42a3      	cmp	r3, r4
 800af52:	db01      	blt.n	800af58 <__sfputc_r+0x16>
 800af54:	290a      	cmp	r1, #10
 800af56:	d102      	bne.n	800af5e <__sfputc_r+0x1c>
 800af58:	bc10      	pop	{r4}
 800af5a:	f7fe b8a4 	b.w	80090a6 <__swbuf_r>
 800af5e:	6813      	ldr	r3, [r2, #0]
 800af60:	1c58      	adds	r0, r3, #1
 800af62:	6010      	str	r0, [r2, #0]
 800af64:	7019      	strb	r1, [r3, #0]
 800af66:	4608      	mov	r0, r1
 800af68:	bc10      	pop	{r4}
 800af6a:	4770      	bx	lr

0800af6c <__sfputs_r>:
 800af6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800af6e:	4606      	mov	r6, r0
 800af70:	460f      	mov	r7, r1
 800af72:	4614      	mov	r4, r2
 800af74:	18d5      	adds	r5, r2, r3
 800af76:	42ac      	cmp	r4, r5
 800af78:	d101      	bne.n	800af7e <__sfputs_r+0x12>
 800af7a:	2000      	movs	r0, #0
 800af7c:	e007      	b.n	800af8e <__sfputs_r+0x22>
 800af7e:	463a      	mov	r2, r7
 800af80:	4630      	mov	r0, r6
 800af82:	f814 1b01 	ldrb.w	r1, [r4], #1
 800af86:	f7ff ffdc 	bl	800af42 <__sfputc_r>
 800af8a:	1c43      	adds	r3, r0, #1
 800af8c:	d1f3      	bne.n	800af76 <__sfputs_r+0xa>
 800af8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800af90 <_vfiprintf_r>:
 800af90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af94:	460d      	mov	r5, r1
 800af96:	4614      	mov	r4, r2
 800af98:	4698      	mov	r8, r3
 800af9a:	4606      	mov	r6, r0
 800af9c:	b09d      	sub	sp, #116	@ 0x74
 800af9e:	b118      	cbz	r0, 800afa8 <_vfiprintf_r+0x18>
 800afa0:	6a03      	ldr	r3, [r0, #32]
 800afa2:	b90b      	cbnz	r3, 800afa8 <_vfiprintf_r+0x18>
 800afa4:	f7fd ff88 	bl	8008eb8 <__sinit>
 800afa8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800afaa:	07d9      	lsls	r1, r3, #31
 800afac:	d405      	bmi.n	800afba <_vfiprintf_r+0x2a>
 800afae:	89ab      	ldrh	r3, [r5, #12]
 800afb0:	059a      	lsls	r2, r3, #22
 800afb2:	d402      	bmi.n	800afba <_vfiprintf_r+0x2a>
 800afb4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800afb6:	f7fe f988 	bl	80092ca <__retarget_lock_acquire_recursive>
 800afba:	89ab      	ldrh	r3, [r5, #12]
 800afbc:	071b      	lsls	r3, r3, #28
 800afbe:	d501      	bpl.n	800afc4 <_vfiprintf_r+0x34>
 800afc0:	692b      	ldr	r3, [r5, #16]
 800afc2:	b99b      	cbnz	r3, 800afec <_vfiprintf_r+0x5c>
 800afc4:	4629      	mov	r1, r5
 800afc6:	4630      	mov	r0, r6
 800afc8:	f7fe f8ac 	bl	8009124 <__swsetup_r>
 800afcc:	b170      	cbz	r0, 800afec <_vfiprintf_r+0x5c>
 800afce:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800afd0:	07dc      	lsls	r4, r3, #31
 800afd2:	d504      	bpl.n	800afde <_vfiprintf_r+0x4e>
 800afd4:	f04f 30ff 	mov.w	r0, #4294967295
 800afd8:	b01d      	add	sp, #116	@ 0x74
 800afda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800afde:	89ab      	ldrh	r3, [r5, #12]
 800afe0:	0598      	lsls	r0, r3, #22
 800afe2:	d4f7      	bmi.n	800afd4 <_vfiprintf_r+0x44>
 800afe4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800afe6:	f7fe f971 	bl	80092cc <__retarget_lock_release_recursive>
 800afea:	e7f3      	b.n	800afd4 <_vfiprintf_r+0x44>
 800afec:	2300      	movs	r3, #0
 800afee:	9309      	str	r3, [sp, #36]	@ 0x24
 800aff0:	2320      	movs	r3, #32
 800aff2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800aff6:	2330      	movs	r3, #48	@ 0x30
 800aff8:	f04f 0901 	mov.w	r9, #1
 800affc:	f8cd 800c 	str.w	r8, [sp, #12]
 800b000:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 800b1ac <_vfiprintf_r+0x21c>
 800b004:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b008:	4623      	mov	r3, r4
 800b00a:	469a      	mov	sl, r3
 800b00c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b010:	b10a      	cbz	r2, 800b016 <_vfiprintf_r+0x86>
 800b012:	2a25      	cmp	r2, #37	@ 0x25
 800b014:	d1f9      	bne.n	800b00a <_vfiprintf_r+0x7a>
 800b016:	ebba 0b04 	subs.w	fp, sl, r4
 800b01a:	d00b      	beq.n	800b034 <_vfiprintf_r+0xa4>
 800b01c:	465b      	mov	r3, fp
 800b01e:	4622      	mov	r2, r4
 800b020:	4629      	mov	r1, r5
 800b022:	4630      	mov	r0, r6
 800b024:	f7ff ffa2 	bl	800af6c <__sfputs_r>
 800b028:	3001      	adds	r0, #1
 800b02a:	f000 80a7 	beq.w	800b17c <_vfiprintf_r+0x1ec>
 800b02e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b030:	445a      	add	r2, fp
 800b032:	9209      	str	r2, [sp, #36]	@ 0x24
 800b034:	f89a 3000 	ldrb.w	r3, [sl]
 800b038:	2b00      	cmp	r3, #0
 800b03a:	f000 809f 	beq.w	800b17c <_vfiprintf_r+0x1ec>
 800b03e:	2300      	movs	r3, #0
 800b040:	f04f 32ff 	mov.w	r2, #4294967295
 800b044:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b048:	f10a 0a01 	add.w	sl, sl, #1
 800b04c:	9304      	str	r3, [sp, #16]
 800b04e:	9307      	str	r3, [sp, #28]
 800b050:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b054:	931a      	str	r3, [sp, #104]	@ 0x68
 800b056:	4654      	mov	r4, sl
 800b058:	2205      	movs	r2, #5
 800b05a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b05e:	4853      	ldr	r0, [pc, #332]	@ (800b1ac <_vfiprintf_r+0x21c>)
 800b060:	f7fe f935 	bl	80092ce <memchr>
 800b064:	9a04      	ldr	r2, [sp, #16]
 800b066:	b9d8      	cbnz	r0, 800b0a0 <_vfiprintf_r+0x110>
 800b068:	06d1      	lsls	r1, r2, #27
 800b06a:	bf44      	itt	mi
 800b06c:	2320      	movmi	r3, #32
 800b06e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b072:	0713      	lsls	r3, r2, #28
 800b074:	bf44      	itt	mi
 800b076:	232b      	movmi	r3, #43	@ 0x2b
 800b078:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b07c:	f89a 3000 	ldrb.w	r3, [sl]
 800b080:	2b2a      	cmp	r3, #42	@ 0x2a
 800b082:	d015      	beq.n	800b0b0 <_vfiprintf_r+0x120>
 800b084:	4654      	mov	r4, sl
 800b086:	2000      	movs	r0, #0
 800b088:	f04f 0c0a 	mov.w	ip, #10
 800b08c:	9a07      	ldr	r2, [sp, #28]
 800b08e:	4621      	mov	r1, r4
 800b090:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b094:	3b30      	subs	r3, #48	@ 0x30
 800b096:	2b09      	cmp	r3, #9
 800b098:	d94b      	bls.n	800b132 <_vfiprintf_r+0x1a2>
 800b09a:	b1b0      	cbz	r0, 800b0ca <_vfiprintf_r+0x13a>
 800b09c:	9207      	str	r2, [sp, #28]
 800b09e:	e014      	b.n	800b0ca <_vfiprintf_r+0x13a>
 800b0a0:	eba0 0308 	sub.w	r3, r0, r8
 800b0a4:	fa09 f303 	lsl.w	r3, r9, r3
 800b0a8:	4313      	orrs	r3, r2
 800b0aa:	46a2      	mov	sl, r4
 800b0ac:	9304      	str	r3, [sp, #16]
 800b0ae:	e7d2      	b.n	800b056 <_vfiprintf_r+0xc6>
 800b0b0:	9b03      	ldr	r3, [sp, #12]
 800b0b2:	1d19      	adds	r1, r3, #4
 800b0b4:	681b      	ldr	r3, [r3, #0]
 800b0b6:	9103      	str	r1, [sp, #12]
 800b0b8:	2b00      	cmp	r3, #0
 800b0ba:	bfbb      	ittet	lt
 800b0bc:	425b      	neglt	r3, r3
 800b0be:	f042 0202 	orrlt.w	r2, r2, #2
 800b0c2:	9307      	strge	r3, [sp, #28]
 800b0c4:	9307      	strlt	r3, [sp, #28]
 800b0c6:	bfb8      	it	lt
 800b0c8:	9204      	strlt	r2, [sp, #16]
 800b0ca:	7823      	ldrb	r3, [r4, #0]
 800b0cc:	2b2e      	cmp	r3, #46	@ 0x2e
 800b0ce:	d10a      	bne.n	800b0e6 <_vfiprintf_r+0x156>
 800b0d0:	7863      	ldrb	r3, [r4, #1]
 800b0d2:	2b2a      	cmp	r3, #42	@ 0x2a
 800b0d4:	d132      	bne.n	800b13c <_vfiprintf_r+0x1ac>
 800b0d6:	9b03      	ldr	r3, [sp, #12]
 800b0d8:	3402      	adds	r4, #2
 800b0da:	1d1a      	adds	r2, r3, #4
 800b0dc:	681b      	ldr	r3, [r3, #0]
 800b0de:	9203      	str	r2, [sp, #12]
 800b0e0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b0e4:	9305      	str	r3, [sp, #20]
 800b0e6:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 800b1b0 <_vfiprintf_r+0x220>
 800b0ea:	2203      	movs	r2, #3
 800b0ec:	4650      	mov	r0, sl
 800b0ee:	7821      	ldrb	r1, [r4, #0]
 800b0f0:	f7fe f8ed 	bl	80092ce <memchr>
 800b0f4:	b138      	cbz	r0, 800b106 <_vfiprintf_r+0x176>
 800b0f6:	2240      	movs	r2, #64	@ 0x40
 800b0f8:	9b04      	ldr	r3, [sp, #16]
 800b0fa:	eba0 000a 	sub.w	r0, r0, sl
 800b0fe:	4082      	lsls	r2, r0
 800b100:	4313      	orrs	r3, r2
 800b102:	3401      	adds	r4, #1
 800b104:	9304      	str	r3, [sp, #16]
 800b106:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b10a:	2206      	movs	r2, #6
 800b10c:	4829      	ldr	r0, [pc, #164]	@ (800b1b4 <_vfiprintf_r+0x224>)
 800b10e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b112:	f7fe f8dc 	bl	80092ce <memchr>
 800b116:	2800      	cmp	r0, #0
 800b118:	d03f      	beq.n	800b19a <_vfiprintf_r+0x20a>
 800b11a:	4b27      	ldr	r3, [pc, #156]	@ (800b1b8 <_vfiprintf_r+0x228>)
 800b11c:	bb1b      	cbnz	r3, 800b166 <_vfiprintf_r+0x1d6>
 800b11e:	9b03      	ldr	r3, [sp, #12]
 800b120:	3307      	adds	r3, #7
 800b122:	f023 0307 	bic.w	r3, r3, #7
 800b126:	3308      	adds	r3, #8
 800b128:	9303      	str	r3, [sp, #12]
 800b12a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b12c:	443b      	add	r3, r7
 800b12e:	9309      	str	r3, [sp, #36]	@ 0x24
 800b130:	e76a      	b.n	800b008 <_vfiprintf_r+0x78>
 800b132:	460c      	mov	r4, r1
 800b134:	2001      	movs	r0, #1
 800b136:	fb0c 3202 	mla	r2, ip, r2, r3
 800b13a:	e7a8      	b.n	800b08e <_vfiprintf_r+0xfe>
 800b13c:	2300      	movs	r3, #0
 800b13e:	f04f 0c0a 	mov.w	ip, #10
 800b142:	4619      	mov	r1, r3
 800b144:	3401      	adds	r4, #1
 800b146:	9305      	str	r3, [sp, #20]
 800b148:	4620      	mov	r0, r4
 800b14a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b14e:	3a30      	subs	r2, #48	@ 0x30
 800b150:	2a09      	cmp	r2, #9
 800b152:	d903      	bls.n	800b15c <_vfiprintf_r+0x1cc>
 800b154:	2b00      	cmp	r3, #0
 800b156:	d0c6      	beq.n	800b0e6 <_vfiprintf_r+0x156>
 800b158:	9105      	str	r1, [sp, #20]
 800b15a:	e7c4      	b.n	800b0e6 <_vfiprintf_r+0x156>
 800b15c:	4604      	mov	r4, r0
 800b15e:	2301      	movs	r3, #1
 800b160:	fb0c 2101 	mla	r1, ip, r1, r2
 800b164:	e7f0      	b.n	800b148 <_vfiprintf_r+0x1b8>
 800b166:	ab03      	add	r3, sp, #12
 800b168:	9300      	str	r3, [sp, #0]
 800b16a:	462a      	mov	r2, r5
 800b16c:	4630      	mov	r0, r6
 800b16e:	4b13      	ldr	r3, [pc, #76]	@ (800b1bc <_vfiprintf_r+0x22c>)
 800b170:	a904      	add	r1, sp, #16
 800b172:	f7fd fa57 	bl	8008624 <_printf_float>
 800b176:	4607      	mov	r7, r0
 800b178:	1c78      	adds	r0, r7, #1
 800b17a:	d1d6      	bne.n	800b12a <_vfiprintf_r+0x19a>
 800b17c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b17e:	07d9      	lsls	r1, r3, #31
 800b180:	d405      	bmi.n	800b18e <_vfiprintf_r+0x1fe>
 800b182:	89ab      	ldrh	r3, [r5, #12]
 800b184:	059a      	lsls	r2, r3, #22
 800b186:	d402      	bmi.n	800b18e <_vfiprintf_r+0x1fe>
 800b188:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b18a:	f7fe f89f 	bl	80092cc <__retarget_lock_release_recursive>
 800b18e:	89ab      	ldrh	r3, [r5, #12]
 800b190:	065b      	lsls	r3, r3, #25
 800b192:	f53f af1f 	bmi.w	800afd4 <_vfiprintf_r+0x44>
 800b196:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b198:	e71e      	b.n	800afd8 <_vfiprintf_r+0x48>
 800b19a:	ab03      	add	r3, sp, #12
 800b19c:	9300      	str	r3, [sp, #0]
 800b19e:	462a      	mov	r2, r5
 800b1a0:	4630      	mov	r0, r6
 800b1a2:	4b06      	ldr	r3, [pc, #24]	@ (800b1bc <_vfiprintf_r+0x22c>)
 800b1a4:	a904      	add	r1, sp, #16
 800b1a6:	f7fd fcdb 	bl	8008b60 <_printf_i>
 800b1aa:	e7e4      	b.n	800b176 <_vfiprintf_r+0x1e6>
 800b1ac:	0800b658 	.word	0x0800b658
 800b1b0:	0800b65e 	.word	0x0800b65e
 800b1b4:	0800b662 	.word	0x0800b662
 800b1b8:	08008625 	.word	0x08008625
 800b1bc:	0800af6d 	.word	0x0800af6d

0800b1c0 <_raise_r>:
 800b1c0:	291f      	cmp	r1, #31
 800b1c2:	b538      	push	{r3, r4, r5, lr}
 800b1c4:	4605      	mov	r5, r0
 800b1c6:	460c      	mov	r4, r1
 800b1c8:	d904      	bls.n	800b1d4 <_raise_r+0x14>
 800b1ca:	2316      	movs	r3, #22
 800b1cc:	6003      	str	r3, [r0, #0]
 800b1ce:	f04f 30ff 	mov.w	r0, #4294967295
 800b1d2:	bd38      	pop	{r3, r4, r5, pc}
 800b1d4:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800b1d6:	b112      	cbz	r2, 800b1de <_raise_r+0x1e>
 800b1d8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b1dc:	b94b      	cbnz	r3, 800b1f2 <_raise_r+0x32>
 800b1de:	4628      	mov	r0, r5
 800b1e0:	f000 f830 	bl	800b244 <_getpid_r>
 800b1e4:	4622      	mov	r2, r4
 800b1e6:	4601      	mov	r1, r0
 800b1e8:	4628      	mov	r0, r5
 800b1ea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b1ee:	f000 b817 	b.w	800b220 <_kill_r>
 800b1f2:	2b01      	cmp	r3, #1
 800b1f4:	d00a      	beq.n	800b20c <_raise_r+0x4c>
 800b1f6:	1c59      	adds	r1, r3, #1
 800b1f8:	d103      	bne.n	800b202 <_raise_r+0x42>
 800b1fa:	2316      	movs	r3, #22
 800b1fc:	6003      	str	r3, [r0, #0]
 800b1fe:	2001      	movs	r0, #1
 800b200:	e7e7      	b.n	800b1d2 <_raise_r+0x12>
 800b202:	2100      	movs	r1, #0
 800b204:	4620      	mov	r0, r4
 800b206:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800b20a:	4798      	blx	r3
 800b20c:	2000      	movs	r0, #0
 800b20e:	e7e0      	b.n	800b1d2 <_raise_r+0x12>

0800b210 <raise>:
 800b210:	4b02      	ldr	r3, [pc, #8]	@ (800b21c <raise+0xc>)
 800b212:	4601      	mov	r1, r0
 800b214:	6818      	ldr	r0, [r3, #0]
 800b216:	f7ff bfd3 	b.w	800b1c0 <_raise_r>
 800b21a:	bf00      	nop
 800b21c:	2000002c 	.word	0x2000002c

0800b220 <_kill_r>:
 800b220:	b538      	push	{r3, r4, r5, lr}
 800b222:	2300      	movs	r3, #0
 800b224:	4d06      	ldr	r5, [pc, #24]	@ (800b240 <_kill_r+0x20>)
 800b226:	4604      	mov	r4, r0
 800b228:	4608      	mov	r0, r1
 800b22a:	4611      	mov	r1, r2
 800b22c:	602b      	str	r3, [r5, #0]
 800b22e:	f7f6 fd10 	bl	8001c52 <_kill>
 800b232:	1c43      	adds	r3, r0, #1
 800b234:	d102      	bne.n	800b23c <_kill_r+0x1c>
 800b236:	682b      	ldr	r3, [r5, #0]
 800b238:	b103      	cbz	r3, 800b23c <_kill_r+0x1c>
 800b23a:	6023      	str	r3, [r4, #0]
 800b23c:	bd38      	pop	{r3, r4, r5, pc}
 800b23e:	bf00      	nop
 800b240:	20001e34 	.word	0x20001e34

0800b244 <_getpid_r>:
 800b244:	f7f6 bcfe 	b.w	8001c44 <_getpid>

0800b248 <_init>:
 800b248:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b24a:	bf00      	nop
 800b24c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b24e:	bc08      	pop	{r3}
 800b250:	469e      	mov	lr, r3
 800b252:	4770      	bx	lr

0800b254 <_fini>:
 800b254:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b256:	bf00      	nop
 800b258:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b25a:	bc08      	pop	{r3}
 800b25c:	469e      	mov	lr, r3
 800b25e:	4770      	bx	lr
