
da_nhiem.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b174  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000054c  0800b288  0800b288  0001b288  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b7d4  0800b7d4  000201e8  2**0
                  CONTENTS
  4 .ARM          00000000  0800b7d4  0800b7d4  000201e8  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800b7d4  0800b7d4  000201e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b7d4  0800b7d4  0001b7d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800b7d8  0800b7d8  0001b7d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001e8  20000000  0800b7dc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001c5c  200001e8  0800b9c4  000201e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001e44  0800b9c4  00021e44  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e8  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020211  2**0
                  CONTENTS, READONLY
 13 .debug_info   00019aec  00000000  00000000  00020254  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003911  00000000  00000000  00039d40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001818  00000000  00000000  0003d658  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000012db  00000000  00000000  0003ee70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001a768  00000000  00000000  0004014b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001b812  00000000  00000000  0005a8b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00099623  00000000  00000000  000760c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00007820  00000000  00000000  0010f6e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000008e  00000000  00000000  00116f08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001e8 	.word	0x200001e8
 800012c:	00000000 	.word	0x00000000
 8000130:	0800b26c 	.word	0x0800b26c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001ec 	.word	0x200001ec
 800014c:	0800b26c 	.word	0x0800b26c

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_frsub>:
 8000a88:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000a8c:	e002      	b.n	8000a94 <__addsf3>
 8000a8e:	bf00      	nop

08000a90 <__aeabi_fsub>:
 8000a90:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000a94 <__addsf3>:
 8000a94:	0042      	lsls	r2, r0, #1
 8000a96:	bf1f      	itttt	ne
 8000a98:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000a9c:	ea92 0f03 	teqne	r2, r3
 8000aa0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000aa4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000aa8:	d06a      	beq.n	8000b80 <__addsf3+0xec>
 8000aaa:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000aae:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000ab2:	bfc1      	itttt	gt
 8000ab4:	18d2      	addgt	r2, r2, r3
 8000ab6:	4041      	eorgt	r1, r0
 8000ab8:	4048      	eorgt	r0, r1
 8000aba:	4041      	eorgt	r1, r0
 8000abc:	bfb8      	it	lt
 8000abe:	425b      	neglt	r3, r3
 8000ac0:	2b19      	cmp	r3, #25
 8000ac2:	bf88      	it	hi
 8000ac4:	4770      	bxhi	lr
 8000ac6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000aca:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ace:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000ad2:	bf18      	it	ne
 8000ad4:	4240      	negne	r0, r0
 8000ad6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ada:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000ade:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000ae2:	bf18      	it	ne
 8000ae4:	4249      	negne	r1, r1
 8000ae6:	ea92 0f03 	teq	r2, r3
 8000aea:	d03f      	beq.n	8000b6c <__addsf3+0xd8>
 8000aec:	f1a2 0201 	sub.w	r2, r2, #1
 8000af0:	fa41 fc03 	asr.w	ip, r1, r3
 8000af4:	eb10 000c 	adds.w	r0, r0, ip
 8000af8:	f1c3 0320 	rsb	r3, r3, #32
 8000afc:	fa01 f103 	lsl.w	r1, r1, r3
 8000b00:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b04:	d502      	bpl.n	8000b0c <__addsf3+0x78>
 8000b06:	4249      	negs	r1, r1
 8000b08:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b0c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000b10:	d313      	bcc.n	8000b3a <__addsf3+0xa6>
 8000b12:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b16:	d306      	bcc.n	8000b26 <__addsf3+0x92>
 8000b18:	0840      	lsrs	r0, r0, #1
 8000b1a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b1e:	f102 0201 	add.w	r2, r2, #1
 8000b22:	2afe      	cmp	r2, #254	; 0xfe
 8000b24:	d251      	bcs.n	8000bca <__addsf3+0x136>
 8000b26:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000b2a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b2e:	bf08      	it	eq
 8000b30:	f020 0001 	biceq.w	r0, r0, #1
 8000b34:	ea40 0003 	orr.w	r0, r0, r3
 8000b38:	4770      	bx	lr
 8000b3a:	0049      	lsls	r1, r1, #1
 8000b3c:	eb40 0000 	adc.w	r0, r0, r0
 8000b40:	3a01      	subs	r2, #1
 8000b42:	bf28      	it	cs
 8000b44:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000b48:	d2ed      	bcs.n	8000b26 <__addsf3+0x92>
 8000b4a:	fab0 fc80 	clz	ip, r0
 8000b4e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b52:	ebb2 020c 	subs.w	r2, r2, ip
 8000b56:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b5a:	bfaa      	itet	ge
 8000b5c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000b60:	4252      	neglt	r2, r2
 8000b62:	4318      	orrge	r0, r3
 8000b64:	bfbc      	itt	lt
 8000b66:	40d0      	lsrlt	r0, r2
 8000b68:	4318      	orrlt	r0, r3
 8000b6a:	4770      	bx	lr
 8000b6c:	f092 0f00 	teq	r2, #0
 8000b70:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000b74:	bf06      	itte	eq
 8000b76:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000b7a:	3201      	addeq	r2, #1
 8000b7c:	3b01      	subne	r3, #1
 8000b7e:	e7b5      	b.n	8000aec <__addsf3+0x58>
 8000b80:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b84:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b88:	bf18      	it	ne
 8000b8a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b8e:	d021      	beq.n	8000bd4 <__addsf3+0x140>
 8000b90:	ea92 0f03 	teq	r2, r3
 8000b94:	d004      	beq.n	8000ba0 <__addsf3+0x10c>
 8000b96:	f092 0f00 	teq	r2, #0
 8000b9a:	bf08      	it	eq
 8000b9c:	4608      	moveq	r0, r1
 8000b9e:	4770      	bx	lr
 8000ba0:	ea90 0f01 	teq	r0, r1
 8000ba4:	bf1c      	itt	ne
 8000ba6:	2000      	movne	r0, #0
 8000ba8:	4770      	bxne	lr
 8000baa:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000bae:	d104      	bne.n	8000bba <__addsf3+0x126>
 8000bb0:	0040      	lsls	r0, r0, #1
 8000bb2:	bf28      	it	cs
 8000bb4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000bb8:	4770      	bx	lr
 8000bba:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000bbe:	bf3c      	itt	cc
 8000bc0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000bc4:	4770      	bxcc	lr
 8000bc6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000bca:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000bce:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bd2:	4770      	bx	lr
 8000bd4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000bd8:	bf16      	itet	ne
 8000bda:	4608      	movne	r0, r1
 8000bdc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000be0:	4601      	movne	r1, r0
 8000be2:	0242      	lsls	r2, r0, #9
 8000be4:	bf06      	itte	eq
 8000be6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000bea:	ea90 0f01 	teqeq	r0, r1
 8000bee:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000bf2:	4770      	bx	lr

08000bf4 <__aeabi_ui2f>:
 8000bf4:	f04f 0300 	mov.w	r3, #0
 8000bf8:	e004      	b.n	8000c04 <__aeabi_i2f+0x8>
 8000bfa:	bf00      	nop

08000bfc <__aeabi_i2f>:
 8000bfc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c00:	bf48      	it	mi
 8000c02:	4240      	negmi	r0, r0
 8000c04:	ea5f 0c00 	movs.w	ip, r0
 8000c08:	bf08      	it	eq
 8000c0a:	4770      	bxeq	lr
 8000c0c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000c10:	4601      	mov	r1, r0
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	e01c      	b.n	8000c52 <__aeabi_l2f+0x2a>

08000c18 <__aeabi_ul2f>:
 8000c18:	ea50 0201 	orrs.w	r2, r0, r1
 8000c1c:	bf08      	it	eq
 8000c1e:	4770      	bxeq	lr
 8000c20:	f04f 0300 	mov.w	r3, #0
 8000c24:	e00a      	b.n	8000c3c <__aeabi_l2f+0x14>
 8000c26:	bf00      	nop

08000c28 <__aeabi_l2f>:
 8000c28:	ea50 0201 	orrs.w	r2, r0, r1
 8000c2c:	bf08      	it	eq
 8000c2e:	4770      	bxeq	lr
 8000c30:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000c34:	d502      	bpl.n	8000c3c <__aeabi_l2f+0x14>
 8000c36:	4240      	negs	r0, r0
 8000c38:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c3c:	ea5f 0c01 	movs.w	ip, r1
 8000c40:	bf02      	ittt	eq
 8000c42:	4684      	moveq	ip, r0
 8000c44:	4601      	moveq	r1, r0
 8000c46:	2000      	moveq	r0, #0
 8000c48:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000c4c:	bf08      	it	eq
 8000c4e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000c52:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000c56:	fabc f28c 	clz	r2, ip
 8000c5a:	3a08      	subs	r2, #8
 8000c5c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000c60:	db10      	blt.n	8000c84 <__aeabi_l2f+0x5c>
 8000c62:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c66:	4463      	add	r3, ip
 8000c68:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c6c:	f1c2 0220 	rsb	r2, r2, #32
 8000c70:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000c74:	fa20 f202 	lsr.w	r2, r0, r2
 8000c78:	eb43 0002 	adc.w	r0, r3, r2
 8000c7c:	bf08      	it	eq
 8000c7e:	f020 0001 	biceq.w	r0, r0, #1
 8000c82:	4770      	bx	lr
 8000c84:	f102 0220 	add.w	r2, r2, #32
 8000c88:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c8c:	f1c2 0220 	rsb	r2, r2, #32
 8000c90:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000c94:	fa21 f202 	lsr.w	r2, r1, r2
 8000c98:	eb43 0002 	adc.w	r0, r3, r2
 8000c9c:	bf08      	it	eq
 8000c9e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ca2:	4770      	bx	lr

08000ca4 <__aeabi_fmul>:
 8000ca4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ca8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000cac:	bf1e      	ittt	ne
 8000cae:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000cb2:	ea92 0f0c 	teqne	r2, ip
 8000cb6:	ea93 0f0c 	teqne	r3, ip
 8000cba:	d06f      	beq.n	8000d9c <__aeabi_fmul+0xf8>
 8000cbc:	441a      	add	r2, r3
 8000cbe:	ea80 0c01 	eor.w	ip, r0, r1
 8000cc2:	0240      	lsls	r0, r0, #9
 8000cc4:	bf18      	it	ne
 8000cc6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000cca:	d01e      	beq.n	8000d0a <__aeabi_fmul+0x66>
 8000ccc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000cd0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000cd4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000cd8:	fba0 3101 	umull	r3, r1, r0, r1
 8000cdc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ce0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000ce4:	bf3e      	ittt	cc
 8000ce6:	0049      	lslcc	r1, r1, #1
 8000ce8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000cec:	005b      	lslcc	r3, r3, #1
 8000cee:	ea40 0001 	orr.w	r0, r0, r1
 8000cf2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000cf6:	2afd      	cmp	r2, #253	; 0xfd
 8000cf8:	d81d      	bhi.n	8000d36 <__aeabi_fmul+0x92>
 8000cfa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000cfe:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d02:	bf08      	it	eq
 8000d04:	f020 0001 	biceq.w	r0, r0, #1
 8000d08:	4770      	bx	lr
 8000d0a:	f090 0f00 	teq	r0, #0
 8000d0e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000d12:	bf08      	it	eq
 8000d14:	0249      	lsleq	r1, r1, #9
 8000d16:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d1a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d1e:	3a7f      	subs	r2, #127	; 0x7f
 8000d20:	bfc2      	ittt	gt
 8000d22:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000d26:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d2a:	4770      	bxgt	lr
 8000d2c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d30:	f04f 0300 	mov.w	r3, #0
 8000d34:	3a01      	subs	r2, #1
 8000d36:	dc5d      	bgt.n	8000df4 <__aeabi_fmul+0x150>
 8000d38:	f112 0f19 	cmn.w	r2, #25
 8000d3c:	bfdc      	itt	le
 8000d3e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000d42:	4770      	bxle	lr
 8000d44:	f1c2 0200 	rsb	r2, r2, #0
 8000d48:	0041      	lsls	r1, r0, #1
 8000d4a:	fa21 f102 	lsr.w	r1, r1, r2
 8000d4e:	f1c2 0220 	rsb	r2, r2, #32
 8000d52:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d56:	ea5f 0031 	movs.w	r0, r1, rrx
 8000d5a:	f140 0000 	adc.w	r0, r0, #0
 8000d5e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000d62:	bf08      	it	eq
 8000d64:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d68:	4770      	bx	lr
 8000d6a:	f092 0f00 	teq	r2, #0
 8000d6e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000d72:	bf02      	ittt	eq
 8000d74:	0040      	lsleq	r0, r0, #1
 8000d76:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000d7a:	3a01      	subeq	r2, #1
 8000d7c:	d0f9      	beq.n	8000d72 <__aeabi_fmul+0xce>
 8000d7e:	ea40 000c 	orr.w	r0, r0, ip
 8000d82:	f093 0f00 	teq	r3, #0
 8000d86:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000d8a:	bf02      	ittt	eq
 8000d8c:	0049      	lsleq	r1, r1, #1
 8000d8e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000d92:	3b01      	subeq	r3, #1
 8000d94:	d0f9      	beq.n	8000d8a <__aeabi_fmul+0xe6>
 8000d96:	ea41 010c 	orr.w	r1, r1, ip
 8000d9a:	e78f      	b.n	8000cbc <__aeabi_fmul+0x18>
 8000d9c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000da0:	ea92 0f0c 	teq	r2, ip
 8000da4:	bf18      	it	ne
 8000da6:	ea93 0f0c 	teqne	r3, ip
 8000daa:	d00a      	beq.n	8000dc2 <__aeabi_fmul+0x11e>
 8000dac:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000db0:	bf18      	it	ne
 8000db2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000db6:	d1d8      	bne.n	8000d6a <__aeabi_fmul+0xc6>
 8000db8:	ea80 0001 	eor.w	r0, r0, r1
 8000dbc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000dc0:	4770      	bx	lr
 8000dc2:	f090 0f00 	teq	r0, #0
 8000dc6:	bf17      	itett	ne
 8000dc8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000dcc:	4608      	moveq	r0, r1
 8000dce:	f091 0f00 	teqne	r1, #0
 8000dd2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000dd6:	d014      	beq.n	8000e02 <__aeabi_fmul+0x15e>
 8000dd8:	ea92 0f0c 	teq	r2, ip
 8000ddc:	d101      	bne.n	8000de2 <__aeabi_fmul+0x13e>
 8000dde:	0242      	lsls	r2, r0, #9
 8000de0:	d10f      	bne.n	8000e02 <__aeabi_fmul+0x15e>
 8000de2:	ea93 0f0c 	teq	r3, ip
 8000de6:	d103      	bne.n	8000df0 <__aeabi_fmul+0x14c>
 8000de8:	024b      	lsls	r3, r1, #9
 8000dea:	bf18      	it	ne
 8000dec:	4608      	movne	r0, r1
 8000dee:	d108      	bne.n	8000e02 <__aeabi_fmul+0x15e>
 8000df0:	ea80 0001 	eor.w	r0, r0, r1
 8000df4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000df8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000dfc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e00:	4770      	bx	lr
 8000e02:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e06:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000e0a:	4770      	bx	lr

08000e0c <__aeabi_fdiv>:
 8000e0c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e10:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e14:	bf1e      	ittt	ne
 8000e16:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e1a:	ea92 0f0c 	teqne	r2, ip
 8000e1e:	ea93 0f0c 	teqne	r3, ip
 8000e22:	d069      	beq.n	8000ef8 <__aeabi_fdiv+0xec>
 8000e24:	eba2 0203 	sub.w	r2, r2, r3
 8000e28:	ea80 0c01 	eor.w	ip, r0, r1
 8000e2c:	0249      	lsls	r1, r1, #9
 8000e2e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e32:	d037      	beq.n	8000ea4 <__aeabi_fdiv+0x98>
 8000e34:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000e38:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000e3c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000e40:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000e44:	428b      	cmp	r3, r1
 8000e46:	bf38      	it	cc
 8000e48:	005b      	lslcc	r3, r3, #1
 8000e4a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000e4e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000e52:	428b      	cmp	r3, r1
 8000e54:	bf24      	itt	cs
 8000e56:	1a5b      	subcs	r3, r3, r1
 8000e58:	ea40 000c 	orrcs.w	r0, r0, ip
 8000e5c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000e60:	bf24      	itt	cs
 8000e62:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000e66:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000e6a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000e6e:	bf24      	itt	cs
 8000e70:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000e74:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000e78:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000e7c:	bf24      	itt	cs
 8000e7e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000e82:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000e86:	011b      	lsls	r3, r3, #4
 8000e88:	bf18      	it	ne
 8000e8a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000e8e:	d1e0      	bne.n	8000e52 <__aeabi_fdiv+0x46>
 8000e90:	2afd      	cmp	r2, #253	; 0xfd
 8000e92:	f63f af50 	bhi.w	8000d36 <__aeabi_fmul+0x92>
 8000e96:	428b      	cmp	r3, r1
 8000e98:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e9c:	bf08      	it	eq
 8000e9e:	f020 0001 	biceq.w	r0, r0, #1
 8000ea2:	4770      	bx	lr
 8000ea4:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000ea8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000eac:	327f      	adds	r2, #127	; 0x7f
 8000eae:	bfc2      	ittt	gt
 8000eb0:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000eb4:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000eb8:	4770      	bxgt	lr
 8000eba:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ebe:	f04f 0300 	mov.w	r3, #0
 8000ec2:	3a01      	subs	r2, #1
 8000ec4:	e737      	b.n	8000d36 <__aeabi_fmul+0x92>
 8000ec6:	f092 0f00 	teq	r2, #0
 8000eca:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000ece:	bf02      	ittt	eq
 8000ed0:	0040      	lsleq	r0, r0, #1
 8000ed2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000ed6:	3a01      	subeq	r2, #1
 8000ed8:	d0f9      	beq.n	8000ece <__aeabi_fdiv+0xc2>
 8000eda:	ea40 000c 	orr.w	r0, r0, ip
 8000ede:	f093 0f00 	teq	r3, #0
 8000ee2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ee6:	bf02      	ittt	eq
 8000ee8:	0049      	lsleq	r1, r1, #1
 8000eea:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000eee:	3b01      	subeq	r3, #1
 8000ef0:	d0f9      	beq.n	8000ee6 <__aeabi_fdiv+0xda>
 8000ef2:	ea41 010c 	orr.w	r1, r1, ip
 8000ef6:	e795      	b.n	8000e24 <__aeabi_fdiv+0x18>
 8000ef8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000efc:	ea92 0f0c 	teq	r2, ip
 8000f00:	d108      	bne.n	8000f14 <__aeabi_fdiv+0x108>
 8000f02:	0242      	lsls	r2, r0, #9
 8000f04:	f47f af7d 	bne.w	8000e02 <__aeabi_fmul+0x15e>
 8000f08:	ea93 0f0c 	teq	r3, ip
 8000f0c:	f47f af70 	bne.w	8000df0 <__aeabi_fmul+0x14c>
 8000f10:	4608      	mov	r0, r1
 8000f12:	e776      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f14:	ea93 0f0c 	teq	r3, ip
 8000f18:	d104      	bne.n	8000f24 <__aeabi_fdiv+0x118>
 8000f1a:	024b      	lsls	r3, r1, #9
 8000f1c:	f43f af4c 	beq.w	8000db8 <__aeabi_fmul+0x114>
 8000f20:	4608      	mov	r0, r1
 8000f22:	e76e      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f24:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f28:	bf18      	it	ne
 8000f2a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000f2e:	d1ca      	bne.n	8000ec6 <__aeabi_fdiv+0xba>
 8000f30:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000f34:	f47f af5c 	bne.w	8000df0 <__aeabi_fmul+0x14c>
 8000f38:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000f3c:	f47f af3c 	bne.w	8000db8 <__aeabi_fmul+0x114>
 8000f40:	e75f      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f42:	bf00      	nop

08000f44 <CLCD_Delay>:
******************************************************************************************************************/
#include "CLCD_I2C.h"

//************************** Low Level Function ****************************************************************//
static void CLCD_Delay(uint16_t Time)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b082      	sub	sp, #8
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	80fb      	strh	r3, [r7, #6]
	HAL_Delay(Time);
 8000f4e:	88fb      	ldrh	r3, [r7, #6]
 8000f50:	4618      	mov	r0, r3
 8000f52:	f000 ffa3 	bl	8001e9c <HAL_Delay>
}
 8000f56:	bf00      	nop
 8000f58:	3708      	adds	r7, #8
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	bd80      	pop	{r7, pc}

08000f5e <CLCD_WriteI2C>:
static void CLCD_WriteI2C(CLCD_I2C_Name* LCD, uint8_t Data, uint8_t Mode)
{
 8000f5e:	b580      	push	{r7, lr}
 8000f60:	b086      	sub	sp, #24
 8000f62:	af02      	add	r7, sp, #8
 8000f64:	6078      	str	r0, [r7, #4]
 8000f66:	460b      	mov	r3, r1
 8000f68:	70fb      	strb	r3, [r7, #3]
 8000f6a:	4613      	mov	r3, r2
 8000f6c:	70bb      	strb	r3, [r7, #2]
	char Data_H;
	char Data_L;
	uint8_t Data_I2C[4];
	Data_H = Data&0xF0;
 8000f6e:	78fb      	ldrb	r3, [r7, #3]
 8000f70:	f023 030f 	bic.w	r3, r3, #15
 8000f74:	73fb      	strb	r3, [r7, #15]
	Data_L = (Data<<4)&0xF0;
 8000f76:	78fb      	ldrb	r3, [r7, #3]
 8000f78:	011b      	lsls	r3, r3, #4
 8000f7a:	73bb      	strb	r3, [r7, #14]
	if(LCD->BACKLIGHT)
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	7adb      	ldrb	r3, [r3, #11]
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d007      	beq.n	8000f94 <CLCD_WriteI2C+0x36>
	{
		Data_H |= LCD_BACKLIGHT; 
 8000f84:	7bfb      	ldrb	r3, [r7, #15]
 8000f86:	f043 0308 	orr.w	r3, r3, #8
 8000f8a:	73fb      	strb	r3, [r7, #15]
		Data_L |= LCD_BACKLIGHT; 
 8000f8c:	7bbb      	ldrb	r3, [r7, #14]
 8000f8e:	f043 0308 	orr.w	r3, r3, #8
 8000f92:	73bb      	strb	r3, [r7, #14]
	}
	if(Mode == CLCD_DATA)
 8000f94:	78bb      	ldrb	r3, [r7, #2]
 8000f96:	2b01      	cmp	r3, #1
 8000f98:	d108      	bne.n	8000fac <CLCD_WriteI2C+0x4e>
	{
		Data_H |= LCD_RS;
 8000f9a:	7bfb      	ldrb	r3, [r7, #15]
 8000f9c:	f043 0301 	orr.w	r3, r3, #1
 8000fa0:	73fb      	strb	r3, [r7, #15]
		Data_L |= LCD_RS;
 8000fa2:	7bbb      	ldrb	r3, [r7, #14]
 8000fa4:	f043 0301 	orr.w	r3, r3, #1
 8000fa8:	73bb      	strb	r3, [r7, #14]
 8000faa:	e00a      	b.n	8000fc2 <CLCD_WriteI2C+0x64>
	}
	else if(Mode == CLCD_COMMAND)
 8000fac:	78bb      	ldrb	r3, [r7, #2]
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d107      	bne.n	8000fc2 <CLCD_WriteI2C+0x64>
	{
		Data_H &= ~LCD_RS;
 8000fb2:	7bfb      	ldrb	r3, [r7, #15]
 8000fb4:	f023 0301 	bic.w	r3, r3, #1
 8000fb8:	73fb      	strb	r3, [r7, #15]
		Data_L &= ~LCD_RS;
 8000fba:	7bbb      	ldrb	r3, [r7, #14]
 8000fbc:	f023 0301 	bic.w	r3, r3, #1
 8000fc0:	73bb      	strb	r3, [r7, #14]
	}
	Data_I2C[0] = Data_H|LCD_EN;
 8000fc2:	7bfb      	ldrb	r3, [r7, #15]
 8000fc4:	f043 0304 	orr.w	r3, r3, #4
 8000fc8:	b2db      	uxtb	r3, r3
 8000fca:	723b      	strb	r3, [r7, #8]
	CLCD_Delay(1);
 8000fcc:	2001      	movs	r0, #1
 8000fce:	f7ff ffb9 	bl	8000f44 <CLCD_Delay>
	Data_I2C[1] = Data_H;
 8000fd2:	7bfb      	ldrb	r3, [r7, #15]
 8000fd4:	727b      	strb	r3, [r7, #9]
	Data_I2C[2] = Data_L|LCD_EN;
 8000fd6:	7bbb      	ldrb	r3, [r7, #14]
 8000fd8:	f043 0304 	orr.w	r3, r3, #4
 8000fdc:	b2db      	uxtb	r3, r3
 8000fde:	72bb      	strb	r3, [r7, #10]
	CLCD_Delay(1);
 8000fe0:	2001      	movs	r0, #1
 8000fe2:	f7ff ffaf 	bl	8000f44 <CLCD_Delay>
	Data_I2C[3] = Data_L;
 8000fe6:	7bbb      	ldrb	r3, [r7, #14]
 8000fe8:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit(LCD->I2C, LCD->ADDRESS, (uint8_t *)Data_I2C, sizeof(Data_I2C), 1000);
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	6818      	ldr	r0, [r3, #0]
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	791b      	ldrb	r3, [r3, #4]
 8000ff2:	b299      	uxth	r1, r3
 8000ff4:	f107 0208 	add.w	r2, r7, #8
 8000ff8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ffc:	9300      	str	r3, [sp, #0]
 8000ffe:	2304      	movs	r3, #4
 8001000:	f001 fbca 	bl	8002798 <HAL_I2C_Master_Transmit>
}
 8001004:	bf00      	nop
 8001006:	3710      	adds	r7, #16
 8001008:	46bd      	mov	sp, r7
 800100a:	bd80      	pop	{r7, pc}

0800100c <CLCD_I2C_Init>:


//************************** High Level Function ****************************************************************//
void CLCD_I2C_Init(CLCD_I2C_Name* LCD, I2C_HandleTypeDef* hi2c_CLCD, uint8_t Address, uint8_t Colums, uint8_t Rows)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b084      	sub	sp, #16
 8001010:	af00      	add	r7, sp, #0
 8001012:	60f8      	str	r0, [r7, #12]
 8001014:	60b9      	str	r1, [r7, #8]
 8001016:	4611      	mov	r1, r2
 8001018:	461a      	mov	r2, r3
 800101a:	460b      	mov	r3, r1
 800101c:	71fb      	strb	r3, [r7, #7]
 800101e:	4613      	mov	r3, r2
 8001020:	71bb      	strb	r3, [r7, #6]
	LCD->I2C = hi2c_CLCD;
 8001022:	68fb      	ldr	r3, [r7, #12]
 8001024:	68ba      	ldr	r2, [r7, #8]
 8001026:	601a      	str	r2, [r3, #0]
	LCD->ADDRESS = Address;
 8001028:	68fb      	ldr	r3, [r7, #12]
 800102a:	79fa      	ldrb	r2, [r7, #7]
 800102c:	711a      	strb	r2, [r3, #4]
	LCD->COLUMS = Colums;
 800102e:	68fb      	ldr	r3, [r7, #12]
 8001030:	79ba      	ldrb	r2, [r7, #6]
 8001032:	715a      	strb	r2, [r3, #5]
	LCD->ROWS = Rows;
 8001034:	68fb      	ldr	r3, [r7, #12]
 8001036:	7e3a      	ldrb	r2, [r7, #24]
 8001038:	719a      	strb	r2, [r3, #6]
	
	LCD->FUNCTIONSET = LCD_FUNCTIONSET|LCD_4BITMODE|LCD_2LINE|LCD_5x8DOTS;
 800103a:	68fb      	ldr	r3, [r7, #12]
 800103c:	2228      	movs	r2, #40	; 0x28
 800103e:	729a      	strb	r2, [r3, #10]
	LCD->ENTRYMODE = LCD_ENTRYMODESET|LCD_ENTRYLEFT|LCD_ENTRYSHIFTDECREMENT;
 8001040:	68fb      	ldr	r3, [r7, #12]
 8001042:	2206      	movs	r2, #6
 8001044:	71da      	strb	r2, [r3, #7]
	LCD->DISPLAYCTRL = LCD_DISPLAYCONTROL|LCD_DISPLAYON|LCD_CURSOROFF|LCD_BLINKOFF;
 8001046:	68fb      	ldr	r3, [r7, #12]
 8001048:	220c      	movs	r2, #12
 800104a:	721a      	strb	r2, [r3, #8]
	LCD->CURSORSHIFT = LCD_CURSORSHIFT|LCD_CURSORMOVE|LCD_MOVERIGHT;
 800104c:	68fb      	ldr	r3, [r7, #12]
 800104e:	2214      	movs	r2, #20
 8001050:	725a      	strb	r2, [r3, #9]
	LCD->BACKLIGHT = LCD_BACKLIGHT;
 8001052:	68fb      	ldr	r3, [r7, #12]
 8001054:	2208      	movs	r2, #8
 8001056:	72da      	strb	r2, [r3, #11]

	CLCD_Delay(50);
 8001058:	2032      	movs	r0, #50	; 0x32
 800105a:	f7ff ff73 	bl	8000f44 <CLCD_Delay>
	CLCD_WriteI2C(LCD, 0x33, CLCD_COMMAND);
 800105e:	2200      	movs	r2, #0
 8001060:	2133      	movs	r1, #51	; 0x33
 8001062:	68f8      	ldr	r0, [r7, #12]
 8001064:	f7ff ff7b 	bl	8000f5e <CLCD_WriteI2C>
//	CLCD_Delay(5);
	CLCD_WriteI2C(LCD, 0x33, CLCD_COMMAND);
 8001068:	2200      	movs	r2, #0
 800106a:	2133      	movs	r1, #51	; 0x33
 800106c:	68f8      	ldr	r0, [r7, #12]
 800106e:	f7ff ff76 	bl	8000f5e <CLCD_WriteI2C>
	CLCD_Delay(5);
 8001072:	2005      	movs	r0, #5
 8001074:	f7ff ff66 	bl	8000f44 <CLCD_Delay>
	CLCD_WriteI2C(LCD, 0x32, CLCD_COMMAND);
 8001078:	2200      	movs	r2, #0
 800107a:	2132      	movs	r1, #50	; 0x32
 800107c:	68f8      	ldr	r0, [r7, #12]
 800107e:	f7ff ff6e 	bl	8000f5e <CLCD_WriteI2C>
	CLCD_Delay(5);
 8001082:	2005      	movs	r0, #5
 8001084:	f7ff ff5e 	bl	8000f44 <CLCD_Delay>
	CLCD_WriteI2C(LCD, 0x20, CLCD_COMMAND);
 8001088:	2200      	movs	r2, #0
 800108a:	2120      	movs	r1, #32
 800108c:	68f8      	ldr	r0, [r7, #12]
 800108e:	f7ff ff66 	bl	8000f5e <CLCD_WriteI2C>
	CLCD_Delay(5);
 8001092:	2005      	movs	r0, #5
 8001094:	f7ff ff56 	bl	8000f44 <CLCD_Delay>
	
	CLCD_WriteI2C(LCD, LCD->ENTRYMODE,CLCD_COMMAND);
 8001098:	68fb      	ldr	r3, [r7, #12]
 800109a:	79db      	ldrb	r3, [r3, #7]
 800109c:	2200      	movs	r2, #0
 800109e:	4619      	mov	r1, r3
 80010a0:	68f8      	ldr	r0, [r7, #12]
 80010a2:	f7ff ff5c 	bl	8000f5e <CLCD_WriteI2C>
	CLCD_WriteI2C(LCD, LCD->DISPLAYCTRL,CLCD_COMMAND);
 80010a6:	68fb      	ldr	r3, [r7, #12]
 80010a8:	7a1b      	ldrb	r3, [r3, #8]
 80010aa:	2200      	movs	r2, #0
 80010ac:	4619      	mov	r1, r3
 80010ae:	68f8      	ldr	r0, [r7, #12]
 80010b0:	f7ff ff55 	bl	8000f5e <CLCD_WriteI2C>
	CLCD_WriteI2C(LCD, LCD->CURSORSHIFT,CLCD_COMMAND);
 80010b4:	68fb      	ldr	r3, [r7, #12]
 80010b6:	7a5b      	ldrb	r3, [r3, #9]
 80010b8:	2200      	movs	r2, #0
 80010ba:	4619      	mov	r1, r3
 80010bc:	68f8      	ldr	r0, [r7, #12]
 80010be:	f7ff ff4e 	bl	8000f5e <CLCD_WriteI2C>
	CLCD_WriteI2C(LCD, LCD->FUNCTIONSET,CLCD_COMMAND);
 80010c2:	68fb      	ldr	r3, [r7, #12]
 80010c4:	7a9b      	ldrb	r3, [r3, #10]
 80010c6:	2200      	movs	r2, #0
 80010c8:	4619      	mov	r1, r3
 80010ca:	68f8      	ldr	r0, [r7, #12]
 80010cc:	f7ff ff47 	bl	8000f5e <CLCD_WriteI2C>
	
	CLCD_WriteI2C(LCD, LCD_CLEARDISPLAY,CLCD_COMMAND);
 80010d0:	2200      	movs	r2, #0
 80010d2:	2101      	movs	r1, #1
 80010d4:	68f8      	ldr	r0, [r7, #12]
 80010d6:	f7ff ff42 	bl	8000f5e <CLCD_WriteI2C>
	CLCD_WriteI2C(LCD, LCD_RETURNHOME,CLCD_COMMAND);
 80010da:	2200      	movs	r2, #0
 80010dc:	2102      	movs	r1, #2
 80010de:	68f8      	ldr	r0, [r7, #12]
 80010e0:	f7ff ff3d 	bl	8000f5e <CLCD_WriteI2C>
}
 80010e4:	bf00      	nop
 80010e6:	3710      	adds	r7, #16
 80010e8:	46bd      	mov	sp, r7
 80010ea:	bd80      	pop	{r7, pc}

080010ec <CLCD_I2C_SetCursor>:
void CLCD_I2C_SetCursor(CLCD_I2C_Name* LCD, uint8_t Xpos, uint8_t Ypos)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b084      	sub	sp, #16
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	6078      	str	r0, [r7, #4]
 80010f4:	460b      	mov	r3, r1
 80010f6:	70fb      	strb	r3, [r7, #3]
 80010f8:	4613      	mov	r3, r2
 80010fa:	70bb      	strb	r3, [r7, #2]
	uint8_t DRAM_ADDRESS = 0x00;
 80010fc:	2300      	movs	r3, #0
 80010fe:	73fb      	strb	r3, [r7, #15]
	if(Xpos >= LCD->COLUMS)
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	795b      	ldrb	r3, [r3, #5]
 8001104:	78fa      	ldrb	r2, [r7, #3]
 8001106:	429a      	cmp	r2, r3
 8001108:	d303      	bcc.n	8001112 <CLCD_I2C_SetCursor+0x26>
	{
		Xpos = LCD->COLUMS - 1;
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	795b      	ldrb	r3, [r3, #5]
 800110e:	3b01      	subs	r3, #1
 8001110:	70fb      	strb	r3, [r7, #3]
	}
	if(Ypos >= LCD->ROWS)
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	799b      	ldrb	r3, [r3, #6]
 8001116:	78ba      	ldrb	r2, [r7, #2]
 8001118:	429a      	cmp	r2, r3
 800111a:	d303      	bcc.n	8001124 <CLCD_I2C_SetCursor+0x38>
	{
		Ypos = LCD->ROWS -1;
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	799b      	ldrb	r3, [r3, #6]
 8001120:	3b01      	subs	r3, #1
 8001122:	70bb      	strb	r3, [r7, #2]
	}
	if(Ypos == 0)
 8001124:	78bb      	ldrb	r3, [r7, #2]
 8001126:	2b00      	cmp	r3, #0
 8001128:	d102      	bne.n	8001130 <CLCD_I2C_SetCursor+0x44>
	{
		DRAM_ADDRESS = 0x00 + Xpos;
 800112a:	78fb      	ldrb	r3, [r7, #3]
 800112c:	73fb      	strb	r3, [r7, #15]
 800112e:	e013      	b.n	8001158 <CLCD_I2C_SetCursor+0x6c>
	}
	else if(Ypos == 1)
 8001130:	78bb      	ldrb	r3, [r7, #2]
 8001132:	2b01      	cmp	r3, #1
 8001134:	d103      	bne.n	800113e <CLCD_I2C_SetCursor+0x52>
	{
		DRAM_ADDRESS = 0x40 + Xpos;
 8001136:	78fb      	ldrb	r3, [r7, #3]
 8001138:	3340      	adds	r3, #64	; 0x40
 800113a:	73fb      	strb	r3, [r7, #15]
 800113c:	e00c      	b.n	8001158 <CLCD_I2C_SetCursor+0x6c>
	}
	else if(Ypos == 2)
 800113e:	78bb      	ldrb	r3, [r7, #2]
 8001140:	2b02      	cmp	r3, #2
 8001142:	d103      	bne.n	800114c <CLCD_I2C_SetCursor+0x60>
	{
		DRAM_ADDRESS = 0x14 + Xpos;
 8001144:	78fb      	ldrb	r3, [r7, #3]
 8001146:	3314      	adds	r3, #20
 8001148:	73fb      	strb	r3, [r7, #15]
 800114a:	e005      	b.n	8001158 <CLCD_I2C_SetCursor+0x6c>
	}
	else if(Ypos == 3)
 800114c:	78bb      	ldrb	r3, [r7, #2]
 800114e:	2b03      	cmp	r3, #3
 8001150:	d102      	bne.n	8001158 <CLCD_I2C_SetCursor+0x6c>
	{
		DRAM_ADDRESS = 0x54 + Xpos;
 8001152:	78fb      	ldrb	r3, [r7, #3]
 8001154:	3354      	adds	r3, #84	; 0x54
 8001156:	73fb      	strb	r3, [r7, #15]
	}
	CLCD_WriteI2C(LCD, LCD_SETDDRAMADDR|DRAM_ADDRESS, CLCD_COMMAND);
 8001158:	7bfb      	ldrb	r3, [r7, #15]
 800115a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800115e:	b2db      	uxtb	r3, r3
 8001160:	2200      	movs	r2, #0
 8001162:	4619      	mov	r1, r3
 8001164:	6878      	ldr	r0, [r7, #4]
 8001166:	f7ff fefa 	bl	8000f5e <CLCD_WriteI2C>
}
 800116a:	bf00      	nop
 800116c:	3710      	adds	r7, #16
 800116e:	46bd      	mov	sp, r7
 8001170:	bd80      	pop	{r7, pc}

08001172 <CLCD_I2C_WriteChar>:
void CLCD_I2C_WriteChar(CLCD_I2C_Name* LCD, char character)
{
 8001172:	b580      	push	{r7, lr}
 8001174:	b082      	sub	sp, #8
 8001176:	af00      	add	r7, sp, #0
 8001178:	6078      	str	r0, [r7, #4]
 800117a:	460b      	mov	r3, r1
 800117c:	70fb      	strb	r3, [r7, #3]
	CLCD_WriteI2C(LCD, character, CLCD_DATA);
 800117e:	78fb      	ldrb	r3, [r7, #3]
 8001180:	2201      	movs	r2, #1
 8001182:	4619      	mov	r1, r3
 8001184:	6878      	ldr	r0, [r7, #4]
 8001186:	f7ff feea 	bl	8000f5e <CLCD_WriteI2C>
}
 800118a:	bf00      	nop
 800118c:	3708      	adds	r7, #8
 800118e:	46bd      	mov	sp, r7
 8001190:	bd80      	pop	{r7, pc}

08001192 <CLCD_I2C_WriteString>:
void CLCD_I2C_WriteString(CLCD_I2C_Name* LCD, char *String)
{
 8001192:	b580      	push	{r7, lr}
 8001194:	b082      	sub	sp, #8
 8001196:	af00      	add	r7, sp, #0
 8001198:	6078      	str	r0, [r7, #4]
 800119a:	6039      	str	r1, [r7, #0]
	while(*String)CLCD_I2C_WriteChar(LCD, *String++);
 800119c:	e007      	b.n	80011ae <CLCD_I2C_WriteString+0x1c>
 800119e:	683b      	ldr	r3, [r7, #0]
 80011a0:	1c5a      	adds	r2, r3, #1
 80011a2:	603a      	str	r2, [r7, #0]
 80011a4:	781b      	ldrb	r3, [r3, #0]
 80011a6:	4619      	mov	r1, r3
 80011a8:	6878      	ldr	r0, [r7, #4]
 80011aa:	f7ff ffe2 	bl	8001172 <CLCD_I2C_WriteChar>
 80011ae:	683b      	ldr	r3, [r7, #0]
 80011b0:	781b      	ldrb	r3, [r3, #0]
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d1f3      	bne.n	800119e <CLCD_I2C_WriteString+0xc>
}
 80011b6:	bf00      	nop
 80011b8:	bf00      	nop
 80011ba:	3708      	adds	r7, #8
 80011bc:	46bd      	mov	sp, r7
 80011be:	bd80      	pop	{r7, pc}

080011c0 <HAL_UART_RxCpltCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b082      	sub	sp, #8
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  if(huart->Instance == USART1){
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	4a29      	ldr	r2, [pc, #164]	; (8001274 <HAL_UART_RxCpltCallback+0xb4>)
 80011ce:	4293      	cmp	r3, r2
 80011d0:	d14c      	bne.n	800126c <HAL_UART_RxCpltCallback+0xac>
	 // rxData[sizeof(rxData) - 1] = '\0';
	if ((rxData[0] == 't') && (rxData[1] == 'e') && (rxData[2] == 'm') && (rxData[3] == 'p'))
 80011d2:	4b29      	ldr	r3, [pc, #164]	; (8001278 <HAL_UART_RxCpltCallback+0xb8>)
 80011d4:	781b      	ldrb	r3, [r3, #0]
 80011d6:	2b74      	cmp	r3, #116	; 0x74
 80011d8:	d112      	bne.n	8001200 <HAL_UART_RxCpltCallback+0x40>
 80011da:	4b27      	ldr	r3, [pc, #156]	; (8001278 <HAL_UART_RxCpltCallback+0xb8>)
 80011dc:	785b      	ldrb	r3, [r3, #1]
 80011de:	2b65      	cmp	r3, #101	; 0x65
 80011e0:	d10e      	bne.n	8001200 <HAL_UART_RxCpltCallback+0x40>
 80011e2:	4b25      	ldr	r3, [pc, #148]	; (8001278 <HAL_UART_RxCpltCallback+0xb8>)
 80011e4:	789b      	ldrb	r3, [r3, #2]
 80011e6:	2b6d      	cmp	r3, #109	; 0x6d
 80011e8:	d10a      	bne.n	8001200 <HAL_UART_RxCpltCallback+0x40>
 80011ea:	4b23      	ldr	r3, [pc, #140]	; (8001278 <HAL_UART_RxCpltCallback+0xb8>)
 80011ec:	78db      	ldrb	r3, [r3, #3]
 80011ee:	2b70      	cmp	r3, #112	; 0x70
 80011f0:	d106      	bne.n	8001200 <HAL_UART_RxCpltCallback+0x40>
	{
		DisplayMode = DISPLAY_TEMP;
 80011f2:	4b22      	ldr	r3, [pc, #136]	; (800127c <HAL_UART_RxCpltCallback+0xbc>)
 80011f4:	2200      	movs	r2, #0
 80011f6:	701a      	strb	r2, [r3, #0]
		printf("Change Display Mode to DISPLAY_TEMP\r\n\n");
 80011f8:	4821      	ldr	r0, [pc, #132]	; (8001280 <HAL_UART_RxCpltCallback+0xc0>)
 80011fa:	f007 fee3 	bl	8008fc4 <puts>
 80011fe:	e030      	b.n	8001262 <HAL_UART_RxCpltCallback+0xa2>
		//memset(rxData, 0, sizeof(rxData));
	}
	else if ((rxData[0] == 'h') && (rxData[1] == 'u') && (rxData[2] == 'm') && (rxData[3] == 'i'))
 8001200:	4b1d      	ldr	r3, [pc, #116]	; (8001278 <HAL_UART_RxCpltCallback+0xb8>)
 8001202:	781b      	ldrb	r3, [r3, #0]
 8001204:	2b68      	cmp	r3, #104	; 0x68
 8001206:	d112      	bne.n	800122e <HAL_UART_RxCpltCallback+0x6e>
 8001208:	4b1b      	ldr	r3, [pc, #108]	; (8001278 <HAL_UART_RxCpltCallback+0xb8>)
 800120a:	785b      	ldrb	r3, [r3, #1]
 800120c:	2b75      	cmp	r3, #117	; 0x75
 800120e:	d10e      	bne.n	800122e <HAL_UART_RxCpltCallback+0x6e>
 8001210:	4b19      	ldr	r3, [pc, #100]	; (8001278 <HAL_UART_RxCpltCallback+0xb8>)
 8001212:	789b      	ldrb	r3, [r3, #2]
 8001214:	2b6d      	cmp	r3, #109	; 0x6d
 8001216:	d10a      	bne.n	800122e <HAL_UART_RxCpltCallback+0x6e>
 8001218:	4b17      	ldr	r3, [pc, #92]	; (8001278 <HAL_UART_RxCpltCallback+0xb8>)
 800121a:	78db      	ldrb	r3, [r3, #3]
 800121c:	2b69      	cmp	r3, #105	; 0x69
 800121e:	d106      	bne.n	800122e <HAL_UART_RxCpltCallback+0x6e>
	{
		DisplayMode = DISPLAY_HUMID;
 8001220:	4b16      	ldr	r3, [pc, #88]	; (800127c <HAL_UART_RxCpltCallback+0xbc>)
 8001222:	2201      	movs	r2, #1
 8001224:	701a      	strb	r2, [r3, #0]
		printf("Change Display Mode to DISPLAY_HUMI\r\n\n");
 8001226:	4817      	ldr	r0, [pc, #92]	; (8001284 <HAL_UART_RxCpltCallback+0xc4>)
 8001228:	f007 fecc 	bl	8008fc4 <puts>
 800122c:	e019      	b.n	8001262 <HAL_UART_RxCpltCallback+0xa2>
		//memset(rxData, 0, sizeof(rxData));
	}
	else if ((rxData[0] == 'b') && (rxData[1] == 'o') && (rxData[2] == 't') && (rxData[3] == 'h'))
 800122e:	4b12      	ldr	r3, [pc, #72]	; (8001278 <HAL_UART_RxCpltCallback+0xb8>)
 8001230:	781b      	ldrb	r3, [r3, #0]
 8001232:	2b62      	cmp	r3, #98	; 0x62
 8001234:	d112      	bne.n	800125c <HAL_UART_RxCpltCallback+0x9c>
 8001236:	4b10      	ldr	r3, [pc, #64]	; (8001278 <HAL_UART_RxCpltCallback+0xb8>)
 8001238:	785b      	ldrb	r3, [r3, #1]
 800123a:	2b6f      	cmp	r3, #111	; 0x6f
 800123c:	d10e      	bne.n	800125c <HAL_UART_RxCpltCallback+0x9c>
 800123e:	4b0e      	ldr	r3, [pc, #56]	; (8001278 <HAL_UART_RxCpltCallback+0xb8>)
 8001240:	789b      	ldrb	r3, [r3, #2]
 8001242:	2b74      	cmp	r3, #116	; 0x74
 8001244:	d10a      	bne.n	800125c <HAL_UART_RxCpltCallback+0x9c>
 8001246:	4b0c      	ldr	r3, [pc, #48]	; (8001278 <HAL_UART_RxCpltCallback+0xb8>)
 8001248:	78db      	ldrb	r3, [r3, #3]
 800124a:	2b68      	cmp	r3, #104	; 0x68
 800124c:	d106      	bne.n	800125c <HAL_UART_RxCpltCallback+0x9c>
	{
		DisplayMode = DISPLAY_ALL;
 800124e:	4b0b      	ldr	r3, [pc, #44]	; (800127c <HAL_UART_RxCpltCallback+0xbc>)
 8001250:	2202      	movs	r2, #2
 8001252:	701a      	strb	r2, [r3, #0]
		printf("Change Display Mode to DISPLAY_ALL\r\n\n");
 8001254:	480c      	ldr	r0, [pc, #48]	; (8001288 <HAL_UART_RxCpltCallback+0xc8>)
 8001256:	f007 feb5 	bl	8008fc4 <puts>
 800125a:	e002      	b.n	8001262 <HAL_UART_RxCpltCallback+0xa2>
		//memset(rxData, 0, sizeof(rxData));
	}
	else
	{
		printf("Error Command Syntax\r\n\n");
 800125c:	480b      	ldr	r0, [pc, #44]	; (800128c <HAL_UART_RxCpltCallback+0xcc>)
 800125e:	f007 feb1 	bl	8008fc4 <puts>
	}
	HAL_UART_Receive_IT(&huart1, rxData, sizeof(rxData) - 1);
 8001262:	2204      	movs	r2, #4
 8001264:	4904      	ldr	r1, [pc, #16]	; (8001278 <HAL_UART_RxCpltCallback+0xb8>)
 8001266:	480a      	ldr	r0, [pc, #40]	; (8001290 <HAL_UART_RxCpltCallback+0xd0>)
 8001268:	f003 f8df 	bl	800442a <HAL_UART_Receive_IT>
  }

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800126c:	bf00      	nop
 800126e:	3708      	adds	r7, #8
 8001270:	46bd      	mov	sp, r7
 8001272:	bd80      	pop	{r7, pc}
 8001274:	40013800 	.word	0x40013800
 8001278:	20000310 	.word	0x20000310
 800127c:	20000000 	.word	0x20000000
 8001280:	0800b2b0 	.word	0x0800b2b0
 8001284:	0800b2d8 	.word	0x0800b2d8
 8001288:	0800b300 	.word	0x0800b300
 800128c:	0800b328 	.word	0x0800b328
 8001290:	200002ac 	.word	0x200002ac

08001294 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	b082      	sub	sp, #8
 8001298:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800129a:	f000 fdcd 	bl	8001e38 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800129e:	f000 f863 	bl	8001368 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80012a2:	f000 f92d 	bl	8001500 <MX_GPIO_Init>
  MX_I2C1_Init();
 80012a6:	f000 f8a5 	bl	80013f4 <MX_I2C1_Init>
  MX_I2C2_Init();
 80012aa:	f000 f8d1 	bl	8001450 <MX_I2C2_Init>
  MX_USART1_UART_Init();
 80012ae:	f000 f8fd 	bl	80014ac <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  CLCD_I2C_Init(&LCD1, &hi2c2, 0X4e, 20, 4);
 80012b2:	2304      	movs	r3, #4
 80012b4:	9300      	str	r3, [sp, #0]
 80012b6:	2314      	movs	r3, #20
 80012b8:	224e      	movs	r2, #78	; 0x4e
 80012ba:	491b      	ldr	r1, [pc, #108]	; (8001328 <main+0x94>)
 80012bc:	481b      	ldr	r0, [pc, #108]	; (800132c <main+0x98>)
 80012be:	f7ff fea5 	bl	800100c <CLCD_I2C_Init>
  CLCD_I2C_SetCursor(&LCD1,0,0);
 80012c2:	2200      	movs	r2, #0
 80012c4:	2100      	movs	r1, #0
 80012c6:	4819      	ldr	r0, [pc, #100]	; (800132c <main+0x98>)
 80012c8:	f7ff ff10 	bl	80010ec <CLCD_I2C_SetCursor>
  CLCD_I2C_WriteString(&LCD1,"Start");
 80012cc:	4918      	ldr	r1, [pc, #96]	; (8001330 <main+0x9c>)
 80012ce:	4817      	ldr	r0, [pc, #92]	; (800132c <main+0x98>)
 80012d0:	f7ff ff5f 	bl	8001192 <CLCD_I2C_WriteString>
  HAL_UART_Receive_IT(&huart1, rxData, sizeof(rxData) - 1);
 80012d4:	2204      	movs	r2, #4
 80012d6:	4917      	ldr	r1, [pc, #92]	; (8001334 <main+0xa0>)
 80012d8:	4817      	ldr	r0, [pc, #92]	; (8001338 <main+0xa4>)
 80012da:	f003 f8a6 	bl	800442a <HAL_UART_Receive_IT>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80012de:	f003 fe77 	bl	8004fd0 <osKernelInitialize>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of bin_sem */
  bin_semHandle = osSemaphoreNew(1, 1, &bin_sem_attributes);
 80012e2:	4a16      	ldr	r2, [pc, #88]	; (800133c <main+0xa8>)
 80012e4:	2101      	movs	r1, #1
 80012e6:	2001      	movs	r0, #1
 80012e8:	f003 ff4c 	bl	8005184 <osSemaphoreNew>
 80012ec:	4603      	mov	r3, r0
 80012ee:	4a14      	ldr	r2, [pc, #80]	; (8001340 <main+0xac>)
 80012f0:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of measure */
  measureHandle = osThreadNew(measure_task, NULL, &measure_attributes);
 80012f2:	4a14      	ldr	r2, [pc, #80]	; (8001344 <main+0xb0>)
 80012f4:	2100      	movs	r1, #0
 80012f6:	4814      	ldr	r0, [pc, #80]	; (8001348 <main+0xb4>)
 80012f8:	f003 feb2 	bl	8005060 <osThreadNew>
 80012fc:	4603      	mov	r3, r0
 80012fe:	4a13      	ldr	r2, [pc, #76]	; (800134c <main+0xb8>)
 8001300:	6013      	str	r3, [r2, #0]

  /* creation of write_clcd */
  write_clcdHandle = osThreadNew(write_clcd_task, NULL, &write_clcd_attributes);
 8001302:	4a13      	ldr	r2, [pc, #76]	; (8001350 <main+0xbc>)
 8001304:	2100      	movs	r1, #0
 8001306:	4813      	ldr	r0, [pc, #76]	; (8001354 <main+0xc0>)
 8001308:	f003 feaa 	bl	8005060 <osThreadNew>
 800130c:	4603      	mov	r3, r0
 800130e:	4a12      	ldr	r2, [pc, #72]	; (8001358 <main+0xc4>)
 8001310:	6013      	str	r3, [r2, #0]

  /* creation of send_uart */
  send_uartHandle = osThreadNew(send_uart_task, NULL, &send_uart_attributes);
 8001312:	4a12      	ldr	r2, [pc, #72]	; (800135c <main+0xc8>)
 8001314:	2100      	movs	r1, #0
 8001316:	4812      	ldr	r0, [pc, #72]	; (8001360 <main+0xcc>)
 8001318:	f003 fea2 	bl	8005060 <osThreadNew>
 800131c:	4603      	mov	r3, r0
 800131e:	4a11      	ldr	r2, [pc, #68]	; (8001364 <main+0xd0>)
 8001320:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8001322:	f003 fe77 	bl	8005014 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001326:	e7fe      	b.n	8001326 <main+0x92>
 8001328:	20000258 	.word	0x20000258
 800132c:	20000320 	.word	0x20000320
 8001330:	0800b340 	.word	0x0800b340
 8001334:	20000310 	.word	0x20000310
 8001338:	200002ac 	.word	0x200002ac
 800133c:	0800b42c 	.word	0x0800b42c
 8001340:	20000300 	.word	0x20000300
 8001344:	0800b3c0 	.word	0x0800b3c0
 8001348:	0800155d 	.word	0x0800155d
 800134c:	200002f4 	.word	0x200002f4
 8001350:	0800b3e4 	.word	0x0800b3e4
 8001354:	080016d5 	.word	0x080016d5
 8001358:	200002f8 	.word	0x200002f8
 800135c:	0800b408 	.word	0x0800b408
 8001360:	08001831 	.word	0x08001831
 8001364:	200002fc 	.word	0x200002fc

08001368 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	b090      	sub	sp, #64	; 0x40
 800136c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800136e:	f107 0318 	add.w	r3, r7, #24
 8001372:	2228      	movs	r2, #40	; 0x28
 8001374:	2100      	movs	r1, #0
 8001376:	4618      	mov	r0, r3
 8001378:	f007 ff24 	bl	80091c4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800137c:	1d3b      	adds	r3, r7, #4
 800137e:	2200      	movs	r2, #0
 8001380:	601a      	str	r2, [r3, #0]
 8001382:	605a      	str	r2, [r3, #4]
 8001384:	609a      	str	r2, [r3, #8]
 8001386:	60da      	str	r2, [r3, #12]
 8001388:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800138a:	2301      	movs	r3, #1
 800138c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800138e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001392:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001394:	2300      	movs	r3, #0
 8001396:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001398:	2301      	movs	r3, #1
 800139a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800139c:	2302      	movs	r3, #2
 800139e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80013a0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80013a4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80013a6:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80013aa:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80013ac:	f107 0318 	add.w	r3, r7, #24
 80013b0:	4618      	mov	r0, r3
 80013b2:	f002 f8e1 	bl	8003578 <HAL_RCC_OscConfig>
 80013b6:	4603      	mov	r3, r0
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d001      	beq.n	80013c0 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80013bc:	f000 fab6 	bl	800192c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80013c0:	230f      	movs	r3, #15
 80013c2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80013c4:	2302      	movs	r3, #2
 80013c6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80013c8:	2300      	movs	r3, #0
 80013ca:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80013cc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80013d0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80013d2:	2300      	movs	r3, #0
 80013d4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80013d6:	1d3b      	adds	r3, r7, #4
 80013d8:	2102      	movs	r1, #2
 80013da:	4618      	mov	r0, r3
 80013dc:	f002 fb4e 	bl	8003a7c <HAL_RCC_ClockConfig>
 80013e0:	4603      	mov	r3, r0
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d001      	beq.n	80013ea <SystemClock_Config+0x82>
  {
    Error_Handler();
 80013e6:	f000 faa1 	bl	800192c <Error_Handler>
  }
}
 80013ea:	bf00      	nop
 80013ec:	3740      	adds	r7, #64	; 0x40
 80013ee:	46bd      	mov	sp, r7
 80013f0:	bd80      	pop	{r7, pc}
	...

080013f4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80013f8:	4b12      	ldr	r3, [pc, #72]	; (8001444 <MX_I2C1_Init+0x50>)
 80013fa:	4a13      	ldr	r2, [pc, #76]	; (8001448 <MX_I2C1_Init+0x54>)
 80013fc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80013fe:	4b11      	ldr	r3, [pc, #68]	; (8001444 <MX_I2C1_Init+0x50>)
 8001400:	4a12      	ldr	r2, [pc, #72]	; (800144c <MX_I2C1_Init+0x58>)
 8001402:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001404:	4b0f      	ldr	r3, [pc, #60]	; (8001444 <MX_I2C1_Init+0x50>)
 8001406:	2200      	movs	r2, #0
 8001408:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800140a:	4b0e      	ldr	r3, [pc, #56]	; (8001444 <MX_I2C1_Init+0x50>)
 800140c:	2200      	movs	r2, #0
 800140e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001410:	4b0c      	ldr	r3, [pc, #48]	; (8001444 <MX_I2C1_Init+0x50>)
 8001412:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001416:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001418:	4b0a      	ldr	r3, [pc, #40]	; (8001444 <MX_I2C1_Init+0x50>)
 800141a:	2200      	movs	r2, #0
 800141c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800141e:	4b09      	ldr	r3, [pc, #36]	; (8001444 <MX_I2C1_Init+0x50>)
 8001420:	2200      	movs	r2, #0
 8001422:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001424:	4b07      	ldr	r3, [pc, #28]	; (8001444 <MX_I2C1_Init+0x50>)
 8001426:	2200      	movs	r2, #0
 8001428:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800142a:	4b06      	ldr	r3, [pc, #24]	; (8001444 <MX_I2C1_Init+0x50>)
 800142c:	2200      	movs	r2, #0
 800142e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001430:	4804      	ldr	r0, [pc, #16]	; (8001444 <MX_I2C1_Init+0x50>)
 8001432:	f001 f86d 	bl	8002510 <HAL_I2C_Init>
 8001436:	4603      	mov	r3, r0
 8001438:	2b00      	cmp	r3, #0
 800143a:	d001      	beq.n	8001440 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800143c:	f000 fa76 	bl	800192c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001440:	bf00      	nop
 8001442:	bd80      	pop	{r7, pc}
 8001444:	20000204 	.word	0x20000204
 8001448:	40005400 	.word	0x40005400
 800144c:	000186a0 	.word	0x000186a0

08001450 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	af00      	add	r7, sp, #0

  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */
  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001454:	4b12      	ldr	r3, [pc, #72]	; (80014a0 <MX_I2C2_Init+0x50>)
 8001456:	4a13      	ldr	r2, [pc, #76]	; (80014a4 <MX_I2C2_Init+0x54>)
 8001458:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 800145a:	4b11      	ldr	r3, [pc, #68]	; (80014a0 <MX_I2C2_Init+0x50>)
 800145c:	4a12      	ldr	r2, [pc, #72]	; (80014a8 <MX_I2C2_Init+0x58>)
 800145e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001460:	4b0f      	ldr	r3, [pc, #60]	; (80014a0 <MX_I2C2_Init+0x50>)
 8001462:	2200      	movs	r2, #0
 8001464:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8001466:	4b0e      	ldr	r3, [pc, #56]	; (80014a0 <MX_I2C2_Init+0x50>)
 8001468:	2200      	movs	r2, #0
 800146a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800146c:	4b0c      	ldr	r3, [pc, #48]	; (80014a0 <MX_I2C2_Init+0x50>)
 800146e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001472:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001474:	4b0a      	ldr	r3, [pc, #40]	; (80014a0 <MX_I2C2_Init+0x50>)
 8001476:	2200      	movs	r2, #0
 8001478:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 800147a:	4b09      	ldr	r3, [pc, #36]	; (80014a0 <MX_I2C2_Init+0x50>)
 800147c:	2200      	movs	r2, #0
 800147e:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001480:	4b07      	ldr	r3, [pc, #28]	; (80014a0 <MX_I2C2_Init+0x50>)
 8001482:	2200      	movs	r2, #0
 8001484:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001486:	4b06      	ldr	r3, [pc, #24]	; (80014a0 <MX_I2C2_Init+0x50>)
 8001488:	2200      	movs	r2, #0
 800148a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800148c:	4804      	ldr	r0, [pc, #16]	; (80014a0 <MX_I2C2_Init+0x50>)
 800148e:	f001 f83f 	bl	8002510 <HAL_I2C_Init>
 8001492:	4603      	mov	r3, r0
 8001494:	2b00      	cmp	r3, #0
 8001496:	d001      	beq.n	800149c <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001498:	f000 fa48 	bl	800192c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800149c:	bf00      	nop
 800149e:	bd80      	pop	{r7, pc}
 80014a0:	20000258 	.word	0x20000258
 80014a4:	40005800 	.word	0x40005800
 80014a8:	000186a0 	.word	0x000186a0

080014ac <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80014b0:	4b11      	ldr	r3, [pc, #68]	; (80014f8 <MX_USART1_UART_Init+0x4c>)
 80014b2:	4a12      	ldr	r2, [pc, #72]	; (80014fc <MX_USART1_UART_Init+0x50>)
 80014b4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80014b6:	4b10      	ldr	r3, [pc, #64]	; (80014f8 <MX_USART1_UART_Init+0x4c>)
 80014b8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80014bc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80014be:	4b0e      	ldr	r3, [pc, #56]	; (80014f8 <MX_USART1_UART_Init+0x4c>)
 80014c0:	2200      	movs	r2, #0
 80014c2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80014c4:	4b0c      	ldr	r3, [pc, #48]	; (80014f8 <MX_USART1_UART_Init+0x4c>)
 80014c6:	2200      	movs	r2, #0
 80014c8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80014ca:	4b0b      	ldr	r3, [pc, #44]	; (80014f8 <MX_USART1_UART_Init+0x4c>)
 80014cc:	2200      	movs	r2, #0
 80014ce:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80014d0:	4b09      	ldr	r3, [pc, #36]	; (80014f8 <MX_USART1_UART_Init+0x4c>)
 80014d2:	220c      	movs	r2, #12
 80014d4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014d6:	4b08      	ldr	r3, [pc, #32]	; (80014f8 <MX_USART1_UART_Init+0x4c>)
 80014d8:	2200      	movs	r2, #0
 80014da:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80014dc:	4b06      	ldr	r3, [pc, #24]	; (80014f8 <MX_USART1_UART_Init+0x4c>)
 80014de:	2200      	movs	r2, #0
 80014e0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80014e2:	4805      	ldr	r0, [pc, #20]	; (80014f8 <MX_USART1_UART_Init+0x4c>)
 80014e4:	f002 fec6 	bl	8004274 <HAL_UART_Init>
 80014e8:	4603      	mov	r3, r0
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d001      	beq.n	80014f2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80014ee:	f000 fa1d 	bl	800192c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80014f2:	bf00      	nop
 80014f4:	bd80      	pop	{r7, pc}
 80014f6:	bf00      	nop
 80014f8:	200002ac 	.word	0x200002ac
 80014fc:	40013800 	.word	0x40013800

08001500 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001500:	b480      	push	{r7}
 8001502:	b085      	sub	sp, #20
 8001504:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001506:	4b14      	ldr	r3, [pc, #80]	; (8001558 <MX_GPIO_Init+0x58>)
 8001508:	699b      	ldr	r3, [r3, #24]
 800150a:	4a13      	ldr	r2, [pc, #76]	; (8001558 <MX_GPIO_Init+0x58>)
 800150c:	f043 0320 	orr.w	r3, r3, #32
 8001510:	6193      	str	r3, [r2, #24]
 8001512:	4b11      	ldr	r3, [pc, #68]	; (8001558 <MX_GPIO_Init+0x58>)
 8001514:	699b      	ldr	r3, [r3, #24]
 8001516:	f003 0320 	and.w	r3, r3, #32
 800151a:	60fb      	str	r3, [r7, #12]
 800151c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800151e:	4b0e      	ldr	r3, [pc, #56]	; (8001558 <MX_GPIO_Init+0x58>)
 8001520:	699b      	ldr	r3, [r3, #24]
 8001522:	4a0d      	ldr	r2, [pc, #52]	; (8001558 <MX_GPIO_Init+0x58>)
 8001524:	f043 0308 	orr.w	r3, r3, #8
 8001528:	6193      	str	r3, [r2, #24]
 800152a:	4b0b      	ldr	r3, [pc, #44]	; (8001558 <MX_GPIO_Init+0x58>)
 800152c:	699b      	ldr	r3, [r3, #24]
 800152e:	f003 0308 	and.w	r3, r3, #8
 8001532:	60bb      	str	r3, [r7, #8]
 8001534:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001536:	4b08      	ldr	r3, [pc, #32]	; (8001558 <MX_GPIO_Init+0x58>)
 8001538:	699b      	ldr	r3, [r3, #24]
 800153a:	4a07      	ldr	r2, [pc, #28]	; (8001558 <MX_GPIO_Init+0x58>)
 800153c:	f043 0304 	orr.w	r3, r3, #4
 8001540:	6193      	str	r3, [r2, #24]
 8001542:	4b05      	ldr	r3, [pc, #20]	; (8001558 <MX_GPIO_Init+0x58>)
 8001544:	699b      	ldr	r3, [r3, #24]
 8001546:	f003 0304 	and.w	r3, r3, #4
 800154a:	607b      	str	r3, [r7, #4]
 800154c:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800154e:	bf00      	nop
 8001550:	3714      	adds	r7, #20
 8001552:	46bd      	mov	sp, r7
 8001554:	bc80      	pop	{r7}
 8001556:	4770      	bx	lr
 8001558:	40021000 	.word	0x40021000

0800155c <measure_task>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_measure_task */
void measure_task(void *argument)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	b086      	sub	sp, #24
 8001560:	af02      	add	r7, sp, #8
 8001562:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	/* Infinite loop */
	TickType_t previousWakeTime = xTaskGetTickCount();
 8001564:	f005 fb5c 	bl	8006c20 <xTaskGetTickCount>
 8001568:	4603      	mov	r3, r0
 800156a:	60bb      	str	r3, [r7, #8]
  for(;;)
  {
	a++;
 800156c:	4b49      	ldr	r3, [pc, #292]	; (8001694 <measure_task+0x138>)
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	3301      	adds	r3, #1
 8001572:	4a48      	ldr	r2, [pc, #288]	; (8001694 <measure_task+0x138>)
 8001574:	6013      	str	r3, [r2, #0]

	start_time_SHTC3 = HAL_GetTick();
 8001576:	f000 fc87 	bl	8001e88 <HAL_GetTick>
 800157a:	4603      	mov	r3, r0
 800157c:	4a46      	ldr	r2, [pc, #280]	; (8001698 <measure_task+0x13c>)
 800157e:	6013      	str	r3, [r2, #0]
	uint16_t hex_ther;
	uint16_t hex_moisture;
	HAL_I2C_Master_Transmit(&hi2c1,SHTC3_ADDRESS, wakeup_cmd ,2, 500);
 8001580:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001584:	9300      	str	r3, [sp, #0]
 8001586:	2302      	movs	r3, #2
 8001588:	4a44      	ldr	r2, [pc, #272]	; (800169c <measure_task+0x140>)
 800158a:	21e0      	movs	r1, #224	; 0xe0
 800158c:	4844      	ldr	r0, [pc, #272]	; (80016a0 <measure_task+0x144>)
 800158e:	f001 f903 	bl	8002798 <HAL_I2C_Master_Transmit>
	HAL_Delay(1);
 8001592:	2001      	movs	r0, #1
 8001594:	f000 fc82 	bl	8001e9c <HAL_Delay>
	HAL_I2C_Master_Transmit(&hi2c1,SHTC3_ADDRESS, measure_cmd ,2, 500);
 8001598:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800159c:	9300      	str	r3, [sp, #0]
 800159e:	2302      	movs	r3, #2
 80015a0:	4a40      	ldr	r2, [pc, #256]	; (80016a4 <measure_task+0x148>)
 80015a2:	21e0      	movs	r1, #224	; 0xe0
 80015a4:	483e      	ldr	r0, [pc, #248]	; (80016a0 <measure_task+0x144>)
 80015a6:	f001 f8f7 	bl	8002798 <HAL_I2C_Master_Transmit>
	HAL_Delay(15);
 80015aa:	200f      	movs	r0, #15
 80015ac:	f000 fc76 	bl	8001e9c <HAL_Delay>
	HAL_I2C_Master_Receive(&hi2c1,SHTC3_ADDRESS, rev_buffer ,6,500);
 80015b0:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80015b4:	9300      	str	r3, [sp, #0]
 80015b6:	2306      	movs	r3, #6
 80015b8:	4a3b      	ldr	r2, [pc, #236]	; (80016a8 <measure_task+0x14c>)
 80015ba:	21e0      	movs	r1, #224	; 0xe0
 80015bc:	4838      	ldr	r0, [pc, #224]	; (80016a0 <measure_task+0x144>)
 80015be:	f001 f9e9 	bl	8002994 <HAL_I2C_Master_Receive>
	HAL_I2C_Master_Transmit(&hi2c1,SHTC3_ADDRESS, sleep_cmd ,2, 500);
 80015c2:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80015c6:	9300      	str	r3, [sp, #0]
 80015c8:	2302      	movs	r3, #2
 80015ca:	4a38      	ldr	r2, [pc, #224]	; (80016ac <measure_task+0x150>)
 80015cc:	21e0      	movs	r1, #224	; 0xe0
 80015ce:	4834      	ldr	r0, [pc, #208]	; (80016a0 <measure_task+0x144>)
 80015d0:	f001 f8e2 	bl	8002798 <HAL_I2C_Master_Transmit>
	hex_ther = (rev_buffer[0]<<8)|rev_buffer[1];
 80015d4:	4b34      	ldr	r3, [pc, #208]	; (80016a8 <measure_task+0x14c>)
 80015d6:	781b      	ldrb	r3, [r3, #0]
 80015d8:	021b      	lsls	r3, r3, #8
 80015da:	b21a      	sxth	r2, r3
 80015dc:	4b32      	ldr	r3, [pc, #200]	; (80016a8 <measure_task+0x14c>)
 80015de:	785b      	ldrb	r3, [r3, #1]
 80015e0:	b21b      	sxth	r3, r3
 80015e2:	4313      	orrs	r3, r2
 80015e4:	b21b      	sxth	r3, r3
 80015e6:	81fb      	strh	r3, [r7, #14]
	hex_moisture = (rev_buffer[3]<<8)|rev_buffer[4];
 80015e8:	4b2f      	ldr	r3, [pc, #188]	; (80016a8 <measure_task+0x14c>)
 80015ea:	78db      	ldrb	r3, [r3, #3]
 80015ec:	021b      	lsls	r3, r3, #8
 80015ee:	b21a      	sxth	r2, r3
 80015f0:	4b2d      	ldr	r3, [pc, #180]	; (80016a8 <measure_task+0x14c>)
 80015f2:	791b      	ldrb	r3, [r3, #4]
 80015f4:	b21b      	sxth	r3, r3
 80015f6:	4313      	orrs	r3, r2
 80015f8:	b21b      	sxth	r3, r3
 80015fa:	81bb      	strh	r3, [r7, #12]
	if (osSemaphoreAcquire(bin_semHandle, osWaitForever) == osOK) {
 80015fc:	4b2c      	ldr	r3, [pc, #176]	; (80016b0 <measure_task+0x154>)
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	f04f 31ff 	mov.w	r1, #4294967295
 8001604:	4618      	mov	r0, r3
 8001606:	f003 fe47 	bl	8005298 <osSemaphoreAcquire>
 800160a:	4603      	mov	r3, r0
 800160c:	2b00      	cmp	r3, #0
 800160e:	d12d      	bne.n	800166c <measure_task+0x110>
		temperature = -45.0f + 175.0f * (float)hex_ther / 65535.0f;
 8001610:	89fb      	ldrh	r3, [r7, #14]
 8001612:	4618      	mov	r0, r3
 8001614:	f7ff faee 	bl	8000bf4 <__aeabi_ui2f>
 8001618:	4603      	mov	r3, r0
 800161a:	4926      	ldr	r1, [pc, #152]	; (80016b4 <measure_task+0x158>)
 800161c:	4618      	mov	r0, r3
 800161e:	f7ff fb41 	bl	8000ca4 <__aeabi_fmul>
 8001622:	4603      	mov	r3, r0
 8001624:	4924      	ldr	r1, [pc, #144]	; (80016b8 <measure_task+0x15c>)
 8001626:	4618      	mov	r0, r3
 8001628:	f7ff fbf0 	bl	8000e0c <__aeabi_fdiv>
 800162c:	4603      	mov	r3, r0
 800162e:	4923      	ldr	r1, [pc, #140]	; (80016bc <measure_task+0x160>)
 8001630:	4618      	mov	r0, r3
 8001632:	f7ff fa2d 	bl	8000a90 <__aeabi_fsub>
 8001636:	4603      	mov	r3, r0
 8001638:	461a      	mov	r2, r3
 800163a:	4b21      	ldr	r3, [pc, #132]	; (80016c0 <measure_task+0x164>)
 800163c:	601a      	str	r2, [r3, #0]
		humidity = 100.0f * (float)hex_moisture / 65535.0f;
 800163e:	89bb      	ldrh	r3, [r7, #12]
 8001640:	4618      	mov	r0, r3
 8001642:	f7ff fad7 	bl	8000bf4 <__aeabi_ui2f>
 8001646:	4603      	mov	r3, r0
 8001648:	491e      	ldr	r1, [pc, #120]	; (80016c4 <measure_task+0x168>)
 800164a:	4618      	mov	r0, r3
 800164c:	f7ff fb2a 	bl	8000ca4 <__aeabi_fmul>
 8001650:	4603      	mov	r3, r0
 8001652:	4919      	ldr	r1, [pc, #100]	; (80016b8 <measure_task+0x15c>)
 8001654:	4618      	mov	r0, r3
 8001656:	f7ff fbd9 	bl	8000e0c <__aeabi_fdiv>
 800165a:	4603      	mov	r3, r0
 800165c:	461a      	mov	r2, r3
 800165e:	4b1a      	ldr	r3, [pc, #104]	; (80016c8 <measure_task+0x16c>)
 8001660:	601a      	str	r2, [r3, #0]
		// Release Semaphore
		osSemaphoreRelease(bin_semHandle);
 8001662:	4b13      	ldr	r3, [pc, #76]	; (80016b0 <measure_task+0x154>)
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	4618      	mov	r0, r3
 8001668:	f003 fe68 	bl	800533c <osSemaphoreRelease>
	}
	end_time_SHTC3 = HAL_GetTick();
 800166c:	f000 fc0c 	bl	8001e88 <HAL_GetTick>
 8001670:	4603      	mov	r3, r0
 8001672:	4a16      	ldr	r2, [pc, #88]	; (80016cc <measure_task+0x170>)
 8001674:	6013      	str	r3, [r2, #0]
	elapsed_time_SHTC3 = -(start_time_SHTC3 - end_time_SHTC3);
 8001676:	4b15      	ldr	r3, [pc, #84]	; (80016cc <measure_task+0x170>)
 8001678:	681a      	ldr	r2, [r3, #0]
 800167a:	4b07      	ldr	r3, [pc, #28]	; (8001698 <measure_task+0x13c>)
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	1ad3      	subs	r3, r2, r3
 8001680:	4a13      	ldr	r2, [pc, #76]	; (80016d0 <measure_task+0x174>)
 8001682:	6013      	str	r3, [r2, #0]
	vTaskDelayUntil(&previousWakeTime, pdMS_TO_TICKS(250));
 8001684:	f107 0308 	add.w	r3, r7, #8
 8001688:	21fa      	movs	r1, #250	; 0xfa
 800168a:	4618      	mov	r0, r3
 800168c:	f005 f938 	bl	8006900 <vTaskDelayUntil>
  {
 8001690:	e76c      	b.n	800156c <measure_task+0x10>
 8001692:	bf00      	nop
 8001694:	20000304 	.word	0x20000304
 8001698:	20000334 	.word	0x20000334
 800169c:	20000004 	.word	0x20000004
 80016a0:	20000204 	.word	0x20000204
 80016a4:	20000008 	.word	0x20000008
 80016a8:	2000032c 	.word	0x2000032c
 80016ac:	2000000c 	.word	0x2000000c
 80016b0:	20000300 	.word	0x20000300
 80016b4:	432f0000 	.word	0x432f0000
 80016b8:	477fff00 	.word	0x477fff00
 80016bc:	42340000 	.word	0x42340000
 80016c0:	20000318 	.word	0x20000318
 80016c4:	42c80000 	.word	0x42c80000
 80016c8:	2000031c 	.word	0x2000031c
 80016cc:	20000338 	.word	0x20000338
 80016d0:	2000033c 	.word	0x2000033c

080016d4 <write_clcd_task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_write_clcd_task */
void write_clcd_task(void *argument)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b08e      	sub	sp, #56	; 0x38
 80016d8:	af00      	add	r7, sp, #0
 80016da:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN write_clcd_task */
  /* Infinite loop */
	TickType_t previousWakeTime = xTaskGetTickCount();
 80016dc:	f005 faa0 	bl	8006c20 <xTaskGetTickCount>
 80016e0:	4603      	mov	r3, r0
 80016e2:	637b      	str	r3, [r7, #52]	; 0x34
  for(;;)
  {
	c++;
 80016e4:	4b46      	ldr	r3, [pc, #280]	; (8001800 <write_clcd_task+0x12c>)
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	3301      	adds	r3, #1
 80016ea:	4a45      	ldr	r2, [pc, #276]	; (8001800 <write_clcd_task+0x12c>)
 80016ec:	6013      	str	r3, [r2, #0]

	start_time_CLCD = HAL_GetTick();
 80016ee:	f000 fbcb 	bl	8001e88 <HAL_GetTick>
 80016f2:	4603      	mov	r3, r0
 80016f4:	4a43      	ldr	r2, [pc, #268]	; (8001804 <write_clcd_task+0x130>)
 80016f6:	6013      	str	r3, [r2, #0]
	char lcd_line1[17];
	char lcd_line2[17];
	if (osSemaphoreAcquire(bin_semHandle, osWaitForever) == osOK) {
 80016f8:	4b43      	ldr	r3, [pc, #268]	; (8001808 <write_clcd_task+0x134>)
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	f04f 31ff 	mov.w	r1, #4294967295
 8001700:	4618      	mov	r0, r3
 8001702:	f003 fdc9 	bl	8005298 <osSemaphoreAcquire>
 8001706:	4603      	mov	r3, r0
 8001708:	2b00      	cmp	r3, #0
 800170a:	d14f      	bne.n	80017ac <write_clcd_task+0xd8>
		switch(DisplayMode){
 800170c:	4b3f      	ldr	r3, [pc, #252]	; (800180c <write_clcd_task+0x138>)
 800170e:	781b      	ldrb	r3, [r3, #0]
 8001710:	b2db      	uxtb	r3, r3
 8001712:	2b02      	cmp	r3, #2
 8001714:	d006      	beq.n	8001724 <write_clcd_task+0x50>
 8001716:	2b02      	cmp	r3, #2
 8001718:	dc43      	bgt.n	80017a2 <write_clcd_task+0xce>
 800171a:	2b00      	cmp	r3, #0
 800171c:	d02e      	beq.n	800177c <write_clcd_task+0xa8>
 800171e:	2b01      	cmp	r3, #1
 8001720:	d019      	beq.n	8001756 <write_clcd_task+0x82>
 8001722:	e03e      	b.n	80017a2 <write_clcd_task+0xce>
			case DISPLAY_ALL:
				sprintf(lcd_line2, "Humidity: %.2f%%", humidity);
 8001724:	4b3a      	ldr	r3, [pc, #232]	; (8001810 <write_clcd_task+0x13c>)
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	4618      	mov	r0, r3
 800172a:	f7fe fe7d 	bl	8000428 <__aeabi_f2d>
 800172e:	4602      	mov	r2, r0
 8001730:	460b      	mov	r3, r1
 8001732:	f107 000c 	add.w	r0, r7, #12
 8001736:	4937      	ldr	r1, [pc, #220]	; (8001814 <write_clcd_task+0x140>)
 8001738:	f007 fc4c 	bl	8008fd4 <siprintf>
				sprintf(lcd_line1, "Temp: %.2f C   ",temperature);
 800173c:	4b36      	ldr	r3, [pc, #216]	; (8001818 <write_clcd_task+0x144>)
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	4618      	mov	r0, r3
 8001742:	f7fe fe71 	bl	8000428 <__aeabi_f2d>
 8001746:	4602      	mov	r2, r0
 8001748:	460b      	mov	r3, r1
 800174a:	f107 0020 	add.w	r0, r7, #32
 800174e:	4933      	ldr	r1, [pc, #204]	; (800181c <write_clcd_task+0x148>)
 8001750:	f007 fc40 	bl	8008fd4 <siprintf>
				break;
 8001754:	e025      	b.n	80017a2 <write_clcd_task+0xce>
			case DISPLAY_HUMID:
				sprintf(lcd_line1, "Humidity: %.2f%%", humidity);
 8001756:	4b2e      	ldr	r3, [pc, #184]	; (8001810 <write_clcd_task+0x13c>)
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	4618      	mov	r0, r3
 800175c:	f7fe fe64 	bl	8000428 <__aeabi_f2d>
 8001760:	4602      	mov	r2, r0
 8001762:	460b      	mov	r3, r1
 8001764:	f107 0020 	add.w	r0, r7, #32
 8001768:	492a      	ldr	r1, [pc, #168]	; (8001814 <write_clcd_task+0x140>)
 800176a:	f007 fc33 	bl	8008fd4 <siprintf>
				sprintf(lcd_line2, "                ");
 800176e:	f107 030c 	add.w	r3, r7, #12
 8001772:	492b      	ldr	r1, [pc, #172]	; (8001820 <write_clcd_task+0x14c>)
 8001774:	4618      	mov	r0, r3
 8001776:	f007 fc2d 	bl	8008fd4 <siprintf>
				break;
 800177a:	e012      	b.n	80017a2 <write_clcd_task+0xce>
			case DISPLAY_TEMP:
				sprintf(lcd_line1, "Temp: %.2f C   ",temperature);
 800177c:	4b26      	ldr	r3, [pc, #152]	; (8001818 <write_clcd_task+0x144>)
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	4618      	mov	r0, r3
 8001782:	f7fe fe51 	bl	8000428 <__aeabi_f2d>
 8001786:	4602      	mov	r2, r0
 8001788:	460b      	mov	r3, r1
 800178a:	f107 0020 	add.w	r0, r7, #32
 800178e:	4923      	ldr	r1, [pc, #140]	; (800181c <write_clcd_task+0x148>)
 8001790:	f007 fc20 	bl	8008fd4 <siprintf>
				sprintf(lcd_line2, "                ");
 8001794:	f107 030c 	add.w	r3, r7, #12
 8001798:	4921      	ldr	r1, [pc, #132]	; (8001820 <write_clcd_task+0x14c>)
 800179a:	4618      	mov	r0, r3
 800179c:	f007 fc1a 	bl	8008fd4 <siprintf>
				break;
 80017a0:	bf00      	nop
		}
		// Release Semaphore
		osSemaphoreRelease(bin_semHandle);
 80017a2:	4b19      	ldr	r3, [pc, #100]	; (8001808 <write_clcd_task+0x134>)
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	4618      	mov	r0, r3
 80017a8:	f003 fdc8 	bl	800533c <osSemaphoreRelease>
	}
	CLCD_I2C_SetCursor(&LCD1,0,0);
 80017ac:	2200      	movs	r2, #0
 80017ae:	2100      	movs	r1, #0
 80017b0:	481c      	ldr	r0, [pc, #112]	; (8001824 <write_clcd_task+0x150>)
 80017b2:	f7ff fc9b 	bl	80010ec <CLCD_I2C_SetCursor>
	CLCD_I2C_WriteString(&LCD1,lcd_line1);
 80017b6:	f107 0320 	add.w	r3, r7, #32
 80017ba:	4619      	mov	r1, r3
 80017bc:	4819      	ldr	r0, [pc, #100]	; (8001824 <write_clcd_task+0x150>)
 80017be:	f7ff fce8 	bl	8001192 <CLCD_I2C_WriteString>
	CLCD_I2C_SetCursor(&LCD1,0,1);
 80017c2:	2201      	movs	r2, #1
 80017c4:	2100      	movs	r1, #0
 80017c6:	4817      	ldr	r0, [pc, #92]	; (8001824 <write_clcd_task+0x150>)
 80017c8:	f7ff fc90 	bl	80010ec <CLCD_I2C_SetCursor>
	CLCD_I2C_WriteString(&LCD1,lcd_line2);
 80017cc:	f107 030c 	add.w	r3, r7, #12
 80017d0:	4619      	mov	r1, r3
 80017d2:	4814      	ldr	r0, [pc, #80]	; (8001824 <write_clcd_task+0x150>)
 80017d4:	f7ff fcdd 	bl	8001192 <CLCD_I2C_WriteString>
	end_time_CLCD = HAL_GetTick();
 80017d8:	f000 fb56 	bl	8001e88 <HAL_GetTick>
 80017dc:	4603      	mov	r3, r0
 80017de:	4a12      	ldr	r2, [pc, #72]	; (8001828 <write_clcd_task+0x154>)
 80017e0:	6013      	str	r3, [r2, #0]
	elapsed_time_CLCD = -(start_time_CLCD - end_time_CLCD);
 80017e2:	4b11      	ldr	r3, [pc, #68]	; (8001828 <write_clcd_task+0x154>)
 80017e4:	681a      	ldr	r2, [r3, #0]
 80017e6:	4b07      	ldr	r3, [pc, #28]	; (8001804 <write_clcd_task+0x130>)
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	1ad3      	subs	r3, r2, r3
 80017ec:	4a0f      	ldr	r2, [pc, #60]	; (800182c <write_clcd_task+0x158>)
 80017ee:	6013      	str	r3, [r2, #0]
	vTaskDelayUntil(&previousWakeTime, pdMS_TO_TICKS(5000));
 80017f0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80017f4:	f241 3188 	movw	r1, #5000	; 0x1388
 80017f8:	4618      	mov	r0, r3
 80017fa:	f005 f881 	bl	8006900 <vTaskDelayUntil>
  {
 80017fe:	e771      	b.n	80016e4 <write_clcd_task+0x10>
 8001800:	2000030c 	.word	0x2000030c
 8001804:	20000340 	.word	0x20000340
 8001808:	20000300 	.word	0x20000300
 800180c:	20000000 	.word	0x20000000
 8001810:	2000031c 	.word	0x2000031c
 8001814:	0800b348 	.word	0x0800b348
 8001818:	20000318 	.word	0x20000318
 800181c:	0800b35c 	.word	0x0800b35c
 8001820:	0800b36c 	.word	0x0800b36c
 8001824:	20000320 	.word	0x20000320
 8001828:	20000344 	.word	0x20000344
 800182c:	20000348 	.word	0x20000348

08001830 <send_uart_task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_send_uart_task */
void send_uart_task(void *argument)
{
 8001830:	b5b0      	push	{r4, r5, r7, lr}
 8001832:	b096      	sub	sp, #88	; 0x58
 8001834:	af02      	add	r7, sp, #8
 8001836:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN send_uart_task */
  /* Infinite loop */
	TickType_t previousWakeTime = xTaskGetTickCount();
 8001838:	f005 f9f2 	bl	8006c20 <xTaskGetTickCount>
 800183c:	4603      	mov	r3, r0
 800183e:	64fb      	str	r3, [r7, #76]	; 0x4c
  for(;;)
  {
	b++;
 8001840:	4b28      	ldr	r3, [pc, #160]	; (80018e4 <send_uart_task+0xb4>)
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	3301      	adds	r3, #1
 8001846:	4a27      	ldr	r2, [pc, #156]	; (80018e4 <send_uart_task+0xb4>)
 8001848:	6013      	str	r3, [r2, #0]

	start_time_UART = HAL_GetTick();
 800184a:	f000 fb1d 	bl	8001e88 <HAL_GetTick>
 800184e:	4603      	mov	r3, r0
 8001850:	4a25      	ldr	r2, [pc, #148]	; (80018e8 <send_uart_task+0xb8>)
 8001852:	6013      	str	r3, [r2, #0]
	if (osSemaphoreAcquire(bin_semHandle, osWaitForever) == osOK) {
 8001854:	4b25      	ldr	r3, [pc, #148]	; (80018ec <send_uart_task+0xbc>)
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	f04f 31ff 	mov.w	r1, #4294967295
 800185c:	4618      	mov	r0, r3
 800185e:	f003 fd1b 	bl	8005298 <osSemaphoreAcquire>
 8001862:	4603      	mov	r3, r0
 8001864:	2b00      	cmp	r3, #0
 8001866:	d129      	bne.n	80018bc <send_uart_task+0x8c>
	char data[64];
		sprintf(data, "Temperature: %.2f C, Humidity: %.2f%%\r\n", temperature, humidity);
 8001868:	4b21      	ldr	r3, [pc, #132]	; (80018f0 <send_uart_task+0xc0>)
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	4618      	mov	r0, r3
 800186e:	f7fe fddb 	bl	8000428 <__aeabi_f2d>
 8001872:	4604      	mov	r4, r0
 8001874:	460d      	mov	r5, r1
 8001876:	4b1f      	ldr	r3, [pc, #124]	; (80018f4 <send_uart_task+0xc4>)
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	4618      	mov	r0, r3
 800187c:	f7fe fdd4 	bl	8000428 <__aeabi_f2d>
 8001880:	4602      	mov	r2, r0
 8001882:	460b      	mov	r3, r1
 8001884:	f107 000c 	add.w	r0, r7, #12
 8001888:	e9cd 2300 	strd	r2, r3, [sp]
 800188c:	4622      	mov	r2, r4
 800188e:	462b      	mov	r3, r5
 8001890:	4919      	ldr	r1, [pc, #100]	; (80018f8 <send_uart_task+0xc8>)
 8001892:	f007 fb9f 	bl	8008fd4 <siprintf>
		HAL_UART_Transmit(&huart1, (uint8_t*)data, strlen(data), 1000);
 8001896:	f107 030c 	add.w	r3, r7, #12
 800189a:	4618      	mov	r0, r3
 800189c:	f7fe fc58 	bl	8000150 <strlen>
 80018a0:	4603      	mov	r3, r0
 80018a2:	b29a      	uxth	r2, r3
 80018a4:	f107 010c 	add.w	r1, r7, #12
 80018a8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80018ac:	4813      	ldr	r0, [pc, #76]	; (80018fc <send_uart_task+0xcc>)
 80018ae:	f002 fd31 	bl	8004314 <HAL_UART_Transmit>

		// Release Semaphore
		osSemaphoreRelease(bin_semHandle);
 80018b2:	4b0e      	ldr	r3, [pc, #56]	; (80018ec <send_uart_task+0xbc>)
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	4618      	mov	r0, r3
 80018b8:	f003 fd40 	bl	800533c <osSemaphoreRelease>
	}
	end_time_UART = HAL_GetTick();
 80018bc:	f000 fae4 	bl	8001e88 <HAL_GetTick>
 80018c0:	4603      	mov	r3, r0
 80018c2:	4a0f      	ldr	r2, [pc, #60]	; (8001900 <send_uart_task+0xd0>)
 80018c4:	6013      	str	r3, [r2, #0]
	elapsed_time_UART = -(start_time_UART - end_time_UART);
 80018c6:	4b0e      	ldr	r3, [pc, #56]	; (8001900 <send_uart_task+0xd0>)
 80018c8:	681a      	ldr	r2, [r3, #0]
 80018ca:	4b07      	ldr	r3, [pc, #28]	; (80018e8 <send_uart_task+0xb8>)
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	1ad3      	subs	r3, r2, r3
 80018d0:	4a0c      	ldr	r2, [pc, #48]	; (8001904 <send_uart_task+0xd4>)
 80018d2:	6013      	str	r3, [r2, #0]
	vTaskDelayUntil(&previousWakeTime, pdMS_TO_TICKS(1000));
 80018d4:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80018d8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80018dc:	4618      	mov	r0, r3
 80018de:	f005 f80f 	bl	8006900 <vTaskDelayUntil>
	b++;
 80018e2:	e7ad      	b.n	8001840 <send_uart_task+0x10>
 80018e4:	20000308 	.word	0x20000308
 80018e8:	2000034c 	.word	0x2000034c
 80018ec:	20000300 	.word	0x20000300
 80018f0:	20000318 	.word	0x20000318
 80018f4:	2000031c 	.word	0x2000031c
 80018f8:	0800b380 	.word	0x0800b380
 80018fc:	200002ac 	.word	0x200002ac
 8001900:	20000350 	.word	0x20000350
 8001904:	20000354 	.word	0x20000354

08001908 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	b082      	sub	sp, #8
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	4a04      	ldr	r2, [pc, #16]	; (8001928 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001916:	4293      	cmp	r3, r2
 8001918:	d101      	bne.n	800191e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800191a:	f000 faa3 	bl	8001e64 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */
  /* USER CODE END Callback 1 */
}
 800191e:	bf00      	nop
 8001920:	3708      	adds	r7, #8
 8001922:	46bd      	mov	sp, r7
 8001924:	bd80      	pop	{r7, pc}
 8001926:	bf00      	nop
 8001928:	40012c00 	.word	0x40012c00

0800192c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800192c:	b480      	push	{r7}
 800192e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001930:	b672      	cpsid	i
}
 8001932:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001934:	e7fe      	b.n	8001934 <Error_Handler+0x8>
	...

08001938 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	b084      	sub	sp, #16
 800193c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800193e:	4b18      	ldr	r3, [pc, #96]	; (80019a0 <HAL_MspInit+0x68>)
 8001940:	699b      	ldr	r3, [r3, #24]
 8001942:	4a17      	ldr	r2, [pc, #92]	; (80019a0 <HAL_MspInit+0x68>)
 8001944:	f043 0301 	orr.w	r3, r3, #1
 8001948:	6193      	str	r3, [r2, #24]
 800194a:	4b15      	ldr	r3, [pc, #84]	; (80019a0 <HAL_MspInit+0x68>)
 800194c:	699b      	ldr	r3, [r3, #24]
 800194e:	f003 0301 	and.w	r3, r3, #1
 8001952:	60bb      	str	r3, [r7, #8]
 8001954:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001956:	4b12      	ldr	r3, [pc, #72]	; (80019a0 <HAL_MspInit+0x68>)
 8001958:	69db      	ldr	r3, [r3, #28]
 800195a:	4a11      	ldr	r2, [pc, #68]	; (80019a0 <HAL_MspInit+0x68>)
 800195c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001960:	61d3      	str	r3, [r2, #28]
 8001962:	4b0f      	ldr	r3, [pc, #60]	; (80019a0 <HAL_MspInit+0x68>)
 8001964:	69db      	ldr	r3, [r3, #28]
 8001966:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800196a:	607b      	str	r3, [r7, #4]
 800196c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800196e:	2200      	movs	r2, #0
 8001970:	210f      	movs	r1, #15
 8001972:	f06f 0001 	mvn.w	r0, #1
 8001976:	f000 fb6a 	bl	800204e <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800197a:	4b0a      	ldr	r3, [pc, #40]	; (80019a4 <HAL_MspInit+0x6c>)
 800197c:	685b      	ldr	r3, [r3, #4]
 800197e:	60fb      	str	r3, [r7, #12]
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001986:	60fb      	str	r3, [r7, #12]
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800198e:	60fb      	str	r3, [r7, #12]
 8001990:	4a04      	ldr	r2, [pc, #16]	; (80019a4 <HAL_MspInit+0x6c>)
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001996:	bf00      	nop
 8001998:	3710      	adds	r7, #16
 800199a:	46bd      	mov	sp, r7
 800199c:	bd80      	pop	{r7, pc}
 800199e:	bf00      	nop
 80019a0:	40021000 	.word	0x40021000
 80019a4:	40010000 	.word	0x40010000

080019a8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b08a      	sub	sp, #40	; 0x28
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019b0:	f107 0318 	add.w	r3, r7, #24
 80019b4:	2200      	movs	r2, #0
 80019b6:	601a      	str	r2, [r3, #0]
 80019b8:	605a      	str	r2, [r3, #4]
 80019ba:	609a      	str	r2, [r3, #8]
 80019bc:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	4a2b      	ldr	r2, [pc, #172]	; (8001a70 <HAL_I2C_MspInit+0xc8>)
 80019c4:	4293      	cmp	r3, r2
 80019c6:	d124      	bne.n	8001a12 <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019c8:	4b2a      	ldr	r3, [pc, #168]	; (8001a74 <HAL_I2C_MspInit+0xcc>)
 80019ca:	699b      	ldr	r3, [r3, #24]
 80019cc:	4a29      	ldr	r2, [pc, #164]	; (8001a74 <HAL_I2C_MspInit+0xcc>)
 80019ce:	f043 0308 	orr.w	r3, r3, #8
 80019d2:	6193      	str	r3, [r2, #24]
 80019d4:	4b27      	ldr	r3, [pc, #156]	; (8001a74 <HAL_I2C_MspInit+0xcc>)
 80019d6:	699b      	ldr	r3, [r3, #24]
 80019d8:	f003 0308 	and.w	r3, r3, #8
 80019dc:	617b      	str	r3, [r7, #20]
 80019de:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = SHTC3_SCL_Pin|SHTC3_SDA_Pin;
 80019e0:	23c0      	movs	r3, #192	; 0xc0
 80019e2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80019e4:	2312      	movs	r3, #18
 80019e6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80019e8:	2303      	movs	r3, #3
 80019ea:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019ec:	f107 0318 	add.w	r3, r7, #24
 80019f0:	4619      	mov	r1, r3
 80019f2:	4821      	ldr	r0, [pc, #132]	; (8001a78 <HAL_I2C_MspInit+0xd0>)
 80019f4:	f000 fc08 	bl	8002208 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80019f8:	4b1e      	ldr	r3, [pc, #120]	; (8001a74 <HAL_I2C_MspInit+0xcc>)
 80019fa:	69db      	ldr	r3, [r3, #28]
 80019fc:	4a1d      	ldr	r2, [pc, #116]	; (8001a74 <HAL_I2C_MspInit+0xcc>)
 80019fe:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001a02:	61d3      	str	r3, [r2, #28]
 8001a04:	4b1b      	ldr	r3, [pc, #108]	; (8001a74 <HAL_I2C_MspInit+0xcc>)
 8001a06:	69db      	ldr	r3, [r3, #28]
 8001a08:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a0c:	613b      	str	r3, [r7, #16]
 8001a0e:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001a10:	e029      	b.n	8001a66 <HAL_I2C_MspInit+0xbe>
  else if(hi2c->Instance==I2C2)
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	4a19      	ldr	r2, [pc, #100]	; (8001a7c <HAL_I2C_MspInit+0xd4>)
 8001a18:	4293      	cmp	r3, r2
 8001a1a:	d124      	bne.n	8001a66 <HAL_I2C_MspInit+0xbe>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a1c:	4b15      	ldr	r3, [pc, #84]	; (8001a74 <HAL_I2C_MspInit+0xcc>)
 8001a1e:	699b      	ldr	r3, [r3, #24]
 8001a20:	4a14      	ldr	r2, [pc, #80]	; (8001a74 <HAL_I2C_MspInit+0xcc>)
 8001a22:	f043 0308 	orr.w	r3, r3, #8
 8001a26:	6193      	str	r3, [r2, #24]
 8001a28:	4b12      	ldr	r3, [pc, #72]	; (8001a74 <HAL_I2C_MspInit+0xcc>)
 8001a2a:	699b      	ldr	r3, [r3, #24]
 8001a2c:	f003 0308 	and.w	r3, r3, #8
 8001a30:	60fb      	str	r3, [r7, #12]
 8001a32:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 8001a34:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001a38:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001a3a:	2312      	movs	r3, #18
 8001a3c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001a3e:	2303      	movs	r3, #3
 8001a40:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a42:	f107 0318 	add.w	r3, r7, #24
 8001a46:	4619      	mov	r1, r3
 8001a48:	480b      	ldr	r0, [pc, #44]	; (8001a78 <HAL_I2C_MspInit+0xd0>)
 8001a4a:	f000 fbdd 	bl	8002208 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001a4e:	4b09      	ldr	r3, [pc, #36]	; (8001a74 <HAL_I2C_MspInit+0xcc>)
 8001a50:	69db      	ldr	r3, [r3, #28]
 8001a52:	4a08      	ldr	r2, [pc, #32]	; (8001a74 <HAL_I2C_MspInit+0xcc>)
 8001a54:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001a58:	61d3      	str	r3, [r2, #28]
 8001a5a:	4b06      	ldr	r3, [pc, #24]	; (8001a74 <HAL_I2C_MspInit+0xcc>)
 8001a5c:	69db      	ldr	r3, [r3, #28]
 8001a5e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a62:	60bb      	str	r3, [r7, #8]
 8001a64:	68bb      	ldr	r3, [r7, #8]
}
 8001a66:	bf00      	nop
 8001a68:	3728      	adds	r7, #40	; 0x28
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	bd80      	pop	{r7, pc}
 8001a6e:	bf00      	nop
 8001a70:	40005400 	.word	0x40005400
 8001a74:	40021000 	.word	0x40021000
 8001a78:	40010c00 	.word	0x40010c00
 8001a7c:	40005800 	.word	0x40005800

08001a80 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b088      	sub	sp, #32
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a88:	f107 0310 	add.w	r3, r7, #16
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	601a      	str	r2, [r3, #0]
 8001a90:	605a      	str	r2, [r3, #4]
 8001a92:	609a      	str	r2, [r3, #8]
 8001a94:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	4a20      	ldr	r2, [pc, #128]	; (8001b1c <HAL_UART_MspInit+0x9c>)
 8001a9c:	4293      	cmp	r3, r2
 8001a9e:	d139      	bne.n	8001b14 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001aa0:	4b1f      	ldr	r3, [pc, #124]	; (8001b20 <HAL_UART_MspInit+0xa0>)
 8001aa2:	699b      	ldr	r3, [r3, #24]
 8001aa4:	4a1e      	ldr	r2, [pc, #120]	; (8001b20 <HAL_UART_MspInit+0xa0>)
 8001aa6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001aaa:	6193      	str	r3, [r2, #24]
 8001aac:	4b1c      	ldr	r3, [pc, #112]	; (8001b20 <HAL_UART_MspInit+0xa0>)
 8001aae:	699b      	ldr	r3, [r3, #24]
 8001ab0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ab4:	60fb      	str	r3, [r7, #12]
 8001ab6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ab8:	4b19      	ldr	r3, [pc, #100]	; (8001b20 <HAL_UART_MspInit+0xa0>)
 8001aba:	699b      	ldr	r3, [r3, #24]
 8001abc:	4a18      	ldr	r2, [pc, #96]	; (8001b20 <HAL_UART_MspInit+0xa0>)
 8001abe:	f043 0304 	orr.w	r3, r3, #4
 8001ac2:	6193      	str	r3, [r2, #24]
 8001ac4:	4b16      	ldr	r3, [pc, #88]	; (8001b20 <HAL_UART_MspInit+0xa0>)
 8001ac6:	699b      	ldr	r3, [r3, #24]
 8001ac8:	f003 0304 	and.w	r3, r3, #4
 8001acc:	60bb      	str	r3, [r7, #8]
 8001ace:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001ad0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001ad4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ad6:	2302      	movs	r3, #2
 8001ad8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001ada:	2303      	movs	r3, #3
 8001adc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ade:	f107 0310 	add.w	r3, r7, #16
 8001ae2:	4619      	mov	r1, r3
 8001ae4:	480f      	ldr	r0, [pc, #60]	; (8001b24 <HAL_UART_MspInit+0xa4>)
 8001ae6:	f000 fb8f 	bl	8002208 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001aea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001aee:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001af0:	2300      	movs	r3, #0
 8001af2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001af4:	2300      	movs	r3, #0
 8001af6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001af8:	f107 0310 	add.w	r3, r7, #16
 8001afc:	4619      	mov	r1, r3
 8001afe:	4809      	ldr	r0, [pc, #36]	; (8001b24 <HAL_UART_MspInit+0xa4>)
 8001b00:	f000 fb82 	bl	8002208 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8001b04:	2200      	movs	r2, #0
 8001b06:	2105      	movs	r1, #5
 8001b08:	2025      	movs	r0, #37	; 0x25
 8001b0a:	f000 faa0 	bl	800204e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001b0e:	2025      	movs	r0, #37	; 0x25
 8001b10:	f000 fab9 	bl	8002086 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8001b14:	bf00      	nop
 8001b16:	3720      	adds	r7, #32
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	bd80      	pop	{r7, pc}
 8001b1c:	40013800 	.word	0x40013800
 8001b20:	40021000 	.word	0x40021000
 8001b24:	40010800 	.word	0x40010800

08001b28 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	b08c      	sub	sp, #48	; 0x30
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8001b30:	2300      	movs	r3, #0
 8001b32:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8001b34:	2300      	movs	r3, #0
 8001b36:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status = HAL_OK;
 8001b38:	2300      	movs	r3, #0
 8001b3a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001b3e:	4b2e      	ldr	r3, [pc, #184]	; (8001bf8 <HAL_InitTick+0xd0>)
 8001b40:	699b      	ldr	r3, [r3, #24]
 8001b42:	4a2d      	ldr	r2, [pc, #180]	; (8001bf8 <HAL_InitTick+0xd0>)
 8001b44:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001b48:	6193      	str	r3, [r2, #24]
 8001b4a:	4b2b      	ldr	r3, [pc, #172]	; (8001bf8 <HAL_InitTick+0xd0>)
 8001b4c:	699b      	ldr	r3, [r3, #24]
 8001b4e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001b52:	60bb      	str	r3, [r7, #8]
 8001b54:	68bb      	ldr	r3, [r7, #8]

/* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001b56:	f107 020c 	add.w	r2, r7, #12
 8001b5a:	f107 0310 	add.w	r3, r7, #16
 8001b5e:	4611      	mov	r1, r2
 8001b60:	4618      	mov	r0, r3
 8001b62:	f002 f8fb 	bl	8003d5c <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001b66:	f002 f8e5 	bl	8003d34 <HAL_RCC_GetPCLK2Freq>
 8001b6a:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001b6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b6e:	4a23      	ldr	r2, [pc, #140]	; (8001bfc <HAL_InitTick+0xd4>)
 8001b70:	fba2 2303 	umull	r2, r3, r2, r3
 8001b74:	0c9b      	lsrs	r3, r3, #18
 8001b76:	3b01      	subs	r3, #1
 8001b78:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001b7a:	4b21      	ldr	r3, [pc, #132]	; (8001c00 <HAL_InitTick+0xd8>)
 8001b7c:	4a21      	ldr	r2, [pc, #132]	; (8001c04 <HAL_InitTick+0xdc>)
 8001b7e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8001b80:	4b1f      	ldr	r3, [pc, #124]	; (8001c00 <HAL_InitTick+0xd8>)
 8001b82:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001b86:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8001b88:	4a1d      	ldr	r2, [pc, #116]	; (8001c00 <HAL_InitTick+0xd8>)
 8001b8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b8c:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001b8e:	4b1c      	ldr	r3, [pc, #112]	; (8001c00 <HAL_InitTick+0xd8>)
 8001b90:	2200      	movs	r2, #0
 8001b92:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b94:	4b1a      	ldr	r3, [pc, #104]	; (8001c00 <HAL_InitTick+0xd8>)
 8001b96:	2200      	movs	r2, #0
 8001b98:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b9a:	4b19      	ldr	r3, [pc, #100]	; (8001c00 <HAL_InitTick+0xd8>)
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8001ba0:	4817      	ldr	r0, [pc, #92]	; (8001c00 <HAL_InitTick+0xd8>)
 8001ba2:	f002 f929 	bl	8003df8 <HAL_TIM_Base_Init>
 8001ba6:	4603      	mov	r3, r0
 8001ba8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8001bac:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d11b      	bne.n	8001bec <HAL_InitTick+0xc4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8001bb4:	4812      	ldr	r0, [pc, #72]	; (8001c00 <HAL_InitTick+0xd8>)
 8001bb6:	f002 f977 	bl	8003ea8 <HAL_TIM_Base_Start_IT>
 8001bba:	4603      	mov	r3, r0
 8001bbc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8001bc0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d111      	bne.n	8001bec <HAL_InitTick+0xc4>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8001bc8:	2019      	movs	r0, #25
 8001bca:	f000 fa5c 	bl	8002086 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	2b0f      	cmp	r3, #15
 8001bd2:	d808      	bhi.n	8001be6 <HAL_InitTick+0xbe>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority, 0U);
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	6879      	ldr	r1, [r7, #4]
 8001bd8:	2019      	movs	r0, #25
 8001bda:	f000 fa38 	bl	800204e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001bde:	4a0a      	ldr	r2, [pc, #40]	; (8001c08 <HAL_InitTick+0xe0>)
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	6013      	str	r3, [r2, #0]
 8001be4:	e002      	b.n	8001bec <HAL_InitTick+0xc4>
      }
      else
      {
        status = HAL_ERROR;
 8001be6:	2301      	movs	r3, #1
 8001be8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8001bec:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8001bf0:	4618      	mov	r0, r3
 8001bf2:	3730      	adds	r7, #48	; 0x30
 8001bf4:	46bd      	mov	sp, r7
 8001bf6:	bd80      	pop	{r7, pc}
 8001bf8:	40021000 	.word	0x40021000
 8001bfc:	431bde83 	.word	0x431bde83
 8001c00:	20000358 	.word	0x20000358
 8001c04:	40012c00 	.word	0x40012c00
 8001c08:	20000014 	.word	0x20000014

08001c0c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c0c:	b480      	push	{r7}
 8001c0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001c10:	e7fe      	b.n	8001c10 <NMI_Handler+0x4>

08001c12 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c12:	b480      	push	{r7}
 8001c14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c16:	e7fe      	b.n	8001c16 <HardFault_Handler+0x4>

08001c18 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c18:	b480      	push	{r7}
 8001c1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c1c:	e7fe      	b.n	8001c1c <MemManage_Handler+0x4>

08001c1e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c1e:	b480      	push	{r7}
 8001c20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c22:	e7fe      	b.n	8001c22 <BusFault_Handler+0x4>

08001c24 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c24:	b480      	push	{r7}
 8001c26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c28:	e7fe      	b.n	8001c28 <UsageFault_Handler+0x4>

08001c2a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c2a:	b480      	push	{r7}
 8001c2c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c2e:	bf00      	nop
 8001c30:	46bd      	mov	sp, r7
 8001c32:	bc80      	pop	{r7}
 8001c34:	4770      	bx	lr
	...

08001c38 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001c3c:	4802      	ldr	r0, [pc, #8]	; (8001c48 <TIM1_UP_IRQHandler+0x10>)
 8001c3e:	f002 f985 	bl	8003f4c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8001c42:	bf00      	nop
 8001c44:	bd80      	pop	{r7, pc}
 8001c46:	bf00      	nop
 8001c48:	20000358 	.word	0x20000358

08001c4c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001c50:	4802      	ldr	r0, [pc, #8]	; (8001c5c <USART1_IRQHandler+0x10>)
 8001c52:	f002 fc0f 	bl	8004474 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001c56:	bf00      	nop
 8001c58:	bd80      	pop	{r7, pc}
 8001c5a:	bf00      	nop
 8001c5c:	200002ac 	.word	0x200002ac

08001c60 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001c60:	b480      	push	{r7}
 8001c62:	af00      	add	r7, sp, #0
  return 1;
 8001c64:	2301      	movs	r3, #1
}
 8001c66:	4618      	mov	r0, r3
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	bc80      	pop	{r7}
 8001c6c:	4770      	bx	lr

08001c6e <_kill>:

int _kill(int pid, int sig)
{
 8001c6e:	b580      	push	{r7, lr}
 8001c70:	b082      	sub	sp, #8
 8001c72:	af00      	add	r7, sp, #0
 8001c74:	6078      	str	r0, [r7, #4]
 8001c76:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001c78:	f007 faf6 	bl	8009268 <__errno>
 8001c7c:	4603      	mov	r3, r0
 8001c7e:	2216      	movs	r2, #22
 8001c80:	601a      	str	r2, [r3, #0]
  return -1;
 8001c82:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001c86:	4618      	mov	r0, r3
 8001c88:	3708      	adds	r7, #8
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	bd80      	pop	{r7, pc}

08001c8e <_exit>:

void _exit (int status)
{
 8001c8e:	b580      	push	{r7, lr}
 8001c90:	b082      	sub	sp, #8
 8001c92:	af00      	add	r7, sp, #0
 8001c94:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001c96:	f04f 31ff 	mov.w	r1, #4294967295
 8001c9a:	6878      	ldr	r0, [r7, #4]
 8001c9c:	f7ff ffe7 	bl	8001c6e <_kill>
  while (1) {}    /* Make sure we hang here */
 8001ca0:	e7fe      	b.n	8001ca0 <_exit+0x12>

08001ca2 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001ca2:	b580      	push	{r7, lr}
 8001ca4:	b086      	sub	sp, #24
 8001ca6:	af00      	add	r7, sp, #0
 8001ca8:	60f8      	str	r0, [r7, #12]
 8001caa:	60b9      	str	r1, [r7, #8]
 8001cac:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cae:	2300      	movs	r3, #0
 8001cb0:	617b      	str	r3, [r7, #20]
 8001cb2:	e00a      	b.n	8001cca <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001cb4:	f3af 8000 	nop.w
 8001cb8:	4601      	mov	r1, r0
 8001cba:	68bb      	ldr	r3, [r7, #8]
 8001cbc:	1c5a      	adds	r2, r3, #1
 8001cbe:	60ba      	str	r2, [r7, #8]
 8001cc0:	b2ca      	uxtb	r2, r1
 8001cc2:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cc4:	697b      	ldr	r3, [r7, #20]
 8001cc6:	3301      	adds	r3, #1
 8001cc8:	617b      	str	r3, [r7, #20]
 8001cca:	697a      	ldr	r2, [r7, #20]
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	429a      	cmp	r2, r3
 8001cd0:	dbf0      	blt.n	8001cb4 <_read+0x12>
  }

  return len;
 8001cd2:	687b      	ldr	r3, [r7, #4]
}
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	3718      	adds	r7, #24
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	bd80      	pop	{r7, pc}

08001cdc <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	b086      	sub	sp, #24
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	60f8      	str	r0, [r7, #12]
 8001ce4:	60b9      	str	r1, [r7, #8]
 8001ce6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ce8:	2300      	movs	r3, #0
 8001cea:	617b      	str	r3, [r7, #20]
 8001cec:	e009      	b.n	8001d02 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001cee:	68bb      	ldr	r3, [r7, #8]
 8001cf0:	1c5a      	adds	r2, r3, #1
 8001cf2:	60ba      	str	r2, [r7, #8]
 8001cf4:	781b      	ldrb	r3, [r3, #0]
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cfc:	697b      	ldr	r3, [r7, #20]
 8001cfe:	3301      	adds	r3, #1
 8001d00:	617b      	str	r3, [r7, #20]
 8001d02:	697a      	ldr	r2, [r7, #20]
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	429a      	cmp	r2, r3
 8001d08:	dbf1      	blt.n	8001cee <_write+0x12>
  }
  return len;
 8001d0a:	687b      	ldr	r3, [r7, #4]
}
 8001d0c:	4618      	mov	r0, r3
 8001d0e:	3718      	adds	r7, #24
 8001d10:	46bd      	mov	sp, r7
 8001d12:	bd80      	pop	{r7, pc}

08001d14 <_close>:

int _close(int file)
{
 8001d14:	b480      	push	{r7}
 8001d16:	b083      	sub	sp, #12
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001d1c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001d20:	4618      	mov	r0, r3
 8001d22:	370c      	adds	r7, #12
 8001d24:	46bd      	mov	sp, r7
 8001d26:	bc80      	pop	{r7}
 8001d28:	4770      	bx	lr

08001d2a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001d2a:	b480      	push	{r7}
 8001d2c:	b083      	sub	sp, #12
 8001d2e:	af00      	add	r7, sp, #0
 8001d30:	6078      	str	r0, [r7, #4]
 8001d32:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001d34:	683b      	ldr	r3, [r7, #0]
 8001d36:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001d3a:	605a      	str	r2, [r3, #4]
  return 0;
 8001d3c:	2300      	movs	r3, #0
}
 8001d3e:	4618      	mov	r0, r3
 8001d40:	370c      	adds	r7, #12
 8001d42:	46bd      	mov	sp, r7
 8001d44:	bc80      	pop	{r7}
 8001d46:	4770      	bx	lr

08001d48 <_isatty>:

int _isatty(int file)
{
 8001d48:	b480      	push	{r7}
 8001d4a:	b083      	sub	sp, #12
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001d50:	2301      	movs	r3, #1
}
 8001d52:	4618      	mov	r0, r3
 8001d54:	370c      	adds	r7, #12
 8001d56:	46bd      	mov	sp, r7
 8001d58:	bc80      	pop	{r7}
 8001d5a:	4770      	bx	lr

08001d5c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001d5c:	b480      	push	{r7}
 8001d5e:	b085      	sub	sp, #20
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	60f8      	str	r0, [r7, #12]
 8001d64:	60b9      	str	r1, [r7, #8]
 8001d66:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001d68:	2300      	movs	r3, #0
}
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	3714      	adds	r7, #20
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	bc80      	pop	{r7}
 8001d72:	4770      	bx	lr

08001d74 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b086      	sub	sp, #24
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001d7c:	4a14      	ldr	r2, [pc, #80]	; (8001dd0 <_sbrk+0x5c>)
 8001d7e:	4b15      	ldr	r3, [pc, #84]	; (8001dd4 <_sbrk+0x60>)
 8001d80:	1ad3      	subs	r3, r2, r3
 8001d82:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001d84:	697b      	ldr	r3, [r7, #20]
 8001d86:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001d88:	4b13      	ldr	r3, [pc, #76]	; (8001dd8 <_sbrk+0x64>)
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d102      	bne.n	8001d96 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001d90:	4b11      	ldr	r3, [pc, #68]	; (8001dd8 <_sbrk+0x64>)
 8001d92:	4a12      	ldr	r2, [pc, #72]	; (8001ddc <_sbrk+0x68>)
 8001d94:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001d96:	4b10      	ldr	r3, [pc, #64]	; (8001dd8 <_sbrk+0x64>)
 8001d98:	681a      	ldr	r2, [r3, #0]
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	4413      	add	r3, r2
 8001d9e:	693a      	ldr	r2, [r7, #16]
 8001da0:	429a      	cmp	r2, r3
 8001da2:	d207      	bcs.n	8001db4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001da4:	f007 fa60 	bl	8009268 <__errno>
 8001da8:	4603      	mov	r3, r0
 8001daa:	220c      	movs	r2, #12
 8001dac:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001dae:	f04f 33ff 	mov.w	r3, #4294967295
 8001db2:	e009      	b.n	8001dc8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001db4:	4b08      	ldr	r3, [pc, #32]	; (8001dd8 <_sbrk+0x64>)
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001dba:	4b07      	ldr	r3, [pc, #28]	; (8001dd8 <_sbrk+0x64>)
 8001dbc:	681a      	ldr	r2, [r3, #0]
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	4413      	add	r3, r2
 8001dc2:	4a05      	ldr	r2, [pc, #20]	; (8001dd8 <_sbrk+0x64>)
 8001dc4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001dc6:	68fb      	ldr	r3, [r7, #12]
}
 8001dc8:	4618      	mov	r0, r3
 8001dca:	3718      	adds	r7, #24
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	bd80      	pop	{r7, pc}
 8001dd0:	20005000 	.word	0x20005000
 8001dd4:	00000400 	.word	0x00000400
 8001dd8:	200003a0 	.word	0x200003a0
 8001ddc:	20001e48 	.word	0x20001e48

08001de0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001de0:	b480      	push	{r7}
 8001de2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001de4:	bf00      	nop
 8001de6:	46bd      	mov	sp, r7
 8001de8:	bc80      	pop	{r7}
 8001dea:	4770      	bx	lr

08001dec <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001dec:	f7ff fff8 	bl	8001de0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001df0:	480b      	ldr	r0, [pc, #44]	; (8001e20 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001df2:	490c      	ldr	r1, [pc, #48]	; (8001e24 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001df4:	4a0c      	ldr	r2, [pc, #48]	; (8001e28 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001df6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001df8:	e002      	b.n	8001e00 <LoopCopyDataInit>

08001dfa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001dfa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001dfc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001dfe:	3304      	adds	r3, #4

08001e00 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e00:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e02:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e04:	d3f9      	bcc.n	8001dfa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e06:	4a09      	ldr	r2, [pc, #36]	; (8001e2c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001e08:	4c09      	ldr	r4, [pc, #36]	; (8001e30 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001e0a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e0c:	e001      	b.n	8001e12 <LoopFillZerobss>

08001e0e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e0e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e10:	3204      	adds	r2, #4

08001e12 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e12:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e14:	d3fb      	bcc.n	8001e0e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001e16:	f007 fa2d 	bl	8009274 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001e1a:	f7ff fa3b 	bl	8001294 <main>
  bx lr
 8001e1e:	4770      	bx	lr
  ldr r0, =_sdata
 8001e20:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001e24:	200001e8 	.word	0x200001e8
  ldr r2, =_sidata
 8001e28:	0800b7dc 	.word	0x0800b7dc
  ldr r2, =_sbss
 8001e2c:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 8001e30:	20001e44 	.word	0x20001e44

08001e34 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001e34:	e7fe      	b.n	8001e34 <ADC1_2_IRQHandler>
	...

08001e38 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001e3c:	4b08      	ldr	r3, [pc, #32]	; (8001e60 <HAL_Init+0x28>)
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	4a07      	ldr	r2, [pc, #28]	; (8001e60 <HAL_Init+0x28>)
 8001e42:	f043 0310 	orr.w	r3, r3, #16
 8001e46:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e48:	2003      	movs	r0, #3
 8001e4a:	f000 f8f5 	bl	8002038 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001e4e:	200f      	movs	r0, #15
 8001e50:	f7ff fe6a 	bl	8001b28 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001e54:	f7ff fd70 	bl	8001938 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001e58:	2300      	movs	r3, #0
}
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	bd80      	pop	{r7, pc}
 8001e5e:	bf00      	nop
 8001e60:	40022000 	.word	0x40022000

08001e64 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e64:	b480      	push	{r7}
 8001e66:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001e68:	4b05      	ldr	r3, [pc, #20]	; (8001e80 <HAL_IncTick+0x1c>)
 8001e6a:	781b      	ldrb	r3, [r3, #0]
 8001e6c:	461a      	mov	r2, r3
 8001e6e:	4b05      	ldr	r3, [pc, #20]	; (8001e84 <HAL_IncTick+0x20>)
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	4413      	add	r3, r2
 8001e74:	4a03      	ldr	r2, [pc, #12]	; (8001e84 <HAL_IncTick+0x20>)
 8001e76:	6013      	str	r3, [r2, #0]
}
 8001e78:	bf00      	nop
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	bc80      	pop	{r7}
 8001e7e:	4770      	bx	lr
 8001e80:	20000018 	.word	0x20000018
 8001e84:	200003a4 	.word	0x200003a4

08001e88 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e88:	b480      	push	{r7}
 8001e8a:	af00      	add	r7, sp, #0
  return uwTick;
 8001e8c:	4b02      	ldr	r3, [pc, #8]	; (8001e98 <HAL_GetTick+0x10>)
 8001e8e:	681b      	ldr	r3, [r3, #0]
}
 8001e90:	4618      	mov	r0, r3
 8001e92:	46bd      	mov	sp, r7
 8001e94:	bc80      	pop	{r7}
 8001e96:	4770      	bx	lr
 8001e98:	200003a4 	.word	0x200003a4

08001e9c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	b084      	sub	sp, #16
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ea4:	f7ff fff0 	bl	8001e88 <HAL_GetTick>
 8001ea8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001eb4:	d005      	beq.n	8001ec2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001eb6:	4b0a      	ldr	r3, [pc, #40]	; (8001ee0 <HAL_Delay+0x44>)
 8001eb8:	781b      	ldrb	r3, [r3, #0]
 8001eba:	461a      	mov	r2, r3
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	4413      	add	r3, r2
 8001ec0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001ec2:	bf00      	nop
 8001ec4:	f7ff ffe0 	bl	8001e88 <HAL_GetTick>
 8001ec8:	4602      	mov	r2, r0
 8001eca:	68bb      	ldr	r3, [r7, #8]
 8001ecc:	1ad3      	subs	r3, r2, r3
 8001ece:	68fa      	ldr	r2, [r7, #12]
 8001ed0:	429a      	cmp	r2, r3
 8001ed2:	d8f7      	bhi.n	8001ec4 <HAL_Delay+0x28>
  {
  }
}
 8001ed4:	bf00      	nop
 8001ed6:	bf00      	nop
 8001ed8:	3710      	adds	r7, #16
 8001eda:	46bd      	mov	sp, r7
 8001edc:	bd80      	pop	{r7, pc}
 8001ede:	bf00      	nop
 8001ee0:	20000018 	.word	0x20000018

08001ee4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ee4:	b480      	push	{r7}
 8001ee6:	b085      	sub	sp, #20
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	f003 0307 	and.w	r3, r3, #7
 8001ef2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ef4:	4b0c      	ldr	r3, [pc, #48]	; (8001f28 <__NVIC_SetPriorityGrouping+0x44>)
 8001ef6:	68db      	ldr	r3, [r3, #12]
 8001ef8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001efa:	68ba      	ldr	r2, [r7, #8]
 8001efc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001f00:	4013      	ands	r3, r2
 8001f02:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f08:	68bb      	ldr	r3, [r7, #8]
 8001f0a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001f0c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001f10:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f14:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f16:	4a04      	ldr	r2, [pc, #16]	; (8001f28 <__NVIC_SetPriorityGrouping+0x44>)
 8001f18:	68bb      	ldr	r3, [r7, #8]
 8001f1a:	60d3      	str	r3, [r2, #12]
}
 8001f1c:	bf00      	nop
 8001f1e:	3714      	adds	r7, #20
 8001f20:	46bd      	mov	sp, r7
 8001f22:	bc80      	pop	{r7}
 8001f24:	4770      	bx	lr
 8001f26:	bf00      	nop
 8001f28:	e000ed00 	.word	0xe000ed00

08001f2c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f2c:	b480      	push	{r7}
 8001f2e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f30:	4b04      	ldr	r3, [pc, #16]	; (8001f44 <__NVIC_GetPriorityGrouping+0x18>)
 8001f32:	68db      	ldr	r3, [r3, #12]
 8001f34:	0a1b      	lsrs	r3, r3, #8
 8001f36:	f003 0307 	and.w	r3, r3, #7
}
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	bc80      	pop	{r7}
 8001f40:	4770      	bx	lr
 8001f42:	bf00      	nop
 8001f44:	e000ed00 	.word	0xe000ed00

08001f48 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f48:	b480      	push	{r7}
 8001f4a:	b083      	sub	sp, #12
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	4603      	mov	r3, r0
 8001f50:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	db0b      	blt.n	8001f72 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f5a:	79fb      	ldrb	r3, [r7, #7]
 8001f5c:	f003 021f 	and.w	r2, r3, #31
 8001f60:	4906      	ldr	r1, [pc, #24]	; (8001f7c <__NVIC_EnableIRQ+0x34>)
 8001f62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f66:	095b      	lsrs	r3, r3, #5
 8001f68:	2001      	movs	r0, #1
 8001f6a:	fa00 f202 	lsl.w	r2, r0, r2
 8001f6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001f72:	bf00      	nop
 8001f74:	370c      	adds	r7, #12
 8001f76:	46bd      	mov	sp, r7
 8001f78:	bc80      	pop	{r7}
 8001f7a:	4770      	bx	lr
 8001f7c:	e000e100 	.word	0xe000e100

08001f80 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f80:	b480      	push	{r7}
 8001f82:	b083      	sub	sp, #12
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	4603      	mov	r3, r0
 8001f88:	6039      	str	r1, [r7, #0]
 8001f8a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	db0a      	blt.n	8001faa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f94:	683b      	ldr	r3, [r7, #0]
 8001f96:	b2da      	uxtb	r2, r3
 8001f98:	490c      	ldr	r1, [pc, #48]	; (8001fcc <__NVIC_SetPriority+0x4c>)
 8001f9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f9e:	0112      	lsls	r2, r2, #4
 8001fa0:	b2d2      	uxtb	r2, r2
 8001fa2:	440b      	add	r3, r1
 8001fa4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001fa8:	e00a      	b.n	8001fc0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001faa:	683b      	ldr	r3, [r7, #0]
 8001fac:	b2da      	uxtb	r2, r3
 8001fae:	4908      	ldr	r1, [pc, #32]	; (8001fd0 <__NVIC_SetPriority+0x50>)
 8001fb0:	79fb      	ldrb	r3, [r7, #7]
 8001fb2:	f003 030f 	and.w	r3, r3, #15
 8001fb6:	3b04      	subs	r3, #4
 8001fb8:	0112      	lsls	r2, r2, #4
 8001fba:	b2d2      	uxtb	r2, r2
 8001fbc:	440b      	add	r3, r1
 8001fbe:	761a      	strb	r2, [r3, #24]
}
 8001fc0:	bf00      	nop
 8001fc2:	370c      	adds	r7, #12
 8001fc4:	46bd      	mov	sp, r7
 8001fc6:	bc80      	pop	{r7}
 8001fc8:	4770      	bx	lr
 8001fca:	bf00      	nop
 8001fcc:	e000e100 	.word	0xe000e100
 8001fd0:	e000ed00 	.word	0xe000ed00

08001fd4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001fd4:	b480      	push	{r7}
 8001fd6:	b089      	sub	sp, #36	; 0x24
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	60f8      	str	r0, [r7, #12]
 8001fdc:	60b9      	str	r1, [r7, #8]
 8001fde:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	f003 0307 	and.w	r3, r3, #7
 8001fe6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001fe8:	69fb      	ldr	r3, [r7, #28]
 8001fea:	f1c3 0307 	rsb	r3, r3, #7
 8001fee:	2b04      	cmp	r3, #4
 8001ff0:	bf28      	it	cs
 8001ff2:	2304      	movcs	r3, #4
 8001ff4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ff6:	69fb      	ldr	r3, [r7, #28]
 8001ff8:	3304      	adds	r3, #4
 8001ffa:	2b06      	cmp	r3, #6
 8001ffc:	d902      	bls.n	8002004 <NVIC_EncodePriority+0x30>
 8001ffe:	69fb      	ldr	r3, [r7, #28]
 8002000:	3b03      	subs	r3, #3
 8002002:	e000      	b.n	8002006 <NVIC_EncodePriority+0x32>
 8002004:	2300      	movs	r3, #0
 8002006:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002008:	f04f 32ff 	mov.w	r2, #4294967295
 800200c:	69bb      	ldr	r3, [r7, #24]
 800200e:	fa02 f303 	lsl.w	r3, r2, r3
 8002012:	43da      	mvns	r2, r3
 8002014:	68bb      	ldr	r3, [r7, #8]
 8002016:	401a      	ands	r2, r3
 8002018:	697b      	ldr	r3, [r7, #20]
 800201a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800201c:	f04f 31ff 	mov.w	r1, #4294967295
 8002020:	697b      	ldr	r3, [r7, #20]
 8002022:	fa01 f303 	lsl.w	r3, r1, r3
 8002026:	43d9      	mvns	r1, r3
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800202c:	4313      	orrs	r3, r2
         );
}
 800202e:	4618      	mov	r0, r3
 8002030:	3724      	adds	r7, #36	; 0x24
 8002032:	46bd      	mov	sp, r7
 8002034:	bc80      	pop	{r7}
 8002036:	4770      	bx	lr

08002038 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002038:	b580      	push	{r7, lr}
 800203a:	b082      	sub	sp, #8
 800203c:	af00      	add	r7, sp, #0
 800203e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002040:	6878      	ldr	r0, [r7, #4]
 8002042:	f7ff ff4f 	bl	8001ee4 <__NVIC_SetPriorityGrouping>
}
 8002046:	bf00      	nop
 8002048:	3708      	adds	r7, #8
 800204a:	46bd      	mov	sp, r7
 800204c:	bd80      	pop	{r7, pc}

0800204e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800204e:	b580      	push	{r7, lr}
 8002050:	b086      	sub	sp, #24
 8002052:	af00      	add	r7, sp, #0
 8002054:	4603      	mov	r3, r0
 8002056:	60b9      	str	r1, [r7, #8]
 8002058:	607a      	str	r2, [r7, #4]
 800205a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800205c:	2300      	movs	r3, #0
 800205e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002060:	f7ff ff64 	bl	8001f2c <__NVIC_GetPriorityGrouping>
 8002064:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002066:	687a      	ldr	r2, [r7, #4]
 8002068:	68b9      	ldr	r1, [r7, #8]
 800206a:	6978      	ldr	r0, [r7, #20]
 800206c:	f7ff ffb2 	bl	8001fd4 <NVIC_EncodePriority>
 8002070:	4602      	mov	r2, r0
 8002072:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002076:	4611      	mov	r1, r2
 8002078:	4618      	mov	r0, r3
 800207a:	f7ff ff81 	bl	8001f80 <__NVIC_SetPriority>
}
 800207e:	bf00      	nop
 8002080:	3718      	adds	r7, #24
 8002082:	46bd      	mov	sp, r7
 8002084:	bd80      	pop	{r7, pc}

08002086 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002086:	b580      	push	{r7, lr}
 8002088:	b082      	sub	sp, #8
 800208a:	af00      	add	r7, sp, #0
 800208c:	4603      	mov	r3, r0
 800208e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002090:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002094:	4618      	mov	r0, r3
 8002096:	f7ff ff57 	bl	8001f48 <__NVIC_EnableIRQ>
}
 800209a:	bf00      	nop
 800209c:	3708      	adds	r7, #8
 800209e:	46bd      	mov	sp, r7
 80020a0:	bd80      	pop	{r7, pc}

080020a2 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80020a2:	b480      	push	{r7}
 80020a4:	b085      	sub	sp, #20
 80020a6:	af00      	add	r7, sp, #0
 80020a8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80020aa:	2300      	movs	r3, #0
 80020ac:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80020b4:	b2db      	uxtb	r3, r3
 80020b6:	2b02      	cmp	r3, #2
 80020b8:	d008      	beq.n	80020cc <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	2204      	movs	r2, #4
 80020be:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	2200      	movs	r2, #0
 80020c4:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80020c8:	2301      	movs	r3, #1
 80020ca:	e020      	b.n	800210e <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	681a      	ldr	r2, [r3, #0]
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f022 020e 	bic.w	r2, r2, #14
 80020da:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	681a      	ldr	r2, [r3, #0]
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f022 0201 	bic.w	r2, r2, #1
 80020ea:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020f4:	2101      	movs	r1, #1
 80020f6:	fa01 f202 	lsl.w	r2, r1, r2
 80020fa:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	2201      	movs	r2, #1
 8002100:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	2200      	movs	r2, #0
 8002108:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 800210c:	7bfb      	ldrb	r3, [r7, #15]
}
 800210e:	4618      	mov	r0, r3
 8002110:	3714      	adds	r7, #20
 8002112:	46bd      	mov	sp, r7
 8002114:	bc80      	pop	{r7}
 8002116:	4770      	bx	lr

08002118 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002118:	b580      	push	{r7, lr}
 800211a:	b084      	sub	sp, #16
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002120:	2300      	movs	r3, #0
 8002122:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800212a:	b2db      	uxtb	r3, r3
 800212c:	2b02      	cmp	r3, #2
 800212e:	d005      	beq.n	800213c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	2204      	movs	r2, #4
 8002134:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8002136:	2301      	movs	r3, #1
 8002138:	73fb      	strb	r3, [r7, #15]
 800213a:	e051      	b.n	80021e0 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	681a      	ldr	r2, [r3, #0]
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f022 020e 	bic.w	r2, r2, #14
 800214a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	681a      	ldr	r2, [r3, #0]
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	f022 0201 	bic.w	r2, r2, #1
 800215a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	4a22      	ldr	r2, [pc, #136]	; (80021ec <HAL_DMA_Abort_IT+0xd4>)
 8002162:	4293      	cmp	r3, r2
 8002164:	d029      	beq.n	80021ba <HAL_DMA_Abort_IT+0xa2>
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	4a21      	ldr	r2, [pc, #132]	; (80021f0 <HAL_DMA_Abort_IT+0xd8>)
 800216c:	4293      	cmp	r3, r2
 800216e:	d022      	beq.n	80021b6 <HAL_DMA_Abort_IT+0x9e>
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	4a1f      	ldr	r2, [pc, #124]	; (80021f4 <HAL_DMA_Abort_IT+0xdc>)
 8002176:	4293      	cmp	r3, r2
 8002178:	d01a      	beq.n	80021b0 <HAL_DMA_Abort_IT+0x98>
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	4a1e      	ldr	r2, [pc, #120]	; (80021f8 <HAL_DMA_Abort_IT+0xe0>)
 8002180:	4293      	cmp	r3, r2
 8002182:	d012      	beq.n	80021aa <HAL_DMA_Abort_IT+0x92>
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	4a1c      	ldr	r2, [pc, #112]	; (80021fc <HAL_DMA_Abort_IT+0xe4>)
 800218a:	4293      	cmp	r3, r2
 800218c:	d00a      	beq.n	80021a4 <HAL_DMA_Abort_IT+0x8c>
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	4a1b      	ldr	r2, [pc, #108]	; (8002200 <HAL_DMA_Abort_IT+0xe8>)
 8002194:	4293      	cmp	r3, r2
 8002196:	d102      	bne.n	800219e <HAL_DMA_Abort_IT+0x86>
 8002198:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800219c:	e00e      	b.n	80021bc <HAL_DMA_Abort_IT+0xa4>
 800219e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80021a2:	e00b      	b.n	80021bc <HAL_DMA_Abort_IT+0xa4>
 80021a4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80021a8:	e008      	b.n	80021bc <HAL_DMA_Abort_IT+0xa4>
 80021aa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80021ae:	e005      	b.n	80021bc <HAL_DMA_Abort_IT+0xa4>
 80021b0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80021b4:	e002      	b.n	80021bc <HAL_DMA_Abort_IT+0xa4>
 80021b6:	2310      	movs	r3, #16
 80021b8:	e000      	b.n	80021bc <HAL_DMA_Abort_IT+0xa4>
 80021ba:	2301      	movs	r3, #1
 80021bc:	4a11      	ldr	r2, [pc, #68]	; (8002204 <HAL_DMA_Abort_IT+0xec>)
 80021be:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	2201      	movs	r2, #1
 80021c4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	2200      	movs	r2, #0
 80021cc:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d003      	beq.n	80021e0 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80021dc:	6878      	ldr	r0, [r7, #4]
 80021de:	4798      	blx	r3
    } 
  }
  return status;
 80021e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80021e2:	4618      	mov	r0, r3
 80021e4:	3710      	adds	r7, #16
 80021e6:	46bd      	mov	sp, r7
 80021e8:	bd80      	pop	{r7, pc}
 80021ea:	bf00      	nop
 80021ec:	40020008 	.word	0x40020008
 80021f0:	4002001c 	.word	0x4002001c
 80021f4:	40020030 	.word	0x40020030
 80021f8:	40020044 	.word	0x40020044
 80021fc:	40020058 	.word	0x40020058
 8002200:	4002006c 	.word	0x4002006c
 8002204:	40020000 	.word	0x40020000

08002208 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002208:	b480      	push	{r7}
 800220a:	b08b      	sub	sp, #44	; 0x2c
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
 8002210:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002212:	2300      	movs	r3, #0
 8002214:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002216:	2300      	movs	r3, #0
 8002218:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800221a:	e169      	b.n	80024f0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800221c:	2201      	movs	r2, #1
 800221e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002220:	fa02 f303 	lsl.w	r3, r2, r3
 8002224:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002226:	683b      	ldr	r3, [r7, #0]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	69fa      	ldr	r2, [r7, #28]
 800222c:	4013      	ands	r3, r2
 800222e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002230:	69ba      	ldr	r2, [r7, #24]
 8002232:	69fb      	ldr	r3, [r7, #28]
 8002234:	429a      	cmp	r2, r3
 8002236:	f040 8158 	bne.w	80024ea <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800223a:	683b      	ldr	r3, [r7, #0]
 800223c:	685b      	ldr	r3, [r3, #4]
 800223e:	4a9a      	ldr	r2, [pc, #616]	; (80024a8 <HAL_GPIO_Init+0x2a0>)
 8002240:	4293      	cmp	r3, r2
 8002242:	d05e      	beq.n	8002302 <HAL_GPIO_Init+0xfa>
 8002244:	4a98      	ldr	r2, [pc, #608]	; (80024a8 <HAL_GPIO_Init+0x2a0>)
 8002246:	4293      	cmp	r3, r2
 8002248:	d875      	bhi.n	8002336 <HAL_GPIO_Init+0x12e>
 800224a:	4a98      	ldr	r2, [pc, #608]	; (80024ac <HAL_GPIO_Init+0x2a4>)
 800224c:	4293      	cmp	r3, r2
 800224e:	d058      	beq.n	8002302 <HAL_GPIO_Init+0xfa>
 8002250:	4a96      	ldr	r2, [pc, #600]	; (80024ac <HAL_GPIO_Init+0x2a4>)
 8002252:	4293      	cmp	r3, r2
 8002254:	d86f      	bhi.n	8002336 <HAL_GPIO_Init+0x12e>
 8002256:	4a96      	ldr	r2, [pc, #600]	; (80024b0 <HAL_GPIO_Init+0x2a8>)
 8002258:	4293      	cmp	r3, r2
 800225a:	d052      	beq.n	8002302 <HAL_GPIO_Init+0xfa>
 800225c:	4a94      	ldr	r2, [pc, #592]	; (80024b0 <HAL_GPIO_Init+0x2a8>)
 800225e:	4293      	cmp	r3, r2
 8002260:	d869      	bhi.n	8002336 <HAL_GPIO_Init+0x12e>
 8002262:	4a94      	ldr	r2, [pc, #592]	; (80024b4 <HAL_GPIO_Init+0x2ac>)
 8002264:	4293      	cmp	r3, r2
 8002266:	d04c      	beq.n	8002302 <HAL_GPIO_Init+0xfa>
 8002268:	4a92      	ldr	r2, [pc, #584]	; (80024b4 <HAL_GPIO_Init+0x2ac>)
 800226a:	4293      	cmp	r3, r2
 800226c:	d863      	bhi.n	8002336 <HAL_GPIO_Init+0x12e>
 800226e:	4a92      	ldr	r2, [pc, #584]	; (80024b8 <HAL_GPIO_Init+0x2b0>)
 8002270:	4293      	cmp	r3, r2
 8002272:	d046      	beq.n	8002302 <HAL_GPIO_Init+0xfa>
 8002274:	4a90      	ldr	r2, [pc, #576]	; (80024b8 <HAL_GPIO_Init+0x2b0>)
 8002276:	4293      	cmp	r3, r2
 8002278:	d85d      	bhi.n	8002336 <HAL_GPIO_Init+0x12e>
 800227a:	2b12      	cmp	r3, #18
 800227c:	d82a      	bhi.n	80022d4 <HAL_GPIO_Init+0xcc>
 800227e:	2b12      	cmp	r3, #18
 8002280:	d859      	bhi.n	8002336 <HAL_GPIO_Init+0x12e>
 8002282:	a201      	add	r2, pc, #4	; (adr r2, 8002288 <HAL_GPIO_Init+0x80>)
 8002284:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002288:	08002303 	.word	0x08002303
 800228c:	080022dd 	.word	0x080022dd
 8002290:	080022ef 	.word	0x080022ef
 8002294:	08002331 	.word	0x08002331
 8002298:	08002337 	.word	0x08002337
 800229c:	08002337 	.word	0x08002337
 80022a0:	08002337 	.word	0x08002337
 80022a4:	08002337 	.word	0x08002337
 80022a8:	08002337 	.word	0x08002337
 80022ac:	08002337 	.word	0x08002337
 80022b0:	08002337 	.word	0x08002337
 80022b4:	08002337 	.word	0x08002337
 80022b8:	08002337 	.word	0x08002337
 80022bc:	08002337 	.word	0x08002337
 80022c0:	08002337 	.word	0x08002337
 80022c4:	08002337 	.word	0x08002337
 80022c8:	08002337 	.word	0x08002337
 80022cc:	080022e5 	.word	0x080022e5
 80022d0:	080022f9 	.word	0x080022f9
 80022d4:	4a79      	ldr	r2, [pc, #484]	; (80024bc <HAL_GPIO_Init+0x2b4>)
 80022d6:	4293      	cmp	r3, r2
 80022d8:	d013      	beq.n	8002302 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80022da:	e02c      	b.n	8002336 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80022dc:	683b      	ldr	r3, [r7, #0]
 80022de:	68db      	ldr	r3, [r3, #12]
 80022e0:	623b      	str	r3, [r7, #32]
          break;
 80022e2:	e029      	b.n	8002338 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80022e4:	683b      	ldr	r3, [r7, #0]
 80022e6:	68db      	ldr	r3, [r3, #12]
 80022e8:	3304      	adds	r3, #4
 80022ea:	623b      	str	r3, [r7, #32]
          break;
 80022ec:	e024      	b.n	8002338 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80022ee:	683b      	ldr	r3, [r7, #0]
 80022f0:	68db      	ldr	r3, [r3, #12]
 80022f2:	3308      	adds	r3, #8
 80022f4:	623b      	str	r3, [r7, #32]
          break;
 80022f6:	e01f      	b.n	8002338 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80022f8:	683b      	ldr	r3, [r7, #0]
 80022fa:	68db      	ldr	r3, [r3, #12]
 80022fc:	330c      	adds	r3, #12
 80022fe:	623b      	str	r3, [r7, #32]
          break;
 8002300:	e01a      	b.n	8002338 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002302:	683b      	ldr	r3, [r7, #0]
 8002304:	689b      	ldr	r3, [r3, #8]
 8002306:	2b00      	cmp	r3, #0
 8002308:	d102      	bne.n	8002310 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800230a:	2304      	movs	r3, #4
 800230c:	623b      	str	r3, [r7, #32]
          break;
 800230e:	e013      	b.n	8002338 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002310:	683b      	ldr	r3, [r7, #0]
 8002312:	689b      	ldr	r3, [r3, #8]
 8002314:	2b01      	cmp	r3, #1
 8002316:	d105      	bne.n	8002324 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002318:	2308      	movs	r3, #8
 800231a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	69fa      	ldr	r2, [r7, #28]
 8002320:	611a      	str	r2, [r3, #16]
          break;
 8002322:	e009      	b.n	8002338 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002324:	2308      	movs	r3, #8
 8002326:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	69fa      	ldr	r2, [r7, #28]
 800232c:	615a      	str	r2, [r3, #20]
          break;
 800232e:	e003      	b.n	8002338 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002330:	2300      	movs	r3, #0
 8002332:	623b      	str	r3, [r7, #32]
          break;
 8002334:	e000      	b.n	8002338 <HAL_GPIO_Init+0x130>
          break;
 8002336:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002338:	69bb      	ldr	r3, [r7, #24]
 800233a:	2bff      	cmp	r3, #255	; 0xff
 800233c:	d801      	bhi.n	8002342 <HAL_GPIO_Init+0x13a>
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	e001      	b.n	8002346 <HAL_GPIO_Init+0x13e>
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	3304      	adds	r3, #4
 8002346:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002348:	69bb      	ldr	r3, [r7, #24]
 800234a:	2bff      	cmp	r3, #255	; 0xff
 800234c:	d802      	bhi.n	8002354 <HAL_GPIO_Init+0x14c>
 800234e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002350:	009b      	lsls	r3, r3, #2
 8002352:	e002      	b.n	800235a <HAL_GPIO_Init+0x152>
 8002354:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002356:	3b08      	subs	r3, #8
 8002358:	009b      	lsls	r3, r3, #2
 800235a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800235c:	697b      	ldr	r3, [r7, #20]
 800235e:	681a      	ldr	r2, [r3, #0]
 8002360:	210f      	movs	r1, #15
 8002362:	693b      	ldr	r3, [r7, #16]
 8002364:	fa01 f303 	lsl.w	r3, r1, r3
 8002368:	43db      	mvns	r3, r3
 800236a:	401a      	ands	r2, r3
 800236c:	6a39      	ldr	r1, [r7, #32]
 800236e:	693b      	ldr	r3, [r7, #16]
 8002370:	fa01 f303 	lsl.w	r3, r1, r3
 8002374:	431a      	orrs	r2, r3
 8002376:	697b      	ldr	r3, [r7, #20]
 8002378:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800237a:	683b      	ldr	r3, [r7, #0]
 800237c:	685b      	ldr	r3, [r3, #4]
 800237e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002382:	2b00      	cmp	r3, #0
 8002384:	f000 80b1 	beq.w	80024ea <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002388:	4b4d      	ldr	r3, [pc, #308]	; (80024c0 <HAL_GPIO_Init+0x2b8>)
 800238a:	699b      	ldr	r3, [r3, #24]
 800238c:	4a4c      	ldr	r2, [pc, #304]	; (80024c0 <HAL_GPIO_Init+0x2b8>)
 800238e:	f043 0301 	orr.w	r3, r3, #1
 8002392:	6193      	str	r3, [r2, #24]
 8002394:	4b4a      	ldr	r3, [pc, #296]	; (80024c0 <HAL_GPIO_Init+0x2b8>)
 8002396:	699b      	ldr	r3, [r3, #24]
 8002398:	f003 0301 	and.w	r3, r3, #1
 800239c:	60bb      	str	r3, [r7, #8]
 800239e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80023a0:	4a48      	ldr	r2, [pc, #288]	; (80024c4 <HAL_GPIO_Init+0x2bc>)
 80023a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023a4:	089b      	lsrs	r3, r3, #2
 80023a6:	3302      	adds	r3, #2
 80023a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023ac:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80023ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023b0:	f003 0303 	and.w	r3, r3, #3
 80023b4:	009b      	lsls	r3, r3, #2
 80023b6:	220f      	movs	r2, #15
 80023b8:	fa02 f303 	lsl.w	r3, r2, r3
 80023bc:	43db      	mvns	r3, r3
 80023be:	68fa      	ldr	r2, [r7, #12]
 80023c0:	4013      	ands	r3, r2
 80023c2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	4a40      	ldr	r2, [pc, #256]	; (80024c8 <HAL_GPIO_Init+0x2c0>)
 80023c8:	4293      	cmp	r3, r2
 80023ca:	d013      	beq.n	80023f4 <HAL_GPIO_Init+0x1ec>
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	4a3f      	ldr	r2, [pc, #252]	; (80024cc <HAL_GPIO_Init+0x2c4>)
 80023d0:	4293      	cmp	r3, r2
 80023d2:	d00d      	beq.n	80023f0 <HAL_GPIO_Init+0x1e8>
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	4a3e      	ldr	r2, [pc, #248]	; (80024d0 <HAL_GPIO_Init+0x2c8>)
 80023d8:	4293      	cmp	r3, r2
 80023da:	d007      	beq.n	80023ec <HAL_GPIO_Init+0x1e4>
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	4a3d      	ldr	r2, [pc, #244]	; (80024d4 <HAL_GPIO_Init+0x2cc>)
 80023e0:	4293      	cmp	r3, r2
 80023e2:	d101      	bne.n	80023e8 <HAL_GPIO_Init+0x1e0>
 80023e4:	2303      	movs	r3, #3
 80023e6:	e006      	b.n	80023f6 <HAL_GPIO_Init+0x1ee>
 80023e8:	2304      	movs	r3, #4
 80023ea:	e004      	b.n	80023f6 <HAL_GPIO_Init+0x1ee>
 80023ec:	2302      	movs	r3, #2
 80023ee:	e002      	b.n	80023f6 <HAL_GPIO_Init+0x1ee>
 80023f0:	2301      	movs	r3, #1
 80023f2:	e000      	b.n	80023f6 <HAL_GPIO_Init+0x1ee>
 80023f4:	2300      	movs	r3, #0
 80023f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80023f8:	f002 0203 	and.w	r2, r2, #3
 80023fc:	0092      	lsls	r2, r2, #2
 80023fe:	4093      	lsls	r3, r2
 8002400:	68fa      	ldr	r2, [r7, #12]
 8002402:	4313      	orrs	r3, r2
 8002404:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002406:	492f      	ldr	r1, [pc, #188]	; (80024c4 <HAL_GPIO_Init+0x2bc>)
 8002408:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800240a:	089b      	lsrs	r3, r3, #2
 800240c:	3302      	adds	r3, #2
 800240e:	68fa      	ldr	r2, [r7, #12]
 8002410:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002414:	683b      	ldr	r3, [r7, #0]
 8002416:	685b      	ldr	r3, [r3, #4]
 8002418:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800241c:	2b00      	cmp	r3, #0
 800241e:	d006      	beq.n	800242e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002420:	4b2d      	ldr	r3, [pc, #180]	; (80024d8 <HAL_GPIO_Init+0x2d0>)
 8002422:	689a      	ldr	r2, [r3, #8]
 8002424:	492c      	ldr	r1, [pc, #176]	; (80024d8 <HAL_GPIO_Init+0x2d0>)
 8002426:	69bb      	ldr	r3, [r7, #24]
 8002428:	4313      	orrs	r3, r2
 800242a:	608b      	str	r3, [r1, #8]
 800242c:	e006      	b.n	800243c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800242e:	4b2a      	ldr	r3, [pc, #168]	; (80024d8 <HAL_GPIO_Init+0x2d0>)
 8002430:	689a      	ldr	r2, [r3, #8]
 8002432:	69bb      	ldr	r3, [r7, #24]
 8002434:	43db      	mvns	r3, r3
 8002436:	4928      	ldr	r1, [pc, #160]	; (80024d8 <HAL_GPIO_Init+0x2d0>)
 8002438:	4013      	ands	r3, r2
 800243a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800243c:	683b      	ldr	r3, [r7, #0]
 800243e:	685b      	ldr	r3, [r3, #4]
 8002440:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002444:	2b00      	cmp	r3, #0
 8002446:	d006      	beq.n	8002456 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002448:	4b23      	ldr	r3, [pc, #140]	; (80024d8 <HAL_GPIO_Init+0x2d0>)
 800244a:	68da      	ldr	r2, [r3, #12]
 800244c:	4922      	ldr	r1, [pc, #136]	; (80024d8 <HAL_GPIO_Init+0x2d0>)
 800244e:	69bb      	ldr	r3, [r7, #24]
 8002450:	4313      	orrs	r3, r2
 8002452:	60cb      	str	r3, [r1, #12]
 8002454:	e006      	b.n	8002464 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002456:	4b20      	ldr	r3, [pc, #128]	; (80024d8 <HAL_GPIO_Init+0x2d0>)
 8002458:	68da      	ldr	r2, [r3, #12]
 800245a:	69bb      	ldr	r3, [r7, #24]
 800245c:	43db      	mvns	r3, r3
 800245e:	491e      	ldr	r1, [pc, #120]	; (80024d8 <HAL_GPIO_Init+0x2d0>)
 8002460:	4013      	ands	r3, r2
 8002462:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002464:	683b      	ldr	r3, [r7, #0]
 8002466:	685b      	ldr	r3, [r3, #4]
 8002468:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800246c:	2b00      	cmp	r3, #0
 800246e:	d006      	beq.n	800247e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002470:	4b19      	ldr	r3, [pc, #100]	; (80024d8 <HAL_GPIO_Init+0x2d0>)
 8002472:	685a      	ldr	r2, [r3, #4]
 8002474:	4918      	ldr	r1, [pc, #96]	; (80024d8 <HAL_GPIO_Init+0x2d0>)
 8002476:	69bb      	ldr	r3, [r7, #24]
 8002478:	4313      	orrs	r3, r2
 800247a:	604b      	str	r3, [r1, #4]
 800247c:	e006      	b.n	800248c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800247e:	4b16      	ldr	r3, [pc, #88]	; (80024d8 <HAL_GPIO_Init+0x2d0>)
 8002480:	685a      	ldr	r2, [r3, #4]
 8002482:	69bb      	ldr	r3, [r7, #24]
 8002484:	43db      	mvns	r3, r3
 8002486:	4914      	ldr	r1, [pc, #80]	; (80024d8 <HAL_GPIO_Init+0x2d0>)
 8002488:	4013      	ands	r3, r2
 800248a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800248c:	683b      	ldr	r3, [r7, #0]
 800248e:	685b      	ldr	r3, [r3, #4]
 8002490:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002494:	2b00      	cmp	r3, #0
 8002496:	d021      	beq.n	80024dc <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002498:	4b0f      	ldr	r3, [pc, #60]	; (80024d8 <HAL_GPIO_Init+0x2d0>)
 800249a:	681a      	ldr	r2, [r3, #0]
 800249c:	490e      	ldr	r1, [pc, #56]	; (80024d8 <HAL_GPIO_Init+0x2d0>)
 800249e:	69bb      	ldr	r3, [r7, #24]
 80024a0:	4313      	orrs	r3, r2
 80024a2:	600b      	str	r3, [r1, #0]
 80024a4:	e021      	b.n	80024ea <HAL_GPIO_Init+0x2e2>
 80024a6:	bf00      	nop
 80024a8:	10320000 	.word	0x10320000
 80024ac:	10310000 	.word	0x10310000
 80024b0:	10220000 	.word	0x10220000
 80024b4:	10210000 	.word	0x10210000
 80024b8:	10120000 	.word	0x10120000
 80024bc:	10110000 	.word	0x10110000
 80024c0:	40021000 	.word	0x40021000
 80024c4:	40010000 	.word	0x40010000
 80024c8:	40010800 	.word	0x40010800
 80024cc:	40010c00 	.word	0x40010c00
 80024d0:	40011000 	.word	0x40011000
 80024d4:	40011400 	.word	0x40011400
 80024d8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80024dc:	4b0b      	ldr	r3, [pc, #44]	; (800250c <HAL_GPIO_Init+0x304>)
 80024de:	681a      	ldr	r2, [r3, #0]
 80024e0:	69bb      	ldr	r3, [r7, #24]
 80024e2:	43db      	mvns	r3, r3
 80024e4:	4909      	ldr	r1, [pc, #36]	; (800250c <HAL_GPIO_Init+0x304>)
 80024e6:	4013      	ands	r3, r2
 80024e8:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80024ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024ec:	3301      	adds	r3, #1
 80024ee:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80024f0:	683b      	ldr	r3, [r7, #0]
 80024f2:	681a      	ldr	r2, [r3, #0]
 80024f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024f6:	fa22 f303 	lsr.w	r3, r2, r3
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	f47f ae8e 	bne.w	800221c <HAL_GPIO_Init+0x14>
  }
}
 8002500:	bf00      	nop
 8002502:	bf00      	nop
 8002504:	372c      	adds	r7, #44	; 0x2c
 8002506:	46bd      	mov	sp, r7
 8002508:	bc80      	pop	{r7}
 800250a:	4770      	bx	lr
 800250c:	40010400 	.word	0x40010400

08002510 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002510:	b580      	push	{r7, lr}
 8002512:	b084      	sub	sp, #16
 8002514:	af00      	add	r7, sp, #0
 8002516:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	2b00      	cmp	r3, #0
 800251c:	d101      	bne.n	8002522 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800251e:	2301      	movs	r3, #1
 8002520:	e12b      	b.n	800277a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002528:	b2db      	uxtb	r3, r3
 800252a:	2b00      	cmp	r3, #0
 800252c:	d106      	bne.n	800253c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	2200      	movs	r2, #0
 8002532:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002536:	6878      	ldr	r0, [r7, #4]
 8002538:	f7ff fa36 	bl	80019a8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	2224      	movs	r2, #36	; 0x24
 8002540:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	681a      	ldr	r2, [r3, #0]
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f022 0201 	bic.w	r2, r2, #1
 8002552:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	681a      	ldr	r2, [r3, #0]
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002562:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	681a      	ldr	r2, [r3, #0]
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002572:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002574:	f001 fbca 	bl	8003d0c <HAL_RCC_GetPCLK1Freq>
 8002578:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	685b      	ldr	r3, [r3, #4]
 800257e:	4a81      	ldr	r2, [pc, #516]	; (8002784 <HAL_I2C_Init+0x274>)
 8002580:	4293      	cmp	r3, r2
 8002582:	d807      	bhi.n	8002594 <HAL_I2C_Init+0x84>
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	4a80      	ldr	r2, [pc, #512]	; (8002788 <HAL_I2C_Init+0x278>)
 8002588:	4293      	cmp	r3, r2
 800258a:	bf94      	ite	ls
 800258c:	2301      	movls	r3, #1
 800258e:	2300      	movhi	r3, #0
 8002590:	b2db      	uxtb	r3, r3
 8002592:	e006      	b.n	80025a2 <HAL_I2C_Init+0x92>
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	4a7d      	ldr	r2, [pc, #500]	; (800278c <HAL_I2C_Init+0x27c>)
 8002598:	4293      	cmp	r3, r2
 800259a:	bf94      	ite	ls
 800259c:	2301      	movls	r3, #1
 800259e:	2300      	movhi	r3, #0
 80025a0:	b2db      	uxtb	r3, r3
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d001      	beq.n	80025aa <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80025a6:	2301      	movs	r3, #1
 80025a8:	e0e7      	b.n	800277a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	4a78      	ldr	r2, [pc, #480]	; (8002790 <HAL_I2C_Init+0x280>)
 80025ae:	fba2 2303 	umull	r2, r3, r2, r3
 80025b2:	0c9b      	lsrs	r3, r3, #18
 80025b4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	685b      	ldr	r3, [r3, #4]
 80025bc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	68ba      	ldr	r2, [r7, #8]
 80025c6:	430a      	orrs	r2, r1
 80025c8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	6a1b      	ldr	r3, [r3, #32]
 80025d0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	685b      	ldr	r3, [r3, #4]
 80025d8:	4a6a      	ldr	r2, [pc, #424]	; (8002784 <HAL_I2C_Init+0x274>)
 80025da:	4293      	cmp	r3, r2
 80025dc:	d802      	bhi.n	80025e4 <HAL_I2C_Init+0xd4>
 80025de:	68bb      	ldr	r3, [r7, #8]
 80025e0:	3301      	adds	r3, #1
 80025e2:	e009      	b.n	80025f8 <HAL_I2C_Init+0xe8>
 80025e4:	68bb      	ldr	r3, [r7, #8]
 80025e6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80025ea:	fb02 f303 	mul.w	r3, r2, r3
 80025ee:	4a69      	ldr	r2, [pc, #420]	; (8002794 <HAL_I2C_Init+0x284>)
 80025f0:	fba2 2303 	umull	r2, r3, r2, r3
 80025f4:	099b      	lsrs	r3, r3, #6
 80025f6:	3301      	adds	r3, #1
 80025f8:	687a      	ldr	r2, [r7, #4]
 80025fa:	6812      	ldr	r2, [r2, #0]
 80025fc:	430b      	orrs	r3, r1
 80025fe:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	69db      	ldr	r3, [r3, #28]
 8002606:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800260a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	685b      	ldr	r3, [r3, #4]
 8002612:	495c      	ldr	r1, [pc, #368]	; (8002784 <HAL_I2C_Init+0x274>)
 8002614:	428b      	cmp	r3, r1
 8002616:	d819      	bhi.n	800264c <HAL_I2C_Init+0x13c>
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	1e59      	subs	r1, r3, #1
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	685b      	ldr	r3, [r3, #4]
 8002620:	005b      	lsls	r3, r3, #1
 8002622:	fbb1 f3f3 	udiv	r3, r1, r3
 8002626:	1c59      	adds	r1, r3, #1
 8002628:	f640 73fc 	movw	r3, #4092	; 0xffc
 800262c:	400b      	ands	r3, r1
 800262e:	2b00      	cmp	r3, #0
 8002630:	d00a      	beq.n	8002648 <HAL_I2C_Init+0x138>
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	1e59      	subs	r1, r3, #1
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	685b      	ldr	r3, [r3, #4]
 800263a:	005b      	lsls	r3, r3, #1
 800263c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002640:	3301      	adds	r3, #1
 8002642:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002646:	e051      	b.n	80026ec <HAL_I2C_Init+0x1dc>
 8002648:	2304      	movs	r3, #4
 800264a:	e04f      	b.n	80026ec <HAL_I2C_Init+0x1dc>
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	689b      	ldr	r3, [r3, #8]
 8002650:	2b00      	cmp	r3, #0
 8002652:	d111      	bne.n	8002678 <HAL_I2C_Init+0x168>
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	1e58      	subs	r0, r3, #1
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	6859      	ldr	r1, [r3, #4]
 800265c:	460b      	mov	r3, r1
 800265e:	005b      	lsls	r3, r3, #1
 8002660:	440b      	add	r3, r1
 8002662:	fbb0 f3f3 	udiv	r3, r0, r3
 8002666:	3301      	adds	r3, #1
 8002668:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800266c:	2b00      	cmp	r3, #0
 800266e:	bf0c      	ite	eq
 8002670:	2301      	moveq	r3, #1
 8002672:	2300      	movne	r3, #0
 8002674:	b2db      	uxtb	r3, r3
 8002676:	e012      	b.n	800269e <HAL_I2C_Init+0x18e>
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	1e58      	subs	r0, r3, #1
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	6859      	ldr	r1, [r3, #4]
 8002680:	460b      	mov	r3, r1
 8002682:	009b      	lsls	r3, r3, #2
 8002684:	440b      	add	r3, r1
 8002686:	0099      	lsls	r1, r3, #2
 8002688:	440b      	add	r3, r1
 800268a:	fbb0 f3f3 	udiv	r3, r0, r3
 800268e:	3301      	adds	r3, #1
 8002690:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002694:	2b00      	cmp	r3, #0
 8002696:	bf0c      	ite	eq
 8002698:	2301      	moveq	r3, #1
 800269a:	2300      	movne	r3, #0
 800269c:	b2db      	uxtb	r3, r3
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d001      	beq.n	80026a6 <HAL_I2C_Init+0x196>
 80026a2:	2301      	movs	r3, #1
 80026a4:	e022      	b.n	80026ec <HAL_I2C_Init+0x1dc>
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	689b      	ldr	r3, [r3, #8]
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d10e      	bne.n	80026cc <HAL_I2C_Init+0x1bc>
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	1e58      	subs	r0, r3, #1
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	6859      	ldr	r1, [r3, #4]
 80026b6:	460b      	mov	r3, r1
 80026b8:	005b      	lsls	r3, r3, #1
 80026ba:	440b      	add	r3, r1
 80026bc:	fbb0 f3f3 	udiv	r3, r0, r3
 80026c0:	3301      	adds	r3, #1
 80026c2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80026c6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80026ca:	e00f      	b.n	80026ec <HAL_I2C_Init+0x1dc>
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	1e58      	subs	r0, r3, #1
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	6859      	ldr	r1, [r3, #4]
 80026d4:	460b      	mov	r3, r1
 80026d6:	009b      	lsls	r3, r3, #2
 80026d8:	440b      	add	r3, r1
 80026da:	0099      	lsls	r1, r3, #2
 80026dc:	440b      	add	r3, r1
 80026de:	fbb0 f3f3 	udiv	r3, r0, r3
 80026e2:	3301      	adds	r3, #1
 80026e4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80026e8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80026ec:	6879      	ldr	r1, [r7, #4]
 80026ee:	6809      	ldr	r1, [r1, #0]
 80026f0:	4313      	orrs	r3, r2
 80026f2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	69da      	ldr	r2, [r3, #28]
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	6a1b      	ldr	r3, [r3, #32]
 8002706:	431a      	orrs	r2, r3
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	430a      	orrs	r2, r1
 800270e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	689b      	ldr	r3, [r3, #8]
 8002716:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800271a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800271e:	687a      	ldr	r2, [r7, #4]
 8002720:	6911      	ldr	r1, [r2, #16]
 8002722:	687a      	ldr	r2, [r7, #4]
 8002724:	68d2      	ldr	r2, [r2, #12]
 8002726:	4311      	orrs	r1, r2
 8002728:	687a      	ldr	r2, [r7, #4]
 800272a:	6812      	ldr	r2, [r2, #0]
 800272c:	430b      	orrs	r3, r1
 800272e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	68db      	ldr	r3, [r3, #12]
 8002736:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	695a      	ldr	r2, [r3, #20]
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	699b      	ldr	r3, [r3, #24]
 8002742:	431a      	orrs	r2, r3
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	430a      	orrs	r2, r1
 800274a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	681a      	ldr	r2, [r3, #0]
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f042 0201 	orr.w	r2, r2, #1
 800275a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	2200      	movs	r2, #0
 8002760:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	2220      	movs	r2, #32
 8002766:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	2200      	movs	r2, #0
 800276e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	2200      	movs	r2, #0
 8002774:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002778:	2300      	movs	r3, #0
}
 800277a:	4618      	mov	r0, r3
 800277c:	3710      	adds	r7, #16
 800277e:	46bd      	mov	sp, r7
 8002780:	bd80      	pop	{r7, pc}
 8002782:	bf00      	nop
 8002784:	000186a0 	.word	0x000186a0
 8002788:	001e847f 	.word	0x001e847f
 800278c:	003d08ff 	.word	0x003d08ff
 8002790:	431bde83 	.word	0x431bde83
 8002794:	10624dd3 	.word	0x10624dd3

08002798 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002798:	b580      	push	{r7, lr}
 800279a:	b088      	sub	sp, #32
 800279c:	af02      	add	r7, sp, #8
 800279e:	60f8      	str	r0, [r7, #12]
 80027a0:	607a      	str	r2, [r7, #4]
 80027a2:	461a      	mov	r2, r3
 80027a4:	460b      	mov	r3, r1
 80027a6:	817b      	strh	r3, [r7, #10]
 80027a8:	4613      	mov	r3, r2
 80027aa:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80027ac:	f7ff fb6c 	bl	8001e88 <HAL_GetTick>
 80027b0:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80027b8:	b2db      	uxtb	r3, r3
 80027ba:	2b20      	cmp	r3, #32
 80027bc:	f040 80e0 	bne.w	8002980 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80027c0:	697b      	ldr	r3, [r7, #20]
 80027c2:	9300      	str	r3, [sp, #0]
 80027c4:	2319      	movs	r3, #25
 80027c6:	2201      	movs	r2, #1
 80027c8:	4970      	ldr	r1, [pc, #448]	; (800298c <HAL_I2C_Master_Transmit+0x1f4>)
 80027ca:	68f8      	ldr	r0, [r7, #12]
 80027cc:	f000 fc9e 	bl	800310c <I2C_WaitOnFlagUntilTimeout>
 80027d0:	4603      	mov	r3, r0
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d001      	beq.n	80027da <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80027d6:	2302      	movs	r3, #2
 80027d8:	e0d3      	b.n	8002982 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80027e0:	2b01      	cmp	r3, #1
 80027e2:	d101      	bne.n	80027e8 <HAL_I2C_Master_Transmit+0x50>
 80027e4:	2302      	movs	r3, #2
 80027e6:	e0cc      	b.n	8002982 <HAL_I2C_Master_Transmit+0x1ea>
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	2201      	movs	r2, #1
 80027ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f003 0301 	and.w	r3, r3, #1
 80027fa:	2b01      	cmp	r3, #1
 80027fc:	d007      	beq.n	800280e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	681a      	ldr	r2, [r3, #0]
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f042 0201 	orr.w	r2, r2, #1
 800280c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	681a      	ldr	r2, [r3, #0]
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800281c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	2221      	movs	r2, #33	; 0x21
 8002822:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	2210      	movs	r2, #16
 800282a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	2200      	movs	r2, #0
 8002832:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	687a      	ldr	r2, [r7, #4]
 8002838:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	893a      	ldrh	r2, [r7, #8]
 800283e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002844:	b29a      	uxth	r2, r3
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	4a50      	ldr	r2, [pc, #320]	; (8002990 <HAL_I2C_Master_Transmit+0x1f8>)
 800284e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002850:	8979      	ldrh	r1, [r7, #10]
 8002852:	697b      	ldr	r3, [r7, #20]
 8002854:	6a3a      	ldr	r2, [r7, #32]
 8002856:	68f8      	ldr	r0, [r7, #12]
 8002858:	f000 fb08 	bl	8002e6c <I2C_MasterRequestWrite>
 800285c:	4603      	mov	r3, r0
 800285e:	2b00      	cmp	r3, #0
 8002860:	d001      	beq.n	8002866 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002862:	2301      	movs	r3, #1
 8002864:	e08d      	b.n	8002982 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002866:	2300      	movs	r3, #0
 8002868:	613b      	str	r3, [r7, #16]
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	695b      	ldr	r3, [r3, #20]
 8002870:	613b      	str	r3, [r7, #16]
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	699b      	ldr	r3, [r3, #24]
 8002878:	613b      	str	r3, [r7, #16]
 800287a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800287c:	e066      	b.n	800294c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800287e:	697a      	ldr	r2, [r7, #20]
 8002880:	6a39      	ldr	r1, [r7, #32]
 8002882:	68f8      	ldr	r0, [r7, #12]
 8002884:	f000 fd5c 	bl	8003340 <I2C_WaitOnTXEFlagUntilTimeout>
 8002888:	4603      	mov	r3, r0
 800288a:	2b00      	cmp	r3, #0
 800288c:	d00d      	beq.n	80028aa <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002892:	2b04      	cmp	r3, #4
 8002894:	d107      	bne.n	80028a6 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	681a      	ldr	r2, [r3, #0]
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80028a4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80028a6:	2301      	movs	r3, #1
 80028a8:	e06b      	b.n	8002982 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028ae:	781a      	ldrb	r2, [r3, #0]
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028ba:	1c5a      	adds	r2, r3, #1
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028c4:	b29b      	uxth	r3, r3
 80028c6:	3b01      	subs	r3, #1
 80028c8:	b29a      	uxth	r2, r3
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028d2:	3b01      	subs	r3, #1
 80028d4:	b29a      	uxth	r2, r3
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	695b      	ldr	r3, [r3, #20]
 80028e0:	f003 0304 	and.w	r3, r3, #4
 80028e4:	2b04      	cmp	r3, #4
 80028e6:	d11b      	bne.n	8002920 <HAL_I2C_Master_Transmit+0x188>
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d017      	beq.n	8002920 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028f4:	781a      	ldrb	r2, [r3, #0]
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002900:	1c5a      	adds	r2, r3, #1
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800290a:	b29b      	uxth	r3, r3
 800290c:	3b01      	subs	r3, #1
 800290e:	b29a      	uxth	r2, r3
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002918:	3b01      	subs	r3, #1
 800291a:	b29a      	uxth	r2, r3
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002920:	697a      	ldr	r2, [r7, #20]
 8002922:	6a39      	ldr	r1, [r7, #32]
 8002924:	68f8      	ldr	r0, [r7, #12]
 8002926:	f000 fd53 	bl	80033d0 <I2C_WaitOnBTFFlagUntilTimeout>
 800292a:	4603      	mov	r3, r0
 800292c:	2b00      	cmp	r3, #0
 800292e:	d00d      	beq.n	800294c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002934:	2b04      	cmp	r3, #4
 8002936:	d107      	bne.n	8002948 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	681a      	ldr	r2, [r3, #0]
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002946:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002948:	2301      	movs	r3, #1
 800294a:	e01a      	b.n	8002982 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002950:	2b00      	cmp	r3, #0
 8002952:	d194      	bne.n	800287e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	681a      	ldr	r2, [r3, #0]
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002962:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	2220      	movs	r2, #32
 8002968:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	2200      	movs	r2, #0
 8002970:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	2200      	movs	r2, #0
 8002978:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800297c:	2300      	movs	r3, #0
 800297e:	e000      	b.n	8002982 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002980:	2302      	movs	r3, #2
  }
}
 8002982:	4618      	mov	r0, r3
 8002984:	3718      	adds	r7, #24
 8002986:	46bd      	mov	sp, r7
 8002988:	bd80      	pop	{r7, pc}
 800298a:	bf00      	nop
 800298c:	00100002 	.word	0x00100002
 8002990:	ffff0000 	.word	0xffff0000

08002994 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002994:	b580      	push	{r7, lr}
 8002996:	b08c      	sub	sp, #48	; 0x30
 8002998:	af02      	add	r7, sp, #8
 800299a:	60f8      	str	r0, [r7, #12]
 800299c:	607a      	str	r2, [r7, #4]
 800299e:	461a      	mov	r2, r3
 80029a0:	460b      	mov	r3, r1
 80029a2:	817b      	strh	r3, [r7, #10]
 80029a4:	4613      	mov	r3, r2
 80029a6:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 80029a8:	2300      	movs	r3, #0
 80029aa:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80029ac:	f7ff fa6c 	bl	8001e88 <HAL_GetTick>
 80029b0:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80029b8:	b2db      	uxtb	r3, r3
 80029ba:	2b20      	cmp	r3, #32
 80029bc:	f040 824b 	bne.w	8002e56 <HAL_I2C_Master_Receive+0x4c2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80029c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029c2:	9300      	str	r3, [sp, #0]
 80029c4:	2319      	movs	r3, #25
 80029c6:	2201      	movs	r2, #1
 80029c8:	497f      	ldr	r1, [pc, #508]	; (8002bc8 <HAL_I2C_Master_Receive+0x234>)
 80029ca:	68f8      	ldr	r0, [r7, #12]
 80029cc:	f000 fb9e 	bl	800310c <I2C_WaitOnFlagUntilTimeout>
 80029d0:	4603      	mov	r3, r0
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d001      	beq.n	80029da <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 80029d6:	2302      	movs	r3, #2
 80029d8:	e23e      	b.n	8002e58 <HAL_I2C_Master_Receive+0x4c4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80029e0:	2b01      	cmp	r3, #1
 80029e2:	d101      	bne.n	80029e8 <HAL_I2C_Master_Receive+0x54>
 80029e4:	2302      	movs	r3, #2
 80029e6:	e237      	b.n	8002e58 <HAL_I2C_Master_Receive+0x4c4>
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	2201      	movs	r2, #1
 80029ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f003 0301 	and.w	r3, r3, #1
 80029fa:	2b01      	cmp	r3, #1
 80029fc:	d007      	beq.n	8002a0e <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	681a      	ldr	r2, [r3, #0]
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f042 0201 	orr.w	r2, r2, #1
 8002a0c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	681a      	ldr	r2, [r3, #0]
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002a1c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	2222      	movs	r2, #34	; 0x22
 8002a22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	2210      	movs	r2, #16
 8002a2a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	2200      	movs	r2, #0
 8002a32:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	687a      	ldr	r2, [r7, #4]
 8002a38:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	893a      	ldrh	r2, [r7, #8]
 8002a3e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a44:	b29a      	uxth	r2, r3
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	4a5f      	ldr	r2, [pc, #380]	; (8002bcc <HAL_I2C_Master_Receive+0x238>)
 8002a4e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002a50:	8979      	ldrh	r1, [r7, #10]
 8002a52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a54:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002a56:	68f8      	ldr	r0, [r7, #12]
 8002a58:	f000 fa8a 	bl	8002f70 <I2C_MasterRequestRead>
 8002a5c:	4603      	mov	r3, r0
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d001      	beq.n	8002a66 <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 8002a62:	2301      	movs	r3, #1
 8002a64:	e1f8      	b.n	8002e58 <HAL_I2C_Master_Receive+0x4c4>
    }

    if (hi2c->XferSize == 0U)
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d113      	bne.n	8002a96 <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002a6e:	2300      	movs	r3, #0
 8002a70:	61fb      	str	r3, [r7, #28]
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	695b      	ldr	r3, [r3, #20]
 8002a78:	61fb      	str	r3, [r7, #28]
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	699b      	ldr	r3, [r3, #24]
 8002a80:	61fb      	str	r3, [r7, #28]
 8002a82:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	681a      	ldr	r2, [r3, #0]
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a92:	601a      	str	r2, [r3, #0]
 8002a94:	e1cc      	b.n	8002e30 <HAL_I2C_Master_Receive+0x49c>
    }
    else if (hi2c->XferSize == 1U)
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a9a:	2b01      	cmp	r3, #1
 8002a9c:	d11e      	bne.n	8002adc <HAL_I2C_Master_Receive+0x148>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	681a      	ldr	r2, [r3, #0]
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002aac:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002aae:	b672      	cpsid	i
}
 8002ab0:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002ab2:	2300      	movs	r3, #0
 8002ab4:	61bb      	str	r3, [r7, #24]
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	695b      	ldr	r3, [r3, #20]
 8002abc:	61bb      	str	r3, [r7, #24]
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	699b      	ldr	r3, [r3, #24]
 8002ac4:	61bb      	str	r3, [r7, #24]
 8002ac6:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	681a      	ldr	r2, [r3, #0]
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ad6:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002ad8:	b662      	cpsie	i
}
 8002ada:	e035      	b.n	8002b48 <HAL_I2C_Master_Receive+0x1b4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ae0:	2b02      	cmp	r3, #2
 8002ae2:	d11e      	bne.n	8002b22 <HAL_I2C_Master_Receive+0x18e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	681a      	ldr	r2, [r3, #0]
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002af2:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002af4:	b672      	cpsid	i
}
 8002af6:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002af8:	2300      	movs	r3, #0
 8002afa:	617b      	str	r3, [r7, #20]
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	695b      	ldr	r3, [r3, #20]
 8002b02:	617b      	str	r3, [r7, #20]
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	699b      	ldr	r3, [r3, #24]
 8002b0a:	617b      	str	r3, [r7, #20]
 8002b0c:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	681a      	ldr	r2, [r3, #0]
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002b1c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002b1e:	b662      	cpsie	i
}
 8002b20:	e012      	b.n	8002b48 <HAL_I2C_Master_Receive+0x1b4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	681a      	ldr	r2, [r3, #0]
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002b30:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b32:	2300      	movs	r3, #0
 8002b34:	613b      	str	r3, [r7, #16]
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	695b      	ldr	r3, [r3, #20]
 8002b3c:	613b      	str	r3, [r7, #16]
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	699b      	ldr	r3, [r3, #24]
 8002b44:	613b      	str	r3, [r7, #16]
 8002b46:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8002b48:	e172      	b.n	8002e30 <HAL_I2C_Master_Receive+0x49c>
    {
      if (hi2c->XferSize <= 3U)
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b4e:	2b03      	cmp	r3, #3
 8002b50:	f200 811f 	bhi.w	8002d92 <HAL_I2C_Master_Receive+0x3fe>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b58:	2b01      	cmp	r3, #1
 8002b5a:	d123      	bne.n	8002ba4 <HAL_I2C_Master_Receive+0x210>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002b5c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b5e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002b60:	68f8      	ldr	r0, [r7, #12]
 8002b62:	f000 fc7d 	bl	8003460 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002b66:	4603      	mov	r3, r0
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d001      	beq.n	8002b70 <HAL_I2C_Master_Receive+0x1dc>
          {
            return HAL_ERROR;
 8002b6c:	2301      	movs	r3, #1
 8002b6e:	e173      	b.n	8002e58 <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	691a      	ldr	r2, [r3, #16]
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b7a:	b2d2      	uxtb	r2, r2
 8002b7c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b82:	1c5a      	adds	r2, r3, #1
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b8c:	3b01      	subs	r3, #1
 8002b8e:	b29a      	uxth	r2, r3
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b98:	b29b      	uxth	r3, r3
 8002b9a:	3b01      	subs	r3, #1
 8002b9c:	b29a      	uxth	r2, r3
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002ba2:	e145      	b.n	8002e30 <HAL_I2C_Master_Receive+0x49c>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ba8:	2b02      	cmp	r3, #2
 8002baa:	d152      	bne.n	8002c52 <HAL_I2C_Master_Receive+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002bac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bae:	9300      	str	r3, [sp, #0]
 8002bb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bb2:	2200      	movs	r2, #0
 8002bb4:	4906      	ldr	r1, [pc, #24]	; (8002bd0 <HAL_I2C_Master_Receive+0x23c>)
 8002bb6:	68f8      	ldr	r0, [r7, #12]
 8002bb8:	f000 faa8 	bl	800310c <I2C_WaitOnFlagUntilTimeout>
 8002bbc:	4603      	mov	r3, r0
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d008      	beq.n	8002bd4 <HAL_I2C_Master_Receive+0x240>
          {
            return HAL_ERROR;
 8002bc2:	2301      	movs	r3, #1
 8002bc4:	e148      	b.n	8002e58 <HAL_I2C_Master_Receive+0x4c4>
 8002bc6:	bf00      	nop
 8002bc8:	00100002 	.word	0x00100002
 8002bcc:	ffff0000 	.word	0xffff0000
 8002bd0:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8002bd4:	b672      	cpsid	i
}
 8002bd6:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	681a      	ldr	r2, [r3, #0]
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002be6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	691a      	ldr	r2, [r3, #16]
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bf2:	b2d2      	uxtb	r2, r2
 8002bf4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bfa:	1c5a      	adds	r2, r3, #1
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c04:	3b01      	subs	r3, #1
 8002c06:	b29a      	uxth	r2, r3
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c10:	b29b      	uxth	r3, r3
 8002c12:	3b01      	subs	r3, #1
 8002c14:	b29a      	uxth	r2, r3
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8002c1a:	b662      	cpsie	i
}
 8002c1c:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	691a      	ldr	r2, [r3, #16]
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c28:	b2d2      	uxtb	r2, r2
 8002c2a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c30:	1c5a      	adds	r2, r3, #1
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c3a:	3b01      	subs	r3, #1
 8002c3c:	b29a      	uxth	r2, r3
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c46:	b29b      	uxth	r3, r3
 8002c48:	3b01      	subs	r3, #1
 8002c4a:	b29a      	uxth	r2, r3
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002c50:	e0ee      	b.n	8002e30 <HAL_I2C_Master_Receive+0x49c>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002c52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c54:	9300      	str	r3, [sp, #0]
 8002c56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c58:	2200      	movs	r2, #0
 8002c5a:	4981      	ldr	r1, [pc, #516]	; (8002e60 <HAL_I2C_Master_Receive+0x4cc>)
 8002c5c:	68f8      	ldr	r0, [r7, #12]
 8002c5e:	f000 fa55 	bl	800310c <I2C_WaitOnFlagUntilTimeout>
 8002c62:	4603      	mov	r3, r0
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d001      	beq.n	8002c6c <HAL_I2C_Master_Receive+0x2d8>
          {
            return HAL_ERROR;
 8002c68:	2301      	movs	r3, #1
 8002c6a:	e0f5      	b.n	8002e58 <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	681a      	ldr	r2, [r3, #0]
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002c7a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002c7c:	b672      	cpsid	i
}
 8002c7e:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	691a      	ldr	r2, [r3, #16]
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c8a:	b2d2      	uxtb	r2, r2
 8002c8c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c92:	1c5a      	adds	r2, r3, #1
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c9c:	3b01      	subs	r3, #1
 8002c9e:	b29a      	uxth	r2, r3
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ca8:	b29b      	uxth	r3, r3
 8002caa:	3b01      	subs	r3, #1
 8002cac:	b29a      	uxth	r2, r3
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8002cb2:	4b6c      	ldr	r3, [pc, #432]	; (8002e64 <HAL_I2C_Master_Receive+0x4d0>)
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	08db      	lsrs	r3, r3, #3
 8002cb8:	4a6b      	ldr	r2, [pc, #428]	; (8002e68 <HAL_I2C_Master_Receive+0x4d4>)
 8002cba:	fba2 2303 	umull	r2, r3, r2, r3
 8002cbe:	0a1a      	lsrs	r2, r3, #8
 8002cc0:	4613      	mov	r3, r2
 8002cc2:	009b      	lsls	r3, r3, #2
 8002cc4:	4413      	add	r3, r2
 8002cc6:	00da      	lsls	r2, r3, #3
 8002cc8:	1ad3      	subs	r3, r2, r3
 8002cca:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8002ccc:	6a3b      	ldr	r3, [r7, #32]
 8002cce:	3b01      	subs	r3, #1
 8002cd0:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8002cd2:	6a3b      	ldr	r3, [r7, #32]
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d118      	bne.n	8002d0a <HAL_I2C_Master_Receive+0x376>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	2200      	movs	r2, #0
 8002cdc:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	2220      	movs	r2, #32
 8002ce2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	2200      	movs	r2, #0
 8002cea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cf2:	f043 0220 	orr.w	r2, r3, #32
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8002cfa:	b662      	cpsie	i
}
 8002cfc:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	2200      	movs	r2, #0
 8002d02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8002d06:	2301      	movs	r3, #1
 8002d08:	e0a6      	b.n	8002e58 <HAL_I2C_Master_Receive+0x4c4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	695b      	ldr	r3, [r3, #20]
 8002d10:	f003 0304 	and.w	r3, r3, #4
 8002d14:	2b04      	cmp	r3, #4
 8002d16:	d1d9      	bne.n	8002ccc <HAL_I2C_Master_Receive+0x338>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	681a      	ldr	r2, [r3, #0]
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d26:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	691a      	ldr	r2, [r3, #16]
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d32:	b2d2      	uxtb	r2, r2
 8002d34:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d3a:	1c5a      	adds	r2, r3, #1
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d44:	3b01      	subs	r3, #1
 8002d46:	b29a      	uxth	r2, r3
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d50:	b29b      	uxth	r3, r3
 8002d52:	3b01      	subs	r3, #1
 8002d54:	b29a      	uxth	r2, r3
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8002d5a:	b662      	cpsie	i
}
 8002d5c:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	691a      	ldr	r2, [r3, #16]
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d68:	b2d2      	uxtb	r2, r2
 8002d6a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d70:	1c5a      	adds	r2, r3, #1
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d7a:	3b01      	subs	r3, #1
 8002d7c:	b29a      	uxth	r2, r3
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d86:	b29b      	uxth	r3, r3
 8002d88:	3b01      	subs	r3, #1
 8002d8a:	b29a      	uxth	r2, r3
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002d90:	e04e      	b.n	8002e30 <HAL_I2C_Master_Receive+0x49c>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002d92:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d94:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002d96:	68f8      	ldr	r0, [r7, #12]
 8002d98:	f000 fb62 	bl	8003460 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002d9c:	4603      	mov	r3, r0
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d001      	beq.n	8002da6 <HAL_I2C_Master_Receive+0x412>
        {
          return HAL_ERROR;
 8002da2:	2301      	movs	r3, #1
 8002da4:	e058      	b.n	8002e58 <HAL_I2C_Master_Receive+0x4c4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	691a      	ldr	r2, [r3, #16]
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002db0:	b2d2      	uxtb	r2, r2
 8002db2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002db8:	1c5a      	adds	r2, r3, #1
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002dc2:	3b01      	subs	r3, #1
 8002dc4:	b29a      	uxth	r2, r3
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002dce:	b29b      	uxth	r3, r3
 8002dd0:	3b01      	subs	r3, #1
 8002dd2:	b29a      	uxth	r2, r3
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	695b      	ldr	r3, [r3, #20]
 8002dde:	f003 0304 	and.w	r3, r3, #4
 8002de2:	2b04      	cmp	r3, #4
 8002de4:	d124      	bne.n	8002e30 <HAL_I2C_Master_Receive+0x49c>
        {

          if (hi2c->XferSize == 3U)
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002dea:	2b03      	cmp	r3, #3
 8002dec:	d107      	bne.n	8002dfe <HAL_I2C_Master_Receive+0x46a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	681a      	ldr	r2, [r3, #0]
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002dfc:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	691a      	ldr	r2, [r3, #16]
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e08:	b2d2      	uxtb	r2, r2
 8002e0a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e10:	1c5a      	adds	r2, r3, #1
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e1a:	3b01      	subs	r3, #1
 8002e1c:	b29a      	uxth	r2, r3
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e26:	b29b      	uxth	r3, r3
 8002e28:	3b01      	subs	r3, #1
 8002e2a:	b29a      	uxth	r2, r3
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	f47f ae88 	bne.w	8002b4a <HAL_I2C_Master_Receive+0x1b6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	2220      	movs	r2, #32
 8002e3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	2200      	movs	r2, #0
 8002e46:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002e52:	2300      	movs	r3, #0
 8002e54:	e000      	b.n	8002e58 <HAL_I2C_Master_Receive+0x4c4>
  }
  else
  {
    return HAL_BUSY;
 8002e56:	2302      	movs	r3, #2
  }
}
 8002e58:	4618      	mov	r0, r3
 8002e5a:	3728      	adds	r7, #40	; 0x28
 8002e5c:	46bd      	mov	sp, r7
 8002e5e:	bd80      	pop	{r7, pc}
 8002e60:	00010004 	.word	0x00010004
 8002e64:	20000010 	.word	0x20000010
 8002e68:	14f8b589 	.word	0x14f8b589

08002e6c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002e6c:	b580      	push	{r7, lr}
 8002e6e:	b088      	sub	sp, #32
 8002e70:	af02      	add	r7, sp, #8
 8002e72:	60f8      	str	r0, [r7, #12]
 8002e74:	607a      	str	r2, [r7, #4]
 8002e76:	603b      	str	r3, [r7, #0]
 8002e78:	460b      	mov	r3, r1
 8002e7a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e80:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002e82:	697b      	ldr	r3, [r7, #20]
 8002e84:	2b08      	cmp	r3, #8
 8002e86:	d006      	beq.n	8002e96 <I2C_MasterRequestWrite+0x2a>
 8002e88:	697b      	ldr	r3, [r7, #20]
 8002e8a:	2b01      	cmp	r3, #1
 8002e8c:	d003      	beq.n	8002e96 <I2C_MasterRequestWrite+0x2a>
 8002e8e:	697b      	ldr	r3, [r7, #20]
 8002e90:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002e94:	d108      	bne.n	8002ea8 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	681a      	ldr	r2, [r3, #0]
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002ea4:	601a      	str	r2, [r3, #0]
 8002ea6:	e00b      	b.n	8002ec0 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eac:	2b12      	cmp	r3, #18
 8002eae:	d107      	bne.n	8002ec0 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	681a      	ldr	r2, [r3, #0]
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002ebe:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002ec0:	683b      	ldr	r3, [r7, #0]
 8002ec2:	9300      	str	r3, [sp, #0]
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	2200      	movs	r2, #0
 8002ec8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002ecc:	68f8      	ldr	r0, [r7, #12]
 8002ece:	f000 f91d 	bl	800310c <I2C_WaitOnFlagUntilTimeout>
 8002ed2:	4603      	mov	r3, r0
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d00d      	beq.n	8002ef4 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ee2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002ee6:	d103      	bne.n	8002ef0 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002eee:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002ef0:	2303      	movs	r3, #3
 8002ef2:	e035      	b.n	8002f60 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	691b      	ldr	r3, [r3, #16]
 8002ef8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002efc:	d108      	bne.n	8002f10 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002efe:	897b      	ldrh	r3, [r7, #10]
 8002f00:	b2db      	uxtb	r3, r3
 8002f02:	461a      	mov	r2, r3
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002f0c:	611a      	str	r2, [r3, #16]
 8002f0e:	e01b      	b.n	8002f48 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002f10:	897b      	ldrh	r3, [r7, #10]
 8002f12:	11db      	asrs	r3, r3, #7
 8002f14:	b2db      	uxtb	r3, r3
 8002f16:	f003 0306 	and.w	r3, r3, #6
 8002f1a:	b2db      	uxtb	r3, r3
 8002f1c:	f063 030f 	orn	r3, r3, #15
 8002f20:	b2da      	uxtb	r2, r3
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002f28:	683b      	ldr	r3, [r7, #0]
 8002f2a:	687a      	ldr	r2, [r7, #4]
 8002f2c:	490e      	ldr	r1, [pc, #56]	; (8002f68 <I2C_MasterRequestWrite+0xfc>)
 8002f2e:	68f8      	ldr	r0, [r7, #12]
 8002f30:	f000 f966 	bl	8003200 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002f34:	4603      	mov	r3, r0
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d001      	beq.n	8002f3e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002f3a:	2301      	movs	r3, #1
 8002f3c:	e010      	b.n	8002f60 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002f3e:	897b      	ldrh	r3, [r7, #10]
 8002f40:	b2da      	uxtb	r2, r3
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002f48:	683b      	ldr	r3, [r7, #0]
 8002f4a:	687a      	ldr	r2, [r7, #4]
 8002f4c:	4907      	ldr	r1, [pc, #28]	; (8002f6c <I2C_MasterRequestWrite+0x100>)
 8002f4e:	68f8      	ldr	r0, [r7, #12]
 8002f50:	f000 f956 	bl	8003200 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002f54:	4603      	mov	r3, r0
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d001      	beq.n	8002f5e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002f5a:	2301      	movs	r3, #1
 8002f5c:	e000      	b.n	8002f60 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002f5e:	2300      	movs	r3, #0
}
 8002f60:	4618      	mov	r0, r3
 8002f62:	3718      	adds	r7, #24
 8002f64:	46bd      	mov	sp, r7
 8002f66:	bd80      	pop	{r7, pc}
 8002f68:	00010008 	.word	0x00010008
 8002f6c:	00010002 	.word	0x00010002

08002f70 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002f70:	b580      	push	{r7, lr}
 8002f72:	b088      	sub	sp, #32
 8002f74:	af02      	add	r7, sp, #8
 8002f76:	60f8      	str	r0, [r7, #12]
 8002f78:	607a      	str	r2, [r7, #4]
 8002f7a:	603b      	str	r3, [r7, #0]
 8002f7c:	460b      	mov	r3, r1
 8002f7e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f84:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	681a      	ldr	r2, [r3, #0]
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002f94:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002f96:	697b      	ldr	r3, [r7, #20]
 8002f98:	2b08      	cmp	r3, #8
 8002f9a:	d006      	beq.n	8002faa <I2C_MasterRequestRead+0x3a>
 8002f9c:	697b      	ldr	r3, [r7, #20]
 8002f9e:	2b01      	cmp	r3, #1
 8002fa0:	d003      	beq.n	8002faa <I2C_MasterRequestRead+0x3a>
 8002fa2:	697b      	ldr	r3, [r7, #20]
 8002fa4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002fa8:	d108      	bne.n	8002fbc <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	681a      	ldr	r2, [r3, #0]
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002fb8:	601a      	str	r2, [r3, #0]
 8002fba:	e00b      	b.n	8002fd4 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fc0:	2b11      	cmp	r3, #17
 8002fc2:	d107      	bne.n	8002fd4 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	681a      	ldr	r2, [r3, #0]
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002fd2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002fd4:	683b      	ldr	r3, [r7, #0]
 8002fd6:	9300      	str	r3, [sp, #0]
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	2200      	movs	r2, #0
 8002fdc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002fe0:	68f8      	ldr	r0, [r7, #12]
 8002fe2:	f000 f893 	bl	800310c <I2C_WaitOnFlagUntilTimeout>
 8002fe6:	4603      	mov	r3, r0
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d00d      	beq.n	8003008 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ff6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002ffa:	d103      	bne.n	8003004 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003002:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003004:	2303      	movs	r3, #3
 8003006:	e079      	b.n	80030fc <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	691b      	ldr	r3, [r3, #16]
 800300c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003010:	d108      	bne.n	8003024 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003012:	897b      	ldrh	r3, [r7, #10]
 8003014:	b2db      	uxtb	r3, r3
 8003016:	f043 0301 	orr.w	r3, r3, #1
 800301a:	b2da      	uxtb	r2, r3
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	611a      	str	r2, [r3, #16]
 8003022:	e05f      	b.n	80030e4 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003024:	897b      	ldrh	r3, [r7, #10]
 8003026:	11db      	asrs	r3, r3, #7
 8003028:	b2db      	uxtb	r3, r3
 800302a:	f003 0306 	and.w	r3, r3, #6
 800302e:	b2db      	uxtb	r3, r3
 8003030:	f063 030f 	orn	r3, r3, #15
 8003034:	b2da      	uxtb	r2, r3
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800303c:	683b      	ldr	r3, [r7, #0]
 800303e:	687a      	ldr	r2, [r7, #4]
 8003040:	4930      	ldr	r1, [pc, #192]	; (8003104 <I2C_MasterRequestRead+0x194>)
 8003042:	68f8      	ldr	r0, [r7, #12]
 8003044:	f000 f8dc 	bl	8003200 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003048:	4603      	mov	r3, r0
 800304a:	2b00      	cmp	r3, #0
 800304c:	d001      	beq.n	8003052 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 800304e:	2301      	movs	r3, #1
 8003050:	e054      	b.n	80030fc <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003052:	897b      	ldrh	r3, [r7, #10]
 8003054:	b2da      	uxtb	r2, r3
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800305c:	683b      	ldr	r3, [r7, #0]
 800305e:	687a      	ldr	r2, [r7, #4]
 8003060:	4929      	ldr	r1, [pc, #164]	; (8003108 <I2C_MasterRequestRead+0x198>)
 8003062:	68f8      	ldr	r0, [r7, #12]
 8003064:	f000 f8cc 	bl	8003200 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003068:	4603      	mov	r3, r0
 800306a:	2b00      	cmp	r3, #0
 800306c:	d001      	beq.n	8003072 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 800306e:	2301      	movs	r3, #1
 8003070:	e044      	b.n	80030fc <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003072:	2300      	movs	r3, #0
 8003074:	613b      	str	r3, [r7, #16]
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	695b      	ldr	r3, [r3, #20]
 800307c:	613b      	str	r3, [r7, #16]
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	699b      	ldr	r3, [r3, #24]
 8003084:	613b      	str	r3, [r7, #16]
 8003086:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	681a      	ldr	r2, [r3, #0]
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003096:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003098:	683b      	ldr	r3, [r7, #0]
 800309a:	9300      	str	r3, [sp, #0]
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	2200      	movs	r2, #0
 80030a0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80030a4:	68f8      	ldr	r0, [r7, #12]
 80030a6:	f000 f831 	bl	800310c <I2C_WaitOnFlagUntilTimeout>
 80030aa:	4603      	mov	r3, r0
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d00d      	beq.n	80030cc <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80030be:	d103      	bne.n	80030c8 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80030c6:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 80030c8:	2303      	movs	r3, #3
 80030ca:	e017      	b.n	80030fc <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80030cc:	897b      	ldrh	r3, [r7, #10]
 80030ce:	11db      	asrs	r3, r3, #7
 80030d0:	b2db      	uxtb	r3, r3
 80030d2:	f003 0306 	and.w	r3, r3, #6
 80030d6:	b2db      	uxtb	r3, r3
 80030d8:	f063 030e 	orn	r3, r3, #14
 80030dc:	b2da      	uxtb	r2, r3
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80030e4:	683b      	ldr	r3, [r7, #0]
 80030e6:	687a      	ldr	r2, [r7, #4]
 80030e8:	4907      	ldr	r1, [pc, #28]	; (8003108 <I2C_MasterRequestRead+0x198>)
 80030ea:	68f8      	ldr	r0, [r7, #12]
 80030ec:	f000 f888 	bl	8003200 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80030f0:	4603      	mov	r3, r0
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d001      	beq.n	80030fa <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 80030f6:	2301      	movs	r3, #1
 80030f8:	e000      	b.n	80030fc <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 80030fa:	2300      	movs	r3, #0
}
 80030fc:	4618      	mov	r0, r3
 80030fe:	3718      	adds	r7, #24
 8003100:	46bd      	mov	sp, r7
 8003102:	bd80      	pop	{r7, pc}
 8003104:	00010008 	.word	0x00010008
 8003108:	00010002 	.word	0x00010002

0800310c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800310c:	b580      	push	{r7, lr}
 800310e:	b084      	sub	sp, #16
 8003110:	af00      	add	r7, sp, #0
 8003112:	60f8      	str	r0, [r7, #12]
 8003114:	60b9      	str	r1, [r7, #8]
 8003116:	603b      	str	r3, [r7, #0]
 8003118:	4613      	mov	r3, r2
 800311a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800311c:	e048      	b.n	80031b0 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800311e:	683b      	ldr	r3, [r7, #0]
 8003120:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003124:	d044      	beq.n	80031b0 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003126:	f7fe feaf 	bl	8001e88 <HAL_GetTick>
 800312a:	4602      	mov	r2, r0
 800312c:	69bb      	ldr	r3, [r7, #24]
 800312e:	1ad3      	subs	r3, r2, r3
 8003130:	683a      	ldr	r2, [r7, #0]
 8003132:	429a      	cmp	r2, r3
 8003134:	d302      	bcc.n	800313c <I2C_WaitOnFlagUntilTimeout+0x30>
 8003136:	683b      	ldr	r3, [r7, #0]
 8003138:	2b00      	cmp	r3, #0
 800313a:	d139      	bne.n	80031b0 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800313c:	68bb      	ldr	r3, [r7, #8]
 800313e:	0c1b      	lsrs	r3, r3, #16
 8003140:	b2db      	uxtb	r3, r3
 8003142:	2b01      	cmp	r3, #1
 8003144:	d10d      	bne.n	8003162 <I2C_WaitOnFlagUntilTimeout+0x56>
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	695b      	ldr	r3, [r3, #20]
 800314c:	43da      	mvns	r2, r3
 800314e:	68bb      	ldr	r3, [r7, #8]
 8003150:	4013      	ands	r3, r2
 8003152:	b29b      	uxth	r3, r3
 8003154:	2b00      	cmp	r3, #0
 8003156:	bf0c      	ite	eq
 8003158:	2301      	moveq	r3, #1
 800315a:	2300      	movne	r3, #0
 800315c:	b2db      	uxtb	r3, r3
 800315e:	461a      	mov	r2, r3
 8003160:	e00c      	b.n	800317c <I2C_WaitOnFlagUntilTimeout+0x70>
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	699b      	ldr	r3, [r3, #24]
 8003168:	43da      	mvns	r2, r3
 800316a:	68bb      	ldr	r3, [r7, #8]
 800316c:	4013      	ands	r3, r2
 800316e:	b29b      	uxth	r3, r3
 8003170:	2b00      	cmp	r3, #0
 8003172:	bf0c      	ite	eq
 8003174:	2301      	moveq	r3, #1
 8003176:	2300      	movne	r3, #0
 8003178:	b2db      	uxtb	r3, r3
 800317a:	461a      	mov	r2, r3
 800317c:	79fb      	ldrb	r3, [r7, #7]
 800317e:	429a      	cmp	r2, r3
 8003180:	d116      	bne.n	80031b0 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	2200      	movs	r2, #0
 8003186:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	2220      	movs	r2, #32
 800318c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	2200      	movs	r2, #0
 8003194:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800319c:	f043 0220 	orr.w	r2, r3, #32
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	2200      	movs	r2, #0
 80031a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80031ac:	2301      	movs	r3, #1
 80031ae:	e023      	b.n	80031f8 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80031b0:	68bb      	ldr	r3, [r7, #8]
 80031b2:	0c1b      	lsrs	r3, r3, #16
 80031b4:	b2db      	uxtb	r3, r3
 80031b6:	2b01      	cmp	r3, #1
 80031b8:	d10d      	bne.n	80031d6 <I2C_WaitOnFlagUntilTimeout+0xca>
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	695b      	ldr	r3, [r3, #20]
 80031c0:	43da      	mvns	r2, r3
 80031c2:	68bb      	ldr	r3, [r7, #8]
 80031c4:	4013      	ands	r3, r2
 80031c6:	b29b      	uxth	r3, r3
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	bf0c      	ite	eq
 80031cc:	2301      	moveq	r3, #1
 80031ce:	2300      	movne	r3, #0
 80031d0:	b2db      	uxtb	r3, r3
 80031d2:	461a      	mov	r2, r3
 80031d4:	e00c      	b.n	80031f0 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	699b      	ldr	r3, [r3, #24]
 80031dc:	43da      	mvns	r2, r3
 80031de:	68bb      	ldr	r3, [r7, #8]
 80031e0:	4013      	ands	r3, r2
 80031e2:	b29b      	uxth	r3, r3
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	bf0c      	ite	eq
 80031e8:	2301      	moveq	r3, #1
 80031ea:	2300      	movne	r3, #0
 80031ec:	b2db      	uxtb	r3, r3
 80031ee:	461a      	mov	r2, r3
 80031f0:	79fb      	ldrb	r3, [r7, #7]
 80031f2:	429a      	cmp	r2, r3
 80031f4:	d093      	beq.n	800311e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80031f6:	2300      	movs	r3, #0
}
 80031f8:	4618      	mov	r0, r3
 80031fa:	3710      	adds	r7, #16
 80031fc:	46bd      	mov	sp, r7
 80031fe:	bd80      	pop	{r7, pc}

08003200 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003200:	b580      	push	{r7, lr}
 8003202:	b084      	sub	sp, #16
 8003204:	af00      	add	r7, sp, #0
 8003206:	60f8      	str	r0, [r7, #12]
 8003208:	60b9      	str	r1, [r7, #8]
 800320a:	607a      	str	r2, [r7, #4]
 800320c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800320e:	e071      	b.n	80032f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	695b      	ldr	r3, [r3, #20]
 8003216:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800321a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800321e:	d123      	bne.n	8003268 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	681a      	ldr	r2, [r3, #0]
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800322e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003238:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	2200      	movs	r2, #0
 800323e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	2220      	movs	r2, #32
 8003244:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	2200      	movs	r2, #0
 800324c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003254:	f043 0204 	orr.w	r2, r3, #4
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	2200      	movs	r2, #0
 8003260:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003264:	2301      	movs	r3, #1
 8003266:	e067      	b.n	8003338 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800326e:	d041      	beq.n	80032f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003270:	f7fe fe0a 	bl	8001e88 <HAL_GetTick>
 8003274:	4602      	mov	r2, r0
 8003276:	683b      	ldr	r3, [r7, #0]
 8003278:	1ad3      	subs	r3, r2, r3
 800327a:	687a      	ldr	r2, [r7, #4]
 800327c:	429a      	cmp	r2, r3
 800327e:	d302      	bcc.n	8003286 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	2b00      	cmp	r3, #0
 8003284:	d136      	bne.n	80032f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8003286:	68bb      	ldr	r3, [r7, #8]
 8003288:	0c1b      	lsrs	r3, r3, #16
 800328a:	b2db      	uxtb	r3, r3
 800328c:	2b01      	cmp	r3, #1
 800328e:	d10c      	bne.n	80032aa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	695b      	ldr	r3, [r3, #20]
 8003296:	43da      	mvns	r2, r3
 8003298:	68bb      	ldr	r3, [r7, #8]
 800329a:	4013      	ands	r3, r2
 800329c:	b29b      	uxth	r3, r3
 800329e:	2b00      	cmp	r3, #0
 80032a0:	bf14      	ite	ne
 80032a2:	2301      	movne	r3, #1
 80032a4:	2300      	moveq	r3, #0
 80032a6:	b2db      	uxtb	r3, r3
 80032a8:	e00b      	b.n	80032c2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	699b      	ldr	r3, [r3, #24]
 80032b0:	43da      	mvns	r2, r3
 80032b2:	68bb      	ldr	r3, [r7, #8]
 80032b4:	4013      	ands	r3, r2
 80032b6:	b29b      	uxth	r3, r3
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	bf14      	ite	ne
 80032bc:	2301      	movne	r3, #1
 80032be:	2300      	moveq	r3, #0
 80032c0:	b2db      	uxtb	r3, r3
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d016      	beq.n	80032f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	2200      	movs	r2, #0
 80032ca:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	2220      	movs	r2, #32
 80032d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	2200      	movs	r2, #0
 80032d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032e0:	f043 0220 	orr.w	r2, r3, #32
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	2200      	movs	r2, #0
 80032ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80032f0:	2301      	movs	r3, #1
 80032f2:	e021      	b.n	8003338 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80032f4:	68bb      	ldr	r3, [r7, #8]
 80032f6:	0c1b      	lsrs	r3, r3, #16
 80032f8:	b2db      	uxtb	r3, r3
 80032fa:	2b01      	cmp	r3, #1
 80032fc:	d10c      	bne.n	8003318 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	695b      	ldr	r3, [r3, #20]
 8003304:	43da      	mvns	r2, r3
 8003306:	68bb      	ldr	r3, [r7, #8]
 8003308:	4013      	ands	r3, r2
 800330a:	b29b      	uxth	r3, r3
 800330c:	2b00      	cmp	r3, #0
 800330e:	bf14      	ite	ne
 8003310:	2301      	movne	r3, #1
 8003312:	2300      	moveq	r3, #0
 8003314:	b2db      	uxtb	r3, r3
 8003316:	e00b      	b.n	8003330 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	699b      	ldr	r3, [r3, #24]
 800331e:	43da      	mvns	r2, r3
 8003320:	68bb      	ldr	r3, [r7, #8]
 8003322:	4013      	ands	r3, r2
 8003324:	b29b      	uxth	r3, r3
 8003326:	2b00      	cmp	r3, #0
 8003328:	bf14      	ite	ne
 800332a:	2301      	movne	r3, #1
 800332c:	2300      	moveq	r3, #0
 800332e:	b2db      	uxtb	r3, r3
 8003330:	2b00      	cmp	r3, #0
 8003332:	f47f af6d 	bne.w	8003210 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8003336:	2300      	movs	r3, #0
}
 8003338:	4618      	mov	r0, r3
 800333a:	3710      	adds	r7, #16
 800333c:	46bd      	mov	sp, r7
 800333e:	bd80      	pop	{r7, pc}

08003340 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003340:	b580      	push	{r7, lr}
 8003342:	b084      	sub	sp, #16
 8003344:	af00      	add	r7, sp, #0
 8003346:	60f8      	str	r0, [r7, #12]
 8003348:	60b9      	str	r1, [r7, #8]
 800334a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800334c:	e034      	b.n	80033b8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800334e:	68f8      	ldr	r0, [r7, #12]
 8003350:	f000 f8e3 	bl	800351a <I2C_IsAcknowledgeFailed>
 8003354:	4603      	mov	r3, r0
 8003356:	2b00      	cmp	r3, #0
 8003358:	d001      	beq.n	800335e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800335a:	2301      	movs	r3, #1
 800335c:	e034      	b.n	80033c8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800335e:	68bb      	ldr	r3, [r7, #8]
 8003360:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003364:	d028      	beq.n	80033b8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003366:	f7fe fd8f 	bl	8001e88 <HAL_GetTick>
 800336a:	4602      	mov	r2, r0
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	1ad3      	subs	r3, r2, r3
 8003370:	68ba      	ldr	r2, [r7, #8]
 8003372:	429a      	cmp	r2, r3
 8003374:	d302      	bcc.n	800337c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003376:	68bb      	ldr	r3, [r7, #8]
 8003378:	2b00      	cmp	r3, #0
 800337a:	d11d      	bne.n	80033b8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	695b      	ldr	r3, [r3, #20]
 8003382:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003386:	2b80      	cmp	r3, #128	; 0x80
 8003388:	d016      	beq.n	80033b8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	2200      	movs	r2, #0
 800338e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	2220      	movs	r2, #32
 8003394:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	2200      	movs	r2, #0
 800339c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033a4:	f043 0220 	orr.w	r2, r3, #32
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	2200      	movs	r2, #0
 80033b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80033b4:	2301      	movs	r3, #1
 80033b6:	e007      	b.n	80033c8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	695b      	ldr	r3, [r3, #20]
 80033be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033c2:	2b80      	cmp	r3, #128	; 0x80
 80033c4:	d1c3      	bne.n	800334e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80033c6:	2300      	movs	r3, #0
}
 80033c8:	4618      	mov	r0, r3
 80033ca:	3710      	adds	r7, #16
 80033cc:	46bd      	mov	sp, r7
 80033ce:	bd80      	pop	{r7, pc}

080033d0 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80033d0:	b580      	push	{r7, lr}
 80033d2:	b084      	sub	sp, #16
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	60f8      	str	r0, [r7, #12]
 80033d8:	60b9      	str	r1, [r7, #8]
 80033da:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80033dc:	e034      	b.n	8003448 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80033de:	68f8      	ldr	r0, [r7, #12]
 80033e0:	f000 f89b 	bl	800351a <I2C_IsAcknowledgeFailed>
 80033e4:	4603      	mov	r3, r0
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d001      	beq.n	80033ee <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80033ea:	2301      	movs	r3, #1
 80033ec:	e034      	b.n	8003458 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80033ee:	68bb      	ldr	r3, [r7, #8]
 80033f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033f4:	d028      	beq.n	8003448 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80033f6:	f7fe fd47 	bl	8001e88 <HAL_GetTick>
 80033fa:	4602      	mov	r2, r0
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	1ad3      	subs	r3, r2, r3
 8003400:	68ba      	ldr	r2, [r7, #8]
 8003402:	429a      	cmp	r2, r3
 8003404:	d302      	bcc.n	800340c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003406:	68bb      	ldr	r3, [r7, #8]
 8003408:	2b00      	cmp	r3, #0
 800340a:	d11d      	bne.n	8003448 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	695b      	ldr	r3, [r3, #20]
 8003412:	f003 0304 	and.w	r3, r3, #4
 8003416:	2b04      	cmp	r3, #4
 8003418:	d016      	beq.n	8003448 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	2200      	movs	r2, #0
 800341e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	2220      	movs	r2, #32
 8003424:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	2200      	movs	r2, #0
 800342c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003434:	f043 0220 	orr.w	r2, r3, #32
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	2200      	movs	r2, #0
 8003440:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003444:	2301      	movs	r3, #1
 8003446:	e007      	b.n	8003458 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	695b      	ldr	r3, [r3, #20]
 800344e:	f003 0304 	and.w	r3, r3, #4
 8003452:	2b04      	cmp	r3, #4
 8003454:	d1c3      	bne.n	80033de <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003456:	2300      	movs	r3, #0
}
 8003458:	4618      	mov	r0, r3
 800345a:	3710      	adds	r7, #16
 800345c:	46bd      	mov	sp, r7
 800345e:	bd80      	pop	{r7, pc}

08003460 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003460:	b580      	push	{r7, lr}
 8003462:	b084      	sub	sp, #16
 8003464:	af00      	add	r7, sp, #0
 8003466:	60f8      	str	r0, [r7, #12]
 8003468:	60b9      	str	r1, [r7, #8]
 800346a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800346c:	e049      	b.n	8003502 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	695b      	ldr	r3, [r3, #20]
 8003474:	f003 0310 	and.w	r3, r3, #16
 8003478:	2b10      	cmp	r3, #16
 800347a:	d119      	bne.n	80034b0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	f06f 0210 	mvn.w	r2, #16
 8003484:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	2200      	movs	r2, #0
 800348a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	2220      	movs	r2, #32
 8003490:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	2200      	movs	r2, #0
 8003498:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	2200      	movs	r2, #0
 80034a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80034ac:	2301      	movs	r3, #1
 80034ae:	e030      	b.n	8003512 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80034b0:	f7fe fcea 	bl	8001e88 <HAL_GetTick>
 80034b4:	4602      	mov	r2, r0
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	1ad3      	subs	r3, r2, r3
 80034ba:	68ba      	ldr	r2, [r7, #8]
 80034bc:	429a      	cmp	r2, r3
 80034be:	d302      	bcc.n	80034c6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80034c0:	68bb      	ldr	r3, [r7, #8]
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d11d      	bne.n	8003502 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	695b      	ldr	r3, [r3, #20]
 80034cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034d0:	2b40      	cmp	r3, #64	; 0x40
 80034d2:	d016      	beq.n	8003502 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	2200      	movs	r2, #0
 80034d8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	2220      	movs	r2, #32
 80034de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	2200      	movs	r2, #0
 80034e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034ee:	f043 0220 	orr.w	r2, r3, #32
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	2200      	movs	r2, #0
 80034fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80034fe:	2301      	movs	r3, #1
 8003500:	e007      	b.n	8003512 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	695b      	ldr	r3, [r3, #20]
 8003508:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800350c:	2b40      	cmp	r3, #64	; 0x40
 800350e:	d1ae      	bne.n	800346e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003510:	2300      	movs	r3, #0
}
 8003512:	4618      	mov	r0, r3
 8003514:	3710      	adds	r7, #16
 8003516:	46bd      	mov	sp, r7
 8003518:	bd80      	pop	{r7, pc}

0800351a <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800351a:	b480      	push	{r7}
 800351c:	b083      	sub	sp, #12
 800351e:	af00      	add	r7, sp, #0
 8003520:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	695b      	ldr	r3, [r3, #20]
 8003528:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800352c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003530:	d11b      	bne.n	800356a <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800353a:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	2200      	movs	r2, #0
 8003540:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	2220      	movs	r2, #32
 8003546:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	2200      	movs	r2, #0
 800354e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003556:	f043 0204 	orr.w	r2, r3, #4
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	2200      	movs	r2, #0
 8003562:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003566:	2301      	movs	r3, #1
 8003568:	e000      	b.n	800356c <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800356a:	2300      	movs	r3, #0
}
 800356c:	4618      	mov	r0, r3
 800356e:	370c      	adds	r7, #12
 8003570:	46bd      	mov	sp, r7
 8003572:	bc80      	pop	{r7}
 8003574:	4770      	bx	lr
	...

08003578 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003578:	b580      	push	{r7, lr}
 800357a:	b086      	sub	sp, #24
 800357c:	af00      	add	r7, sp, #0
 800357e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	2b00      	cmp	r3, #0
 8003584:	d101      	bne.n	800358a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003586:	2301      	movs	r3, #1
 8003588:	e272      	b.n	8003a70 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	f003 0301 	and.w	r3, r3, #1
 8003592:	2b00      	cmp	r3, #0
 8003594:	f000 8087 	beq.w	80036a6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003598:	4b92      	ldr	r3, [pc, #584]	; (80037e4 <HAL_RCC_OscConfig+0x26c>)
 800359a:	685b      	ldr	r3, [r3, #4]
 800359c:	f003 030c 	and.w	r3, r3, #12
 80035a0:	2b04      	cmp	r3, #4
 80035a2:	d00c      	beq.n	80035be <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80035a4:	4b8f      	ldr	r3, [pc, #572]	; (80037e4 <HAL_RCC_OscConfig+0x26c>)
 80035a6:	685b      	ldr	r3, [r3, #4]
 80035a8:	f003 030c 	and.w	r3, r3, #12
 80035ac:	2b08      	cmp	r3, #8
 80035ae:	d112      	bne.n	80035d6 <HAL_RCC_OscConfig+0x5e>
 80035b0:	4b8c      	ldr	r3, [pc, #560]	; (80037e4 <HAL_RCC_OscConfig+0x26c>)
 80035b2:	685b      	ldr	r3, [r3, #4]
 80035b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80035b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80035bc:	d10b      	bne.n	80035d6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80035be:	4b89      	ldr	r3, [pc, #548]	; (80037e4 <HAL_RCC_OscConfig+0x26c>)
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d06c      	beq.n	80036a4 <HAL_RCC_OscConfig+0x12c>
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	685b      	ldr	r3, [r3, #4]
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d168      	bne.n	80036a4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80035d2:	2301      	movs	r3, #1
 80035d4:	e24c      	b.n	8003a70 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	685b      	ldr	r3, [r3, #4]
 80035da:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80035de:	d106      	bne.n	80035ee <HAL_RCC_OscConfig+0x76>
 80035e0:	4b80      	ldr	r3, [pc, #512]	; (80037e4 <HAL_RCC_OscConfig+0x26c>)
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	4a7f      	ldr	r2, [pc, #508]	; (80037e4 <HAL_RCC_OscConfig+0x26c>)
 80035e6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80035ea:	6013      	str	r3, [r2, #0]
 80035ec:	e02e      	b.n	800364c <HAL_RCC_OscConfig+0xd4>
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	685b      	ldr	r3, [r3, #4]
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d10c      	bne.n	8003610 <HAL_RCC_OscConfig+0x98>
 80035f6:	4b7b      	ldr	r3, [pc, #492]	; (80037e4 <HAL_RCC_OscConfig+0x26c>)
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	4a7a      	ldr	r2, [pc, #488]	; (80037e4 <HAL_RCC_OscConfig+0x26c>)
 80035fc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003600:	6013      	str	r3, [r2, #0]
 8003602:	4b78      	ldr	r3, [pc, #480]	; (80037e4 <HAL_RCC_OscConfig+0x26c>)
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	4a77      	ldr	r2, [pc, #476]	; (80037e4 <HAL_RCC_OscConfig+0x26c>)
 8003608:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800360c:	6013      	str	r3, [r2, #0]
 800360e:	e01d      	b.n	800364c <HAL_RCC_OscConfig+0xd4>
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	685b      	ldr	r3, [r3, #4]
 8003614:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003618:	d10c      	bne.n	8003634 <HAL_RCC_OscConfig+0xbc>
 800361a:	4b72      	ldr	r3, [pc, #456]	; (80037e4 <HAL_RCC_OscConfig+0x26c>)
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	4a71      	ldr	r2, [pc, #452]	; (80037e4 <HAL_RCC_OscConfig+0x26c>)
 8003620:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003624:	6013      	str	r3, [r2, #0]
 8003626:	4b6f      	ldr	r3, [pc, #444]	; (80037e4 <HAL_RCC_OscConfig+0x26c>)
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	4a6e      	ldr	r2, [pc, #440]	; (80037e4 <HAL_RCC_OscConfig+0x26c>)
 800362c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003630:	6013      	str	r3, [r2, #0]
 8003632:	e00b      	b.n	800364c <HAL_RCC_OscConfig+0xd4>
 8003634:	4b6b      	ldr	r3, [pc, #428]	; (80037e4 <HAL_RCC_OscConfig+0x26c>)
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	4a6a      	ldr	r2, [pc, #424]	; (80037e4 <HAL_RCC_OscConfig+0x26c>)
 800363a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800363e:	6013      	str	r3, [r2, #0]
 8003640:	4b68      	ldr	r3, [pc, #416]	; (80037e4 <HAL_RCC_OscConfig+0x26c>)
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	4a67      	ldr	r2, [pc, #412]	; (80037e4 <HAL_RCC_OscConfig+0x26c>)
 8003646:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800364a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	685b      	ldr	r3, [r3, #4]
 8003650:	2b00      	cmp	r3, #0
 8003652:	d013      	beq.n	800367c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003654:	f7fe fc18 	bl	8001e88 <HAL_GetTick>
 8003658:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800365a:	e008      	b.n	800366e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800365c:	f7fe fc14 	bl	8001e88 <HAL_GetTick>
 8003660:	4602      	mov	r2, r0
 8003662:	693b      	ldr	r3, [r7, #16]
 8003664:	1ad3      	subs	r3, r2, r3
 8003666:	2b64      	cmp	r3, #100	; 0x64
 8003668:	d901      	bls.n	800366e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800366a:	2303      	movs	r3, #3
 800366c:	e200      	b.n	8003a70 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800366e:	4b5d      	ldr	r3, [pc, #372]	; (80037e4 <HAL_RCC_OscConfig+0x26c>)
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003676:	2b00      	cmp	r3, #0
 8003678:	d0f0      	beq.n	800365c <HAL_RCC_OscConfig+0xe4>
 800367a:	e014      	b.n	80036a6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800367c:	f7fe fc04 	bl	8001e88 <HAL_GetTick>
 8003680:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003682:	e008      	b.n	8003696 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003684:	f7fe fc00 	bl	8001e88 <HAL_GetTick>
 8003688:	4602      	mov	r2, r0
 800368a:	693b      	ldr	r3, [r7, #16]
 800368c:	1ad3      	subs	r3, r2, r3
 800368e:	2b64      	cmp	r3, #100	; 0x64
 8003690:	d901      	bls.n	8003696 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003692:	2303      	movs	r3, #3
 8003694:	e1ec      	b.n	8003a70 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003696:	4b53      	ldr	r3, [pc, #332]	; (80037e4 <HAL_RCC_OscConfig+0x26c>)
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d1f0      	bne.n	8003684 <HAL_RCC_OscConfig+0x10c>
 80036a2:	e000      	b.n	80036a6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80036a4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	f003 0302 	and.w	r3, r3, #2
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d063      	beq.n	800377a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80036b2:	4b4c      	ldr	r3, [pc, #304]	; (80037e4 <HAL_RCC_OscConfig+0x26c>)
 80036b4:	685b      	ldr	r3, [r3, #4]
 80036b6:	f003 030c 	and.w	r3, r3, #12
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d00b      	beq.n	80036d6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80036be:	4b49      	ldr	r3, [pc, #292]	; (80037e4 <HAL_RCC_OscConfig+0x26c>)
 80036c0:	685b      	ldr	r3, [r3, #4]
 80036c2:	f003 030c 	and.w	r3, r3, #12
 80036c6:	2b08      	cmp	r3, #8
 80036c8:	d11c      	bne.n	8003704 <HAL_RCC_OscConfig+0x18c>
 80036ca:	4b46      	ldr	r3, [pc, #280]	; (80037e4 <HAL_RCC_OscConfig+0x26c>)
 80036cc:	685b      	ldr	r3, [r3, #4]
 80036ce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d116      	bne.n	8003704 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80036d6:	4b43      	ldr	r3, [pc, #268]	; (80037e4 <HAL_RCC_OscConfig+0x26c>)
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f003 0302 	and.w	r3, r3, #2
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d005      	beq.n	80036ee <HAL_RCC_OscConfig+0x176>
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	691b      	ldr	r3, [r3, #16]
 80036e6:	2b01      	cmp	r3, #1
 80036e8:	d001      	beq.n	80036ee <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80036ea:	2301      	movs	r3, #1
 80036ec:	e1c0      	b.n	8003a70 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80036ee:	4b3d      	ldr	r3, [pc, #244]	; (80037e4 <HAL_RCC_OscConfig+0x26c>)
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	695b      	ldr	r3, [r3, #20]
 80036fa:	00db      	lsls	r3, r3, #3
 80036fc:	4939      	ldr	r1, [pc, #228]	; (80037e4 <HAL_RCC_OscConfig+0x26c>)
 80036fe:	4313      	orrs	r3, r2
 8003700:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003702:	e03a      	b.n	800377a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	691b      	ldr	r3, [r3, #16]
 8003708:	2b00      	cmp	r3, #0
 800370a:	d020      	beq.n	800374e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800370c:	4b36      	ldr	r3, [pc, #216]	; (80037e8 <HAL_RCC_OscConfig+0x270>)
 800370e:	2201      	movs	r2, #1
 8003710:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003712:	f7fe fbb9 	bl	8001e88 <HAL_GetTick>
 8003716:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003718:	e008      	b.n	800372c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800371a:	f7fe fbb5 	bl	8001e88 <HAL_GetTick>
 800371e:	4602      	mov	r2, r0
 8003720:	693b      	ldr	r3, [r7, #16]
 8003722:	1ad3      	subs	r3, r2, r3
 8003724:	2b02      	cmp	r3, #2
 8003726:	d901      	bls.n	800372c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003728:	2303      	movs	r3, #3
 800372a:	e1a1      	b.n	8003a70 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800372c:	4b2d      	ldr	r3, [pc, #180]	; (80037e4 <HAL_RCC_OscConfig+0x26c>)
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f003 0302 	and.w	r3, r3, #2
 8003734:	2b00      	cmp	r3, #0
 8003736:	d0f0      	beq.n	800371a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003738:	4b2a      	ldr	r3, [pc, #168]	; (80037e4 <HAL_RCC_OscConfig+0x26c>)
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	695b      	ldr	r3, [r3, #20]
 8003744:	00db      	lsls	r3, r3, #3
 8003746:	4927      	ldr	r1, [pc, #156]	; (80037e4 <HAL_RCC_OscConfig+0x26c>)
 8003748:	4313      	orrs	r3, r2
 800374a:	600b      	str	r3, [r1, #0]
 800374c:	e015      	b.n	800377a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800374e:	4b26      	ldr	r3, [pc, #152]	; (80037e8 <HAL_RCC_OscConfig+0x270>)
 8003750:	2200      	movs	r2, #0
 8003752:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003754:	f7fe fb98 	bl	8001e88 <HAL_GetTick>
 8003758:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800375a:	e008      	b.n	800376e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800375c:	f7fe fb94 	bl	8001e88 <HAL_GetTick>
 8003760:	4602      	mov	r2, r0
 8003762:	693b      	ldr	r3, [r7, #16]
 8003764:	1ad3      	subs	r3, r2, r3
 8003766:	2b02      	cmp	r3, #2
 8003768:	d901      	bls.n	800376e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800376a:	2303      	movs	r3, #3
 800376c:	e180      	b.n	8003a70 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800376e:	4b1d      	ldr	r3, [pc, #116]	; (80037e4 <HAL_RCC_OscConfig+0x26c>)
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f003 0302 	and.w	r3, r3, #2
 8003776:	2b00      	cmp	r3, #0
 8003778:	d1f0      	bne.n	800375c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f003 0308 	and.w	r3, r3, #8
 8003782:	2b00      	cmp	r3, #0
 8003784:	d03a      	beq.n	80037fc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	699b      	ldr	r3, [r3, #24]
 800378a:	2b00      	cmp	r3, #0
 800378c:	d019      	beq.n	80037c2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800378e:	4b17      	ldr	r3, [pc, #92]	; (80037ec <HAL_RCC_OscConfig+0x274>)
 8003790:	2201      	movs	r2, #1
 8003792:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003794:	f7fe fb78 	bl	8001e88 <HAL_GetTick>
 8003798:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800379a:	e008      	b.n	80037ae <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800379c:	f7fe fb74 	bl	8001e88 <HAL_GetTick>
 80037a0:	4602      	mov	r2, r0
 80037a2:	693b      	ldr	r3, [r7, #16]
 80037a4:	1ad3      	subs	r3, r2, r3
 80037a6:	2b02      	cmp	r3, #2
 80037a8:	d901      	bls.n	80037ae <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80037aa:	2303      	movs	r3, #3
 80037ac:	e160      	b.n	8003a70 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80037ae:	4b0d      	ldr	r3, [pc, #52]	; (80037e4 <HAL_RCC_OscConfig+0x26c>)
 80037b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037b2:	f003 0302 	and.w	r3, r3, #2
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d0f0      	beq.n	800379c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80037ba:	2001      	movs	r0, #1
 80037bc:	f000 fafe 	bl	8003dbc <RCC_Delay>
 80037c0:	e01c      	b.n	80037fc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80037c2:	4b0a      	ldr	r3, [pc, #40]	; (80037ec <HAL_RCC_OscConfig+0x274>)
 80037c4:	2200      	movs	r2, #0
 80037c6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80037c8:	f7fe fb5e 	bl	8001e88 <HAL_GetTick>
 80037cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80037ce:	e00f      	b.n	80037f0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80037d0:	f7fe fb5a 	bl	8001e88 <HAL_GetTick>
 80037d4:	4602      	mov	r2, r0
 80037d6:	693b      	ldr	r3, [r7, #16]
 80037d8:	1ad3      	subs	r3, r2, r3
 80037da:	2b02      	cmp	r3, #2
 80037dc:	d908      	bls.n	80037f0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80037de:	2303      	movs	r3, #3
 80037e0:	e146      	b.n	8003a70 <HAL_RCC_OscConfig+0x4f8>
 80037e2:	bf00      	nop
 80037e4:	40021000 	.word	0x40021000
 80037e8:	42420000 	.word	0x42420000
 80037ec:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80037f0:	4b92      	ldr	r3, [pc, #584]	; (8003a3c <HAL_RCC_OscConfig+0x4c4>)
 80037f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037f4:	f003 0302 	and.w	r3, r3, #2
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d1e9      	bne.n	80037d0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	f003 0304 	and.w	r3, r3, #4
 8003804:	2b00      	cmp	r3, #0
 8003806:	f000 80a6 	beq.w	8003956 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800380a:	2300      	movs	r3, #0
 800380c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800380e:	4b8b      	ldr	r3, [pc, #556]	; (8003a3c <HAL_RCC_OscConfig+0x4c4>)
 8003810:	69db      	ldr	r3, [r3, #28]
 8003812:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003816:	2b00      	cmp	r3, #0
 8003818:	d10d      	bne.n	8003836 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800381a:	4b88      	ldr	r3, [pc, #544]	; (8003a3c <HAL_RCC_OscConfig+0x4c4>)
 800381c:	69db      	ldr	r3, [r3, #28]
 800381e:	4a87      	ldr	r2, [pc, #540]	; (8003a3c <HAL_RCC_OscConfig+0x4c4>)
 8003820:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003824:	61d3      	str	r3, [r2, #28]
 8003826:	4b85      	ldr	r3, [pc, #532]	; (8003a3c <HAL_RCC_OscConfig+0x4c4>)
 8003828:	69db      	ldr	r3, [r3, #28]
 800382a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800382e:	60bb      	str	r3, [r7, #8]
 8003830:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003832:	2301      	movs	r3, #1
 8003834:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003836:	4b82      	ldr	r3, [pc, #520]	; (8003a40 <HAL_RCC_OscConfig+0x4c8>)
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800383e:	2b00      	cmp	r3, #0
 8003840:	d118      	bne.n	8003874 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003842:	4b7f      	ldr	r3, [pc, #508]	; (8003a40 <HAL_RCC_OscConfig+0x4c8>)
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	4a7e      	ldr	r2, [pc, #504]	; (8003a40 <HAL_RCC_OscConfig+0x4c8>)
 8003848:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800384c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800384e:	f7fe fb1b 	bl	8001e88 <HAL_GetTick>
 8003852:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003854:	e008      	b.n	8003868 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003856:	f7fe fb17 	bl	8001e88 <HAL_GetTick>
 800385a:	4602      	mov	r2, r0
 800385c:	693b      	ldr	r3, [r7, #16]
 800385e:	1ad3      	subs	r3, r2, r3
 8003860:	2b64      	cmp	r3, #100	; 0x64
 8003862:	d901      	bls.n	8003868 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003864:	2303      	movs	r3, #3
 8003866:	e103      	b.n	8003a70 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003868:	4b75      	ldr	r3, [pc, #468]	; (8003a40 <HAL_RCC_OscConfig+0x4c8>)
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003870:	2b00      	cmp	r3, #0
 8003872:	d0f0      	beq.n	8003856 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	68db      	ldr	r3, [r3, #12]
 8003878:	2b01      	cmp	r3, #1
 800387a:	d106      	bne.n	800388a <HAL_RCC_OscConfig+0x312>
 800387c:	4b6f      	ldr	r3, [pc, #444]	; (8003a3c <HAL_RCC_OscConfig+0x4c4>)
 800387e:	6a1b      	ldr	r3, [r3, #32]
 8003880:	4a6e      	ldr	r2, [pc, #440]	; (8003a3c <HAL_RCC_OscConfig+0x4c4>)
 8003882:	f043 0301 	orr.w	r3, r3, #1
 8003886:	6213      	str	r3, [r2, #32]
 8003888:	e02d      	b.n	80038e6 <HAL_RCC_OscConfig+0x36e>
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	68db      	ldr	r3, [r3, #12]
 800388e:	2b00      	cmp	r3, #0
 8003890:	d10c      	bne.n	80038ac <HAL_RCC_OscConfig+0x334>
 8003892:	4b6a      	ldr	r3, [pc, #424]	; (8003a3c <HAL_RCC_OscConfig+0x4c4>)
 8003894:	6a1b      	ldr	r3, [r3, #32]
 8003896:	4a69      	ldr	r2, [pc, #420]	; (8003a3c <HAL_RCC_OscConfig+0x4c4>)
 8003898:	f023 0301 	bic.w	r3, r3, #1
 800389c:	6213      	str	r3, [r2, #32]
 800389e:	4b67      	ldr	r3, [pc, #412]	; (8003a3c <HAL_RCC_OscConfig+0x4c4>)
 80038a0:	6a1b      	ldr	r3, [r3, #32]
 80038a2:	4a66      	ldr	r2, [pc, #408]	; (8003a3c <HAL_RCC_OscConfig+0x4c4>)
 80038a4:	f023 0304 	bic.w	r3, r3, #4
 80038a8:	6213      	str	r3, [r2, #32]
 80038aa:	e01c      	b.n	80038e6 <HAL_RCC_OscConfig+0x36e>
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	68db      	ldr	r3, [r3, #12]
 80038b0:	2b05      	cmp	r3, #5
 80038b2:	d10c      	bne.n	80038ce <HAL_RCC_OscConfig+0x356>
 80038b4:	4b61      	ldr	r3, [pc, #388]	; (8003a3c <HAL_RCC_OscConfig+0x4c4>)
 80038b6:	6a1b      	ldr	r3, [r3, #32]
 80038b8:	4a60      	ldr	r2, [pc, #384]	; (8003a3c <HAL_RCC_OscConfig+0x4c4>)
 80038ba:	f043 0304 	orr.w	r3, r3, #4
 80038be:	6213      	str	r3, [r2, #32]
 80038c0:	4b5e      	ldr	r3, [pc, #376]	; (8003a3c <HAL_RCC_OscConfig+0x4c4>)
 80038c2:	6a1b      	ldr	r3, [r3, #32]
 80038c4:	4a5d      	ldr	r2, [pc, #372]	; (8003a3c <HAL_RCC_OscConfig+0x4c4>)
 80038c6:	f043 0301 	orr.w	r3, r3, #1
 80038ca:	6213      	str	r3, [r2, #32]
 80038cc:	e00b      	b.n	80038e6 <HAL_RCC_OscConfig+0x36e>
 80038ce:	4b5b      	ldr	r3, [pc, #364]	; (8003a3c <HAL_RCC_OscConfig+0x4c4>)
 80038d0:	6a1b      	ldr	r3, [r3, #32]
 80038d2:	4a5a      	ldr	r2, [pc, #360]	; (8003a3c <HAL_RCC_OscConfig+0x4c4>)
 80038d4:	f023 0301 	bic.w	r3, r3, #1
 80038d8:	6213      	str	r3, [r2, #32]
 80038da:	4b58      	ldr	r3, [pc, #352]	; (8003a3c <HAL_RCC_OscConfig+0x4c4>)
 80038dc:	6a1b      	ldr	r3, [r3, #32]
 80038de:	4a57      	ldr	r2, [pc, #348]	; (8003a3c <HAL_RCC_OscConfig+0x4c4>)
 80038e0:	f023 0304 	bic.w	r3, r3, #4
 80038e4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	68db      	ldr	r3, [r3, #12]
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d015      	beq.n	800391a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80038ee:	f7fe facb 	bl	8001e88 <HAL_GetTick>
 80038f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80038f4:	e00a      	b.n	800390c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80038f6:	f7fe fac7 	bl	8001e88 <HAL_GetTick>
 80038fa:	4602      	mov	r2, r0
 80038fc:	693b      	ldr	r3, [r7, #16]
 80038fe:	1ad3      	subs	r3, r2, r3
 8003900:	f241 3288 	movw	r2, #5000	; 0x1388
 8003904:	4293      	cmp	r3, r2
 8003906:	d901      	bls.n	800390c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003908:	2303      	movs	r3, #3
 800390a:	e0b1      	b.n	8003a70 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800390c:	4b4b      	ldr	r3, [pc, #300]	; (8003a3c <HAL_RCC_OscConfig+0x4c4>)
 800390e:	6a1b      	ldr	r3, [r3, #32]
 8003910:	f003 0302 	and.w	r3, r3, #2
 8003914:	2b00      	cmp	r3, #0
 8003916:	d0ee      	beq.n	80038f6 <HAL_RCC_OscConfig+0x37e>
 8003918:	e014      	b.n	8003944 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800391a:	f7fe fab5 	bl	8001e88 <HAL_GetTick>
 800391e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003920:	e00a      	b.n	8003938 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003922:	f7fe fab1 	bl	8001e88 <HAL_GetTick>
 8003926:	4602      	mov	r2, r0
 8003928:	693b      	ldr	r3, [r7, #16]
 800392a:	1ad3      	subs	r3, r2, r3
 800392c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003930:	4293      	cmp	r3, r2
 8003932:	d901      	bls.n	8003938 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003934:	2303      	movs	r3, #3
 8003936:	e09b      	b.n	8003a70 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003938:	4b40      	ldr	r3, [pc, #256]	; (8003a3c <HAL_RCC_OscConfig+0x4c4>)
 800393a:	6a1b      	ldr	r3, [r3, #32]
 800393c:	f003 0302 	and.w	r3, r3, #2
 8003940:	2b00      	cmp	r3, #0
 8003942:	d1ee      	bne.n	8003922 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003944:	7dfb      	ldrb	r3, [r7, #23]
 8003946:	2b01      	cmp	r3, #1
 8003948:	d105      	bne.n	8003956 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800394a:	4b3c      	ldr	r3, [pc, #240]	; (8003a3c <HAL_RCC_OscConfig+0x4c4>)
 800394c:	69db      	ldr	r3, [r3, #28]
 800394e:	4a3b      	ldr	r2, [pc, #236]	; (8003a3c <HAL_RCC_OscConfig+0x4c4>)
 8003950:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003954:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	69db      	ldr	r3, [r3, #28]
 800395a:	2b00      	cmp	r3, #0
 800395c:	f000 8087 	beq.w	8003a6e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003960:	4b36      	ldr	r3, [pc, #216]	; (8003a3c <HAL_RCC_OscConfig+0x4c4>)
 8003962:	685b      	ldr	r3, [r3, #4]
 8003964:	f003 030c 	and.w	r3, r3, #12
 8003968:	2b08      	cmp	r3, #8
 800396a:	d061      	beq.n	8003a30 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	69db      	ldr	r3, [r3, #28]
 8003970:	2b02      	cmp	r3, #2
 8003972:	d146      	bne.n	8003a02 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003974:	4b33      	ldr	r3, [pc, #204]	; (8003a44 <HAL_RCC_OscConfig+0x4cc>)
 8003976:	2200      	movs	r2, #0
 8003978:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800397a:	f7fe fa85 	bl	8001e88 <HAL_GetTick>
 800397e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003980:	e008      	b.n	8003994 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003982:	f7fe fa81 	bl	8001e88 <HAL_GetTick>
 8003986:	4602      	mov	r2, r0
 8003988:	693b      	ldr	r3, [r7, #16]
 800398a:	1ad3      	subs	r3, r2, r3
 800398c:	2b02      	cmp	r3, #2
 800398e:	d901      	bls.n	8003994 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003990:	2303      	movs	r3, #3
 8003992:	e06d      	b.n	8003a70 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003994:	4b29      	ldr	r3, [pc, #164]	; (8003a3c <HAL_RCC_OscConfig+0x4c4>)
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800399c:	2b00      	cmp	r3, #0
 800399e:	d1f0      	bne.n	8003982 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	6a1b      	ldr	r3, [r3, #32]
 80039a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80039a8:	d108      	bne.n	80039bc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80039aa:	4b24      	ldr	r3, [pc, #144]	; (8003a3c <HAL_RCC_OscConfig+0x4c4>)
 80039ac:	685b      	ldr	r3, [r3, #4]
 80039ae:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	689b      	ldr	r3, [r3, #8]
 80039b6:	4921      	ldr	r1, [pc, #132]	; (8003a3c <HAL_RCC_OscConfig+0x4c4>)
 80039b8:	4313      	orrs	r3, r2
 80039ba:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80039bc:	4b1f      	ldr	r3, [pc, #124]	; (8003a3c <HAL_RCC_OscConfig+0x4c4>)
 80039be:	685b      	ldr	r3, [r3, #4]
 80039c0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	6a19      	ldr	r1, [r3, #32]
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039cc:	430b      	orrs	r3, r1
 80039ce:	491b      	ldr	r1, [pc, #108]	; (8003a3c <HAL_RCC_OscConfig+0x4c4>)
 80039d0:	4313      	orrs	r3, r2
 80039d2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80039d4:	4b1b      	ldr	r3, [pc, #108]	; (8003a44 <HAL_RCC_OscConfig+0x4cc>)
 80039d6:	2201      	movs	r2, #1
 80039d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039da:	f7fe fa55 	bl	8001e88 <HAL_GetTick>
 80039de:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80039e0:	e008      	b.n	80039f4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80039e2:	f7fe fa51 	bl	8001e88 <HAL_GetTick>
 80039e6:	4602      	mov	r2, r0
 80039e8:	693b      	ldr	r3, [r7, #16]
 80039ea:	1ad3      	subs	r3, r2, r3
 80039ec:	2b02      	cmp	r3, #2
 80039ee:	d901      	bls.n	80039f4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80039f0:	2303      	movs	r3, #3
 80039f2:	e03d      	b.n	8003a70 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80039f4:	4b11      	ldr	r3, [pc, #68]	; (8003a3c <HAL_RCC_OscConfig+0x4c4>)
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d0f0      	beq.n	80039e2 <HAL_RCC_OscConfig+0x46a>
 8003a00:	e035      	b.n	8003a6e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a02:	4b10      	ldr	r3, [pc, #64]	; (8003a44 <HAL_RCC_OscConfig+0x4cc>)
 8003a04:	2200      	movs	r2, #0
 8003a06:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a08:	f7fe fa3e 	bl	8001e88 <HAL_GetTick>
 8003a0c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003a0e:	e008      	b.n	8003a22 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a10:	f7fe fa3a 	bl	8001e88 <HAL_GetTick>
 8003a14:	4602      	mov	r2, r0
 8003a16:	693b      	ldr	r3, [r7, #16]
 8003a18:	1ad3      	subs	r3, r2, r3
 8003a1a:	2b02      	cmp	r3, #2
 8003a1c:	d901      	bls.n	8003a22 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003a1e:	2303      	movs	r3, #3
 8003a20:	e026      	b.n	8003a70 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003a22:	4b06      	ldr	r3, [pc, #24]	; (8003a3c <HAL_RCC_OscConfig+0x4c4>)
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d1f0      	bne.n	8003a10 <HAL_RCC_OscConfig+0x498>
 8003a2e:	e01e      	b.n	8003a6e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	69db      	ldr	r3, [r3, #28]
 8003a34:	2b01      	cmp	r3, #1
 8003a36:	d107      	bne.n	8003a48 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003a38:	2301      	movs	r3, #1
 8003a3a:	e019      	b.n	8003a70 <HAL_RCC_OscConfig+0x4f8>
 8003a3c:	40021000 	.word	0x40021000
 8003a40:	40007000 	.word	0x40007000
 8003a44:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003a48:	4b0b      	ldr	r3, [pc, #44]	; (8003a78 <HAL_RCC_OscConfig+0x500>)
 8003a4a:	685b      	ldr	r3, [r3, #4]
 8003a4c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	6a1b      	ldr	r3, [r3, #32]
 8003a58:	429a      	cmp	r2, r3
 8003a5a:	d106      	bne.n	8003a6a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a66:	429a      	cmp	r2, r3
 8003a68:	d001      	beq.n	8003a6e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003a6a:	2301      	movs	r3, #1
 8003a6c:	e000      	b.n	8003a70 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003a6e:	2300      	movs	r3, #0
}
 8003a70:	4618      	mov	r0, r3
 8003a72:	3718      	adds	r7, #24
 8003a74:	46bd      	mov	sp, r7
 8003a76:	bd80      	pop	{r7, pc}
 8003a78:	40021000 	.word	0x40021000

08003a7c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003a7c:	b580      	push	{r7, lr}
 8003a7e:	b084      	sub	sp, #16
 8003a80:	af00      	add	r7, sp, #0
 8003a82:	6078      	str	r0, [r7, #4]
 8003a84:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d101      	bne.n	8003a90 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003a8c:	2301      	movs	r3, #1
 8003a8e:	e0d0      	b.n	8003c32 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003a90:	4b6a      	ldr	r3, [pc, #424]	; (8003c3c <HAL_RCC_ClockConfig+0x1c0>)
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	f003 0307 	and.w	r3, r3, #7
 8003a98:	683a      	ldr	r2, [r7, #0]
 8003a9a:	429a      	cmp	r2, r3
 8003a9c:	d910      	bls.n	8003ac0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a9e:	4b67      	ldr	r3, [pc, #412]	; (8003c3c <HAL_RCC_ClockConfig+0x1c0>)
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f023 0207 	bic.w	r2, r3, #7
 8003aa6:	4965      	ldr	r1, [pc, #404]	; (8003c3c <HAL_RCC_ClockConfig+0x1c0>)
 8003aa8:	683b      	ldr	r3, [r7, #0]
 8003aaa:	4313      	orrs	r3, r2
 8003aac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003aae:	4b63      	ldr	r3, [pc, #396]	; (8003c3c <HAL_RCC_ClockConfig+0x1c0>)
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	f003 0307 	and.w	r3, r3, #7
 8003ab6:	683a      	ldr	r2, [r7, #0]
 8003ab8:	429a      	cmp	r2, r3
 8003aba:	d001      	beq.n	8003ac0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003abc:	2301      	movs	r3, #1
 8003abe:	e0b8      	b.n	8003c32 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	f003 0302 	and.w	r3, r3, #2
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d020      	beq.n	8003b0e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f003 0304 	and.w	r3, r3, #4
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d005      	beq.n	8003ae4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003ad8:	4b59      	ldr	r3, [pc, #356]	; (8003c40 <HAL_RCC_ClockConfig+0x1c4>)
 8003ada:	685b      	ldr	r3, [r3, #4]
 8003adc:	4a58      	ldr	r2, [pc, #352]	; (8003c40 <HAL_RCC_ClockConfig+0x1c4>)
 8003ade:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003ae2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	f003 0308 	and.w	r3, r3, #8
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d005      	beq.n	8003afc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003af0:	4b53      	ldr	r3, [pc, #332]	; (8003c40 <HAL_RCC_ClockConfig+0x1c4>)
 8003af2:	685b      	ldr	r3, [r3, #4]
 8003af4:	4a52      	ldr	r2, [pc, #328]	; (8003c40 <HAL_RCC_ClockConfig+0x1c4>)
 8003af6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003afa:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003afc:	4b50      	ldr	r3, [pc, #320]	; (8003c40 <HAL_RCC_ClockConfig+0x1c4>)
 8003afe:	685b      	ldr	r3, [r3, #4]
 8003b00:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	689b      	ldr	r3, [r3, #8]
 8003b08:	494d      	ldr	r1, [pc, #308]	; (8003c40 <HAL_RCC_ClockConfig+0x1c4>)
 8003b0a:	4313      	orrs	r3, r2
 8003b0c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	f003 0301 	and.w	r3, r3, #1
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d040      	beq.n	8003b9c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	685b      	ldr	r3, [r3, #4]
 8003b1e:	2b01      	cmp	r3, #1
 8003b20:	d107      	bne.n	8003b32 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b22:	4b47      	ldr	r3, [pc, #284]	; (8003c40 <HAL_RCC_ClockConfig+0x1c4>)
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d115      	bne.n	8003b5a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b2e:	2301      	movs	r3, #1
 8003b30:	e07f      	b.n	8003c32 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	685b      	ldr	r3, [r3, #4]
 8003b36:	2b02      	cmp	r3, #2
 8003b38:	d107      	bne.n	8003b4a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b3a:	4b41      	ldr	r3, [pc, #260]	; (8003c40 <HAL_RCC_ClockConfig+0x1c4>)
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d109      	bne.n	8003b5a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b46:	2301      	movs	r3, #1
 8003b48:	e073      	b.n	8003c32 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b4a:	4b3d      	ldr	r3, [pc, #244]	; (8003c40 <HAL_RCC_ClockConfig+0x1c4>)
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	f003 0302 	and.w	r3, r3, #2
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d101      	bne.n	8003b5a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b56:	2301      	movs	r3, #1
 8003b58:	e06b      	b.n	8003c32 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003b5a:	4b39      	ldr	r3, [pc, #228]	; (8003c40 <HAL_RCC_ClockConfig+0x1c4>)
 8003b5c:	685b      	ldr	r3, [r3, #4]
 8003b5e:	f023 0203 	bic.w	r2, r3, #3
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	685b      	ldr	r3, [r3, #4]
 8003b66:	4936      	ldr	r1, [pc, #216]	; (8003c40 <HAL_RCC_ClockConfig+0x1c4>)
 8003b68:	4313      	orrs	r3, r2
 8003b6a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003b6c:	f7fe f98c 	bl	8001e88 <HAL_GetTick>
 8003b70:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b72:	e00a      	b.n	8003b8a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b74:	f7fe f988 	bl	8001e88 <HAL_GetTick>
 8003b78:	4602      	mov	r2, r0
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	1ad3      	subs	r3, r2, r3
 8003b7e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b82:	4293      	cmp	r3, r2
 8003b84:	d901      	bls.n	8003b8a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003b86:	2303      	movs	r3, #3
 8003b88:	e053      	b.n	8003c32 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b8a:	4b2d      	ldr	r3, [pc, #180]	; (8003c40 <HAL_RCC_ClockConfig+0x1c4>)
 8003b8c:	685b      	ldr	r3, [r3, #4]
 8003b8e:	f003 020c 	and.w	r2, r3, #12
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	685b      	ldr	r3, [r3, #4]
 8003b96:	009b      	lsls	r3, r3, #2
 8003b98:	429a      	cmp	r2, r3
 8003b9a:	d1eb      	bne.n	8003b74 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003b9c:	4b27      	ldr	r3, [pc, #156]	; (8003c3c <HAL_RCC_ClockConfig+0x1c0>)
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	f003 0307 	and.w	r3, r3, #7
 8003ba4:	683a      	ldr	r2, [r7, #0]
 8003ba6:	429a      	cmp	r2, r3
 8003ba8:	d210      	bcs.n	8003bcc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003baa:	4b24      	ldr	r3, [pc, #144]	; (8003c3c <HAL_RCC_ClockConfig+0x1c0>)
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	f023 0207 	bic.w	r2, r3, #7
 8003bb2:	4922      	ldr	r1, [pc, #136]	; (8003c3c <HAL_RCC_ClockConfig+0x1c0>)
 8003bb4:	683b      	ldr	r3, [r7, #0]
 8003bb6:	4313      	orrs	r3, r2
 8003bb8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003bba:	4b20      	ldr	r3, [pc, #128]	; (8003c3c <HAL_RCC_ClockConfig+0x1c0>)
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	f003 0307 	and.w	r3, r3, #7
 8003bc2:	683a      	ldr	r2, [r7, #0]
 8003bc4:	429a      	cmp	r2, r3
 8003bc6:	d001      	beq.n	8003bcc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003bc8:	2301      	movs	r3, #1
 8003bca:	e032      	b.n	8003c32 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	f003 0304 	and.w	r3, r3, #4
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d008      	beq.n	8003bea <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003bd8:	4b19      	ldr	r3, [pc, #100]	; (8003c40 <HAL_RCC_ClockConfig+0x1c4>)
 8003bda:	685b      	ldr	r3, [r3, #4]
 8003bdc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	68db      	ldr	r3, [r3, #12]
 8003be4:	4916      	ldr	r1, [pc, #88]	; (8003c40 <HAL_RCC_ClockConfig+0x1c4>)
 8003be6:	4313      	orrs	r3, r2
 8003be8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	f003 0308 	and.w	r3, r3, #8
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d009      	beq.n	8003c0a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003bf6:	4b12      	ldr	r3, [pc, #72]	; (8003c40 <HAL_RCC_ClockConfig+0x1c4>)
 8003bf8:	685b      	ldr	r3, [r3, #4]
 8003bfa:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	691b      	ldr	r3, [r3, #16]
 8003c02:	00db      	lsls	r3, r3, #3
 8003c04:	490e      	ldr	r1, [pc, #56]	; (8003c40 <HAL_RCC_ClockConfig+0x1c4>)
 8003c06:	4313      	orrs	r3, r2
 8003c08:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003c0a:	f000 f821 	bl	8003c50 <HAL_RCC_GetSysClockFreq>
 8003c0e:	4602      	mov	r2, r0
 8003c10:	4b0b      	ldr	r3, [pc, #44]	; (8003c40 <HAL_RCC_ClockConfig+0x1c4>)
 8003c12:	685b      	ldr	r3, [r3, #4]
 8003c14:	091b      	lsrs	r3, r3, #4
 8003c16:	f003 030f 	and.w	r3, r3, #15
 8003c1a:	490a      	ldr	r1, [pc, #40]	; (8003c44 <HAL_RCC_ClockConfig+0x1c8>)
 8003c1c:	5ccb      	ldrb	r3, [r1, r3]
 8003c1e:	fa22 f303 	lsr.w	r3, r2, r3
 8003c22:	4a09      	ldr	r2, [pc, #36]	; (8003c48 <HAL_RCC_ClockConfig+0x1cc>)
 8003c24:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003c26:	4b09      	ldr	r3, [pc, #36]	; (8003c4c <HAL_RCC_ClockConfig+0x1d0>)
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	4618      	mov	r0, r3
 8003c2c:	f7fd ff7c 	bl	8001b28 <HAL_InitTick>

  return HAL_OK;
 8003c30:	2300      	movs	r3, #0
}
 8003c32:	4618      	mov	r0, r3
 8003c34:	3710      	adds	r7, #16
 8003c36:	46bd      	mov	sp, r7
 8003c38:	bd80      	pop	{r7, pc}
 8003c3a:	bf00      	nop
 8003c3c:	40022000 	.word	0x40022000
 8003c40:	40021000 	.word	0x40021000
 8003c44:	0800b43c 	.word	0x0800b43c
 8003c48:	20000010 	.word	0x20000010
 8003c4c:	20000014 	.word	0x20000014

08003c50 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003c50:	b480      	push	{r7}
 8003c52:	b087      	sub	sp, #28
 8003c54:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003c56:	2300      	movs	r3, #0
 8003c58:	60fb      	str	r3, [r7, #12]
 8003c5a:	2300      	movs	r3, #0
 8003c5c:	60bb      	str	r3, [r7, #8]
 8003c5e:	2300      	movs	r3, #0
 8003c60:	617b      	str	r3, [r7, #20]
 8003c62:	2300      	movs	r3, #0
 8003c64:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003c66:	2300      	movs	r3, #0
 8003c68:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003c6a:	4b1e      	ldr	r3, [pc, #120]	; (8003ce4 <HAL_RCC_GetSysClockFreq+0x94>)
 8003c6c:	685b      	ldr	r3, [r3, #4]
 8003c6e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	f003 030c 	and.w	r3, r3, #12
 8003c76:	2b04      	cmp	r3, #4
 8003c78:	d002      	beq.n	8003c80 <HAL_RCC_GetSysClockFreq+0x30>
 8003c7a:	2b08      	cmp	r3, #8
 8003c7c:	d003      	beq.n	8003c86 <HAL_RCC_GetSysClockFreq+0x36>
 8003c7e:	e027      	b.n	8003cd0 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003c80:	4b19      	ldr	r3, [pc, #100]	; (8003ce8 <HAL_RCC_GetSysClockFreq+0x98>)
 8003c82:	613b      	str	r3, [r7, #16]
      break;
 8003c84:	e027      	b.n	8003cd6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	0c9b      	lsrs	r3, r3, #18
 8003c8a:	f003 030f 	and.w	r3, r3, #15
 8003c8e:	4a17      	ldr	r2, [pc, #92]	; (8003cec <HAL_RCC_GetSysClockFreq+0x9c>)
 8003c90:	5cd3      	ldrb	r3, [r2, r3]
 8003c92:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d010      	beq.n	8003cc0 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003c9e:	4b11      	ldr	r3, [pc, #68]	; (8003ce4 <HAL_RCC_GetSysClockFreq+0x94>)
 8003ca0:	685b      	ldr	r3, [r3, #4]
 8003ca2:	0c5b      	lsrs	r3, r3, #17
 8003ca4:	f003 0301 	and.w	r3, r3, #1
 8003ca8:	4a11      	ldr	r2, [pc, #68]	; (8003cf0 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003caa:	5cd3      	ldrb	r3, [r2, r3]
 8003cac:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	4a0d      	ldr	r2, [pc, #52]	; (8003ce8 <HAL_RCC_GetSysClockFreq+0x98>)
 8003cb2:	fb03 f202 	mul.w	r2, r3, r2
 8003cb6:	68bb      	ldr	r3, [r7, #8]
 8003cb8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cbc:	617b      	str	r3, [r7, #20]
 8003cbe:	e004      	b.n	8003cca <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	4a0c      	ldr	r2, [pc, #48]	; (8003cf4 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003cc4:	fb02 f303 	mul.w	r3, r2, r3
 8003cc8:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8003cca:	697b      	ldr	r3, [r7, #20]
 8003ccc:	613b      	str	r3, [r7, #16]
      break;
 8003cce:	e002      	b.n	8003cd6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003cd0:	4b05      	ldr	r3, [pc, #20]	; (8003ce8 <HAL_RCC_GetSysClockFreq+0x98>)
 8003cd2:	613b      	str	r3, [r7, #16]
      break;
 8003cd4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003cd6:	693b      	ldr	r3, [r7, #16]
}
 8003cd8:	4618      	mov	r0, r3
 8003cda:	371c      	adds	r7, #28
 8003cdc:	46bd      	mov	sp, r7
 8003cde:	bc80      	pop	{r7}
 8003ce0:	4770      	bx	lr
 8003ce2:	bf00      	nop
 8003ce4:	40021000 	.word	0x40021000
 8003ce8:	007a1200 	.word	0x007a1200
 8003cec:	0800b454 	.word	0x0800b454
 8003cf0:	0800b464 	.word	0x0800b464
 8003cf4:	003d0900 	.word	0x003d0900

08003cf8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003cf8:	b480      	push	{r7}
 8003cfa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003cfc:	4b02      	ldr	r3, [pc, #8]	; (8003d08 <HAL_RCC_GetHCLKFreq+0x10>)
 8003cfe:	681b      	ldr	r3, [r3, #0]
}
 8003d00:	4618      	mov	r0, r3
 8003d02:	46bd      	mov	sp, r7
 8003d04:	bc80      	pop	{r7}
 8003d06:	4770      	bx	lr
 8003d08:	20000010 	.word	0x20000010

08003d0c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003d0c:	b580      	push	{r7, lr}
 8003d0e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003d10:	f7ff fff2 	bl	8003cf8 <HAL_RCC_GetHCLKFreq>
 8003d14:	4602      	mov	r2, r0
 8003d16:	4b05      	ldr	r3, [pc, #20]	; (8003d2c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003d18:	685b      	ldr	r3, [r3, #4]
 8003d1a:	0a1b      	lsrs	r3, r3, #8
 8003d1c:	f003 0307 	and.w	r3, r3, #7
 8003d20:	4903      	ldr	r1, [pc, #12]	; (8003d30 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003d22:	5ccb      	ldrb	r3, [r1, r3]
 8003d24:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003d28:	4618      	mov	r0, r3
 8003d2a:	bd80      	pop	{r7, pc}
 8003d2c:	40021000 	.word	0x40021000
 8003d30:	0800b44c 	.word	0x0800b44c

08003d34 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003d34:	b580      	push	{r7, lr}
 8003d36:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003d38:	f7ff ffde 	bl	8003cf8 <HAL_RCC_GetHCLKFreq>
 8003d3c:	4602      	mov	r2, r0
 8003d3e:	4b05      	ldr	r3, [pc, #20]	; (8003d54 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003d40:	685b      	ldr	r3, [r3, #4]
 8003d42:	0adb      	lsrs	r3, r3, #11
 8003d44:	f003 0307 	and.w	r3, r3, #7
 8003d48:	4903      	ldr	r1, [pc, #12]	; (8003d58 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003d4a:	5ccb      	ldrb	r3, [r1, r3]
 8003d4c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003d50:	4618      	mov	r0, r3
 8003d52:	bd80      	pop	{r7, pc}
 8003d54:	40021000 	.word	0x40021000
 8003d58:	0800b44c 	.word	0x0800b44c

08003d5c <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003d5c:	b480      	push	{r7}
 8003d5e:	b083      	sub	sp, #12
 8003d60:	af00      	add	r7, sp, #0
 8003d62:	6078      	str	r0, [r7, #4]
 8003d64:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	220f      	movs	r2, #15
 8003d6a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003d6c:	4b11      	ldr	r3, [pc, #68]	; (8003db4 <HAL_RCC_GetClockConfig+0x58>)
 8003d6e:	685b      	ldr	r3, [r3, #4]
 8003d70:	f003 0203 	and.w	r2, r3, #3
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003d78:	4b0e      	ldr	r3, [pc, #56]	; (8003db4 <HAL_RCC_GetClockConfig+0x58>)
 8003d7a:	685b      	ldr	r3, [r3, #4]
 8003d7c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003d84:	4b0b      	ldr	r3, [pc, #44]	; (8003db4 <HAL_RCC_GetClockConfig+0x58>)
 8003d86:	685b      	ldr	r3, [r3, #4]
 8003d88:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8003d90:	4b08      	ldr	r3, [pc, #32]	; (8003db4 <HAL_RCC_GetClockConfig+0x58>)
 8003d92:	685b      	ldr	r3, [r3, #4]
 8003d94:	08db      	lsrs	r3, r3, #3
 8003d96:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003d9e:	4b06      	ldr	r3, [pc, #24]	; (8003db8 <HAL_RCC_GetClockConfig+0x5c>)
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f003 0207 	and.w	r2, r3, #7
 8003da6:	683b      	ldr	r3, [r7, #0]
 8003da8:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8003daa:	bf00      	nop
 8003dac:	370c      	adds	r7, #12
 8003dae:	46bd      	mov	sp, r7
 8003db0:	bc80      	pop	{r7}
 8003db2:	4770      	bx	lr
 8003db4:	40021000 	.word	0x40021000
 8003db8:	40022000 	.word	0x40022000

08003dbc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003dbc:	b480      	push	{r7}
 8003dbe:	b085      	sub	sp, #20
 8003dc0:	af00      	add	r7, sp, #0
 8003dc2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003dc4:	4b0a      	ldr	r3, [pc, #40]	; (8003df0 <RCC_Delay+0x34>)
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	4a0a      	ldr	r2, [pc, #40]	; (8003df4 <RCC_Delay+0x38>)
 8003dca:	fba2 2303 	umull	r2, r3, r2, r3
 8003dce:	0a5b      	lsrs	r3, r3, #9
 8003dd0:	687a      	ldr	r2, [r7, #4]
 8003dd2:	fb02 f303 	mul.w	r3, r2, r3
 8003dd6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003dd8:	bf00      	nop
  }
  while (Delay --);
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	1e5a      	subs	r2, r3, #1
 8003dde:	60fa      	str	r2, [r7, #12]
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d1f9      	bne.n	8003dd8 <RCC_Delay+0x1c>
}
 8003de4:	bf00      	nop
 8003de6:	bf00      	nop
 8003de8:	3714      	adds	r7, #20
 8003dea:	46bd      	mov	sp, r7
 8003dec:	bc80      	pop	{r7}
 8003dee:	4770      	bx	lr
 8003df0:	20000010 	.word	0x20000010
 8003df4:	10624dd3 	.word	0x10624dd3

08003df8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003df8:	b580      	push	{r7, lr}
 8003dfa:	b082      	sub	sp, #8
 8003dfc:	af00      	add	r7, sp, #0
 8003dfe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d101      	bne.n	8003e0a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003e06:	2301      	movs	r3, #1
 8003e08:	e041      	b.n	8003e8e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e10:	b2db      	uxtb	r3, r3
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d106      	bne.n	8003e24 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	2200      	movs	r2, #0
 8003e1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003e1e:	6878      	ldr	r0, [r7, #4]
 8003e20:	f000 f839 	bl	8003e96 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	2202      	movs	r2, #2
 8003e28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681a      	ldr	r2, [r3, #0]
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	3304      	adds	r3, #4
 8003e34:	4619      	mov	r1, r3
 8003e36:	4610      	mov	r0, r2
 8003e38:	f000 f99c 	bl	8004174 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	2201      	movs	r2, #1
 8003e40:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	2201      	movs	r2, #1
 8003e48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	2201      	movs	r2, #1
 8003e50:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	2201      	movs	r2, #1
 8003e58:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	2201      	movs	r2, #1
 8003e60:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	2201      	movs	r2, #1
 8003e68:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	2201      	movs	r2, #1
 8003e70:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	2201      	movs	r2, #1
 8003e78:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	2201      	movs	r2, #1
 8003e80:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	2201      	movs	r2, #1
 8003e88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003e8c:	2300      	movs	r3, #0
}
 8003e8e:	4618      	mov	r0, r3
 8003e90:	3708      	adds	r7, #8
 8003e92:	46bd      	mov	sp, r7
 8003e94:	bd80      	pop	{r7, pc}

08003e96 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003e96:	b480      	push	{r7}
 8003e98:	b083      	sub	sp, #12
 8003e9a:	af00      	add	r7, sp, #0
 8003e9c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003e9e:	bf00      	nop
 8003ea0:	370c      	adds	r7, #12
 8003ea2:	46bd      	mov	sp, r7
 8003ea4:	bc80      	pop	{r7}
 8003ea6:	4770      	bx	lr

08003ea8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003ea8:	b480      	push	{r7}
 8003eaa:	b085      	sub	sp, #20
 8003eac:	af00      	add	r7, sp, #0
 8003eae:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003eb6:	b2db      	uxtb	r3, r3
 8003eb8:	2b01      	cmp	r3, #1
 8003eba:	d001      	beq.n	8003ec0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003ebc:	2301      	movs	r3, #1
 8003ebe:	e03a      	b.n	8003f36 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	2202      	movs	r2, #2
 8003ec4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	68da      	ldr	r2, [r3, #12]
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f042 0201 	orr.w	r2, r2, #1
 8003ed6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	4a18      	ldr	r2, [pc, #96]	; (8003f40 <HAL_TIM_Base_Start_IT+0x98>)
 8003ede:	4293      	cmp	r3, r2
 8003ee0:	d00e      	beq.n	8003f00 <HAL_TIM_Base_Start_IT+0x58>
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003eea:	d009      	beq.n	8003f00 <HAL_TIM_Base_Start_IT+0x58>
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	4a14      	ldr	r2, [pc, #80]	; (8003f44 <HAL_TIM_Base_Start_IT+0x9c>)
 8003ef2:	4293      	cmp	r3, r2
 8003ef4:	d004      	beq.n	8003f00 <HAL_TIM_Base_Start_IT+0x58>
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	4a13      	ldr	r2, [pc, #76]	; (8003f48 <HAL_TIM_Base_Start_IT+0xa0>)
 8003efc:	4293      	cmp	r3, r2
 8003efe:	d111      	bne.n	8003f24 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	689b      	ldr	r3, [r3, #8]
 8003f06:	f003 0307 	and.w	r3, r3, #7
 8003f0a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	2b06      	cmp	r3, #6
 8003f10:	d010      	beq.n	8003f34 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	681a      	ldr	r2, [r3, #0]
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	f042 0201 	orr.w	r2, r2, #1
 8003f20:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f22:	e007      	b.n	8003f34 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	681a      	ldr	r2, [r3, #0]
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	f042 0201 	orr.w	r2, r2, #1
 8003f32:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003f34:	2300      	movs	r3, #0
}
 8003f36:	4618      	mov	r0, r3
 8003f38:	3714      	adds	r7, #20
 8003f3a:	46bd      	mov	sp, r7
 8003f3c:	bc80      	pop	{r7}
 8003f3e:	4770      	bx	lr
 8003f40:	40012c00 	.word	0x40012c00
 8003f44:	40000400 	.word	0x40000400
 8003f48:	40000800 	.word	0x40000800

08003f4c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003f4c:	b580      	push	{r7, lr}
 8003f4e:	b084      	sub	sp, #16
 8003f50:	af00      	add	r7, sp, #0
 8003f52:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	68db      	ldr	r3, [r3, #12]
 8003f5a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	691b      	ldr	r3, [r3, #16]
 8003f62:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003f64:	68bb      	ldr	r3, [r7, #8]
 8003f66:	f003 0302 	and.w	r3, r3, #2
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d020      	beq.n	8003fb0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	f003 0302 	and.w	r3, r3, #2
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d01b      	beq.n	8003fb0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	f06f 0202 	mvn.w	r2, #2
 8003f80:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	2201      	movs	r2, #1
 8003f86:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	699b      	ldr	r3, [r3, #24]
 8003f8e:	f003 0303 	and.w	r3, r3, #3
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d003      	beq.n	8003f9e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003f96:	6878      	ldr	r0, [r7, #4]
 8003f98:	f000 f8d1 	bl	800413e <HAL_TIM_IC_CaptureCallback>
 8003f9c:	e005      	b.n	8003faa <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f9e:	6878      	ldr	r0, [r7, #4]
 8003fa0:	f000 f8c4 	bl	800412c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003fa4:	6878      	ldr	r0, [r7, #4]
 8003fa6:	f000 f8d3 	bl	8004150 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	2200      	movs	r2, #0
 8003fae:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003fb0:	68bb      	ldr	r3, [r7, #8]
 8003fb2:	f003 0304 	and.w	r3, r3, #4
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d020      	beq.n	8003ffc <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	f003 0304 	and.w	r3, r3, #4
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d01b      	beq.n	8003ffc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	f06f 0204 	mvn.w	r2, #4
 8003fcc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	2202      	movs	r2, #2
 8003fd2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	699b      	ldr	r3, [r3, #24]
 8003fda:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d003      	beq.n	8003fea <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003fe2:	6878      	ldr	r0, [r7, #4]
 8003fe4:	f000 f8ab 	bl	800413e <HAL_TIM_IC_CaptureCallback>
 8003fe8:	e005      	b.n	8003ff6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003fea:	6878      	ldr	r0, [r7, #4]
 8003fec:	f000 f89e 	bl	800412c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ff0:	6878      	ldr	r0, [r7, #4]
 8003ff2:	f000 f8ad 	bl	8004150 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	2200      	movs	r2, #0
 8003ffa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003ffc:	68bb      	ldr	r3, [r7, #8]
 8003ffe:	f003 0308 	and.w	r3, r3, #8
 8004002:	2b00      	cmp	r3, #0
 8004004:	d020      	beq.n	8004048 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	f003 0308 	and.w	r3, r3, #8
 800400c:	2b00      	cmp	r3, #0
 800400e:	d01b      	beq.n	8004048 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	f06f 0208 	mvn.w	r2, #8
 8004018:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	2204      	movs	r2, #4
 800401e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	69db      	ldr	r3, [r3, #28]
 8004026:	f003 0303 	and.w	r3, r3, #3
 800402a:	2b00      	cmp	r3, #0
 800402c:	d003      	beq.n	8004036 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800402e:	6878      	ldr	r0, [r7, #4]
 8004030:	f000 f885 	bl	800413e <HAL_TIM_IC_CaptureCallback>
 8004034:	e005      	b.n	8004042 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004036:	6878      	ldr	r0, [r7, #4]
 8004038:	f000 f878 	bl	800412c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800403c:	6878      	ldr	r0, [r7, #4]
 800403e:	f000 f887 	bl	8004150 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	2200      	movs	r2, #0
 8004046:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004048:	68bb      	ldr	r3, [r7, #8]
 800404a:	f003 0310 	and.w	r3, r3, #16
 800404e:	2b00      	cmp	r3, #0
 8004050:	d020      	beq.n	8004094 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	f003 0310 	and.w	r3, r3, #16
 8004058:	2b00      	cmp	r3, #0
 800405a:	d01b      	beq.n	8004094 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	f06f 0210 	mvn.w	r2, #16
 8004064:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	2208      	movs	r2, #8
 800406a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	69db      	ldr	r3, [r3, #28]
 8004072:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004076:	2b00      	cmp	r3, #0
 8004078:	d003      	beq.n	8004082 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800407a:	6878      	ldr	r0, [r7, #4]
 800407c:	f000 f85f 	bl	800413e <HAL_TIM_IC_CaptureCallback>
 8004080:	e005      	b.n	800408e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004082:	6878      	ldr	r0, [r7, #4]
 8004084:	f000 f852 	bl	800412c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004088:	6878      	ldr	r0, [r7, #4]
 800408a:	f000 f861 	bl	8004150 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	2200      	movs	r2, #0
 8004092:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004094:	68bb      	ldr	r3, [r7, #8]
 8004096:	f003 0301 	and.w	r3, r3, #1
 800409a:	2b00      	cmp	r3, #0
 800409c:	d00c      	beq.n	80040b8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	f003 0301 	and.w	r3, r3, #1
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d007      	beq.n	80040b8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	f06f 0201 	mvn.w	r2, #1
 80040b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80040b2:	6878      	ldr	r0, [r7, #4]
 80040b4:	f7fd fc28 	bl	8001908 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80040b8:	68bb      	ldr	r3, [r7, #8]
 80040ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d00c      	beq.n	80040dc <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d007      	beq.n	80040dc <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80040d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80040d6:	6878      	ldr	r0, [r7, #4]
 80040d8:	f000 f8c3 	bl	8004262 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80040dc:	68bb      	ldr	r3, [r7, #8]
 80040de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d00c      	beq.n	8004100 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d007      	beq.n	8004100 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80040f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80040fa:	6878      	ldr	r0, [r7, #4]
 80040fc:	f000 f831 	bl	8004162 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004100:	68bb      	ldr	r3, [r7, #8]
 8004102:	f003 0320 	and.w	r3, r3, #32
 8004106:	2b00      	cmp	r3, #0
 8004108:	d00c      	beq.n	8004124 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	f003 0320 	and.w	r3, r3, #32
 8004110:	2b00      	cmp	r3, #0
 8004112:	d007      	beq.n	8004124 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	f06f 0220 	mvn.w	r2, #32
 800411c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800411e:	6878      	ldr	r0, [r7, #4]
 8004120:	f000 f896 	bl	8004250 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004124:	bf00      	nop
 8004126:	3710      	adds	r7, #16
 8004128:	46bd      	mov	sp, r7
 800412a:	bd80      	pop	{r7, pc}

0800412c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800412c:	b480      	push	{r7}
 800412e:	b083      	sub	sp, #12
 8004130:	af00      	add	r7, sp, #0
 8004132:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004134:	bf00      	nop
 8004136:	370c      	adds	r7, #12
 8004138:	46bd      	mov	sp, r7
 800413a:	bc80      	pop	{r7}
 800413c:	4770      	bx	lr

0800413e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800413e:	b480      	push	{r7}
 8004140:	b083      	sub	sp, #12
 8004142:	af00      	add	r7, sp, #0
 8004144:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004146:	bf00      	nop
 8004148:	370c      	adds	r7, #12
 800414a:	46bd      	mov	sp, r7
 800414c:	bc80      	pop	{r7}
 800414e:	4770      	bx	lr

08004150 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004150:	b480      	push	{r7}
 8004152:	b083      	sub	sp, #12
 8004154:	af00      	add	r7, sp, #0
 8004156:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004158:	bf00      	nop
 800415a:	370c      	adds	r7, #12
 800415c:	46bd      	mov	sp, r7
 800415e:	bc80      	pop	{r7}
 8004160:	4770      	bx	lr

08004162 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004162:	b480      	push	{r7}
 8004164:	b083      	sub	sp, #12
 8004166:	af00      	add	r7, sp, #0
 8004168:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800416a:	bf00      	nop
 800416c:	370c      	adds	r7, #12
 800416e:	46bd      	mov	sp, r7
 8004170:	bc80      	pop	{r7}
 8004172:	4770      	bx	lr

08004174 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004174:	b480      	push	{r7}
 8004176:	b085      	sub	sp, #20
 8004178:	af00      	add	r7, sp, #0
 800417a:	6078      	str	r0, [r7, #4]
 800417c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	4a2f      	ldr	r2, [pc, #188]	; (8004244 <TIM_Base_SetConfig+0xd0>)
 8004188:	4293      	cmp	r3, r2
 800418a:	d00b      	beq.n	80041a4 <TIM_Base_SetConfig+0x30>
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004192:	d007      	beq.n	80041a4 <TIM_Base_SetConfig+0x30>
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	4a2c      	ldr	r2, [pc, #176]	; (8004248 <TIM_Base_SetConfig+0xd4>)
 8004198:	4293      	cmp	r3, r2
 800419a:	d003      	beq.n	80041a4 <TIM_Base_SetConfig+0x30>
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	4a2b      	ldr	r2, [pc, #172]	; (800424c <TIM_Base_SetConfig+0xd8>)
 80041a0:	4293      	cmp	r3, r2
 80041a2:	d108      	bne.n	80041b6 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041aa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80041ac:	683b      	ldr	r3, [r7, #0]
 80041ae:	685b      	ldr	r3, [r3, #4]
 80041b0:	68fa      	ldr	r2, [r7, #12]
 80041b2:	4313      	orrs	r3, r2
 80041b4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	4a22      	ldr	r2, [pc, #136]	; (8004244 <TIM_Base_SetConfig+0xd0>)
 80041ba:	4293      	cmp	r3, r2
 80041bc:	d00b      	beq.n	80041d6 <TIM_Base_SetConfig+0x62>
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80041c4:	d007      	beq.n	80041d6 <TIM_Base_SetConfig+0x62>
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	4a1f      	ldr	r2, [pc, #124]	; (8004248 <TIM_Base_SetConfig+0xd4>)
 80041ca:	4293      	cmp	r3, r2
 80041cc:	d003      	beq.n	80041d6 <TIM_Base_SetConfig+0x62>
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	4a1e      	ldr	r2, [pc, #120]	; (800424c <TIM_Base_SetConfig+0xd8>)
 80041d2:	4293      	cmp	r3, r2
 80041d4:	d108      	bne.n	80041e8 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80041dc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80041de:	683b      	ldr	r3, [r7, #0]
 80041e0:	68db      	ldr	r3, [r3, #12]
 80041e2:	68fa      	ldr	r2, [r7, #12]
 80041e4:	4313      	orrs	r3, r2
 80041e6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80041ee:	683b      	ldr	r3, [r7, #0]
 80041f0:	695b      	ldr	r3, [r3, #20]
 80041f2:	4313      	orrs	r3, r2
 80041f4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	68fa      	ldr	r2, [r7, #12]
 80041fa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80041fc:	683b      	ldr	r3, [r7, #0]
 80041fe:	689a      	ldr	r2, [r3, #8]
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004204:	683b      	ldr	r3, [r7, #0]
 8004206:	681a      	ldr	r2, [r3, #0]
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	4a0d      	ldr	r2, [pc, #52]	; (8004244 <TIM_Base_SetConfig+0xd0>)
 8004210:	4293      	cmp	r3, r2
 8004212:	d103      	bne.n	800421c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004214:	683b      	ldr	r3, [r7, #0]
 8004216:	691a      	ldr	r2, [r3, #16]
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	2201      	movs	r2, #1
 8004220:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	691b      	ldr	r3, [r3, #16]
 8004226:	f003 0301 	and.w	r3, r3, #1
 800422a:	2b00      	cmp	r3, #0
 800422c:	d005      	beq.n	800423a <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	691b      	ldr	r3, [r3, #16]
 8004232:	f023 0201 	bic.w	r2, r3, #1
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	611a      	str	r2, [r3, #16]
  }
}
 800423a:	bf00      	nop
 800423c:	3714      	adds	r7, #20
 800423e:	46bd      	mov	sp, r7
 8004240:	bc80      	pop	{r7}
 8004242:	4770      	bx	lr
 8004244:	40012c00 	.word	0x40012c00
 8004248:	40000400 	.word	0x40000400
 800424c:	40000800 	.word	0x40000800

08004250 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004250:	b480      	push	{r7}
 8004252:	b083      	sub	sp, #12
 8004254:	af00      	add	r7, sp, #0
 8004256:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004258:	bf00      	nop
 800425a:	370c      	adds	r7, #12
 800425c:	46bd      	mov	sp, r7
 800425e:	bc80      	pop	{r7}
 8004260:	4770      	bx	lr

08004262 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004262:	b480      	push	{r7}
 8004264:	b083      	sub	sp, #12
 8004266:	af00      	add	r7, sp, #0
 8004268:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800426a:	bf00      	nop
 800426c:	370c      	adds	r7, #12
 800426e:	46bd      	mov	sp, r7
 8004270:	bc80      	pop	{r7}
 8004272:	4770      	bx	lr

08004274 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004274:	b580      	push	{r7, lr}
 8004276:	b082      	sub	sp, #8
 8004278:	af00      	add	r7, sp, #0
 800427a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	2b00      	cmp	r3, #0
 8004280:	d101      	bne.n	8004286 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004282:	2301      	movs	r3, #1
 8004284:	e042      	b.n	800430c <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800428c:	b2db      	uxtb	r3, r3
 800428e:	2b00      	cmp	r3, #0
 8004290:	d106      	bne.n	80042a0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	2200      	movs	r2, #0
 8004296:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800429a:	6878      	ldr	r0, [r7, #4]
 800429c:	f7fd fbf0 	bl	8001a80 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	2224      	movs	r2, #36	; 0x24
 80042a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	68da      	ldr	r2, [r3, #12]
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80042b6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80042b8:	6878      	ldr	r0, [r7, #4]
 80042ba:	f000 fdb7 	bl	8004e2c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	691a      	ldr	r2, [r3, #16]
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80042cc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	695a      	ldr	r2, [r3, #20]
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80042dc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	68da      	ldr	r2, [r3, #12]
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80042ec:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	2200      	movs	r2, #0
 80042f2:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	2220      	movs	r2, #32
 80042f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	2220      	movs	r2, #32
 8004300:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	2200      	movs	r2, #0
 8004308:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800430a:	2300      	movs	r3, #0
}
 800430c:	4618      	mov	r0, r3
 800430e:	3708      	adds	r7, #8
 8004310:	46bd      	mov	sp, r7
 8004312:	bd80      	pop	{r7, pc}

08004314 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004314:	b580      	push	{r7, lr}
 8004316:	b08a      	sub	sp, #40	; 0x28
 8004318:	af02      	add	r7, sp, #8
 800431a:	60f8      	str	r0, [r7, #12]
 800431c:	60b9      	str	r1, [r7, #8]
 800431e:	603b      	str	r3, [r7, #0]
 8004320:	4613      	mov	r3, r2
 8004322:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004324:	2300      	movs	r3, #0
 8004326:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800432e:	b2db      	uxtb	r3, r3
 8004330:	2b20      	cmp	r3, #32
 8004332:	d175      	bne.n	8004420 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004334:	68bb      	ldr	r3, [r7, #8]
 8004336:	2b00      	cmp	r3, #0
 8004338:	d002      	beq.n	8004340 <HAL_UART_Transmit+0x2c>
 800433a:	88fb      	ldrh	r3, [r7, #6]
 800433c:	2b00      	cmp	r3, #0
 800433e:	d101      	bne.n	8004344 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004340:	2301      	movs	r3, #1
 8004342:	e06e      	b.n	8004422 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	2200      	movs	r2, #0
 8004348:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	2221      	movs	r2, #33	; 0x21
 800434e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004352:	f7fd fd99 	bl	8001e88 <HAL_GetTick>
 8004356:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	88fa      	ldrh	r2, [r7, #6]
 800435c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	88fa      	ldrh	r2, [r7, #6]
 8004362:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	689b      	ldr	r3, [r3, #8]
 8004368:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800436c:	d108      	bne.n	8004380 <HAL_UART_Transmit+0x6c>
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	691b      	ldr	r3, [r3, #16]
 8004372:	2b00      	cmp	r3, #0
 8004374:	d104      	bne.n	8004380 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004376:	2300      	movs	r3, #0
 8004378:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800437a:	68bb      	ldr	r3, [r7, #8]
 800437c:	61bb      	str	r3, [r7, #24]
 800437e:	e003      	b.n	8004388 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004380:	68bb      	ldr	r3, [r7, #8]
 8004382:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004384:	2300      	movs	r3, #0
 8004386:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004388:	e02e      	b.n	80043e8 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800438a:	683b      	ldr	r3, [r7, #0]
 800438c:	9300      	str	r3, [sp, #0]
 800438e:	697b      	ldr	r3, [r7, #20]
 8004390:	2200      	movs	r2, #0
 8004392:	2180      	movs	r1, #128	; 0x80
 8004394:	68f8      	ldr	r0, [r7, #12]
 8004396:	f000 fb1c 	bl	80049d2 <UART_WaitOnFlagUntilTimeout>
 800439a:	4603      	mov	r3, r0
 800439c:	2b00      	cmp	r3, #0
 800439e:	d005      	beq.n	80043ac <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	2220      	movs	r2, #32
 80043a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 80043a8:	2303      	movs	r3, #3
 80043aa:	e03a      	b.n	8004422 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80043ac:	69fb      	ldr	r3, [r7, #28]
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d10b      	bne.n	80043ca <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80043b2:	69bb      	ldr	r3, [r7, #24]
 80043b4:	881b      	ldrh	r3, [r3, #0]
 80043b6:	461a      	mov	r2, r3
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80043c0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80043c2:	69bb      	ldr	r3, [r7, #24]
 80043c4:	3302      	adds	r3, #2
 80043c6:	61bb      	str	r3, [r7, #24]
 80043c8:	e007      	b.n	80043da <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80043ca:	69fb      	ldr	r3, [r7, #28]
 80043cc:	781a      	ldrb	r2, [r3, #0]
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80043d4:	69fb      	ldr	r3, [r7, #28]
 80043d6:	3301      	adds	r3, #1
 80043d8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80043de:	b29b      	uxth	r3, r3
 80043e0:	3b01      	subs	r3, #1
 80043e2:	b29a      	uxth	r2, r3
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80043ec:	b29b      	uxth	r3, r3
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d1cb      	bne.n	800438a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80043f2:	683b      	ldr	r3, [r7, #0]
 80043f4:	9300      	str	r3, [sp, #0]
 80043f6:	697b      	ldr	r3, [r7, #20]
 80043f8:	2200      	movs	r2, #0
 80043fa:	2140      	movs	r1, #64	; 0x40
 80043fc:	68f8      	ldr	r0, [r7, #12]
 80043fe:	f000 fae8 	bl	80049d2 <UART_WaitOnFlagUntilTimeout>
 8004402:	4603      	mov	r3, r0
 8004404:	2b00      	cmp	r3, #0
 8004406:	d005      	beq.n	8004414 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	2220      	movs	r2, #32
 800440c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 8004410:	2303      	movs	r3, #3
 8004412:	e006      	b.n	8004422 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	2220      	movs	r2, #32
 8004418:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 800441c:	2300      	movs	r3, #0
 800441e:	e000      	b.n	8004422 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8004420:	2302      	movs	r3, #2
  }
}
 8004422:	4618      	mov	r0, r3
 8004424:	3720      	adds	r7, #32
 8004426:	46bd      	mov	sp, r7
 8004428:	bd80      	pop	{r7, pc}

0800442a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800442a:	b580      	push	{r7, lr}
 800442c:	b084      	sub	sp, #16
 800442e:	af00      	add	r7, sp, #0
 8004430:	60f8      	str	r0, [r7, #12]
 8004432:	60b9      	str	r1, [r7, #8]
 8004434:	4613      	mov	r3, r2
 8004436:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800443e:	b2db      	uxtb	r3, r3
 8004440:	2b20      	cmp	r3, #32
 8004442:	d112      	bne.n	800446a <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8004444:	68bb      	ldr	r3, [r7, #8]
 8004446:	2b00      	cmp	r3, #0
 8004448:	d002      	beq.n	8004450 <HAL_UART_Receive_IT+0x26>
 800444a:	88fb      	ldrh	r3, [r7, #6]
 800444c:	2b00      	cmp	r3, #0
 800444e:	d101      	bne.n	8004454 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004450:	2301      	movs	r3, #1
 8004452:	e00b      	b.n	800446c <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	2200      	movs	r2, #0
 8004458:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800445a:	88fb      	ldrh	r3, [r7, #6]
 800445c:	461a      	mov	r2, r3
 800445e:	68b9      	ldr	r1, [r7, #8]
 8004460:	68f8      	ldr	r0, [r7, #12]
 8004462:	f000 fb0f 	bl	8004a84 <UART_Start_Receive_IT>
 8004466:	4603      	mov	r3, r0
 8004468:	e000      	b.n	800446c <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 800446a:	2302      	movs	r3, #2
  }
}
 800446c:	4618      	mov	r0, r3
 800446e:	3710      	adds	r7, #16
 8004470:	46bd      	mov	sp, r7
 8004472:	bd80      	pop	{r7, pc}

08004474 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004474:	b580      	push	{r7, lr}
 8004476:	b0ba      	sub	sp, #232	; 0xe8
 8004478:	af00      	add	r7, sp, #0
 800447a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	68db      	ldr	r3, [r3, #12]
 800448c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	695b      	ldr	r3, [r3, #20]
 8004496:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800449a:	2300      	movs	r3, #0
 800449c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80044a0:	2300      	movs	r3, #0
 80044a2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80044a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80044aa:	f003 030f 	and.w	r3, r3, #15
 80044ae:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80044b2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d10f      	bne.n	80044da <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80044ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80044be:	f003 0320 	and.w	r3, r3, #32
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d009      	beq.n	80044da <HAL_UART_IRQHandler+0x66>
 80044c6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80044ca:	f003 0320 	and.w	r3, r3, #32
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d003      	beq.n	80044da <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80044d2:	6878      	ldr	r0, [r7, #4]
 80044d4:	f000 fbec 	bl	8004cb0 <UART_Receive_IT>
      return;
 80044d8:	e25b      	b.n	8004992 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80044da:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80044de:	2b00      	cmp	r3, #0
 80044e0:	f000 80de 	beq.w	80046a0 <HAL_UART_IRQHandler+0x22c>
 80044e4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80044e8:	f003 0301 	and.w	r3, r3, #1
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d106      	bne.n	80044fe <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80044f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80044f4:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	f000 80d1 	beq.w	80046a0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80044fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004502:	f003 0301 	and.w	r3, r3, #1
 8004506:	2b00      	cmp	r3, #0
 8004508:	d00b      	beq.n	8004522 <HAL_UART_IRQHandler+0xae>
 800450a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800450e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004512:	2b00      	cmp	r3, #0
 8004514:	d005      	beq.n	8004522 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800451a:	f043 0201 	orr.w	r2, r3, #1
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004522:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004526:	f003 0304 	and.w	r3, r3, #4
 800452a:	2b00      	cmp	r3, #0
 800452c:	d00b      	beq.n	8004546 <HAL_UART_IRQHandler+0xd2>
 800452e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004532:	f003 0301 	and.w	r3, r3, #1
 8004536:	2b00      	cmp	r3, #0
 8004538:	d005      	beq.n	8004546 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800453e:	f043 0202 	orr.w	r2, r3, #2
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004546:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800454a:	f003 0302 	and.w	r3, r3, #2
 800454e:	2b00      	cmp	r3, #0
 8004550:	d00b      	beq.n	800456a <HAL_UART_IRQHandler+0xf6>
 8004552:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004556:	f003 0301 	and.w	r3, r3, #1
 800455a:	2b00      	cmp	r3, #0
 800455c:	d005      	beq.n	800456a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004562:	f043 0204 	orr.w	r2, r3, #4
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800456a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800456e:	f003 0308 	and.w	r3, r3, #8
 8004572:	2b00      	cmp	r3, #0
 8004574:	d011      	beq.n	800459a <HAL_UART_IRQHandler+0x126>
 8004576:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800457a:	f003 0320 	and.w	r3, r3, #32
 800457e:	2b00      	cmp	r3, #0
 8004580:	d105      	bne.n	800458e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004582:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004586:	f003 0301 	and.w	r3, r3, #1
 800458a:	2b00      	cmp	r3, #0
 800458c:	d005      	beq.n	800459a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004592:	f043 0208 	orr.w	r2, r3, #8
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800459e:	2b00      	cmp	r3, #0
 80045a0:	f000 81f2 	beq.w	8004988 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80045a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80045a8:	f003 0320 	and.w	r3, r3, #32
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d008      	beq.n	80045c2 <HAL_UART_IRQHandler+0x14e>
 80045b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80045b4:	f003 0320 	and.w	r3, r3, #32
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d002      	beq.n	80045c2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80045bc:	6878      	ldr	r0, [r7, #4]
 80045be:	f000 fb77 	bl	8004cb0 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	695b      	ldr	r3, [r3, #20]
 80045c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	bf14      	ite	ne
 80045d0:	2301      	movne	r3, #1
 80045d2:	2300      	moveq	r3, #0
 80045d4:	b2db      	uxtb	r3, r3
 80045d6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045de:	f003 0308 	and.w	r3, r3, #8
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d103      	bne.n	80045ee <HAL_UART_IRQHandler+0x17a>
 80045e6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d04f      	beq.n	800468e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80045ee:	6878      	ldr	r0, [r7, #4]
 80045f0:	f000 fa81 	bl	8004af6 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	695b      	ldr	r3, [r3, #20]
 80045fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d041      	beq.n	8004686 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	3314      	adds	r3, #20
 8004608:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800460c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004610:	e853 3f00 	ldrex	r3, [r3]
 8004614:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004618:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800461c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004620:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	3314      	adds	r3, #20
 800462a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800462e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004632:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004636:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800463a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800463e:	e841 2300 	strex	r3, r2, [r1]
 8004642:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004646:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800464a:	2b00      	cmp	r3, #0
 800464c:	d1d9      	bne.n	8004602 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004652:	2b00      	cmp	r3, #0
 8004654:	d013      	beq.n	800467e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800465a:	4a7e      	ldr	r2, [pc, #504]	; (8004854 <HAL_UART_IRQHandler+0x3e0>)
 800465c:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004662:	4618      	mov	r0, r3
 8004664:	f7fd fd58 	bl	8002118 <HAL_DMA_Abort_IT>
 8004668:	4603      	mov	r3, r0
 800466a:	2b00      	cmp	r3, #0
 800466c:	d016      	beq.n	800469c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004672:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004674:	687a      	ldr	r2, [r7, #4]
 8004676:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004678:	4610      	mov	r0, r2
 800467a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800467c:	e00e      	b.n	800469c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800467e:	6878      	ldr	r0, [r7, #4]
 8004680:	f000 f993 	bl	80049aa <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004684:	e00a      	b.n	800469c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004686:	6878      	ldr	r0, [r7, #4]
 8004688:	f000 f98f 	bl	80049aa <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800468c:	e006      	b.n	800469c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800468e:	6878      	ldr	r0, [r7, #4]
 8004690:	f000 f98b 	bl	80049aa <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	2200      	movs	r2, #0
 8004698:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 800469a:	e175      	b.n	8004988 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800469c:	bf00      	nop
    return;
 800469e:	e173      	b.n	8004988 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046a4:	2b01      	cmp	r3, #1
 80046a6:	f040 814f 	bne.w	8004948 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80046aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80046ae:	f003 0310 	and.w	r3, r3, #16
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	f000 8148 	beq.w	8004948 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80046b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80046bc:	f003 0310 	and.w	r3, r3, #16
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	f000 8141 	beq.w	8004948 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80046c6:	2300      	movs	r3, #0
 80046c8:	60bb      	str	r3, [r7, #8]
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	60bb      	str	r3, [r7, #8]
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	685b      	ldr	r3, [r3, #4]
 80046d8:	60bb      	str	r3, [r7, #8]
 80046da:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	695b      	ldr	r3, [r3, #20]
 80046e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	f000 80b6 	beq.w	8004858 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	685b      	ldr	r3, [r3, #4]
 80046f4:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80046f8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	f000 8145 	beq.w	800498c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004706:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800470a:	429a      	cmp	r2, r3
 800470c:	f080 813e 	bcs.w	800498c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004716:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800471c:	699b      	ldr	r3, [r3, #24]
 800471e:	2b20      	cmp	r3, #32
 8004720:	f000 8088 	beq.w	8004834 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	330c      	adds	r3, #12
 800472a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800472e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004732:	e853 3f00 	ldrex	r3, [r3]
 8004736:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800473a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800473e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004742:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	330c      	adds	r3, #12
 800474c:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8004750:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004754:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004758:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800475c:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004760:	e841 2300 	strex	r3, r2, [r1]
 8004764:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004768:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800476c:	2b00      	cmp	r3, #0
 800476e:	d1d9      	bne.n	8004724 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	3314      	adds	r3, #20
 8004776:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004778:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800477a:	e853 3f00 	ldrex	r3, [r3]
 800477e:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004780:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004782:	f023 0301 	bic.w	r3, r3, #1
 8004786:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	3314      	adds	r3, #20
 8004790:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004794:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004798:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800479a:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800479c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80047a0:	e841 2300 	strex	r3, r2, [r1]
 80047a4:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80047a6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d1e1      	bne.n	8004770 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	3314      	adds	r3, #20
 80047b2:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047b4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80047b6:	e853 3f00 	ldrex	r3, [r3]
 80047ba:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80047bc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80047be:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80047c2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	3314      	adds	r3, #20
 80047cc:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80047d0:	66fa      	str	r2, [r7, #108]	; 0x6c
 80047d2:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047d4:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80047d6:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80047d8:	e841 2300 	strex	r3, r2, [r1]
 80047dc:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80047de:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d1e3      	bne.n	80047ac <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	2220      	movs	r2, #32
 80047e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	2200      	movs	r2, #0
 80047f0:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	330c      	adds	r3, #12
 80047f8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80047fc:	e853 3f00 	ldrex	r3, [r3]
 8004800:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004802:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004804:	f023 0310 	bic.w	r3, r3, #16
 8004808:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	330c      	adds	r3, #12
 8004812:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8004816:	65ba      	str	r2, [r7, #88]	; 0x58
 8004818:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800481a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800481c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800481e:	e841 2300 	strex	r3, r2, [r1]
 8004822:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004824:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004826:	2b00      	cmp	r3, #0
 8004828:	d1e3      	bne.n	80047f2 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800482e:	4618      	mov	r0, r3
 8004830:	f7fd fc37 	bl	80020a2 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	2202      	movs	r2, #2
 8004838:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004842:	b29b      	uxth	r3, r3
 8004844:	1ad3      	subs	r3, r2, r3
 8004846:	b29b      	uxth	r3, r3
 8004848:	4619      	mov	r1, r3
 800484a:	6878      	ldr	r0, [r7, #4]
 800484c:	f000 f8b6 	bl	80049bc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004850:	e09c      	b.n	800498c <HAL_UART_IRQHandler+0x518>
 8004852:	bf00      	nop
 8004854:	08004bbb 	.word	0x08004bbb
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004860:	b29b      	uxth	r3, r3
 8004862:	1ad3      	subs	r3, r2, r3
 8004864:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800486c:	b29b      	uxth	r3, r3
 800486e:	2b00      	cmp	r3, #0
 8004870:	f000 808e 	beq.w	8004990 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8004874:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004878:	2b00      	cmp	r3, #0
 800487a:	f000 8089 	beq.w	8004990 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	330c      	adds	r3, #12
 8004884:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004886:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004888:	e853 3f00 	ldrex	r3, [r3]
 800488c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800488e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004890:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004894:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	330c      	adds	r3, #12
 800489e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80048a2:	647a      	str	r2, [r7, #68]	; 0x44
 80048a4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048a6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80048a8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80048aa:	e841 2300 	strex	r3, r2, [r1]
 80048ae:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80048b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d1e3      	bne.n	800487e <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	3314      	adds	r3, #20
 80048bc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048c0:	e853 3f00 	ldrex	r3, [r3]
 80048c4:	623b      	str	r3, [r7, #32]
   return(result);
 80048c6:	6a3b      	ldr	r3, [r7, #32]
 80048c8:	f023 0301 	bic.w	r3, r3, #1
 80048cc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	3314      	adds	r3, #20
 80048d6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80048da:	633a      	str	r2, [r7, #48]	; 0x30
 80048dc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048de:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80048e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80048e2:	e841 2300 	strex	r3, r2, [r1]
 80048e6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80048e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d1e3      	bne.n	80048b6 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	2220      	movs	r2, #32
 80048f2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	2200      	movs	r2, #0
 80048fa:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	330c      	adds	r3, #12
 8004902:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004904:	693b      	ldr	r3, [r7, #16]
 8004906:	e853 3f00 	ldrex	r3, [r3]
 800490a:	60fb      	str	r3, [r7, #12]
   return(result);
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	f023 0310 	bic.w	r3, r3, #16
 8004912:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	330c      	adds	r3, #12
 800491c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8004920:	61fa      	str	r2, [r7, #28]
 8004922:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004924:	69b9      	ldr	r1, [r7, #24]
 8004926:	69fa      	ldr	r2, [r7, #28]
 8004928:	e841 2300 	strex	r3, r2, [r1]
 800492c:	617b      	str	r3, [r7, #20]
   return(result);
 800492e:	697b      	ldr	r3, [r7, #20]
 8004930:	2b00      	cmp	r3, #0
 8004932:	d1e3      	bne.n	80048fc <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	2202      	movs	r2, #2
 8004938:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800493a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800493e:	4619      	mov	r1, r3
 8004940:	6878      	ldr	r0, [r7, #4]
 8004942:	f000 f83b 	bl	80049bc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004946:	e023      	b.n	8004990 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004948:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800494c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004950:	2b00      	cmp	r3, #0
 8004952:	d009      	beq.n	8004968 <HAL_UART_IRQHandler+0x4f4>
 8004954:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004958:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800495c:	2b00      	cmp	r3, #0
 800495e:	d003      	beq.n	8004968 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8004960:	6878      	ldr	r0, [r7, #4]
 8004962:	f000 f93e 	bl	8004be2 <UART_Transmit_IT>
    return;
 8004966:	e014      	b.n	8004992 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004968:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800496c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004970:	2b00      	cmp	r3, #0
 8004972:	d00e      	beq.n	8004992 <HAL_UART_IRQHandler+0x51e>
 8004974:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004978:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800497c:	2b00      	cmp	r3, #0
 800497e:	d008      	beq.n	8004992 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8004980:	6878      	ldr	r0, [r7, #4]
 8004982:	f000 f97d 	bl	8004c80 <UART_EndTransmit_IT>
    return;
 8004986:	e004      	b.n	8004992 <HAL_UART_IRQHandler+0x51e>
    return;
 8004988:	bf00      	nop
 800498a:	e002      	b.n	8004992 <HAL_UART_IRQHandler+0x51e>
      return;
 800498c:	bf00      	nop
 800498e:	e000      	b.n	8004992 <HAL_UART_IRQHandler+0x51e>
      return;
 8004990:	bf00      	nop
  }
}
 8004992:	37e8      	adds	r7, #232	; 0xe8
 8004994:	46bd      	mov	sp, r7
 8004996:	bd80      	pop	{r7, pc}

08004998 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004998:	b480      	push	{r7}
 800499a:	b083      	sub	sp, #12
 800499c:	af00      	add	r7, sp, #0
 800499e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80049a0:	bf00      	nop
 80049a2:	370c      	adds	r7, #12
 80049a4:	46bd      	mov	sp, r7
 80049a6:	bc80      	pop	{r7}
 80049a8:	4770      	bx	lr

080049aa <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80049aa:	b480      	push	{r7}
 80049ac:	b083      	sub	sp, #12
 80049ae:	af00      	add	r7, sp, #0
 80049b0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80049b2:	bf00      	nop
 80049b4:	370c      	adds	r7, #12
 80049b6:	46bd      	mov	sp, r7
 80049b8:	bc80      	pop	{r7}
 80049ba:	4770      	bx	lr

080049bc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80049bc:	b480      	push	{r7}
 80049be:	b083      	sub	sp, #12
 80049c0:	af00      	add	r7, sp, #0
 80049c2:	6078      	str	r0, [r7, #4]
 80049c4:	460b      	mov	r3, r1
 80049c6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80049c8:	bf00      	nop
 80049ca:	370c      	adds	r7, #12
 80049cc:	46bd      	mov	sp, r7
 80049ce:	bc80      	pop	{r7}
 80049d0:	4770      	bx	lr

080049d2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80049d2:	b580      	push	{r7, lr}
 80049d4:	b086      	sub	sp, #24
 80049d6:	af00      	add	r7, sp, #0
 80049d8:	60f8      	str	r0, [r7, #12]
 80049da:	60b9      	str	r1, [r7, #8]
 80049dc:	603b      	str	r3, [r7, #0]
 80049de:	4613      	mov	r3, r2
 80049e0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80049e2:	e03b      	b.n	8004a5c <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80049e4:	6a3b      	ldr	r3, [r7, #32]
 80049e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049ea:	d037      	beq.n	8004a5c <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80049ec:	f7fd fa4c 	bl	8001e88 <HAL_GetTick>
 80049f0:	4602      	mov	r2, r0
 80049f2:	683b      	ldr	r3, [r7, #0]
 80049f4:	1ad3      	subs	r3, r2, r3
 80049f6:	6a3a      	ldr	r2, [r7, #32]
 80049f8:	429a      	cmp	r2, r3
 80049fa:	d302      	bcc.n	8004a02 <UART_WaitOnFlagUntilTimeout+0x30>
 80049fc:	6a3b      	ldr	r3, [r7, #32]
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d101      	bne.n	8004a06 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004a02:	2303      	movs	r3, #3
 8004a04:	e03a      	b.n	8004a7c <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	68db      	ldr	r3, [r3, #12]
 8004a0c:	f003 0304 	and.w	r3, r3, #4
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d023      	beq.n	8004a5c <UART_WaitOnFlagUntilTimeout+0x8a>
 8004a14:	68bb      	ldr	r3, [r7, #8]
 8004a16:	2b80      	cmp	r3, #128	; 0x80
 8004a18:	d020      	beq.n	8004a5c <UART_WaitOnFlagUntilTimeout+0x8a>
 8004a1a:	68bb      	ldr	r3, [r7, #8]
 8004a1c:	2b40      	cmp	r3, #64	; 0x40
 8004a1e:	d01d      	beq.n	8004a5c <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	f003 0308 	and.w	r3, r3, #8
 8004a2a:	2b08      	cmp	r3, #8
 8004a2c:	d116      	bne.n	8004a5c <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8004a2e:	2300      	movs	r3, #0
 8004a30:	617b      	str	r3, [r7, #20]
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	617b      	str	r3, [r7, #20]
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	685b      	ldr	r3, [r3, #4]
 8004a40:	617b      	str	r3, [r7, #20]
 8004a42:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004a44:	68f8      	ldr	r0, [r7, #12]
 8004a46:	f000 f856 	bl	8004af6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	2208      	movs	r2, #8
 8004a4e:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	2200      	movs	r2, #0
 8004a54:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8004a58:	2301      	movs	r3, #1
 8004a5a:	e00f      	b.n	8004a7c <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	681a      	ldr	r2, [r3, #0]
 8004a62:	68bb      	ldr	r3, [r7, #8]
 8004a64:	4013      	ands	r3, r2
 8004a66:	68ba      	ldr	r2, [r7, #8]
 8004a68:	429a      	cmp	r2, r3
 8004a6a:	bf0c      	ite	eq
 8004a6c:	2301      	moveq	r3, #1
 8004a6e:	2300      	movne	r3, #0
 8004a70:	b2db      	uxtb	r3, r3
 8004a72:	461a      	mov	r2, r3
 8004a74:	79fb      	ldrb	r3, [r7, #7]
 8004a76:	429a      	cmp	r2, r3
 8004a78:	d0b4      	beq.n	80049e4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004a7a:	2300      	movs	r3, #0
}
 8004a7c:	4618      	mov	r0, r3
 8004a7e:	3718      	adds	r7, #24
 8004a80:	46bd      	mov	sp, r7
 8004a82:	bd80      	pop	{r7, pc}

08004a84 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004a84:	b480      	push	{r7}
 8004a86:	b085      	sub	sp, #20
 8004a88:	af00      	add	r7, sp, #0
 8004a8a:	60f8      	str	r0, [r7, #12]
 8004a8c:	60b9      	str	r1, [r7, #8]
 8004a8e:	4613      	mov	r3, r2
 8004a90:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	68ba      	ldr	r2, [r7, #8]
 8004a96:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	88fa      	ldrh	r2, [r7, #6]
 8004a9c:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	88fa      	ldrh	r2, [r7, #6]
 8004aa2:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	2200      	movs	r2, #0
 8004aa8:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	2222      	movs	r2, #34	; 0x22
 8004aae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	691b      	ldr	r3, [r3, #16]
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d007      	beq.n	8004aca <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	68da      	ldr	r2, [r3, #12]
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004ac8:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	695a      	ldr	r2, [r3, #20]
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	f042 0201 	orr.w	r2, r2, #1
 8004ad8:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	68da      	ldr	r2, [r3, #12]
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	f042 0220 	orr.w	r2, r2, #32
 8004ae8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004aea:	2300      	movs	r3, #0
}
 8004aec:	4618      	mov	r0, r3
 8004aee:	3714      	adds	r7, #20
 8004af0:	46bd      	mov	sp, r7
 8004af2:	bc80      	pop	{r7}
 8004af4:	4770      	bx	lr

08004af6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004af6:	b480      	push	{r7}
 8004af8:	b095      	sub	sp, #84	; 0x54
 8004afa:	af00      	add	r7, sp, #0
 8004afc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	330c      	adds	r3, #12
 8004b04:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b08:	e853 3f00 	ldrex	r3, [r3]
 8004b0c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004b0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b10:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004b14:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	330c      	adds	r3, #12
 8004b1c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004b1e:	643a      	str	r2, [r7, #64]	; 0x40
 8004b20:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b22:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004b24:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004b26:	e841 2300 	strex	r3, r2, [r1]
 8004b2a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004b2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d1e5      	bne.n	8004afe <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	3314      	adds	r3, #20
 8004b38:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b3a:	6a3b      	ldr	r3, [r7, #32]
 8004b3c:	e853 3f00 	ldrex	r3, [r3]
 8004b40:	61fb      	str	r3, [r7, #28]
   return(result);
 8004b42:	69fb      	ldr	r3, [r7, #28]
 8004b44:	f023 0301 	bic.w	r3, r3, #1
 8004b48:	64bb      	str	r3, [r7, #72]	; 0x48
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	3314      	adds	r3, #20
 8004b50:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004b52:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004b54:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b56:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004b58:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004b5a:	e841 2300 	strex	r3, r2, [r1]
 8004b5e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004b60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d1e5      	bne.n	8004b32 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b6a:	2b01      	cmp	r3, #1
 8004b6c:	d119      	bne.n	8004ba2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	330c      	adds	r3, #12
 8004b74:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	e853 3f00 	ldrex	r3, [r3]
 8004b7c:	60bb      	str	r3, [r7, #8]
   return(result);
 8004b7e:	68bb      	ldr	r3, [r7, #8]
 8004b80:	f023 0310 	bic.w	r3, r3, #16
 8004b84:	647b      	str	r3, [r7, #68]	; 0x44
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	330c      	adds	r3, #12
 8004b8c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004b8e:	61ba      	str	r2, [r7, #24]
 8004b90:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b92:	6979      	ldr	r1, [r7, #20]
 8004b94:	69ba      	ldr	r2, [r7, #24]
 8004b96:	e841 2300 	strex	r3, r2, [r1]
 8004b9a:	613b      	str	r3, [r7, #16]
   return(result);
 8004b9c:	693b      	ldr	r3, [r7, #16]
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d1e5      	bne.n	8004b6e <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	2220      	movs	r2, #32
 8004ba6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	2200      	movs	r2, #0
 8004bae:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004bb0:	bf00      	nop
 8004bb2:	3754      	adds	r7, #84	; 0x54
 8004bb4:	46bd      	mov	sp, r7
 8004bb6:	bc80      	pop	{r7}
 8004bb8:	4770      	bx	lr

08004bba <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004bba:	b580      	push	{r7, lr}
 8004bbc:	b084      	sub	sp, #16
 8004bbe:	af00      	add	r7, sp, #0
 8004bc0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bc6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	2200      	movs	r2, #0
 8004bcc:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	2200      	movs	r2, #0
 8004bd2:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004bd4:	68f8      	ldr	r0, [r7, #12]
 8004bd6:	f7ff fee8 	bl	80049aa <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004bda:	bf00      	nop
 8004bdc:	3710      	adds	r7, #16
 8004bde:	46bd      	mov	sp, r7
 8004be0:	bd80      	pop	{r7, pc}

08004be2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004be2:	b480      	push	{r7}
 8004be4:	b085      	sub	sp, #20
 8004be6:	af00      	add	r7, sp, #0
 8004be8:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004bf0:	b2db      	uxtb	r3, r3
 8004bf2:	2b21      	cmp	r3, #33	; 0x21
 8004bf4:	d13e      	bne.n	8004c74 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	689b      	ldr	r3, [r3, #8]
 8004bfa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004bfe:	d114      	bne.n	8004c2a <UART_Transmit_IT+0x48>
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	691b      	ldr	r3, [r3, #16]
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d110      	bne.n	8004c2a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	6a1b      	ldr	r3, [r3, #32]
 8004c0c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	881b      	ldrh	r3, [r3, #0]
 8004c12:	461a      	mov	r2, r3
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004c1c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	6a1b      	ldr	r3, [r3, #32]
 8004c22:	1c9a      	adds	r2, r3, #2
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	621a      	str	r2, [r3, #32]
 8004c28:	e008      	b.n	8004c3c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	6a1b      	ldr	r3, [r3, #32]
 8004c2e:	1c59      	adds	r1, r3, #1
 8004c30:	687a      	ldr	r2, [r7, #4]
 8004c32:	6211      	str	r1, [r2, #32]
 8004c34:	781a      	ldrb	r2, [r3, #0]
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004c40:	b29b      	uxth	r3, r3
 8004c42:	3b01      	subs	r3, #1
 8004c44:	b29b      	uxth	r3, r3
 8004c46:	687a      	ldr	r2, [r7, #4]
 8004c48:	4619      	mov	r1, r3
 8004c4a:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d10f      	bne.n	8004c70 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	68da      	ldr	r2, [r3, #12]
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004c5e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	68da      	ldr	r2, [r3, #12]
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004c6e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004c70:	2300      	movs	r3, #0
 8004c72:	e000      	b.n	8004c76 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004c74:	2302      	movs	r3, #2
  }
}
 8004c76:	4618      	mov	r0, r3
 8004c78:	3714      	adds	r7, #20
 8004c7a:	46bd      	mov	sp, r7
 8004c7c:	bc80      	pop	{r7}
 8004c7e:	4770      	bx	lr

08004c80 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004c80:	b580      	push	{r7, lr}
 8004c82:	b082      	sub	sp, #8
 8004c84:	af00      	add	r7, sp, #0
 8004c86:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	68da      	ldr	r2, [r3, #12]
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004c96:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	2220      	movs	r2, #32
 8004c9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004ca0:	6878      	ldr	r0, [r7, #4]
 8004ca2:	f7ff fe79 	bl	8004998 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004ca6:	2300      	movs	r3, #0
}
 8004ca8:	4618      	mov	r0, r3
 8004caa:	3708      	adds	r7, #8
 8004cac:	46bd      	mov	sp, r7
 8004cae:	bd80      	pop	{r7, pc}

08004cb0 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004cb0:	b580      	push	{r7, lr}
 8004cb2:	b08c      	sub	sp, #48	; 0x30
 8004cb4:	af00      	add	r7, sp, #0
 8004cb6:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004cbe:	b2db      	uxtb	r3, r3
 8004cc0:	2b22      	cmp	r3, #34	; 0x22
 8004cc2:	f040 80ae 	bne.w	8004e22 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	689b      	ldr	r3, [r3, #8]
 8004cca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004cce:	d117      	bne.n	8004d00 <UART_Receive_IT+0x50>
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	691b      	ldr	r3, [r3, #16]
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d113      	bne.n	8004d00 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004cd8:	2300      	movs	r3, #0
 8004cda:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ce0:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	685b      	ldr	r3, [r3, #4]
 8004ce8:	b29b      	uxth	r3, r3
 8004cea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004cee:	b29a      	uxth	r2, r3
 8004cf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cf2:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cf8:	1c9a      	adds	r2, r3, #2
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	629a      	str	r2, [r3, #40]	; 0x28
 8004cfe:	e026      	b.n	8004d4e <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d04:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8004d06:	2300      	movs	r3, #0
 8004d08:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	689b      	ldr	r3, [r3, #8]
 8004d0e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d12:	d007      	beq.n	8004d24 <UART_Receive_IT+0x74>
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	689b      	ldr	r3, [r3, #8]
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d10a      	bne.n	8004d32 <UART_Receive_IT+0x82>
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	691b      	ldr	r3, [r3, #16]
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d106      	bne.n	8004d32 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	685b      	ldr	r3, [r3, #4]
 8004d2a:	b2da      	uxtb	r2, r3
 8004d2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d2e:	701a      	strb	r2, [r3, #0]
 8004d30:	e008      	b.n	8004d44 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	685b      	ldr	r3, [r3, #4]
 8004d38:	b2db      	uxtb	r3, r3
 8004d3a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004d3e:	b2da      	uxtb	r2, r3
 8004d40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d42:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d48:	1c5a      	adds	r2, r3, #1
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004d52:	b29b      	uxth	r3, r3
 8004d54:	3b01      	subs	r3, #1
 8004d56:	b29b      	uxth	r3, r3
 8004d58:	687a      	ldr	r2, [r7, #4]
 8004d5a:	4619      	mov	r1, r3
 8004d5c:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d15d      	bne.n	8004e1e <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	68da      	ldr	r2, [r3, #12]
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	f022 0220 	bic.w	r2, r2, #32
 8004d70:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	68da      	ldr	r2, [r3, #12]
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004d80:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	695a      	ldr	r2, [r3, #20]
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	f022 0201 	bic.w	r2, r2, #1
 8004d90:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	2220      	movs	r2, #32
 8004d96:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	2200      	movs	r2, #0
 8004d9e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004da4:	2b01      	cmp	r3, #1
 8004da6:	d135      	bne.n	8004e14 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	2200      	movs	r2, #0
 8004dac:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	330c      	adds	r3, #12
 8004db4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004db6:	697b      	ldr	r3, [r7, #20]
 8004db8:	e853 3f00 	ldrex	r3, [r3]
 8004dbc:	613b      	str	r3, [r7, #16]
   return(result);
 8004dbe:	693b      	ldr	r3, [r7, #16]
 8004dc0:	f023 0310 	bic.w	r3, r3, #16
 8004dc4:	627b      	str	r3, [r7, #36]	; 0x24
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	330c      	adds	r3, #12
 8004dcc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004dce:	623a      	str	r2, [r7, #32]
 8004dd0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dd2:	69f9      	ldr	r1, [r7, #28]
 8004dd4:	6a3a      	ldr	r2, [r7, #32]
 8004dd6:	e841 2300 	strex	r3, r2, [r1]
 8004dda:	61bb      	str	r3, [r7, #24]
   return(result);
 8004ddc:	69bb      	ldr	r3, [r7, #24]
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d1e5      	bne.n	8004dae <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	f003 0310 	and.w	r3, r3, #16
 8004dec:	2b10      	cmp	r3, #16
 8004dee:	d10a      	bne.n	8004e06 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004df0:	2300      	movs	r3, #0
 8004df2:	60fb      	str	r3, [r7, #12]
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	60fb      	str	r3, [r7, #12]
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	685b      	ldr	r3, [r3, #4]
 8004e02:	60fb      	str	r3, [r7, #12]
 8004e04:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004e0a:	4619      	mov	r1, r3
 8004e0c:	6878      	ldr	r0, [r7, #4]
 8004e0e:	f7ff fdd5 	bl	80049bc <HAL_UARTEx_RxEventCallback>
 8004e12:	e002      	b.n	8004e1a <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004e14:	6878      	ldr	r0, [r7, #4]
 8004e16:	f7fc f9d3 	bl	80011c0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004e1a:	2300      	movs	r3, #0
 8004e1c:	e002      	b.n	8004e24 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8004e1e:	2300      	movs	r3, #0
 8004e20:	e000      	b.n	8004e24 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8004e22:	2302      	movs	r3, #2
  }
}
 8004e24:	4618      	mov	r0, r3
 8004e26:	3730      	adds	r7, #48	; 0x30
 8004e28:	46bd      	mov	sp, r7
 8004e2a:	bd80      	pop	{r7, pc}

08004e2c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004e2c:	b580      	push	{r7, lr}
 8004e2e:	b084      	sub	sp, #16
 8004e30:	af00      	add	r7, sp, #0
 8004e32:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	691b      	ldr	r3, [r3, #16]
 8004e3a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	68da      	ldr	r2, [r3, #12]
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	430a      	orrs	r2, r1
 8004e48:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	689a      	ldr	r2, [r3, #8]
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	691b      	ldr	r3, [r3, #16]
 8004e52:	431a      	orrs	r2, r3
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	695b      	ldr	r3, [r3, #20]
 8004e58:	4313      	orrs	r3, r2
 8004e5a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	68db      	ldr	r3, [r3, #12]
 8004e62:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8004e66:	f023 030c 	bic.w	r3, r3, #12
 8004e6a:	687a      	ldr	r2, [r7, #4]
 8004e6c:	6812      	ldr	r2, [r2, #0]
 8004e6e:	68b9      	ldr	r1, [r7, #8]
 8004e70:	430b      	orrs	r3, r1
 8004e72:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	695b      	ldr	r3, [r3, #20]
 8004e7a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	699a      	ldr	r2, [r3, #24]
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	430a      	orrs	r2, r1
 8004e88:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	4a2c      	ldr	r2, [pc, #176]	; (8004f40 <UART_SetConfig+0x114>)
 8004e90:	4293      	cmp	r3, r2
 8004e92:	d103      	bne.n	8004e9c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004e94:	f7fe ff4e 	bl	8003d34 <HAL_RCC_GetPCLK2Freq>
 8004e98:	60f8      	str	r0, [r7, #12]
 8004e9a:	e002      	b.n	8004ea2 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004e9c:	f7fe ff36 	bl	8003d0c <HAL_RCC_GetPCLK1Freq>
 8004ea0:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004ea2:	68fa      	ldr	r2, [r7, #12]
 8004ea4:	4613      	mov	r3, r2
 8004ea6:	009b      	lsls	r3, r3, #2
 8004ea8:	4413      	add	r3, r2
 8004eaa:	009a      	lsls	r2, r3, #2
 8004eac:	441a      	add	r2, r3
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	685b      	ldr	r3, [r3, #4]
 8004eb2:	009b      	lsls	r3, r3, #2
 8004eb4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004eb8:	4a22      	ldr	r2, [pc, #136]	; (8004f44 <UART_SetConfig+0x118>)
 8004eba:	fba2 2303 	umull	r2, r3, r2, r3
 8004ebe:	095b      	lsrs	r3, r3, #5
 8004ec0:	0119      	lsls	r1, r3, #4
 8004ec2:	68fa      	ldr	r2, [r7, #12]
 8004ec4:	4613      	mov	r3, r2
 8004ec6:	009b      	lsls	r3, r3, #2
 8004ec8:	4413      	add	r3, r2
 8004eca:	009a      	lsls	r2, r3, #2
 8004ecc:	441a      	add	r2, r3
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	685b      	ldr	r3, [r3, #4]
 8004ed2:	009b      	lsls	r3, r3, #2
 8004ed4:	fbb2 f2f3 	udiv	r2, r2, r3
 8004ed8:	4b1a      	ldr	r3, [pc, #104]	; (8004f44 <UART_SetConfig+0x118>)
 8004eda:	fba3 0302 	umull	r0, r3, r3, r2
 8004ede:	095b      	lsrs	r3, r3, #5
 8004ee0:	2064      	movs	r0, #100	; 0x64
 8004ee2:	fb00 f303 	mul.w	r3, r0, r3
 8004ee6:	1ad3      	subs	r3, r2, r3
 8004ee8:	011b      	lsls	r3, r3, #4
 8004eea:	3332      	adds	r3, #50	; 0x32
 8004eec:	4a15      	ldr	r2, [pc, #84]	; (8004f44 <UART_SetConfig+0x118>)
 8004eee:	fba2 2303 	umull	r2, r3, r2, r3
 8004ef2:	095b      	lsrs	r3, r3, #5
 8004ef4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004ef8:	4419      	add	r1, r3
 8004efa:	68fa      	ldr	r2, [r7, #12]
 8004efc:	4613      	mov	r3, r2
 8004efe:	009b      	lsls	r3, r3, #2
 8004f00:	4413      	add	r3, r2
 8004f02:	009a      	lsls	r2, r3, #2
 8004f04:	441a      	add	r2, r3
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	685b      	ldr	r3, [r3, #4]
 8004f0a:	009b      	lsls	r3, r3, #2
 8004f0c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004f10:	4b0c      	ldr	r3, [pc, #48]	; (8004f44 <UART_SetConfig+0x118>)
 8004f12:	fba3 0302 	umull	r0, r3, r3, r2
 8004f16:	095b      	lsrs	r3, r3, #5
 8004f18:	2064      	movs	r0, #100	; 0x64
 8004f1a:	fb00 f303 	mul.w	r3, r0, r3
 8004f1e:	1ad3      	subs	r3, r2, r3
 8004f20:	011b      	lsls	r3, r3, #4
 8004f22:	3332      	adds	r3, #50	; 0x32
 8004f24:	4a07      	ldr	r2, [pc, #28]	; (8004f44 <UART_SetConfig+0x118>)
 8004f26:	fba2 2303 	umull	r2, r3, r2, r3
 8004f2a:	095b      	lsrs	r3, r3, #5
 8004f2c:	f003 020f 	and.w	r2, r3, #15
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	440a      	add	r2, r1
 8004f36:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004f38:	bf00      	nop
 8004f3a:	3710      	adds	r7, #16
 8004f3c:	46bd      	mov	sp, r7
 8004f3e:	bd80      	pop	{r7, pc}
 8004f40:	40013800 	.word	0x40013800
 8004f44:	51eb851f 	.word	0x51eb851f

08004f48 <__NVIC_SetPriority>:
{
 8004f48:	b480      	push	{r7}
 8004f4a:	b083      	sub	sp, #12
 8004f4c:	af00      	add	r7, sp, #0
 8004f4e:	4603      	mov	r3, r0
 8004f50:	6039      	str	r1, [r7, #0]
 8004f52:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004f54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	db0a      	blt.n	8004f72 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004f5c:	683b      	ldr	r3, [r7, #0]
 8004f5e:	b2da      	uxtb	r2, r3
 8004f60:	490c      	ldr	r1, [pc, #48]	; (8004f94 <__NVIC_SetPriority+0x4c>)
 8004f62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004f66:	0112      	lsls	r2, r2, #4
 8004f68:	b2d2      	uxtb	r2, r2
 8004f6a:	440b      	add	r3, r1
 8004f6c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8004f70:	e00a      	b.n	8004f88 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004f72:	683b      	ldr	r3, [r7, #0]
 8004f74:	b2da      	uxtb	r2, r3
 8004f76:	4908      	ldr	r1, [pc, #32]	; (8004f98 <__NVIC_SetPriority+0x50>)
 8004f78:	79fb      	ldrb	r3, [r7, #7]
 8004f7a:	f003 030f 	and.w	r3, r3, #15
 8004f7e:	3b04      	subs	r3, #4
 8004f80:	0112      	lsls	r2, r2, #4
 8004f82:	b2d2      	uxtb	r2, r2
 8004f84:	440b      	add	r3, r1
 8004f86:	761a      	strb	r2, [r3, #24]
}
 8004f88:	bf00      	nop
 8004f8a:	370c      	adds	r7, #12
 8004f8c:	46bd      	mov	sp, r7
 8004f8e:	bc80      	pop	{r7}
 8004f90:	4770      	bx	lr
 8004f92:	bf00      	nop
 8004f94:	e000e100 	.word	0xe000e100
 8004f98:	e000ed00 	.word	0xe000ed00

08004f9c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8004f9c:	b580      	push	{r7, lr}
 8004f9e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8004fa0:	4b05      	ldr	r3, [pc, #20]	; (8004fb8 <SysTick_Handler+0x1c>)
 8004fa2:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8004fa4:	f002 f994 	bl	80072d0 <xTaskGetSchedulerState>
 8004fa8:	4603      	mov	r3, r0
 8004faa:	2b01      	cmp	r3, #1
 8004fac:	d001      	beq.n	8004fb2 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8004fae:	f003 f82b 	bl	8008008 <xPortSysTickHandler>
  }
}
 8004fb2:	bf00      	nop
 8004fb4:	bd80      	pop	{r7, pc}
 8004fb6:	bf00      	nop
 8004fb8:	e000e010 	.word	0xe000e010

08004fbc <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8004fbc:	b580      	push	{r7, lr}
 8004fbe:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8004fc0:	2100      	movs	r1, #0
 8004fc2:	f06f 0004 	mvn.w	r0, #4
 8004fc6:	f7ff ffbf 	bl	8004f48 <__NVIC_SetPriority>
#endif
}
 8004fca:	bf00      	nop
 8004fcc:	bd80      	pop	{r7, pc}
	...

08004fd0 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8004fd0:	b480      	push	{r7}
 8004fd2:	b083      	sub	sp, #12
 8004fd4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004fd6:	f3ef 8305 	mrs	r3, IPSR
 8004fda:	603b      	str	r3, [r7, #0]
  return(result);
 8004fdc:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d003      	beq.n	8004fea <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8004fe2:	f06f 0305 	mvn.w	r3, #5
 8004fe6:	607b      	str	r3, [r7, #4]
 8004fe8:	e00c      	b.n	8005004 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8004fea:	4b09      	ldr	r3, [pc, #36]	; (8005010 <osKernelInitialize+0x40>)
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d105      	bne.n	8004ffe <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8004ff2:	4b07      	ldr	r3, [pc, #28]	; (8005010 <osKernelInitialize+0x40>)
 8004ff4:	2201      	movs	r2, #1
 8004ff6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8004ff8:	2300      	movs	r3, #0
 8004ffa:	607b      	str	r3, [r7, #4]
 8004ffc:	e002      	b.n	8005004 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8004ffe:	f04f 33ff 	mov.w	r3, #4294967295
 8005002:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005004:	687b      	ldr	r3, [r7, #4]
}
 8005006:	4618      	mov	r0, r3
 8005008:	370c      	adds	r7, #12
 800500a:	46bd      	mov	sp, r7
 800500c:	bc80      	pop	{r7}
 800500e:	4770      	bx	lr
 8005010:	200003a8 	.word	0x200003a8

08005014 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8005014:	b580      	push	{r7, lr}
 8005016:	b082      	sub	sp, #8
 8005018:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800501a:	f3ef 8305 	mrs	r3, IPSR
 800501e:	603b      	str	r3, [r7, #0]
  return(result);
 8005020:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005022:	2b00      	cmp	r3, #0
 8005024:	d003      	beq.n	800502e <osKernelStart+0x1a>
    stat = osErrorISR;
 8005026:	f06f 0305 	mvn.w	r3, #5
 800502a:	607b      	str	r3, [r7, #4]
 800502c:	e010      	b.n	8005050 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800502e:	4b0b      	ldr	r3, [pc, #44]	; (800505c <osKernelStart+0x48>)
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	2b01      	cmp	r3, #1
 8005034:	d109      	bne.n	800504a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8005036:	f7ff ffc1 	bl	8004fbc <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800503a:	4b08      	ldr	r3, [pc, #32]	; (800505c <osKernelStart+0x48>)
 800503c:	2202      	movs	r2, #2
 800503e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8005040:	f001 fcdc 	bl	80069fc <vTaskStartScheduler>
      stat = osOK;
 8005044:	2300      	movs	r3, #0
 8005046:	607b      	str	r3, [r7, #4]
 8005048:	e002      	b.n	8005050 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800504a:	f04f 33ff 	mov.w	r3, #4294967295
 800504e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005050:	687b      	ldr	r3, [r7, #4]
}
 8005052:	4618      	mov	r0, r3
 8005054:	3708      	adds	r7, #8
 8005056:	46bd      	mov	sp, r7
 8005058:	bd80      	pop	{r7, pc}
 800505a:	bf00      	nop
 800505c:	200003a8 	.word	0x200003a8

08005060 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8005060:	b580      	push	{r7, lr}
 8005062:	b08e      	sub	sp, #56	; 0x38
 8005064:	af04      	add	r7, sp, #16
 8005066:	60f8      	str	r0, [r7, #12]
 8005068:	60b9      	str	r1, [r7, #8]
 800506a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800506c:	2300      	movs	r3, #0
 800506e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005070:	f3ef 8305 	mrs	r3, IPSR
 8005074:	617b      	str	r3, [r7, #20]
  return(result);
 8005076:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8005078:	2b00      	cmp	r3, #0
 800507a:	d17e      	bne.n	800517a <osThreadNew+0x11a>
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	2b00      	cmp	r3, #0
 8005080:	d07b      	beq.n	800517a <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8005082:	2380      	movs	r3, #128	; 0x80
 8005084:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8005086:	2318      	movs	r3, #24
 8005088:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800508a:	2300      	movs	r3, #0
 800508c:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800508e:	f04f 33ff 	mov.w	r3, #4294967295
 8005092:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	2b00      	cmp	r3, #0
 8005098:	d045      	beq.n	8005126 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d002      	beq.n	80050a8 <osThreadNew+0x48>
        name = attr->name;
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	699b      	ldr	r3, [r3, #24]
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d002      	beq.n	80050b6 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	699b      	ldr	r3, [r3, #24]
 80050b4:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80050b6:	69fb      	ldr	r3, [r7, #28]
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d008      	beq.n	80050ce <osThreadNew+0x6e>
 80050bc:	69fb      	ldr	r3, [r7, #28]
 80050be:	2b38      	cmp	r3, #56	; 0x38
 80050c0:	d805      	bhi.n	80050ce <osThreadNew+0x6e>
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	685b      	ldr	r3, [r3, #4]
 80050c6:	f003 0301 	and.w	r3, r3, #1
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d001      	beq.n	80050d2 <osThreadNew+0x72>
        return (NULL);
 80050ce:	2300      	movs	r3, #0
 80050d0:	e054      	b.n	800517c <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	695b      	ldr	r3, [r3, #20]
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d003      	beq.n	80050e2 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	695b      	ldr	r3, [r3, #20]
 80050de:	089b      	lsrs	r3, r3, #2
 80050e0:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	689b      	ldr	r3, [r3, #8]
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d00e      	beq.n	8005108 <osThreadNew+0xa8>
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	68db      	ldr	r3, [r3, #12]
 80050ee:	2b5b      	cmp	r3, #91	; 0x5b
 80050f0:	d90a      	bls.n	8005108 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d006      	beq.n	8005108 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	695b      	ldr	r3, [r3, #20]
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d002      	beq.n	8005108 <osThreadNew+0xa8>
        mem = 1;
 8005102:	2301      	movs	r3, #1
 8005104:	61bb      	str	r3, [r7, #24]
 8005106:	e010      	b.n	800512a <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	689b      	ldr	r3, [r3, #8]
 800510c:	2b00      	cmp	r3, #0
 800510e:	d10c      	bne.n	800512a <osThreadNew+0xca>
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	68db      	ldr	r3, [r3, #12]
 8005114:	2b00      	cmp	r3, #0
 8005116:	d108      	bne.n	800512a <osThreadNew+0xca>
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	691b      	ldr	r3, [r3, #16]
 800511c:	2b00      	cmp	r3, #0
 800511e:	d104      	bne.n	800512a <osThreadNew+0xca>
          mem = 0;
 8005120:	2300      	movs	r3, #0
 8005122:	61bb      	str	r3, [r7, #24]
 8005124:	e001      	b.n	800512a <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8005126:	2300      	movs	r3, #0
 8005128:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800512a:	69bb      	ldr	r3, [r7, #24]
 800512c:	2b01      	cmp	r3, #1
 800512e:	d110      	bne.n	8005152 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8005134:	687a      	ldr	r2, [r7, #4]
 8005136:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005138:	9202      	str	r2, [sp, #8]
 800513a:	9301      	str	r3, [sp, #4]
 800513c:	69fb      	ldr	r3, [r7, #28]
 800513e:	9300      	str	r3, [sp, #0]
 8005140:	68bb      	ldr	r3, [r7, #8]
 8005142:	6a3a      	ldr	r2, [r7, #32]
 8005144:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005146:	68f8      	ldr	r0, [r7, #12]
 8005148:	f001 fa38 	bl	80065bc <xTaskCreateStatic>
 800514c:	4603      	mov	r3, r0
 800514e:	613b      	str	r3, [r7, #16]
 8005150:	e013      	b.n	800517a <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8005152:	69bb      	ldr	r3, [r7, #24]
 8005154:	2b00      	cmp	r3, #0
 8005156:	d110      	bne.n	800517a <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8005158:	6a3b      	ldr	r3, [r7, #32]
 800515a:	b29a      	uxth	r2, r3
 800515c:	f107 0310 	add.w	r3, r7, #16
 8005160:	9301      	str	r3, [sp, #4]
 8005162:	69fb      	ldr	r3, [r7, #28]
 8005164:	9300      	str	r3, [sp, #0]
 8005166:	68bb      	ldr	r3, [r7, #8]
 8005168:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800516a:	68f8      	ldr	r0, [r7, #12]
 800516c:	f001 fa83 	bl	8006676 <xTaskCreate>
 8005170:	4603      	mov	r3, r0
 8005172:	2b01      	cmp	r3, #1
 8005174:	d001      	beq.n	800517a <osThreadNew+0x11a>
            hTask = NULL;
 8005176:	2300      	movs	r3, #0
 8005178:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800517a:	693b      	ldr	r3, [r7, #16]
}
 800517c:	4618      	mov	r0, r3
 800517e:	3728      	adds	r7, #40	; 0x28
 8005180:	46bd      	mov	sp, r7
 8005182:	bd80      	pop	{r7, pc}

08005184 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8005184:	b580      	push	{r7, lr}
 8005186:	b08a      	sub	sp, #40	; 0x28
 8005188:	af02      	add	r7, sp, #8
 800518a:	60f8      	str	r0, [r7, #12]
 800518c:	60b9      	str	r1, [r7, #8]
 800518e:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8005190:	2300      	movs	r3, #0
 8005192:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005194:	f3ef 8305 	mrs	r3, IPSR
 8005198:	613b      	str	r3, [r7, #16]
  return(result);
 800519a:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800519c:	2b00      	cmp	r3, #0
 800519e:	d175      	bne.n	800528c <osSemaphoreNew+0x108>
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d072      	beq.n	800528c <osSemaphoreNew+0x108>
 80051a6:	68ba      	ldr	r2, [r7, #8]
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	429a      	cmp	r2, r3
 80051ac:	d86e      	bhi.n	800528c <osSemaphoreNew+0x108>
    mem = -1;
 80051ae:	f04f 33ff 	mov.w	r3, #4294967295
 80051b2:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d015      	beq.n	80051e6 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	689b      	ldr	r3, [r3, #8]
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d006      	beq.n	80051d0 <osSemaphoreNew+0x4c>
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	68db      	ldr	r3, [r3, #12]
 80051c6:	2b4f      	cmp	r3, #79	; 0x4f
 80051c8:	d902      	bls.n	80051d0 <osSemaphoreNew+0x4c>
        mem = 1;
 80051ca:	2301      	movs	r3, #1
 80051cc:	61bb      	str	r3, [r7, #24]
 80051ce:	e00c      	b.n	80051ea <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	689b      	ldr	r3, [r3, #8]
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d108      	bne.n	80051ea <osSemaphoreNew+0x66>
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	68db      	ldr	r3, [r3, #12]
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d104      	bne.n	80051ea <osSemaphoreNew+0x66>
          mem = 0;
 80051e0:	2300      	movs	r3, #0
 80051e2:	61bb      	str	r3, [r7, #24]
 80051e4:	e001      	b.n	80051ea <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 80051e6:	2300      	movs	r3, #0
 80051e8:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 80051ea:	69bb      	ldr	r3, [r7, #24]
 80051ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051f0:	d04c      	beq.n	800528c <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	2b01      	cmp	r3, #1
 80051f6:	d128      	bne.n	800524a <osSemaphoreNew+0xc6>
        if (mem == 1) {
 80051f8:	69bb      	ldr	r3, [r7, #24]
 80051fa:	2b01      	cmp	r3, #1
 80051fc:	d10a      	bne.n	8005214 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	689b      	ldr	r3, [r3, #8]
 8005202:	2203      	movs	r2, #3
 8005204:	9200      	str	r2, [sp, #0]
 8005206:	2200      	movs	r2, #0
 8005208:	2100      	movs	r1, #0
 800520a:	2001      	movs	r0, #1
 800520c:	f000 fa34 	bl	8005678 <xQueueGenericCreateStatic>
 8005210:	61f8      	str	r0, [r7, #28]
 8005212:	e005      	b.n	8005220 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 8005214:	2203      	movs	r2, #3
 8005216:	2100      	movs	r1, #0
 8005218:	2001      	movs	r0, #1
 800521a:	f000 faa5 	bl	8005768 <xQueueGenericCreate>
 800521e:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8005220:	69fb      	ldr	r3, [r7, #28]
 8005222:	2b00      	cmp	r3, #0
 8005224:	d022      	beq.n	800526c <osSemaphoreNew+0xe8>
 8005226:	68bb      	ldr	r3, [r7, #8]
 8005228:	2b00      	cmp	r3, #0
 800522a:	d01f      	beq.n	800526c <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800522c:	2300      	movs	r3, #0
 800522e:	2200      	movs	r2, #0
 8005230:	2100      	movs	r1, #0
 8005232:	69f8      	ldr	r0, [r7, #28]
 8005234:	f000 fb60 	bl	80058f8 <xQueueGenericSend>
 8005238:	4603      	mov	r3, r0
 800523a:	2b01      	cmp	r3, #1
 800523c:	d016      	beq.n	800526c <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 800523e:	69f8      	ldr	r0, [r7, #28]
 8005240:	f000 ffec 	bl	800621c <vQueueDelete>
            hSemaphore = NULL;
 8005244:	2300      	movs	r3, #0
 8005246:	61fb      	str	r3, [r7, #28]
 8005248:	e010      	b.n	800526c <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 800524a:	69bb      	ldr	r3, [r7, #24]
 800524c:	2b01      	cmp	r3, #1
 800524e:	d108      	bne.n	8005262 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	689b      	ldr	r3, [r3, #8]
 8005254:	461a      	mov	r2, r3
 8005256:	68b9      	ldr	r1, [r7, #8]
 8005258:	68f8      	ldr	r0, [r7, #12]
 800525a:	f000 fae2 	bl	8005822 <xQueueCreateCountingSemaphoreStatic>
 800525e:	61f8      	str	r0, [r7, #28]
 8005260:	e004      	b.n	800526c <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8005262:	68b9      	ldr	r1, [r7, #8]
 8005264:	68f8      	ldr	r0, [r7, #12]
 8005266:	f000 fb13 	bl	8005890 <xQueueCreateCountingSemaphore>
 800526a:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800526c:	69fb      	ldr	r3, [r7, #28]
 800526e:	2b00      	cmp	r3, #0
 8005270:	d00c      	beq.n	800528c <osSemaphoreNew+0x108>
        if (attr != NULL) {
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	2b00      	cmp	r3, #0
 8005276:	d003      	beq.n	8005280 <osSemaphoreNew+0xfc>
          name = attr->name;
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	617b      	str	r3, [r7, #20]
 800527e:	e001      	b.n	8005284 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 8005280:	2300      	movs	r3, #0
 8005282:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8005284:	6979      	ldr	r1, [r7, #20]
 8005286:	69f8      	ldr	r0, [r7, #28]
 8005288:	f001 f912 	bl	80064b0 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 800528c:	69fb      	ldr	r3, [r7, #28]
}
 800528e:	4618      	mov	r0, r3
 8005290:	3720      	adds	r7, #32
 8005292:	46bd      	mov	sp, r7
 8005294:	bd80      	pop	{r7, pc}
	...

08005298 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8005298:	b580      	push	{r7, lr}
 800529a:	b086      	sub	sp, #24
 800529c:	af00      	add	r7, sp, #0
 800529e:	6078      	str	r0, [r7, #4]
 80052a0:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 80052a6:	2300      	movs	r3, #0
 80052a8:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 80052aa:	693b      	ldr	r3, [r7, #16]
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d103      	bne.n	80052b8 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 80052b0:	f06f 0303 	mvn.w	r3, #3
 80052b4:	617b      	str	r3, [r7, #20]
 80052b6:	e039      	b.n	800532c <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80052b8:	f3ef 8305 	mrs	r3, IPSR
 80052bc:	60fb      	str	r3, [r7, #12]
  return(result);
 80052be:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d022      	beq.n	800530a <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 80052c4:	683b      	ldr	r3, [r7, #0]
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d003      	beq.n	80052d2 <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 80052ca:	f06f 0303 	mvn.w	r3, #3
 80052ce:	617b      	str	r3, [r7, #20]
 80052d0:	e02c      	b.n	800532c <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 80052d2:	2300      	movs	r3, #0
 80052d4:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 80052d6:	f107 0308 	add.w	r3, r7, #8
 80052da:	461a      	mov	r2, r3
 80052dc:	2100      	movs	r1, #0
 80052de:	6938      	ldr	r0, [r7, #16]
 80052e0:	f000 ff1c 	bl	800611c <xQueueReceiveFromISR>
 80052e4:	4603      	mov	r3, r0
 80052e6:	2b01      	cmp	r3, #1
 80052e8:	d003      	beq.n	80052f2 <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 80052ea:	f06f 0302 	mvn.w	r3, #2
 80052ee:	617b      	str	r3, [r7, #20]
 80052f0:	e01c      	b.n	800532c <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 80052f2:	68bb      	ldr	r3, [r7, #8]
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d019      	beq.n	800532c <osSemaphoreAcquire+0x94>
 80052f8:	4b0f      	ldr	r3, [pc, #60]	; (8005338 <osSemaphoreAcquire+0xa0>)
 80052fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80052fe:	601a      	str	r2, [r3, #0]
 8005300:	f3bf 8f4f 	dsb	sy
 8005304:	f3bf 8f6f 	isb	sy
 8005308:	e010      	b.n	800532c <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800530a:	6839      	ldr	r1, [r7, #0]
 800530c:	6938      	ldr	r0, [r7, #16]
 800530e:	f000 fdf9 	bl	8005f04 <xQueueSemaphoreTake>
 8005312:	4603      	mov	r3, r0
 8005314:	2b01      	cmp	r3, #1
 8005316:	d009      	beq.n	800532c <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 8005318:	683b      	ldr	r3, [r7, #0]
 800531a:	2b00      	cmp	r3, #0
 800531c:	d003      	beq.n	8005326 <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 800531e:	f06f 0301 	mvn.w	r3, #1
 8005322:	617b      	str	r3, [r7, #20]
 8005324:	e002      	b.n	800532c <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 8005326:	f06f 0302 	mvn.w	r3, #2
 800532a:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 800532c:	697b      	ldr	r3, [r7, #20]
}
 800532e:	4618      	mov	r0, r3
 8005330:	3718      	adds	r7, #24
 8005332:	46bd      	mov	sp, r7
 8005334:	bd80      	pop	{r7, pc}
 8005336:	bf00      	nop
 8005338:	e000ed04 	.word	0xe000ed04

0800533c <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 800533c:	b580      	push	{r7, lr}
 800533e:	b086      	sub	sp, #24
 8005340:	af00      	add	r7, sp, #0
 8005342:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8005348:	2300      	movs	r3, #0
 800534a:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800534c:	693b      	ldr	r3, [r7, #16]
 800534e:	2b00      	cmp	r3, #0
 8005350:	d103      	bne.n	800535a <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 8005352:	f06f 0303 	mvn.w	r3, #3
 8005356:	617b      	str	r3, [r7, #20]
 8005358:	e02c      	b.n	80053b4 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800535a:	f3ef 8305 	mrs	r3, IPSR
 800535e:	60fb      	str	r3, [r7, #12]
  return(result);
 8005360:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8005362:	2b00      	cmp	r3, #0
 8005364:	d01a      	beq.n	800539c <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 8005366:	2300      	movs	r3, #0
 8005368:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800536a:	f107 0308 	add.w	r3, r7, #8
 800536e:	4619      	mov	r1, r3
 8005370:	6938      	ldr	r0, [r7, #16]
 8005372:	f000 fc5a 	bl	8005c2a <xQueueGiveFromISR>
 8005376:	4603      	mov	r3, r0
 8005378:	2b01      	cmp	r3, #1
 800537a:	d003      	beq.n	8005384 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 800537c:	f06f 0302 	mvn.w	r3, #2
 8005380:	617b      	str	r3, [r7, #20]
 8005382:	e017      	b.n	80053b4 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 8005384:	68bb      	ldr	r3, [r7, #8]
 8005386:	2b00      	cmp	r3, #0
 8005388:	d014      	beq.n	80053b4 <osSemaphoreRelease+0x78>
 800538a:	4b0d      	ldr	r3, [pc, #52]	; (80053c0 <osSemaphoreRelease+0x84>)
 800538c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005390:	601a      	str	r2, [r3, #0]
 8005392:	f3bf 8f4f 	dsb	sy
 8005396:	f3bf 8f6f 	isb	sy
 800539a:	e00b      	b.n	80053b4 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800539c:	2300      	movs	r3, #0
 800539e:	2200      	movs	r2, #0
 80053a0:	2100      	movs	r1, #0
 80053a2:	6938      	ldr	r0, [r7, #16]
 80053a4:	f000 faa8 	bl	80058f8 <xQueueGenericSend>
 80053a8:	4603      	mov	r3, r0
 80053aa:	2b01      	cmp	r3, #1
 80053ac:	d002      	beq.n	80053b4 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 80053ae:	f06f 0302 	mvn.w	r3, #2
 80053b2:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 80053b4:	697b      	ldr	r3, [r7, #20]
}
 80053b6:	4618      	mov	r0, r3
 80053b8:	3718      	adds	r7, #24
 80053ba:	46bd      	mov	sp, r7
 80053bc:	bd80      	pop	{r7, pc}
 80053be:	bf00      	nop
 80053c0:	e000ed04 	.word	0xe000ed04

080053c4 <vApplicationStackOverflowHook>:

/**
  Dummy implementation of the callback function vApplicationStackOverflowHook().
*/
#if (configCHECK_FOR_STACK_OVERFLOW > 0)
__WEAK void vApplicationStackOverflowHook (TaskHandle_t xTask, signed char *pcTaskName) {
 80053c4:	b480      	push	{r7}
 80053c6:	b085      	sub	sp, #20
 80053c8:	af00      	add	r7, sp, #0
 80053ca:	6078      	str	r0, [r7, #4]
 80053cc:	6039      	str	r1, [r7, #0]

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80053ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053d2:	f383 8811 	msr	BASEPRI, r3
 80053d6:	f3bf 8f6f 	isb	sy
 80053da:	f3bf 8f4f 	dsb	sy
 80053de:	60fb      	str	r3, [r7, #12]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80053e0:	bf00      	nop
  (void)xTask;
  (void)pcTaskName;
  configASSERT(0);
 80053e2:	e7fe      	b.n	80053e2 <vApplicationStackOverflowHook+0x1e>

080053e4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80053e4:	b480      	push	{r7}
 80053e6:	b085      	sub	sp, #20
 80053e8:	af00      	add	r7, sp, #0
 80053ea:	60f8      	str	r0, [r7, #12]
 80053ec:	60b9      	str	r1, [r7, #8]
 80053ee:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	4a06      	ldr	r2, [pc, #24]	; (800540c <vApplicationGetIdleTaskMemory+0x28>)
 80053f4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80053f6:	68bb      	ldr	r3, [r7, #8]
 80053f8:	4a05      	ldr	r2, [pc, #20]	; (8005410 <vApplicationGetIdleTaskMemory+0x2c>)
 80053fa:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	2280      	movs	r2, #128	; 0x80
 8005400:	601a      	str	r2, [r3, #0]
}
 8005402:	bf00      	nop
 8005404:	3714      	adds	r7, #20
 8005406:	46bd      	mov	sp, r7
 8005408:	bc80      	pop	{r7}
 800540a:	4770      	bx	lr
 800540c:	200003ac 	.word	0x200003ac
 8005410:	20000408 	.word	0x20000408

08005414 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8005414:	b480      	push	{r7}
 8005416:	b085      	sub	sp, #20
 8005418:	af00      	add	r7, sp, #0
 800541a:	60f8      	str	r0, [r7, #12]
 800541c:	60b9      	str	r1, [r7, #8]
 800541e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	4a07      	ldr	r2, [pc, #28]	; (8005440 <vApplicationGetTimerTaskMemory+0x2c>)
 8005424:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8005426:	68bb      	ldr	r3, [r7, #8]
 8005428:	4a06      	ldr	r2, [pc, #24]	; (8005444 <vApplicationGetTimerTaskMemory+0x30>)
 800542a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005432:	601a      	str	r2, [r3, #0]
}
 8005434:	bf00      	nop
 8005436:	3714      	adds	r7, #20
 8005438:	46bd      	mov	sp, r7
 800543a:	bc80      	pop	{r7}
 800543c:	4770      	bx	lr
 800543e:	bf00      	nop
 8005440:	20000608 	.word	0x20000608
 8005444:	20000664 	.word	0x20000664

08005448 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005448:	b480      	push	{r7}
 800544a:	b083      	sub	sp, #12
 800544c:	af00      	add	r7, sp, #0
 800544e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	f103 0208 	add.w	r2, r3, #8
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	f04f 32ff 	mov.w	r2, #4294967295
 8005460:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	f103 0208 	add.w	r2, r3, #8
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	f103 0208 	add.w	r2, r3, #8
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	2200      	movs	r2, #0
 800547a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800547c:	bf00      	nop
 800547e:	370c      	adds	r7, #12
 8005480:	46bd      	mov	sp, r7
 8005482:	bc80      	pop	{r7}
 8005484:	4770      	bx	lr

08005486 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005486:	b480      	push	{r7}
 8005488:	b083      	sub	sp, #12
 800548a:	af00      	add	r7, sp, #0
 800548c:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	2200      	movs	r2, #0
 8005492:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005494:	bf00      	nop
 8005496:	370c      	adds	r7, #12
 8005498:	46bd      	mov	sp, r7
 800549a:	bc80      	pop	{r7}
 800549c:	4770      	bx	lr

0800549e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800549e:	b480      	push	{r7}
 80054a0:	b085      	sub	sp, #20
 80054a2:	af00      	add	r7, sp, #0
 80054a4:	6078      	str	r0, [r7, #4]
 80054a6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	685b      	ldr	r3, [r3, #4]
 80054ac:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80054ae:	683b      	ldr	r3, [r7, #0]
 80054b0:	68fa      	ldr	r2, [r7, #12]
 80054b2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	689a      	ldr	r2, [r3, #8]
 80054b8:	683b      	ldr	r3, [r7, #0]
 80054ba:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	689b      	ldr	r3, [r3, #8]
 80054c0:	683a      	ldr	r2, [r7, #0]
 80054c2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	683a      	ldr	r2, [r7, #0]
 80054c8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80054ca:	683b      	ldr	r3, [r7, #0]
 80054cc:	687a      	ldr	r2, [r7, #4]
 80054ce:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	1c5a      	adds	r2, r3, #1
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	601a      	str	r2, [r3, #0]
}
 80054da:	bf00      	nop
 80054dc:	3714      	adds	r7, #20
 80054de:	46bd      	mov	sp, r7
 80054e0:	bc80      	pop	{r7}
 80054e2:	4770      	bx	lr

080054e4 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80054e4:	b480      	push	{r7}
 80054e6:	b085      	sub	sp, #20
 80054e8:	af00      	add	r7, sp, #0
 80054ea:	6078      	str	r0, [r7, #4]
 80054ec:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80054ee:	683b      	ldr	r3, [r7, #0]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80054f4:	68bb      	ldr	r3, [r7, #8]
 80054f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054fa:	d103      	bne.n	8005504 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	691b      	ldr	r3, [r3, #16]
 8005500:	60fb      	str	r3, [r7, #12]
 8005502:	e00c      	b.n	800551e <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	3308      	adds	r3, #8
 8005508:	60fb      	str	r3, [r7, #12]
 800550a:	e002      	b.n	8005512 <vListInsert+0x2e>
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	685b      	ldr	r3, [r3, #4]
 8005510:	60fb      	str	r3, [r7, #12]
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	685b      	ldr	r3, [r3, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	68ba      	ldr	r2, [r7, #8]
 800551a:	429a      	cmp	r2, r3
 800551c:	d2f6      	bcs.n	800550c <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	685a      	ldr	r2, [r3, #4]
 8005522:	683b      	ldr	r3, [r7, #0]
 8005524:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005526:	683b      	ldr	r3, [r7, #0]
 8005528:	685b      	ldr	r3, [r3, #4]
 800552a:	683a      	ldr	r2, [r7, #0]
 800552c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800552e:	683b      	ldr	r3, [r7, #0]
 8005530:	68fa      	ldr	r2, [r7, #12]
 8005532:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	683a      	ldr	r2, [r7, #0]
 8005538:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800553a:	683b      	ldr	r3, [r7, #0]
 800553c:	687a      	ldr	r2, [r7, #4]
 800553e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	1c5a      	adds	r2, r3, #1
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	601a      	str	r2, [r3, #0]
}
 800554a:	bf00      	nop
 800554c:	3714      	adds	r7, #20
 800554e:	46bd      	mov	sp, r7
 8005550:	bc80      	pop	{r7}
 8005552:	4770      	bx	lr

08005554 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005554:	b480      	push	{r7}
 8005556:	b085      	sub	sp, #20
 8005558:	af00      	add	r7, sp, #0
 800555a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	691b      	ldr	r3, [r3, #16]
 8005560:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	685b      	ldr	r3, [r3, #4]
 8005566:	687a      	ldr	r2, [r7, #4]
 8005568:	6892      	ldr	r2, [r2, #8]
 800556a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	689b      	ldr	r3, [r3, #8]
 8005570:	687a      	ldr	r2, [r7, #4]
 8005572:	6852      	ldr	r2, [r2, #4]
 8005574:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	685b      	ldr	r3, [r3, #4]
 800557a:	687a      	ldr	r2, [r7, #4]
 800557c:	429a      	cmp	r2, r3
 800557e:	d103      	bne.n	8005588 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	689a      	ldr	r2, [r3, #8]
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	2200      	movs	r2, #0
 800558c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	1e5a      	subs	r2, r3, #1
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	681b      	ldr	r3, [r3, #0]
}
 800559c:	4618      	mov	r0, r3
 800559e:	3714      	adds	r7, #20
 80055a0:	46bd      	mov	sp, r7
 80055a2:	bc80      	pop	{r7}
 80055a4:	4770      	bx	lr
	...

080055a8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80055a8:	b580      	push	{r7, lr}
 80055aa:	b084      	sub	sp, #16
 80055ac:	af00      	add	r7, sp, #0
 80055ae:	6078      	str	r0, [r7, #4]
 80055b0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d10a      	bne.n	80055d2 <xQueueGenericReset+0x2a>
	__asm volatile
 80055bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055c0:	f383 8811 	msr	BASEPRI, r3
 80055c4:	f3bf 8f6f 	isb	sy
 80055c8:	f3bf 8f4f 	dsb	sy
 80055cc:	60bb      	str	r3, [r7, #8]
}
 80055ce:	bf00      	nop
 80055d0:	e7fe      	b.n	80055d0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80055d2:	f002 fc9b 	bl	8007f0c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	681a      	ldr	r2, [r3, #0]
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80055de:	68f9      	ldr	r1, [r7, #12]
 80055e0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80055e2:	fb01 f303 	mul.w	r3, r1, r3
 80055e6:	441a      	add	r2, r3
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	2200      	movs	r2, #0
 80055f0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	681a      	ldr	r2, [r3, #0]
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	681a      	ldr	r2, [r3, #0]
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005602:	3b01      	subs	r3, #1
 8005604:	68f9      	ldr	r1, [r7, #12]
 8005606:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005608:	fb01 f303 	mul.w	r3, r1, r3
 800560c:	441a      	add	r2, r3
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	22ff      	movs	r2, #255	; 0xff
 8005616:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	22ff      	movs	r2, #255	; 0xff
 800561e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8005622:	683b      	ldr	r3, [r7, #0]
 8005624:	2b00      	cmp	r3, #0
 8005626:	d114      	bne.n	8005652 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	691b      	ldr	r3, [r3, #16]
 800562c:	2b00      	cmp	r3, #0
 800562e:	d01a      	beq.n	8005666 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	3310      	adds	r3, #16
 8005634:	4618      	mov	r0, r3
 8005636:	f001 fc8d 	bl	8006f54 <xTaskRemoveFromEventList>
 800563a:	4603      	mov	r3, r0
 800563c:	2b00      	cmp	r3, #0
 800563e:	d012      	beq.n	8005666 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005640:	4b0c      	ldr	r3, [pc, #48]	; (8005674 <xQueueGenericReset+0xcc>)
 8005642:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005646:	601a      	str	r2, [r3, #0]
 8005648:	f3bf 8f4f 	dsb	sy
 800564c:	f3bf 8f6f 	isb	sy
 8005650:	e009      	b.n	8005666 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	3310      	adds	r3, #16
 8005656:	4618      	mov	r0, r3
 8005658:	f7ff fef6 	bl	8005448 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	3324      	adds	r3, #36	; 0x24
 8005660:	4618      	mov	r0, r3
 8005662:	f7ff fef1 	bl	8005448 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005666:	f002 fc81 	bl	8007f6c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800566a:	2301      	movs	r3, #1
}
 800566c:	4618      	mov	r0, r3
 800566e:	3710      	adds	r7, #16
 8005670:	46bd      	mov	sp, r7
 8005672:	bd80      	pop	{r7, pc}
 8005674:	e000ed04 	.word	0xe000ed04

08005678 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005678:	b580      	push	{r7, lr}
 800567a:	b08e      	sub	sp, #56	; 0x38
 800567c:	af02      	add	r7, sp, #8
 800567e:	60f8      	str	r0, [r7, #12]
 8005680:	60b9      	str	r1, [r7, #8]
 8005682:	607a      	str	r2, [r7, #4]
 8005684:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	2b00      	cmp	r3, #0
 800568a:	d10a      	bne.n	80056a2 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800568c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005690:	f383 8811 	msr	BASEPRI, r3
 8005694:	f3bf 8f6f 	isb	sy
 8005698:	f3bf 8f4f 	dsb	sy
 800569c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800569e:	bf00      	nop
 80056a0:	e7fe      	b.n	80056a0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80056a2:	683b      	ldr	r3, [r7, #0]
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d10a      	bne.n	80056be <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80056a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056ac:	f383 8811 	msr	BASEPRI, r3
 80056b0:	f3bf 8f6f 	isb	sy
 80056b4:	f3bf 8f4f 	dsb	sy
 80056b8:	627b      	str	r3, [r7, #36]	; 0x24
}
 80056ba:	bf00      	nop
 80056bc:	e7fe      	b.n	80056bc <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d002      	beq.n	80056ca <xQueueGenericCreateStatic+0x52>
 80056c4:	68bb      	ldr	r3, [r7, #8]
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d001      	beq.n	80056ce <xQueueGenericCreateStatic+0x56>
 80056ca:	2301      	movs	r3, #1
 80056cc:	e000      	b.n	80056d0 <xQueueGenericCreateStatic+0x58>
 80056ce:	2300      	movs	r3, #0
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d10a      	bne.n	80056ea <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80056d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056d8:	f383 8811 	msr	BASEPRI, r3
 80056dc:	f3bf 8f6f 	isb	sy
 80056e0:	f3bf 8f4f 	dsb	sy
 80056e4:	623b      	str	r3, [r7, #32]
}
 80056e6:	bf00      	nop
 80056e8:	e7fe      	b.n	80056e8 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d102      	bne.n	80056f6 <xQueueGenericCreateStatic+0x7e>
 80056f0:	68bb      	ldr	r3, [r7, #8]
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d101      	bne.n	80056fa <xQueueGenericCreateStatic+0x82>
 80056f6:	2301      	movs	r3, #1
 80056f8:	e000      	b.n	80056fc <xQueueGenericCreateStatic+0x84>
 80056fa:	2300      	movs	r3, #0
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d10a      	bne.n	8005716 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8005700:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005704:	f383 8811 	msr	BASEPRI, r3
 8005708:	f3bf 8f6f 	isb	sy
 800570c:	f3bf 8f4f 	dsb	sy
 8005710:	61fb      	str	r3, [r7, #28]
}
 8005712:	bf00      	nop
 8005714:	e7fe      	b.n	8005714 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8005716:	2350      	movs	r3, #80	; 0x50
 8005718:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800571a:	697b      	ldr	r3, [r7, #20]
 800571c:	2b50      	cmp	r3, #80	; 0x50
 800571e:	d00a      	beq.n	8005736 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8005720:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005724:	f383 8811 	msr	BASEPRI, r3
 8005728:	f3bf 8f6f 	isb	sy
 800572c:	f3bf 8f4f 	dsb	sy
 8005730:	61bb      	str	r3, [r7, #24]
}
 8005732:	bf00      	nop
 8005734:	e7fe      	b.n	8005734 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8005736:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005738:	683b      	ldr	r3, [r7, #0]
 800573a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800573c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800573e:	2b00      	cmp	r3, #0
 8005740:	d00d      	beq.n	800575e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005742:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005744:	2201      	movs	r2, #1
 8005746:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800574a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800574e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005750:	9300      	str	r3, [sp, #0]
 8005752:	4613      	mov	r3, r2
 8005754:	687a      	ldr	r2, [r7, #4]
 8005756:	68b9      	ldr	r1, [r7, #8]
 8005758:	68f8      	ldr	r0, [r7, #12]
 800575a:	f000 f83f 	bl	80057dc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800575e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8005760:	4618      	mov	r0, r3
 8005762:	3730      	adds	r7, #48	; 0x30
 8005764:	46bd      	mov	sp, r7
 8005766:	bd80      	pop	{r7, pc}

08005768 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8005768:	b580      	push	{r7, lr}
 800576a:	b08a      	sub	sp, #40	; 0x28
 800576c:	af02      	add	r7, sp, #8
 800576e:	60f8      	str	r0, [r7, #12]
 8005770:	60b9      	str	r1, [r7, #8]
 8005772:	4613      	mov	r3, r2
 8005774:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	2b00      	cmp	r3, #0
 800577a:	d10a      	bne.n	8005792 <xQueueGenericCreate+0x2a>
	__asm volatile
 800577c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005780:	f383 8811 	msr	BASEPRI, r3
 8005784:	f3bf 8f6f 	isb	sy
 8005788:	f3bf 8f4f 	dsb	sy
 800578c:	613b      	str	r3, [r7, #16]
}
 800578e:	bf00      	nop
 8005790:	e7fe      	b.n	8005790 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	68ba      	ldr	r2, [r7, #8]
 8005796:	fb02 f303 	mul.w	r3, r2, r3
 800579a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800579c:	69fb      	ldr	r3, [r7, #28]
 800579e:	3350      	adds	r3, #80	; 0x50
 80057a0:	4618      	mov	r0, r3
 80057a2:	f002 fcb3 	bl	800810c <pvPortMalloc>
 80057a6:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80057a8:	69bb      	ldr	r3, [r7, #24]
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d011      	beq.n	80057d2 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80057ae:	69bb      	ldr	r3, [r7, #24]
 80057b0:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80057b2:	697b      	ldr	r3, [r7, #20]
 80057b4:	3350      	adds	r3, #80	; 0x50
 80057b6:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80057b8:	69bb      	ldr	r3, [r7, #24]
 80057ba:	2200      	movs	r2, #0
 80057bc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80057c0:	79fa      	ldrb	r2, [r7, #7]
 80057c2:	69bb      	ldr	r3, [r7, #24]
 80057c4:	9300      	str	r3, [sp, #0]
 80057c6:	4613      	mov	r3, r2
 80057c8:	697a      	ldr	r2, [r7, #20]
 80057ca:	68b9      	ldr	r1, [r7, #8]
 80057cc:	68f8      	ldr	r0, [r7, #12]
 80057ce:	f000 f805 	bl	80057dc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80057d2:	69bb      	ldr	r3, [r7, #24]
	}
 80057d4:	4618      	mov	r0, r3
 80057d6:	3720      	adds	r7, #32
 80057d8:	46bd      	mov	sp, r7
 80057da:	bd80      	pop	{r7, pc}

080057dc <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80057dc:	b580      	push	{r7, lr}
 80057de:	b084      	sub	sp, #16
 80057e0:	af00      	add	r7, sp, #0
 80057e2:	60f8      	str	r0, [r7, #12]
 80057e4:	60b9      	str	r1, [r7, #8]
 80057e6:	607a      	str	r2, [r7, #4]
 80057e8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80057ea:	68bb      	ldr	r3, [r7, #8]
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d103      	bne.n	80057f8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80057f0:	69bb      	ldr	r3, [r7, #24]
 80057f2:	69ba      	ldr	r2, [r7, #24]
 80057f4:	601a      	str	r2, [r3, #0]
 80057f6:	e002      	b.n	80057fe <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80057f8:	69bb      	ldr	r3, [r7, #24]
 80057fa:	687a      	ldr	r2, [r7, #4]
 80057fc:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80057fe:	69bb      	ldr	r3, [r7, #24]
 8005800:	68fa      	ldr	r2, [r7, #12]
 8005802:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005804:	69bb      	ldr	r3, [r7, #24]
 8005806:	68ba      	ldr	r2, [r7, #8]
 8005808:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800580a:	2101      	movs	r1, #1
 800580c:	69b8      	ldr	r0, [r7, #24]
 800580e:	f7ff fecb 	bl	80055a8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8005812:	69bb      	ldr	r3, [r7, #24]
 8005814:	78fa      	ldrb	r2, [r7, #3]
 8005816:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800581a:	bf00      	nop
 800581c:	3710      	adds	r7, #16
 800581e:	46bd      	mov	sp, r7
 8005820:	bd80      	pop	{r7, pc}

08005822 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8005822:	b580      	push	{r7, lr}
 8005824:	b08a      	sub	sp, #40	; 0x28
 8005826:	af02      	add	r7, sp, #8
 8005828:	60f8      	str	r0, [r7, #12]
 800582a:	60b9      	str	r1, [r7, #8]
 800582c:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	2b00      	cmp	r3, #0
 8005832:	d10a      	bne.n	800584a <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 8005834:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005838:	f383 8811 	msr	BASEPRI, r3
 800583c:	f3bf 8f6f 	isb	sy
 8005840:	f3bf 8f4f 	dsb	sy
 8005844:	61bb      	str	r3, [r7, #24]
}
 8005846:	bf00      	nop
 8005848:	e7fe      	b.n	8005848 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 800584a:	68ba      	ldr	r2, [r7, #8]
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	429a      	cmp	r2, r3
 8005850:	d90a      	bls.n	8005868 <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 8005852:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005856:	f383 8811 	msr	BASEPRI, r3
 800585a:	f3bf 8f6f 	isb	sy
 800585e:	f3bf 8f4f 	dsb	sy
 8005862:	617b      	str	r3, [r7, #20]
}
 8005864:	bf00      	nop
 8005866:	e7fe      	b.n	8005866 <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8005868:	2302      	movs	r3, #2
 800586a:	9300      	str	r3, [sp, #0]
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	2200      	movs	r2, #0
 8005870:	2100      	movs	r1, #0
 8005872:	68f8      	ldr	r0, [r7, #12]
 8005874:	f7ff ff00 	bl	8005678 <xQueueGenericCreateStatic>
 8005878:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800587a:	69fb      	ldr	r3, [r7, #28]
 800587c:	2b00      	cmp	r3, #0
 800587e:	d002      	beq.n	8005886 <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8005880:	69fb      	ldr	r3, [r7, #28]
 8005882:	68ba      	ldr	r2, [r7, #8]
 8005884:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8005886:	69fb      	ldr	r3, [r7, #28]
	}
 8005888:	4618      	mov	r0, r3
 800588a:	3720      	adds	r7, #32
 800588c:	46bd      	mov	sp, r7
 800588e:	bd80      	pop	{r7, pc}

08005890 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8005890:	b580      	push	{r7, lr}
 8005892:	b086      	sub	sp, #24
 8005894:	af00      	add	r7, sp, #0
 8005896:	6078      	str	r0, [r7, #4]
 8005898:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	2b00      	cmp	r3, #0
 800589e:	d10a      	bne.n	80058b6 <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 80058a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058a4:	f383 8811 	msr	BASEPRI, r3
 80058a8:	f3bf 8f6f 	isb	sy
 80058ac:	f3bf 8f4f 	dsb	sy
 80058b0:	613b      	str	r3, [r7, #16]
}
 80058b2:	bf00      	nop
 80058b4:	e7fe      	b.n	80058b4 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 80058b6:	683a      	ldr	r2, [r7, #0]
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	429a      	cmp	r2, r3
 80058bc:	d90a      	bls.n	80058d4 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 80058be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058c2:	f383 8811 	msr	BASEPRI, r3
 80058c6:	f3bf 8f6f 	isb	sy
 80058ca:	f3bf 8f4f 	dsb	sy
 80058ce:	60fb      	str	r3, [r7, #12]
}
 80058d0:	bf00      	nop
 80058d2:	e7fe      	b.n	80058d2 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80058d4:	2202      	movs	r2, #2
 80058d6:	2100      	movs	r1, #0
 80058d8:	6878      	ldr	r0, [r7, #4]
 80058da:	f7ff ff45 	bl	8005768 <xQueueGenericCreate>
 80058de:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 80058e0:	697b      	ldr	r3, [r7, #20]
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d002      	beq.n	80058ec <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80058e6:	697b      	ldr	r3, [r7, #20]
 80058e8:	683a      	ldr	r2, [r7, #0]
 80058ea:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 80058ec:	697b      	ldr	r3, [r7, #20]
	}
 80058ee:	4618      	mov	r0, r3
 80058f0:	3718      	adds	r7, #24
 80058f2:	46bd      	mov	sp, r7
 80058f4:	bd80      	pop	{r7, pc}
	...

080058f8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80058f8:	b580      	push	{r7, lr}
 80058fa:	b08e      	sub	sp, #56	; 0x38
 80058fc:	af00      	add	r7, sp, #0
 80058fe:	60f8      	str	r0, [r7, #12]
 8005900:	60b9      	str	r1, [r7, #8]
 8005902:	607a      	str	r2, [r7, #4]
 8005904:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8005906:	2300      	movs	r3, #0
 8005908:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800590e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005910:	2b00      	cmp	r3, #0
 8005912:	d10a      	bne.n	800592a <xQueueGenericSend+0x32>
	__asm volatile
 8005914:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005918:	f383 8811 	msr	BASEPRI, r3
 800591c:	f3bf 8f6f 	isb	sy
 8005920:	f3bf 8f4f 	dsb	sy
 8005924:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005926:	bf00      	nop
 8005928:	e7fe      	b.n	8005928 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800592a:	68bb      	ldr	r3, [r7, #8]
 800592c:	2b00      	cmp	r3, #0
 800592e:	d103      	bne.n	8005938 <xQueueGenericSend+0x40>
 8005930:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005932:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005934:	2b00      	cmp	r3, #0
 8005936:	d101      	bne.n	800593c <xQueueGenericSend+0x44>
 8005938:	2301      	movs	r3, #1
 800593a:	e000      	b.n	800593e <xQueueGenericSend+0x46>
 800593c:	2300      	movs	r3, #0
 800593e:	2b00      	cmp	r3, #0
 8005940:	d10a      	bne.n	8005958 <xQueueGenericSend+0x60>
	__asm volatile
 8005942:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005946:	f383 8811 	msr	BASEPRI, r3
 800594a:	f3bf 8f6f 	isb	sy
 800594e:	f3bf 8f4f 	dsb	sy
 8005952:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005954:	bf00      	nop
 8005956:	e7fe      	b.n	8005956 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005958:	683b      	ldr	r3, [r7, #0]
 800595a:	2b02      	cmp	r3, #2
 800595c:	d103      	bne.n	8005966 <xQueueGenericSend+0x6e>
 800595e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005960:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005962:	2b01      	cmp	r3, #1
 8005964:	d101      	bne.n	800596a <xQueueGenericSend+0x72>
 8005966:	2301      	movs	r3, #1
 8005968:	e000      	b.n	800596c <xQueueGenericSend+0x74>
 800596a:	2300      	movs	r3, #0
 800596c:	2b00      	cmp	r3, #0
 800596e:	d10a      	bne.n	8005986 <xQueueGenericSend+0x8e>
	__asm volatile
 8005970:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005974:	f383 8811 	msr	BASEPRI, r3
 8005978:	f3bf 8f6f 	isb	sy
 800597c:	f3bf 8f4f 	dsb	sy
 8005980:	623b      	str	r3, [r7, #32]
}
 8005982:	bf00      	nop
 8005984:	e7fe      	b.n	8005984 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005986:	f001 fca3 	bl	80072d0 <xTaskGetSchedulerState>
 800598a:	4603      	mov	r3, r0
 800598c:	2b00      	cmp	r3, #0
 800598e:	d102      	bne.n	8005996 <xQueueGenericSend+0x9e>
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	2b00      	cmp	r3, #0
 8005994:	d101      	bne.n	800599a <xQueueGenericSend+0xa2>
 8005996:	2301      	movs	r3, #1
 8005998:	e000      	b.n	800599c <xQueueGenericSend+0xa4>
 800599a:	2300      	movs	r3, #0
 800599c:	2b00      	cmp	r3, #0
 800599e:	d10a      	bne.n	80059b6 <xQueueGenericSend+0xbe>
	__asm volatile
 80059a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059a4:	f383 8811 	msr	BASEPRI, r3
 80059a8:	f3bf 8f6f 	isb	sy
 80059ac:	f3bf 8f4f 	dsb	sy
 80059b0:	61fb      	str	r3, [r7, #28]
}
 80059b2:	bf00      	nop
 80059b4:	e7fe      	b.n	80059b4 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80059b6:	f002 faa9 	bl	8007f0c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80059ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059bc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80059be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80059c2:	429a      	cmp	r2, r3
 80059c4:	d302      	bcc.n	80059cc <xQueueGenericSend+0xd4>
 80059c6:	683b      	ldr	r3, [r7, #0]
 80059c8:	2b02      	cmp	r3, #2
 80059ca:	d129      	bne.n	8005a20 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80059cc:	683a      	ldr	r2, [r7, #0]
 80059ce:	68b9      	ldr	r1, [r7, #8]
 80059d0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80059d2:	f000 fc5d 	bl	8006290 <prvCopyDataToQueue>
 80059d6:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80059d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d010      	beq.n	8005a02 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80059e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059e2:	3324      	adds	r3, #36	; 0x24
 80059e4:	4618      	mov	r0, r3
 80059e6:	f001 fab5 	bl	8006f54 <xTaskRemoveFromEventList>
 80059ea:	4603      	mov	r3, r0
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d013      	beq.n	8005a18 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80059f0:	4b3f      	ldr	r3, [pc, #252]	; (8005af0 <xQueueGenericSend+0x1f8>)
 80059f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80059f6:	601a      	str	r2, [r3, #0]
 80059f8:	f3bf 8f4f 	dsb	sy
 80059fc:	f3bf 8f6f 	isb	sy
 8005a00:	e00a      	b.n	8005a18 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8005a02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d007      	beq.n	8005a18 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005a08:	4b39      	ldr	r3, [pc, #228]	; (8005af0 <xQueueGenericSend+0x1f8>)
 8005a0a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005a0e:	601a      	str	r2, [r3, #0]
 8005a10:	f3bf 8f4f 	dsb	sy
 8005a14:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005a18:	f002 faa8 	bl	8007f6c <vPortExitCritical>
				return pdPASS;
 8005a1c:	2301      	movs	r3, #1
 8005a1e:	e063      	b.n	8005ae8 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d103      	bne.n	8005a2e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005a26:	f002 faa1 	bl	8007f6c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8005a2a:	2300      	movs	r3, #0
 8005a2c:	e05c      	b.n	8005ae8 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005a2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d106      	bne.n	8005a42 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005a34:	f107 0314 	add.w	r3, r7, #20
 8005a38:	4618      	mov	r0, r3
 8005a3a:	f001 faef 	bl	800701c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005a3e:	2301      	movs	r3, #1
 8005a40:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005a42:	f002 fa93 	bl	8007f6c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005a46:	f001 f83f 	bl	8006ac8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005a4a:	f002 fa5f 	bl	8007f0c <vPortEnterCritical>
 8005a4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a50:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005a54:	b25b      	sxtb	r3, r3
 8005a56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a5a:	d103      	bne.n	8005a64 <xQueueGenericSend+0x16c>
 8005a5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a5e:	2200      	movs	r2, #0
 8005a60:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005a64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a66:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005a6a:	b25b      	sxtb	r3, r3
 8005a6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a70:	d103      	bne.n	8005a7a <xQueueGenericSend+0x182>
 8005a72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a74:	2200      	movs	r2, #0
 8005a76:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005a7a:	f002 fa77 	bl	8007f6c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005a7e:	1d3a      	adds	r2, r7, #4
 8005a80:	f107 0314 	add.w	r3, r7, #20
 8005a84:	4611      	mov	r1, r2
 8005a86:	4618      	mov	r0, r3
 8005a88:	f001 fade 	bl	8007048 <xTaskCheckForTimeOut>
 8005a8c:	4603      	mov	r3, r0
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d124      	bne.n	8005adc <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005a92:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005a94:	f000 fcf4 	bl	8006480 <prvIsQueueFull>
 8005a98:	4603      	mov	r3, r0
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d018      	beq.n	8005ad0 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005a9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005aa0:	3310      	adds	r3, #16
 8005aa2:	687a      	ldr	r2, [r7, #4]
 8005aa4:	4611      	mov	r1, r2
 8005aa6:	4618      	mov	r0, r3
 8005aa8:	f001 fa04 	bl	8006eb4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005aac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005aae:	f000 fc7f 	bl	80063b0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8005ab2:	f001 f817 	bl	8006ae4 <xTaskResumeAll>
 8005ab6:	4603      	mov	r3, r0
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	f47f af7c 	bne.w	80059b6 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8005abe:	4b0c      	ldr	r3, [pc, #48]	; (8005af0 <xQueueGenericSend+0x1f8>)
 8005ac0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005ac4:	601a      	str	r2, [r3, #0]
 8005ac6:	f3bf 8f4f 	dsb	sy
 8005aca:	f3bf 8f6f 	isb	sy
 8005ace:	e772      	b.n	80059b6 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005ad0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005ad2:	f000 fc6d 	bl	80063b0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005ad6:	f001 f805 	bl	8006ae4 <xTaskResumeAll>
 8005ada:	e76c      	b.n	80059b6 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005adc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005ade:	f000 fc67 	bl	80063b0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005ae2:	f000 ffff 	bl	8006ae4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8005ae6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8005ae8:	4618      	mov	r0, r3
 8005aea:	3738      	adds	r7, #56	; 0x38
 8005aec:	46bd      	mov	sp, r7
 8005aee:	bd80      	pop	{r7, pc}
 8005af0:	e000ed04 	.word	0xe000ed04

08005af4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005af4:	b580      	push	{r7, lr}
 8005af6:	b090      	sub	sp, #64	; 0x40
 8005af8:	af00      	add	r7, sp, #0
 8005afa:	60f8      	str	r0, [r7, #12]
 8005afc:	60b9      	str	r1, [r7, #8]
 8005afe:	607a      	str	r2, [r7, #4]
 8005b00:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8005b06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d10a      	bne.n	8005b22 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8005b0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b10:	f383 8811 	msr	BASEPRI, r3
 8005b14:	f3bf 8f6f 	isb	sy
 8005b18:	f3bf 8f4f 	dsb	sy
 8005b1c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005b1e:	bf00      	nop
 8005b20:	e7fe      	b.n	8005b20 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005b22:	68bb      	ldr	r3, [r7, #8]
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d103      	bne.n	8005b30 <xQueueGenericSendFromISR+0x3c>
 8005b28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d101      	bne.n	8005b34 <xQueueGenericSendFromISR+0x40>
 8005b30:	2301      	movs	r3, #1
 8005b32:	e000      	b.n	8005b36 <xQueueGenericSendFromISR+0x42>
 8005b34:	2300      	movs	r3, #0
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d10a      	bne.n	8005b50 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8005b3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b3e:	f383 8811 	msr	BASEPRI, r3
 8005b42:	f3bf 8f6f 	isb	sy
 8005b46:	f3bf 8f4f 	dsb	sy
 8005b4a:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005b4c:	bf00      	nop
 8005b4e:	e7fe      	b.n	8005b4e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005b50:	683b      	ldr	r3, [r7, #0]
 8005b52:	2b02      	cmp	r3, #2
 8005b54:	d103      	bne.n	8005b5e <xQueueGenericSendFromISR+0x6a>
 8005b56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b5a:	2b01      	cmp	r3, #1
 8005b5c:	d101      	bne.n	8005b62 <xQueueGenericSendFromISR+0x6e>
 8005b5e:	2301      	movs	r3, #1
 8005b60:	e000      	b.n	8005b64 <xQueueGenericSendFromISR+0x70>
 8005b62:	2300      	movs	r3, #0
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d10a      	bne.n	8005b7e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8005b68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b6c:	f383 8811 	msr	BASEPRI, r3
 8005b70:	f3bf 8f6f 	isb	sy
 8005b74:	f3bf 8f4f 	dsb	sy
 8005b78:	623b      	str	r3, [r7, #32]
}
 8005b7a:	bf00      	nop
 8005b7c:	e7fe      	b.n	8005b7c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005b7e:	f002 fa87 	bl	8008090 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8005b82:	f3ef 8211 	mrs	r2, BASEPRI
 8005b86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b8a:	f383 8811 	msr	BASEPRI, r3
 8005b8e:	f3bf 8f6f 	isb	sy
 8005b92:	f3bf 8f4f 	dsb	sy
 8005b96:	61fa      	str	r2, [r7, #28]
 8005b98:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8005b9a:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005b9c:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005b9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ba0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005ba2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ba4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ba6:	429a      	cmp	r2, r3
 8005ba8:	d302      	bcc.n	8005bb0 <xQueueGenericSendFromISR+0xbc>
 8005baa:	683b      	ldr	r3, [r7, #0]
 8005bac:	2b02      	cmp	r3, #2
 8005bae:	d12f      	bne.n	8005c10 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005bb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bb2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005bb6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005bba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bbe:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005bc0:	683a      	ldr	r2, [r7, #0]
 8005bc2:	68b9      	ldr	r1, [r7, #8]
 8005bc4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005bc6:	f000 fb63 	bl	8006290 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005bca:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8005bce:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bd2:	d112      	bne.n	8005bfa <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005bd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d016      	beq.n	8005c0a <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005bdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bde:	3324      	adds	r3, #36	; 0x24
 8005be0:	4618      	mov	r0, r3
 8005be2:	f001 f9b7 	bl	8006f54 <xTaskRemoveFromEventList>
 8005be6:	4603      	mov	r3, r0
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d00e      	beq.n	8005c0a <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d00b      	beq.n	8005c0a <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	2201      	movs	r2, #1
 8005bf6:	601a      	str	r2, [r3, #0]
 8005bf8:	e007      	b.n	8005c0a <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005bfa:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8005bfe:	3301      	adds	r3, #1
 8005c00:	b2db      	uxtb	r3, r3
 8005c02:	b25a      	sxtb	r2, r3
 8005c04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c06:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8005c0a:	2301      	movs	r3, #1
 8005c0c:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8005c0e:	e001      	b.n	8005c14 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005c10:	2300      	movs	r3, #0
 8005c12:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005c14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c16:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005c18:	697b      	ldr	r3, [r7, #20]
 8005c1a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005c1e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005c20:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8005c22:	4618      	mov	r0, r3
 8005c24:	3740      	adds	r7, #64	; 0x40
 8005c26:	46bd      	mov	sp, r7
 8005c28:	bd80      	pop	{r7, pc}

08005c2a <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8005c2a:	b580      	push	{r7, lr}
 8005c2c:	b08e      	sub	sp, #56	; 0x38
 8005c2e:	af00      	add	r7, sp, #0
 8005c30:	6078      	str	r0, [r7, #4]
 8005c32:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8005c38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d10a      	bne.n	8005c54 <xQueueGiveFromISR+0x2a>
	__asm volatile
 8005c3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c42:	f383 8811 	msr	BASEPRI, r3
 8005c46:	f3bf 8f6f 	isb	sy
 8005c4a:	f3bf 8f4f 	dsb	sy
 8005c4e:	623b      	str	r3, [r7, #32]
}
 8005c50:	bf00      	nop
 8005c52:	e7fe      	b.n	8005c52 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8005c54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d00a      	beq.n	8005c72 <xQueueGiveFromISR+0x48>
	__asm volatile
 8005c5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c60:	f383 8811 	msr	BASEPRI, r3
 8005c64:	f3bf 8f6f 	isb	sy
 8005c68:	f3bf 8f4f 	dsb	sy
 8005c6c:	61fb      	str	r3, [r7, #28]
}
 8005c6e:	bf00      	nop
 8005c70:	e7fe      	b.n	8005c70 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8005c72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d103      	bne.n	8005c82 <xQueueGiveFromISR+0x58>
 8005c7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c7c:	689b      	ldr	r3, [r3, #8]
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d101      	bne.n	8005c86 <xQueueGiveFromISR+0x5c>
 8005c82:	2301      	movs	r3, #1
 8005c84:	e000      	b.n	8005c88 <xQueueGiveFromISR+0x5e>
 8005c86:	2300      	movs	r3, #0
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d10a      	bne.n	8005ca2 <xQueueGiveFromISR+0x78>
	__asm volatile
 8005c8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c90:	f383 8811 	msr	BASEPRI, r3
 8005c94:	f3bf 8f6f 	isb	sy
 8005c98:	f3bf 8f4f 	dsb	sy
 8005c9c:	61bb      	str	r3, [r7, #24]
}
 8005c9e:	bf00      	nop
 8005ca0:	e7fe      	b.n	8005ca0 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005ca2:	f002 f9f5 	bl	8008090 <vPortValidateInterruptPriority>
	__asm volatile
 8005ca6:	f3ef 8211 	mrs	r2, BASEPRI
 8005caa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cae:	f383 8811 	msr	BASEPRI, r3
 8005cb2:	f3bf 8f6f 	isb	sy
 8005cb6:	f3bf 8f4f 	dsb	sy
 8005cba:	617a      	str	r2, [r7, #20]
 8005cbc:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8005cbe:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005cc0:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005cc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cc6:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8005cc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ccc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005cce:	429a      	cmp	r2, r3
 8005cd0:	d22b      	bcs.n	8005d2a <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005cd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cd4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005cd8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005cdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cde:	1c5a      	adds	r2, r3, #1
 8005ce0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ce2:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005ce4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8005ce8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005cec:	d112      	bne.n	8005d14 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005cee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d016      	beq.n	8005d24 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005cf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cf8:	3324      	adds	r3, #36	; 0x24
 8005cfa:	4618      	mov	r0, r3
 8005cfc:	f001 f92a 	bl	8006f54 <xTaskRemoveFromEventList>
 8005d00:	4603      	mov	r3, r0
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d00e      	beq.n	8005d24 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005d06:	683b      	ldr	r3, [r7, #0]
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d00b      	beq.n	8005d24 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005d0c:	683b      	ldr	r3, [r7, #0]
 8005d0e:	2201      	movs	r2, #1
 8005d10:	601a      	str	r2, [r3, #0]
 8005d12:	e007      	b.n	8005d24 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005d14:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005d18:	3301      	adds	r3, #1
 8005d1a:	b2db      	uxtb	r3, r3
 8005d1c:	b25a      	sxtb	r2, r3
 8005d1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d20:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8005d24:	2301      	movs	r3, #1
 8005d26:	637b      	str	r3, [r7, #52]	; 0x34
 8005d28:	e001      	b.n	8005d2e <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005d2a:	2300      	movs	r3, #0
 8005d2c:	637b      	str	r3, [r7, #52]	; 0x34
 8005d2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d30:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	f383 8811 	msr	BASEPRI, r3
}
 8005d38:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005d3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8005d3c:	4618      	mov	r0, r3
 8005d3e:	3738      	adds	r7, #56	; 0x38
 8005d40:	46bd      	mov	sp, r7
 8005d42:	bd80      	pop	{r7, pc}

08005d44 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8005d44:	b580      	push	{r7, lr}
 8005d46:	b08c      	sub	sp, #48	; 0x30
 8005d48:	af00      	add	r7, sp, #0
 8005d4a:	60f8      	str	r0, [r7, #12]
 8005d4c:	60b9      	str	r1, [r7, #8]
 8005d4e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8005d50:	2300      	movs	r3, #0
 8005d52:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005d58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d10a      	bne.n	8005d74 <xQueueReceive+0x30>
	__asm volatile
 8005d5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d62:	f383 8811 	msr	BASEPRI, r3
 8005d66:	f3bf 8f6f 	isb	sy
 8005d6a:	f3bf 8f4f 	dsb	sy
 8005d6e:	623b      	str	r3, [r7, #32]
}
 8005d70:	bf00      	nop
 8005d72:	e7fe      	b.n	8005d72 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005d74:	68bb      	ldr	r3, [r7, #8]
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d103      	bne.n	8005d82 <xQueueReceive+0x3e>
 8005d7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d101      	bne.n	8005d86 <xQueueReceive+0x42>
 8005d82:	2301      	movs	r3, #1
 8005d84:	e000      	b.n	8005d88 <xQueueReceive+0x44>
 8005d86:	2300      	movs	r3, #0
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d10a      	bne.n	8005da2 <xQueueReceive+0x5e>
	__asm volatile
 8005d8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d90:	f383 8811 	msr	BASEPRI, r3
 8005d94:	f3bf 8f6f 	isb	sy
 8005d98:	f3bf 8f4f 	dsb	sy
 8005d9c:	61fb      	str	r3, [r7, #28]
}
 8005d9e:	bf00      	nop
 8005da0:	e7fe      	b.n	8005da0 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005da2:	f001 fa95 	bl	80072d0 <xTaskGetSchedulerState>
 8005da6:	4603      	mov	r3, r0
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d102      	bne.n	8005db2 <xQueueReceive+0x6e>
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d101      	bne.n	8005db6 <xQueueReceive+0x72>
 8005db2:	2301      	movs	r3, #1
 8005db4:	e000      	b.n	8005db8 <xQueueReceive+0x74>
 8005db6:	2300      	movs	r3, #0
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d10a      	bne.n	8005dd2 <xQueueReceive+0x8e>
	__asm volatile
 8005dbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dc0:	f383 8811 	msr	BASEPRI, r3
 8005dc4:	f3bf 8f6f 	isb	sy
 8005dc8:	f3bf 8f4f 	dsb	sy
 8005dcc:	61bb      	str	r3, [r7, #24]
}
 8005dce:	bf00      	nop
 8005dd0:	e7fe      	b.n	8005dd0 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005dd2:	f002 f89b 	bl	8007f0c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005dd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005dd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005dda:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005ddc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d01f      	beq.n	8005e22 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005de2:	68b9      	ldr	r1, [r7, #8]
 8005de4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005de6:	f000 fabd 	bl	8006364 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005dea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dec:	1e5a      	subs	r2, r3, #1
 8005dee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005df0:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005df2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005df4:	691b      	ldr	r3, [r3, #16]
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d00f      	beq.n	8005e1a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005dfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005dfc:	3310      	adds	r3, #16
 8005dfe:	4618      	mov	r0, r3
 8005e00:	f001 f8a8 	bl	8006f54 <xTaskRemoveFromEventList>
 8005e04:	4603      	mov	r3, r0
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d007      	beq.n	8005e1a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005e0a:	4b3d      	ldr	r3, [pc, #244]	; (8005f00 <xQueueReceive+0x1bc>)
 8005e0c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005e10:	601a      	str	r2, [r3, #0]
 8005e12:	f3bf 8f4f 	dsb	sy
 8005e16:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005e1a:	f002 f8a7 	bl	8007f6c <vPortExitCritical>
				return pdPASS;
 8005e1e:	2301      	movs	r3, #1
 8005e20:	e069      	b.n	8005ef6 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d103      	bne.n	8005e30 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005e28:	f002 f8a0 	bl	8007f6c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005e2c:	2300      	movs	r3, #0
 8005e2e:	e062      	b.n	8005ef6 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005e30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d106      	bne.n	8005e44 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005e36:	f107 0310 	add.w	r3, r7, #16
 8005e3a:	4618      	mov	r0, r3
 8005e3c:	f001 f8ee 	bl	800701c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005e40:	2301      	movs	r3, #1
 8005e42:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005e44:	f002 f892 	bl	8007f6c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005e48:	f000 fe3e 	bl	8006ac8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005e4c:	f002 f85e 	bl	8007f0c <vPortEnterCritical>
 8005e50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e52:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005e56:	b25b      	sxtb	r3, r3
 8005e58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e5c:	d103      	bne.n	8005e66 <xQueueReceive+0x122>
 8005e5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e60:	2200      	movs	r2, #0
 8005e62:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005e66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e68:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005e6c:	b25b      	sxtb	r3, r3
 8005e6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e72:	d103      	bne.n	8005e7c <xQueueReceive+0x138>
 8005e74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e76:	2200      	movs	r2, #0
 8005e78:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005e7c:	f002 f876 	bl	8007f6c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005e80:	1d3a      	adds	r2, r7, #4
 8005e82:	f107 0310 	add.w	r3, r7, #16
 8005e86:	4611      	mov	r1, r2
 8005e88:	4618      	mov	r0, r3
 8005e8a:	f001 f8dd 	bl	8007048 <xTaskCheckForTimeOut>
 8005e8e:	4603      	mov	r3, r0
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d123      	bne.n	8005edc <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005e94:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005e96:	f000 fadd 	bl	8006454 <prvIsQueueEmpty>
 8005e9a:	4603      	mov	r3, r0
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d017      	beq.n	8005ed0 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005ea0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ea2:	3324      	adds	r3, #36	; 0x24
 8005ea4:	687a      	ldr	r2, [r7, #4]
 8005ea6:	4611      	mov	r1, r2
 8005ea8:	4618      	mov	r0, r3
 8005eaa:	f001 f803 	bl	8006eb4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005eae:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005eb0:	f000 fa7e 	bl	80063b0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005eb4:	f000 fe16 	bl	8006ae4 <xTaskResumeAll>
 8005eb8:	4603      	mov	r3, r0
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d189      	bne.n	8005dd2 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8005ebe:	4b10      	ldr	r3, [pc, #64]	; (8005f00 <xQueueReceive+0x1bc>)
 8005ec0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005ec4:	601a      	str	r2, [r3, #0]
 8005ec6:	f3bf 8f4f 	dsb	sy
 8005eca:	f3bf 8f6f 	isb	sy
 8005ece:	e780      	b.n	8005dd2 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005ed0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005ed2:	f000 fa6d 	bl	80063b0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005ed6:	f000 fe05 	bl	8006ae4 <xTaskResumeAll>
 8005eda:	e77a      	b.n	8005dd2 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005edc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005ede:	f000 fa67 	bl	80063b0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005ee2:	f000 fdff 	bl	8006ae4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005ee6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005ee8:	f000 fab4 	bl	8006454 <prvIsQueueEmpty>
 8005eec:	4603      	mov	r3, r0
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	f43f af6f 	beq.w	8005dd2 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005ef4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005ef6:	4618      	mov	r0, r3
 8005ef8:	3730      	adds	r7, #48	; 0x30
 8005efa:	46bd      	mov	sp, r7
 8005efc:	bd80      	pop	{r7, pc}
 8005efe:	bf00      	nop
 8005f00:	e000ed04 	.word	0xe000ed04

08005f04 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8005f04:	b580      	push	{r7, lr}
 8005f06:	b08e      	sub	sp, #56	; 0x38
 8005f08:	af00      	add	r7, sp, #0
 8005f0a:	6078      	str	r0, [r7, #4]
 8005f0c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8005f0e:	2300      	movs	r3, #0
 8005f10:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8005f16:	2300      	movs	r3, #0
 8005f18:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005f1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d10a      	bne.n	8005f36 <xQueueSemaphoreTake+0x32>
	__asm volatile
 8005f20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f24:	f383 8811 	msr	BASEPRI, r3
 8005f28:	f3bf 8f6f 	isb	sy
 8005f2c:	f3bf 8f4f 	dsb	sy
 8005f30:	623b      	str	r3, [r7, #32]
}
 8005f32:	bf00      	nop
 8005f34:	e7fe      	b.n	8005f34 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8005f36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d00a      	beq.n	8005f54 <xQueueSemaphoreTake+0x50>
	__asm volatile
 8005f3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f42:	f383 8811 	msr	BASEPRI, r3
 8005f46:	f3bf 8f6f 	isb	sy
 8005f4a:	f3bf 8f4f 	dsb	sy
 8005f4e:	61fb      	str	r3, [r7, #28]
}
 8005f50:	bf00      	nop
 8005f52:	e7fe      	b.n	8005f52 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005f54:	f001 f9bc 	bl	80072d0 <xTaskGetSchedulerState>
 8005f58:	4603      	mov	r3, r0
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d102      	bne.n	8005f64 <xQueueSemaphoreTake+0x60>
 8005f5e:	683b      	ldr	r3, [r7, #0]
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d101      	bne.n	8005f68 <xQueueSemaphoreTake+0x64>
 8005f64:	2301      	movs	r3, #1
 8005f66:	e000      	b.n	8005f6a <xQueueSemaphoreTake+0x66>
 8005f68:	2300      	movs	r3, #0
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d10a      	bne.n	8005f84 <xQueueSemaphoreTake+0x80>
	__asm volatile
 8005f6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f72:	f383 8811 	msr	BASEPRI, r3
 8005f76:	f3bf 8f6f 	isb	sy
 8005f7a:	f3bf 8f4f 	dsb	sy
 8005f7e:	61bb      	str	r3, [r7, #24]
}
 8005f80:	bf00      	nop
 8005f82:	e7fe      	b.n	8005f82 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005f84:	f001 ffc2 	bl	8007f0c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8005f88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f8c:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8005f8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d024      	beq.n	8005fde <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8005f94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f96:	1e5a      	subs	r2, r3, #1
 8005f98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f9a:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005f9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d104      	bne.n	8005fae <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8005fa4:	f001 fb0a 	bl	80075bc <pvTaskIncrementMutexHeldCount>
 8005fa8:	4602      	mov	r2, r0
 8005faa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fac:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005fae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fb0:	691b      	ldr	r3, [r3, #16]
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d00f      	beq.n	8005fd6 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005fb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fb8:	3310      	adds	r3, #16
 8005fba:	4618      	mov	r0, r3
 8005fbc:	f000 ffca 	bl	8006f54 <xTaskRemoveFromEventList>
 8005fc0:	4603      	mov	r3, r0
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d007      	beq.n	8005fd6 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005fc6:	4b54      	ldr	r3, [pc, #336]	; (8006118 <xQueueSemaphoreTake+0x214>)
 8005fc8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005fcc:	601a      	str	r2, [r3, #0]
 8005fce:	f3bf 8f4f 	dsb	sy
 8005fd2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005fd6:	f001 ffc9 	bl	8007f6c <vPortExitCritical>
				return pdPASS;
 8005fda:	2301      	movs	r3, #1
 8005fdc:	e097      	b.n	800610e <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005fde:	683b      	ldr	r3, [r7, #0]
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d111      	bne.n	8006008 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8005fe4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d00a      	beq.n	8006000 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8005fea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fee:	f383 8811 	msr	BASEPRI, r3
 8005ff2:	f3bf 8f6f 	isb	sy
 8005ff6:	f3bf 8f4f 	dsb	sy
 8005ffa:	617b      	str	r3, [r7, #20]
}
 8005ffc:	bf00      	nop
 8005ffe:	e7fe      	b.n	8005ffe <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8006000:	f001 ffb4 	bl	8007f6c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006004:	2300      	movs	r3, #0
 8006006:	e082      	b.n	800610e <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006008:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800600a:	2b00      	cmp	r3, #0
 800600c:	d106      	bne.n	800601c <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800600e:	f107 030c 	add.w	r3, r7, #12
 8006012:	4618      	mov	r0, r3
 8006014:	f001 f802 	bl	800701c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006018:	2301      	movs	r3, #1
 800601a:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800601c:	f001 ffa6 	bl	8007f6c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006020:	f000 fd52 	bl	8006ac8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006024:	f001 ff72 	bl	8007f0c <vPortEnterCritical>
 8006028:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800602a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800602e:	b25b      	sxtb	r3, r3
 8006030:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006034:	d103      	bne.n	800603e <xQueueSemaphoreTake+0x13a>
 8006036:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006038:	2200      	movs	r2, #0
 800603a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800603e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006040:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006044:	b25b      	sxtb	r3, r3
 8006046:	f1b3 3fff 	cmp.w	r3, #4294967295
 800604a:	d103      	bne.n	8006054 <xQueueSemaphoreTake+0x150>
 800604c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800604e:	2200      	movs	r2, #0
 8006050:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006054:	f001 ff8a 	bl	8007f6c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006058:	463a      	mov	r2, r7
 800605a:	f107 030c 	add.w	r3, r7, #12
 800605e:	4611      	mov	r1, r2
 8006060:	4618      	mov	r0, r3
 8006062:	f000 fff1 	bl	8007048 <xTaskCheckForTimeOut>
 8006066:	4603      	mov	r3, r0
 8006068:	2b00      	cmp	r3, #0
 800606a:	d132      	bne.n	80060d2 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800606c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800606e:	f000 f9f1 	bl	8006454 <prvIsQueueEmpty>
 8006072:	4603      	mov	r3, r0
 8006074:	2b00      	cmp	r3, #0
 8006076:	d026      	beq.n	80060c6 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006078:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	2b00      	cmp	r3, #0
 800607e:	d109      	bne.n	8006094 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8006080:	f001 ff44 	bl	8007f0c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006084:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006086:	689b      	ldr	r3, [r3, #8]
 8006088:	4618      	mov	r0, r3
 800608a:	f001 f93f 	bl	800730c <xTaskPriorityInherit>
 800608e:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8006090:	f001 ff6c 	bl	8007f6c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006094:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006096:	3324      	adds	r3, #36	; 0x24
 8006098:	683a      	ldr	r2, [r7, #0]
 800609a:	4611      	mov	r1, r2
 800609c:	4618      	mov	r0, r3
 800609e:	f000 ff09 	bl	8006eb4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80060a2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80060a4:	f000 f984 	bl	80063b0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80060a8:	f000 fd1c 	bl	8006ae4 <xTaskResumeAll>
 80060ac:	4603      	mov	r3, r0
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	f47f af68 	bne.w	8005f84 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 80060b4:	4b18      	ldr	r3, [pc, #96]	; (8006118 <xQueueSemaphoreTake+0x214>)
 80060b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80060ba:	601a      	str	r2, [r3, #0]
 80060bc:	f3bf 8f4f 	dsb	sy
 80060c0:	f3bf 8f6f 	isb	sy
 80060c4:	e75e      	b.n	8005f84 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80060c6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80060c8:	f000 f972 	bl	80063b0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80060cc:	f000 fd0a 	bl	8006ae4 <xTaskResumeAll>
 80060d0:	e758      	b.n	8005f84 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80060d2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80060d4:	f000 f96c 	bl	80063b0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80060d8:	f000 fd04 	bl	8006ae4 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80060dc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80060de:	f000 f9b9 	bl	8006454 <prvIsQueueEmpty>
 80060e2:	4603      	mov	r3, r0
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	f43f af4d 	beq.w	8005f84 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80060ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d00d      	beq.n	800610c <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 80060f0:	f001 ff0c 	bl	8007f0c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80060f4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80060f6:	f000 f8b4 	bl	8006262 <prvGetDisinheritPriorityAfterTimeout>
 80060fa:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80060fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060fe:	689b      	ldr	r3, [r3, #8]
 8006100:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006102:	4618      	mov	r0, r3
 8006104:	f001 f9d8 	bl	80074b8 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8006108:	f001 ff30 	bl	8007f6c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800610c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800610e:	4618      	mov	r0, r3
 8006110:	3738      	adds	r7, #56	; 0x38
 8006112:	46bd      	mov	sp, r7
 8006114:	bd80      	pop	{r7, pc}
 8006116:	bf00      	nop
 8006118:	e000ed04 	.word	0xe000ed04

0800611c <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800611c:	b580      	push	{r7, lr}
 800611e:	b08e      	sub	sp, #56	; 0x38
 8006120:	af00      	add	r7, sp, #0
 8006122:	60f8      	str	r0, [r7, #12]
 8006124:	60b9      	str	r1, [r7, #8]
 8006126:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800612c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800612e:	2b00      	cmp	r3, #0
 8006130:	d10a      	bne.n	8006148 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8006132:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006136:	f383 8811 	msr	BASEPRI, r3
 800613a:	f3bf 8f6f 	isb	sy
 800613e:	f3bf 8f4f 	dsb	sy
 8006142:	623b      	str	r3, [r7, #32]
}
 8006144:	bf00      	nop
 8006146:	e7fe      	b.n	8006146 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006148:	68bb      	ldr	r3, [r7, #8]
 800614a:	2b00      	cmp	r3, #0
 800614c:	d103      	bne.n	8006156 <xQueueReceiveFromISR+0x3a>
 800614e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006150:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006152:	2b00      	cmp	r3, #0
 8006154:	d101      	bne.n	800615a <xQueueReceiveFromISR+0x3e>
 8006156:	2301      	movs	r3, #1
 8006158:	e000      	b.n	800615c <xQueueReceiveFromISR+0x40>
 800615a:	2300      	movs	r3, #0
 800615c:	2b00      	cmp	r3, #0
 800615e:	d10a      	bne.n	8006176 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8006160:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006164:	f383 8811 	msr	BASEPRI, r3
 8006168:	f3bf 8f6f 	isb	sy
 800616c:	f3bf 8f4f 	dsb	sy
 8006170:	61fb      	str	r3, [r7, #28]
}
 8006172:	bf00      	nop
 8006174:	e7fe      	b.n	8006174 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006176:	f001 ff8b 	bl	8008090 <vPortValidateInterruptPriority>
	__asm volatile
 800617a:	f3ef 8211 	mrs	r2, BASEPRI
 800617e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006182:	f383 8811 	msr	BASEPRI, r3
 8006186:	f3bf 8f6f 	isb	sy
 800618a:	f3bf 8f4f 	dsb	sy
 800618e:	61ba      	str	r2, [r7, #24]
 8006190:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8006192:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006194:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006196:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006198:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800619a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800619c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d02f      	beq.n	8006202 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80061a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061a4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80061a8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80061ac:	68b9      	ldr	r1, [r7, #8]
 80061ae:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80061b0:	f000 f8d8 	bl	8006364 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80061b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061b6:	1e5a      	subs	r2, r3, #1
 80061b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061ba:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80061bc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80061c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061c4:	d112      	bne.n	80061ec <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80061c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061c8:	691b      	ldr	r3, [r3, #16]
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d016      	beq.n	80061fc <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80061ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061d0:	3310      	adds	r3, #16
 80061d2:	4618      	mov	r0, r3
 80061d4:	f000 febe 	bl	8006f54 <xTaskRemoveFromEventList>
 80061d8:	4603      	mov	r3, r0
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d00e      	beq.n	80061fc <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d00b      	beq.n	80061fc <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	2201      	movs	r2, #1
 80061e8:	601a      	str	r2, [r3, #0]
 80061ea:	e007      	b.n	80061fc <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80061ec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80061f0:	3301      	adds	r3, #1
 80061f2:	b2db      	uxtb	r3, r3
 80061f4:	b25a      	sxtb	r2, r3
 80061f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 80061fc:	2301      	movs	r3, #1
 80061fe:	637b      	str	r3, [r7, #52]	; 0x34
 8006200:	e001      	b.n	8006206 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8006202:	2300      	movs	r3, #0
 8006204:	637b      	str	r3, [r7, #52]	; 0x34
 8006206:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006208:	613b      	str	r3, [r7, #16]
	__asm volatile
 800620a:	693b      	ldr	r3, [r7, #16]
 800620c:	f383 8811 	msr	BASEPRI, r3
}
 8006210:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006212:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8006214:	4618      	mov	r0, r3
 8006216:	3738      	adds	r7, #56	; 0x38
 8006218:	46bd      	mov	sp, r7
 800621a:	bd80      	pop	{r7, pc}

0800621c <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800621c:	b580      	push	{r7, lr}
 800621e:	b084      	sub	sp, #16
 8006220:	af00      	add	r7, sp, #0
 8006222:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	2b00      	cmp	r3, #0
 800622c:	d10a      	bne.n	8006244 <vQueueDelete+0x28>
	__asm volatile
 800622e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006232:	f383 8811 	msr	BASEPRI, r3
 8006236:	f3bf 8f6f 	isb	sy
 800623a:	f3bf 8f4f 	dsb	sy
 800623e:	60bb      	str	r3, [r7, #8]
}
 8006240:	bf00      	nop
 8006242:	e7fe      	b.n	8006242 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8006244:	68f8      	ldr	r0, [r7, #12]
 8006246:	f000 f95b 	bl	8006500 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8006250:	2b00      	cmp	r3, #0
 8006252:	d102      	bne.n	800625a <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 8006254:	68f8      	ldr	r0, [r7, #12]
 8006256:	f002 f825 	bl	80082a4 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800625a:	bf00      	nop
 800625c:	3710      	adds	r7, #16
 800625e:	46bd      	mov	sp, r7
 8006260:	bd80      	pop	{r7, pc}

08006262 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8006262:	b480      	push	{r7}
 8006264:	b085      	sub	sp, #20
 8006266:	af00      	add	r7, sp, #0
 8006268:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800626e:	2b00      	cmp	r3, #0
 8006270:	d006      	beq.n	8006280 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 800627c:	60fb      	str	r3, [r7, #12]
 800627e:	e001      	b.n	8006284 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8006280:	2300      	movs	r3, #0
 8006282:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8006284:	68fb      	ldr	r3, [r7, #12]
	}
 8006286:	4618      	mov	r0, r3
 8006288:	3714      	adds	r7, #20
 800628a:	46bd      	mov	sp, r7
 800628c:	bc80      	pop	{r7}
 800628e:	4770      	bx	lr

08006290 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8006290:	b580      	push	{r7, lr}
 8006292:	b086      	sub	sp, #24
 8006294:	af00      	add	r7, sp, #0
 8006296:	60f8      	str	r0, [r7, #12]
 8006298:	60b9      	str	r1, [r7, #8]
 800629a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800629c:	2300      	movs	r3, #0
 800629e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062a4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d10d      	bne.n	80062ca <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d14d      	bne.n	8006352 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	689b      	ldr	r3, [r3, #8]
 80062ba:	4618      	mov	r0, r3
 80062bc:	f001 f88e 	bl	80073dc <xTaskPriorityDisinherit>
 80062c0:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	2200      	movs	r2, #0
 80062c6:	609a      	str	r2, [r3, #8]
 80062c8:	e043      	b.n	8006352 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d119      	bne.n	8006304 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	6858      	ldr	r0, [r3, #4]
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062d8:	461a      	mov	r2, r3
 80062da:	68b9      	ldr	r1, [r7, #8]
 80062dc:	f002 ffff 	bl	80092de <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	685a      	ldr	r2, [r3, #4]
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062e8:	441a      	add	r2, r3
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	685a      	ldr	r2, [r3, #4]
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	689b      	ldr	r3, [r3, #8]
 80062f6:	429a      	cmp	r2, r3
 80062f8:	d32b      	bcc.n	8006352 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	681a      	ldr	r2, [r3, #0]
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	605a      	str	r2, [r3, #4]
 8006302:	e026      	b.n	8006352 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	68d8      	ldr	r0, [r3, #12]
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800630c:	461a      	mov	r2, r3
 800630e:	68b9      	ldr	r1, [r7, #8]
 8006310:	f002 ffe5 	bl	80092de <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	68da      	ldr	r2, [r3, #12]
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800631c:	425b      	negs	r3, r3
 800631e:	441a      	add	r2, r3
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	68da      	ldr	r2, [r3, #12]
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	429a      	cmp	r2, r3
 800632e:	d207      	bcs.n	8006340 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	689a      	ldr	r2, [r3, #8]
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006338:	425b      	negs	r3, r3
 800633a:	441a      	add	r2, r3
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	2b02      	cmp	r3, #2
 8006344:	d105      	bne.n	8006352 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006346:	693b      	ldr	r3, [r7, #16]
 8006348:	2b00      	cmp	r3, #0
 800634a:	d002      	beq.n	8006352 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800634c:	693b      	ldr	r3, [r7, #16]
 800634e:	3b01      	subs	r3, #1
 8006350:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006352:	693b      	ldr	r3, [r7, #16]
 8006354:	1c5a      	adds	r2, r3, #1
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800635a:	697b      	ldr	r3, [r7, #20]
}
 800635c:	4618      	mov	r0, r3
 800635e:	3718      	adds	r7, #24
 8006360:	46bd      	mov	sp, r7
 8006362:	bd80      	pop	{r7, pc}

08006364 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8006364:	b580      	push	{r7, lr}
 8006366:	b082      	sub	sp, #8
 8006368:	af00      	add	r7, sp, #0
 800636a:	6078      	str	r0, [r7, #4]
 800636c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006372:	2b00      	cmp	r3, #0
 8006374:	d018      	beq.n	80063a8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	68da      	ldr	r2, [r3, #12]
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800637e:	441a      	add	r2, r3
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	68da      	ldr	r2, [r3, #12]
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	689b      	ldr	r3, [r3, #8]
 800638c:	429a      	cmp	r2, r3
 800638e:	d303      	bcc.n	8006398 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	681a      	ldr	r2, [r3, #0]
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	68d9      	ldr	r1, [r3, #12]
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063a0:	461a      	mov	r2, r3
 80063a2:	6838      	ldr	r0, [r7, #0]
 80063a4:	f002 ff9b 	bl	80092de <memcpy>
	}
}
 80063a8:	bf00      	nop
 80063aa:	3708      	adds	r7, #8
 80063ac:	46bd      	mov	sp, r7
 80063ae:	bd80      	pop	{r7, pc}

080063b0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80063b0:	b580      	push	{r7, lr}
 80063b2:	b084      	sub	sp, #16
 80063b4:	af00      	add	r7, sp, #0
 80063b6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80063b8:	f001 fda8 	bl	8007f0c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80063c2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80063c4:	e011      	b.n	80063ea <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d012      	beq.n	80063f4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	3324      	adds	r3, #36	; 0x24
 80063d2:	4618      	mov	r0, r3
 80063d4:	f000 fdbe 	bl	8006f54 <xTaskRemoveFromEventList>
 80063d8:	4603      	mov	r3, r0
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d001      	beq.n	80063e2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80063de:	f000 fe95 	bl	800710c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80063e2:	7bfb      	ldrb	r3, [r7, #15]
 80063e4:	3b01      	subs	r3, #1
 80063e6:	b2db      	uxtb	r3, r3
 80063e8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80063ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	dce9      	bgt.n	80063c6 <prvUnlockQueue+0x16>
 80063f2:	e000      	b.n	80063f6 <prvUnlockQueue+0x46>
					break;
 80063f4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	22ff      	movs	r2, #255	; 0xff
 80063fa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80063fe:	f001 fdb5 	bl	8007f6c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8006402:	f001 fd83 	bl	8007f0c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800640c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800640e:	e011      	b.n	8006434 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	691b      	ldr	r3, [r3, #16]
 8006414:	2b00      	cmp	r3, #0
 8006416:	d012      	beq.n	800643e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	3310      	adds	r3, #16
 800641c:	4618      	mov	r0, r3
 800641e:	f000 fd99 	bl	8006f54 <xTaskRemoveFromEventList>
 8006422:	4603      	mov	r3, r0
 8006424:	2b00      	cmp	r3, #0
 8006426:	d001      	beq.n	800642c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8006428:	f000 fe70 	bl	800710c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800642c:	7bbb      	ldrb	r3, [r7, #14]
 800642e:	3b01      	subs	r3, #1
 8006430:	b2db      	uxtb	r3, r3
 8006432:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006434:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006438:	2b00      	cmp	r3, #0
 800643a:	dce9      	bgt.n	8006410 <prvUnlockQueue+0x60>
 800643c:	e000      	b.n	8006440 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800643e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	22ff      	movs	r2, #255	; 0xff
 8006444:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8006448:	f001 fd90 	bl	8007f6c <vPortExitCritical>
}
 800644c:	bf00      	nop
 800644e:	3710      	adds	r7, #16
 8006450:	46bd      	mov	sp, r7
 8006452:	bd80      	pop	{r7, pc}

08006454 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8006454:	b580      	push	{r7, lr}
 8006456:	b084      	sub	sp, #16
 8006458:	af00      	add	r7, sp, #0
 800645a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800645c:	f001 fd56 	bl	8007f0c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006464:	2b00      	cmp	r3, #0
 8006466:	d102      	bne.n	800646e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8006468:	2301      	movs	r3, #1
 800646a:	60fb      	str	r3, [r7, #12]
 800646c:	e001      	b.n	8006472 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800646e:	2300      	movs	r3, #0
 8006470:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006472:	f001 fd7b 	bl	8007f6c <vPortExitCritical>

	return xReturn;
 8006476:	68fb      	ldr	r3, [r7, #12]
}
 8006478:	4618      	mov	r0, r3
 800647a:	3710      	adds	r7, #16
 800647c:	46bd      	mov	sp, r7
 800647e:	bd80      	pop	{r7, pc}

08006480 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8006480:	b580      	push	{r7, lr}
 8006482:	b084      	sub	sp, #16
 8006484:	af00      	add	r7, sp, #0
 8006486:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006488:	f001 fd40 	bl	8007f0c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006494:	429a      	cmp	r2, r3
 8006496:	d102      	bne.n	800649e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8006498:	2301      	movs	r3, #1
 800649a:	60fb      	str	r3, [r7, #12]
 800649c:	e001      	b.n	80064a2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800649e:	2300      	movs	r3, #0
 80064a0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80064a2:	f001 fd63 	bl	8007f6c <vPortExitCritical>

	return xReturn;
 80064a6:	68fb      	ldr	r3, [r7, #12]
}
 80064a8:	4618      	mov	r0, r3
 80064aa:	3710      	adds	r7, #16
 80064ac:	46bd      	mov	sp, r7
 80064ae:	bd80      	pop	{r7, pc}

080064b0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80064b0:	b480      	push	{r7}
 80064b2:	b085      	sub	sp, #20
 80064b4:	af00      	add	r7, sp, #0
 80064b6:	6078      	str	r0, [r7, #4]
 80064b8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80064ba:	2300      	movs	r3, #0
 80064bc:	60fb      	str	r3, [r7, #12]
 80064be:	e014      	b.n	80064ea <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80064c0:	4a0e      	ldr	r2, [pc, #56]	; (80064fc <vQueueAddToRegistry+0x4c>)
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d10b      	bne.n	80064e4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80064cc:	490b      	ldr	r1, [pc, #44]	; (80064fc <vQueueAddToRegistry+0x4c>)
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	683a      	ldr	r2, [r7, #0]
 80064d2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80064d6:	4a09      	ldr	r2, [pc, #36]	; (80064fc <vQueueAddToRegistry+0x4c>)
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	00db      	lsls	r3, r3, #3
 80064dc:	4413      	add	r3, r2
 80064de:	687a      	ldr	r2, [r7, #4]
 80064e0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80064e2:	e006      	b.n	80064f2 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	3301      	adds	r3, #1
 80064e8:	60fb      	str	r3, [r7, #12]
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	2b07      	cmp	r3, #7
 80064ee:	d9e7      	bls.n	80064c0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80064f0:	bf00      	nop
 80064f2:	bf00      	nop
 80064f4:	3714      	adds	r7, #20
 80064f6:	46bd      	mov	sp, r7
 80064f8:	bc80      	pop	{r7}
 80064fa:	4770      	bx	lr
 80064fc:	20000a64 	.word	0x20000a64

08006500 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8006500:	b480      	push	{r7}
 8006502:	b085      	sub	sp, #20
 8006504:	af00      	add	r7, sp, #0
 8006506:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006508:	2300      	movs	r3, #0
 800650a:	60fb      	str	r3, [r7, #12]
 800650c:	e016      	b.n	800653c <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800650e:	4a10      	ldr	r2, [pc, #64]	; (8006550 <vQueueUnregisterQueue+0x50>)
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	00db      	lsls	r3, r3, #3
 8006514:	4413      	add	r3, r2
 8006516:	685b      	ldr	r3, [r3, #4]
 8006518:	687a      	ldr	r2, [r7, #4]
 800651a:	429a      	cmp	r2, r3
 800651c:	d10b      	bne.n	8006536 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800651e:	4a0c      	ldr	r2, [pc, #48]	; (8006550 <vQueueUnregisterQueue+0x50>)
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	2100      	movs	r1, #0
 8006524:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8006528:	4a09      	ldr	r2, [pc, #36]	; (8006550 <vQueueUnregisterQueue+0x50>)
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	00db      	lsls	r3, r3, #3
 800652e:	4413      	add	r3, r2
 8006530:	2200      	movs	r2, #0
 8006532:	605a      	str	r2, [r3, #4]
				break;
 8006534:	e006      	b.n	8006544 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	3301      	adds	r3, #1
 800653a:	60fb      	str	r3, [r7, #12]
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	2b07      	cmp	r3, #7
 8006540:	d9e5      	bls.n	800650e <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8006542:	bf00      	nop
 8006544:	bf00      	nop
 8006546:	3714      	adds	r7, #20
 8006548:	46bd      	mov	sp, r7
 800654a:	bc80      	pop	{r7}
 800654c:	4770      	bx	lr
 800654e:	bf00      	nop
 8006550:	20000a64 	.word	0x20000a64

08006554 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006554:	b580      	push	{r7, lr}
 8006556:	b086      	sub	sp, #24
 8006558:	af00      	add	r7, sp, #0
 800655a:	60f8      	str	r0, [r7, #12]
 800655c:	60b9      	str	r1, [r7, #8]
 800655e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8006564:	f001 fcd2 	bl	8007f0c <vPortEnterCritical>
 8006568:	697b      	ldr	r3, [r7, #20]
 800656a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800656e:	b25b      	sxtb	r3, r3
 8006570:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006574:	d103      	bne.n	800657e <vQueueWaitForMessageRestricted+0x2a>
 8006576:	697b      	ldr	r3, [r7, #20]
 8006578:	2200      	movs	r2, #0
 800657a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800657e:	697b      	ldr	r3, [r7, #20]
 8006580:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006584:	b25b      	sxtb	r3, r3
 8006586:	f1b3 3fff 	cmp.w	r3, #4294967295
 800658a:	d103      	bne.n	8006594 <vQueueWaitForMessageRestricted+0x40>
 800658c:	697b      	ldr	r3, [r7, #20]
 800658e:	2200      	movs	r2, #0
 8006590:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006594:	f001 fcea 	bl	8007f6c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8006598:	697b      	ldr	r3, [r7, #20]
 800659a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800659c:	2b00      	cmp	r3, #0
 800659e:	d106      	bne.n	80065ae <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80065a0:	697b      	ldr	r3, [r7, #20]
 80065a2:	3324      	adds	r3, #36	; 0x24
 80065a4:	687a      	ldr	r2, [r7, #4]
 80065a6:	68b9      	ldr	r1, [r7, #8]
 80065a8:	4618      	mov	r0, r3
 80065aa:	f000 fca7 	bl	8006efc <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80065ae:	6978      	ldr	r0, [r7, #20]
 80065b0:	f7ff fefe 	bl	80063b0 <prvUnlockQueue>
	}
 80065b4:	bf00      	nop
 80065b6:	3718      	adds	r7, #24
 80065b8:	46bd      	mov	sp, r7
 80065ba:	bd80      	pop	{r7, pc}

080065bc <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80065bc:	b580      	push	{r7, lr}
 80065be:	b08e      	sub	sp, #56	; 0x38
 80065c0:	af04      	add	r7, sp, #16
 80065c2:	60f8      	str	r0, [r7, #12]
 80065c4:	60b9      	str	r1, [r7, #8]
 80065c6:	607a      	str	r2, [r7, #4]
 80065c8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80065ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d10a      	bne.n	80065e6 <xTaskCreateStatic+0x2a>
	__asm volatile
 80065d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065d4:	f383 8811 	msr	BASEPRI, r3
 80065d8:	f3bf 8f6f 	isb	sy
 80065dc:	f3bf 8f4f 	dsb	sy
 80065e0:	623b      	str	r3, [r7, #32]
}
 80065e2:	bf00      	nop
 80065e4:	e7fe      	b.n	80065e4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80065e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d10a      	bne.n	8006602 <xTaskCreateStatic+0x46>
	__asm volatile
 80065ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065f0:	f383 8811 	msr	BASEPRI, r3
 80065f4:	f3bf 8f6f 	isb	sy
 80065f8:	f3bf 8f4f 	dsb	sy
 80065fc:	61fb      	str	r3, [r7, #28]
}
 80065fe:	bf00      	nop
 8006600:	e7fe      	b.n	8006600 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006602:	235c      	movs	r3, #92	; 0x5c
 8006604:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006606:	693b      	ldr	r3, [r7, #16]
 8006608:	2b5c      	cmp	r3, #92	; 0x5c
 800660a:	d00a      	beq.n	8006622 <xTaskCreateStatic+0x66>
	__asm volatile
 800660c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006610:	f383 8811 	msr	BASEPRI, r3
 8006614:	f3bf 8f6f 	isb	sy
 8006618:	f3bf 8f4f 	dsb	sy
 800661c:	61bb      	str	r3, [r7, #24]
}
 800661e:	bf00      	nop
 8006620:	e7fe      	b.n	8006620 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8006622:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006624:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006626:	2b00      	cmp	r3, #0
 8006628:	d01e      	beq.n	8006668 <xTaskCreateStatic+0xac>
 800662a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800662c:	2b00      	cmp	r3, #0
 800662e:	d01b      	beq.n	8006668 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006630:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006632:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006634:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006636:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006638:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800663a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800663c:	2202      	movs	r2, #2
 800663e:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006642:	2300      	movs	r3, #0
 8006644:	9303      	str	r3, [sp, #12]
 8006646:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006648:	9302      	str	r3, [sp, #8]
 800664a:	f107 0314 	add.w	r3, r7, #20
 800664e:	9301      	str	r3, [sp, #4]
 8006650:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006652:	9300      	str	r3, [sp, #0]
 8006654:	683b      	ldr	r3, [r7, #0]
 8006656:	687a      	ldr	r2, [r7, #4]
 8006658:	68b9      	ldr	r1, [r7, #8]
 800665a:	68f8      	ldr	r0, [r7, #12]
 800665c:	f000 f850 	bl	8006700 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006660:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006662:	f000 f8dd 	bl	8006820 <prvAddNewTaskToReadyList>
 8006666:	e001      	b.n	800666c <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8006668:	2300      	movs	r3, #0
 800666a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800666c:	697b      	ldr	r3, [r7, #20]
	}
 800666e:	4618      	mov	r0, r3
 8006670:	3728      	adds	r7, #40	; 0x28
 8006672:	46bd      	mov	sp, r7
 8006674:	bd80      	pop	{r7, pc}

08006676 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006676:	b580      	push	{r7, lr}
 8006678:	b08c      	sub	sp, #48	; 0x30
 800667a:	af04      	add	r7, sp, #16
 800667c:	60f8      	str	r0, [r7, #12]
 800667e:	60b9      	str	r1, [r7, #8]
 8006680:	603b      	str	r3, [r7, #0]
 8006682:	4613      	mov	r3, r2
 8006684:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8006686:	88fb      	ldrh	r3, [r7, #6]
 8006688:	009b      	lsls	r3, r3, #2
 800668a:	4618      	mov	r0, r3
 800668c:	f001 fd3e 	bl	800810c <pvPortMalloc>
 8006690:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006692:	697b      	ldr	r3, [r7, #20]
 8006694:	2b00      	cmp	r3, #0
 8006696:	d00e      	beq.n	80066b6 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8006698:	205c      	movs	r0, #92	; 0x5c
 800669a:	f001 fd37 	bl	800810c <pvPortMalloc>
 800669e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80066a0:	69fb      	ldr	r3, [r7, #28]
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d003      	beq.n	80066ae <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80066a6:	69fb      	ldr	r3, [r7, #28]
 80066a8:	697a      	ldr	r2, [r7, #20]
 80066aa:	631a      	str	r2, [r3, #48]	; 0x30
 80066ac:	e005      	b.n	80066ba <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80066ae:	6978      	ldr	r0, [r7, #20]
 80066b0:	f001 fdf8 	bl	80082a4 <vPortFree>
 80066b4:	e001      	b.n	80066ba <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80066b6:	2300      	movs	r3, #0
 80066b8:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80066ba:	69fb      	ldr	r3, [r7, #28]
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d017      	beq.n	80066f0 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80066c0:	69fb      	ldr	r3, [r7, #28]
 80066c2:	2200      	movs	r2, #0
 80066c4:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80066c8:	88fa      	ldrh	r2, [r7, #6]
 80066ca:	2300      	movs	r3, #0
 80066cc:	9303      	str	r3, [sp, #12]
 80066ce:	69fb      	ldr	r3, [r7, #28]
 80066d0:	9302      	str	r3, [sp, #8]
 80066d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066d4:	9301      	str	r3, [sp, #4]
 80066d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066d8:	9300      	str	r3, [sp, #0]
 80066da:	683b      	ldr	r3, [r7, #0]
 80066dc:	68b9      	ldr	r1, [r7, #8]
 80066de:	68f8      	ldr	r0, [r7, #12]
 80066e0:	f000 f80e 	bl	8006700 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80066e4:	69f8      	ldr	r0, [r7, #28]
 80066e6:	f000 f89b 	bl	8006820 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80066ea:	2301      	movs	r3, #1
 80066ec:	61bb      	str	r3, [r7, #24]
 80066ee:	e002      	b.n	80066f6 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80066f0:	f04f 33ff 	mov.w	r3, #4294967295
 80066f4:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80066f6:	69bb      	ldr	r3, [r7, #24]
	}
 80066f8:	4618      	mov	r0, r3
 80066fa:	3720      	adds	r7, #32
 80066fc:	46bd      	mov	sp, r7
 80066fe:	bd80      	pop	{r7, pc}

08006700 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006700:	b580      	push	{r7, lr}
 8006702:	b088      	sub	sp, #32
 8006704:	af00      	add	r7, sp, #0
 8006706:	60f8      	str	r0, [r7, #12]
 8006708:	60b9      	str	r1, [r7, #8]
 800670a:	607a      	str	r2, [r7, #4]
 800670c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800670e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006710:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	009b      	lsls	r3, r3, #2
 8006716:	461a      	mov	r2, r3
 8006718:	21a5      	movs	r1, #165	; 0xa5
 800671a:	f002 fd53 	bl	80091c4 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800671e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006720:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006728:	3b01      	subs	r3, #1
 800672a:	009b      	lsls	r3, r3, #2
 800672c:	4413      	add	r3, r2
 800672e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006730:	69bb      	ldr	r3, [r7, #24]
 8006732:	f023 0307 	bic.w	r3, r3, #7
 8006736:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006738:	69bb      	ldr	r3, [r7, #24]
 800673a:	f003 0307 	and.w	r3, r3, #7
 800673e:	2b00      	cmp	r3, #0
 8006740:	d00a      	beq.n	8006758 <prvInitialiseNewTask+0x58>
	__asm volatile
 8006742:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006746:	f383 8811 	msr	BASEPRI, r3
 800674a:	f3bf 8f6f 	isb	sy
 800674e:	f3bf 8f4f 	dsb	sy
 8006752:	617b      	str	r3, [r7, #20]
}
 8006754:	bf00      	nop
 8006756:	e7fe      	b.n	8006756 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8006758:	68bb      	ldr	r3, [r7, #8]
 800675a:	2b00      	cmp	r3, #0
 800675c:	d01f      	beq.n	800679e <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800675e:	2300      	movs	r3, #0
 8006760:	61fb      	str	r3, [r7, #28]
 8006762:	e012      	b.n	800678a <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006764:	68ba      	ldr	r2, [r7, #8]
 8006766:	69fb      	ldr	r3, [r7, #28]
 8006768:	4413      	add	r3, r2
 800676a:	7819      	ldrb	r1, [r3, #0]
 800676c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800676e:	69fb      	ldr	r3, [r7, #28]
 8006770:	4413      	add	r3, r2
 8006772:	3334      	adds	r3, #52	; 0x34
 8006774:	460a      	mov	r2, r1
 8006776:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8006778:	68ba      	ldr	r2, [r7, #8]
 800677a:	69fb      	ldr	r3, [r7, #28]
 800677c:	4413      	add	r3, r2
 800677e:	781b      	ldrb	r3, [r3, #0]
 8006780:	2b00      	cmp	r3, #0
 8006782:	d006      	beq.n	8006792 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006784:	69fb      	ldr	r3, [r7, #28]
 8006786:	3301      	adds	r3, #1
 8006788:	61fb      	str	r3, [r7, #28]
 800678a:	69fb      	ldr	r3, [r7, #28]
 800678c:	2b0f      	cmp	r3, #15
 800678e:	d9e9      	bls.n	8006764 <prvInitialiseNewTask+0x64>
 8006790:	e000      	b.n	8006794 <prvInitialiseNewTask+0x94>
			{
				break;
 8006792:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006794:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006796:	2200      	movs	r2, #0
 8006798:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800679c:	e003      	b.n	80067a6 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800679e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067a0:	2200      	movs	r2, #0
 80067a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80067a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067a8:	2b37      	cmp	r3, #55	; 0x37
 80067aa:	d901      	bls.n	80067b0 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80067ac:	2337      	movs	r3, #55	; 0x37
 80067ae:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80067b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067b2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80067b4:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80067b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067b8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80067ba:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80067bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067be:	2200      	movs	r2, #0
 80067c0:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80067c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067c4:	3304      	adds	r3, #4
 80067c6:	4618      	mov	r0, r3
 80067c8:	f7fe fe5d 	bl	8005486 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80067cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067ce:	3318      	adds	r3, #24
 80067d0:	4618      	mov	r0, r3
 80067d2:	f7fe fe58 	bl	8005486 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80067d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80067da:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80067dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067de:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80067e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067e4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80067e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80067ea:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80067ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067ee:	2200      	movs	r2, #0
 80067f0:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80067f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067f4:	2200      	movs	r2, #0
 80067f6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80067fa:	683a      	ldr	r2, [r7, #0]
 80067fc:	68f9      	ldr	r1, [r7, #12]
 80067fe:	69b8      	ldr	r0, [r7, #24]
 8006800:	f001 fa90 	bl	8007d24 <pxPortInitialiseStack>
 8006804:	4602      	mov	r2, r0
 8006806:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006808:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800680a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800680c:	2b00      	cmp	r3, #0
 800680e:	d002      	beq.n	8006816 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006810:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006812:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006814:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006816:	bf00      	nop
 8006818:	3720      	adds	r7, #32
 800681a:	46bd      	mov	sp, r7
 800681c:	bd80      	pop	{r7, pc}
	...

08006820 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006820:	b580      	push	{r7, lr}
 8006822:	b082      	sub	sp, #8
 8006824:	af00      	add	r7, sp, #0
 8006826:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006828:	f001 fb70 	bl	8007f0c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800682c:	4b2d      	ldr	r3, [pc, #180]	; (80068e4 <prvAddNewTaskToReadyList+0xc4>)
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	3301      	adds	r3, #1
 8006832:	4a2c      	ldr	r2, [pc, #176]	; (80068e4 <prvAddNewTaskToReadyList+0xc4>)
 8006834:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006836:	4b2c      	ldr	r3, [pc, #176]	; (80068e8 <prvAddNewTaskToReadyList+0xc8>)
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	2b00      	cmp	r3, #0
 800683c:	d109      	bne.n	8006852 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800683e:	4a2a      	ldr	r2, [pc, #168]	; (80068e8 <prvAddNewTaskToReadyList+0xc8>)
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006844:	4b27      	ldr	r3, [pc, #156]	; (80068e4 <prvAddNewTaskToReadyList+0xc4>)
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	2b01      	cmp	r3, #1
 800684a:	d110      	bne.n	800686e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800684c:	f000 fc82 	bl	8007154 <prvInitialiseTaskLists>
 8006850:	e00d      	b.n	800686e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006852:	4b26      	ldr	r3, [pc, #152]	; (80068ec <prvAddNewTaskToReadyList+0xcc>)
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	2b00      	cmp	r3, #0
 8006858:	d109      	bne.n	800686e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800685a:	4b23      	ldr	r3, [pc, #140]	; (80068e8 <prvAddNewTaskToReadyList+0xc8>)
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006864:	429a      	cmp	r2, r3
 8006866:	d802      	bhi.n	800686e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006868:	4a1f      	ldr	r2, [pc, #124]	; (80068e8 <prvAddNewTaskToReadyList+0xc8>)
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800686e:	4b20      	ldr	r3, [pc, #128]	; (80068f0 <prvAddNewTaskToReadyList+0xd0>)
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	3301      	adds	r3, #1
 8006874:	4a1e      	ldr	r2, [pc, #120]	; (80068f0 <prvAddNewTaskToReadyList+0xd0>)
 8006876:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8006878:	4b1d      	ldr	r3, [pc, #116]	; (80068f0 <prvAddNewTaskToReadyList+0xd0>)
 800687a:	681a      	ldr	r2, [r3, #0]
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006884:	4b1b      	ldr	r3, [pc, #108]	; (80068f4 <prvAddNewTaskToReadyList+0xd4>)
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	429a      	cmp	r2, r3
 800688a:	d903      	bls.n	8006894 <prvAddNewTaskToReadyList+0x74>
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006890:	4a18      	ldr	r2, [pc, #96]	; (80068f4 <prvAddNewTaskToReadyList+0xd4>)
 8006892:	6013      	str	r3, [r2, #0]
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006898:	4613      	mov	r3, r2
 800689a:	009b      	lsls	r3, r3, #2
 800689c:	4413      	add	r3, r2
 800689e:	009b      	lsls	r3, r3, #2
 80068a0:	4a15      	ldr	r2, [pc, #84]	; (80068f8 <prvAddNewTaskToReadyList+0xd8>)
 80068a2:	441a      	add	r2, r3
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	3304      	adds	r3, #4
 80068a8:	4619      	mov	r1, r3
 80068aa:	4610      	mov	r0, r2
 80068ac:	f7fe fdf7 	bl	800549e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80068b0:	f001 fb5c 	bl	8007f6c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80068b4:	4b0d      	ldr	r3, [pc, #52]	; (80068ec <prvAddNewTaskToReadyList+0xcc>)
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d00e      	beq.n	80068da <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80068bc:	4b0a      	ldr	r3, [pc, #40]	; (80068e8 <prvAddNewTaskToReadyList+0xc8>)
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068c6:	429a      	cmp	r2, r3
 80068c8:	d207      	bcs.n	80068da <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80068ca:	4b0c      	ldr	r3, [pc, #48]	; (80068fc <prvAddNewTaskToReadyList+0xdc>)
 80068cc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80068d0:	601a      	str	r2, [r3, #0]
 80068d2:	f3bf 8f4f 	dsb	sy
 80068d6:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80068da:	bf00      	nop
 80068dc:	3708      	adds	r7, #8
 80068de:	46bd      	mov	sp, r7
 80068e0:	bd80      	pop	{r7, pc}
 80068e2:	bf00      	nop
 80068e4:	20000f78 	.word	0x20000f78
 80068e8:	20000aa4 	.word	0x20000aa4
 80068ec:	20000f84 	.word	0x20000f84
 80068f0:	20000f94 	.word	0x20000f94
 80068f4:	20000f80 	.word	0x20000f80
 80068f8:	20000aa8 	.word	0x20000aa8
 80068fc:	e000ed04 	.word	0xe000ed04

08006900 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 8006900:	b580      	push	{r7, lr}
 8006902:	b08a      	sub	sp, #40	; 0x28
 8006904:	af00      	add	r7, sp, #0
 8006906:	6078      	str	r0, [r7, #4]
 8006908:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 800690a:	2300      	movs	r3, #0
 800690c:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	2b00      	cmp	r3, #0
 8006912:	d10a      	bne.n	800692a <vTaskDelayUntil+0x2a>
	__asm volatile
 8006914:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006918:	f383 8811 	msr	BASEPRI, r3
 800691c:	f3bf 8f6f 	isb	sy
 8006920:	f3bf 8f4f 	dsb	sy
 8006924:	617b      	str	r3, [r7, #20]
}
 8006926:	bf00      	nop
 8006928:	e7fe      	b.n	8006928 <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 800692a:	683b      	ldr	r3, [r7, #0]
 800692c:	2b00      	cmp	r3, #0
 800692e:	d10a      	bne.n	8006946 <vTaskDelayUntil+0x46>
	__asm volatile
 8006930:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006934:	f383 8811 	msr	BASEPRI, r3
 8006938:	f3bf 8f6f 	isb	sy
 800693c:	f3bf 8f4f 	dsb	sy
 8006940:	613b      	str	r3, [r7, #16]
}
 8006942:	bf00      	nop
 8006944:	e7fe      	b.n	8006944 <vTaskDelayUntil+0x44>
		configASSERT( uxSchedulerSuspended == 0 );
 8006946:	4b2a      	ldr	r3, [pc, #168]	; (80069f0 <vTaskDelayUntil+0xf0>)
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	2b00      	cmp	r3, #0
 800694c:	d00a      	beq.n	8006964 <vTaskDelayUntil+0x64>
	__asm volatile
 800694e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006952:	f383 8811 	msr	BASEPRI, r3
 8006956:	f3bf 8f6f 	isb	sy
 800695a:	f3bf 8f4f 	dsb	sy
 800695e:	60fb      	str	r3, [r7, #12]
}
 8006960:	bf00      	nop
 8006962:	e7fe      	b.n	8006962 <vTaskDelayUntil+0x62>

		vTaskSuspendAll();
 8006964:	f000 f8b0 	bl	8006ac8 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 8006968:	4b22      	ldr	r3, [pc, #136]	; (80069f4 <vTaskDelayUntil+0xf4>)
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	683a      	ldr	r2, [r7, #0]
 8006974:	4413      	add	r3, r2
 8006976:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	6a3a      	ldr	r2, [r7, #32]
 800697e:	429a      	cmp	r2, r3
 8006980:	d20b      	bcs.n	800699a <vTaskDelayUntil+0x9a>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	69fa      	ldr	r2, [r7, #28]
 8006988:	429a      	cmp	r2, r3
 800698a:	d211      	bcs.n	80069b0 <vTaskDelayUntil+0xb0>
 800698c:	69fa      	ldr	r2, [r7, #28]
 800698e:	6a3b      	ldr	r3, [r7, #32]
 8006990:	429a      	cmp	r2, r3
 8006992:	d90d      	bls.n	80069b0 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 8006994:	2301      	movs	r3, #1
 8006996:	627b      	str	r3, [r7, #36]	; 0x24
 8006998:	e00a      	b.n	80069b0 <vTaskDelayUntil+0xb0>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	69fa      	ldr	r2, [r7, #28]
 80069a0:	429a      	cmp	r2, r3
 80069a2:	d303      	bcc.n	80069ac <vTaskDelayUntil+0xac>
 80069a4:	69fa      	ldr	r2, [r7, #28]
 80069a6:	6a3b      	ldr	r3, [r7, #32]
 80069a8:	429a      	cmp	r2, r3
 80069aa:	d901      	bls.n	80069b0 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 80069ac:	2301      	movs	r3, #1
 80069ae:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	69fa      	ldr	r2, [r7, #28]
 80069b4:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 80069b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d006      	beq.n	80069ca <vTaskDelayUntil+0xca>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 80069bc:	69fa      	ldr	r2, [r7, #28]
 80069be:	6a3b      	ldr	r3, [r7, #32]
 80069c0:	1ad3      	subs	r3, r2, r3
 80069c2:	2100      	movs	r1, #0
 80069c4:	4618      	mov	r0, r3
 80069c6:	f000 fe0d 	bl	80075e4 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 80069ca:	f000 f88b 	bl	8006ae4 <xTaskResumeAll>
 80069ce:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80069d0:	69bb      	ldr	r3, [r7, #24]
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d107      	bne.n	80069e6 <vTaskDelayUntil+0xe6>
		{
			portYIELD_WITHIN_API();
 80069d6:	4b08      	ldr	r3, [pc, #32]	; (80069f8 <vTaskDelayUntil+0xf8>)
 80069d8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80069dc:	601a      	str	r2, [r3, #0]
 80069de:	f3bf 8f4f 	dsb	sy
 80069e2:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80069e6:	bf00      	nop
 80069e8:	3728      	adds	r7, #40	; 0x28
 80069ea:	46bd      	mov	sp, r7
 80069ec:	bd80      	pop	{r7, pc}
 80069ee:	bf00      	nop
 80069f0:	20000fa0 	.word	0x20000fa0
 80069f4:	20000f7c 	.word	0x20000f7c
 80069f8:	e000ed04 	.word	0xe000ed04

080069fc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80069fc:	b580      	push	{r7, lr}
 80069fe:	b08a      	sub	sp, #40	; 0x28
 8006a00:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006a02:	2300      	movs	r3, #0
 8006a04:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006a06:	2300      	movs	r3, #0
 8006a08:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006a0a:	463a      	mov	r2, r7
 8006a0c:	1d39      	adds	r1, r7, #4
 8006a0e:	f107 0308 	add.w	r3, r7, #8
 8006a12:	4618      	mov	r0, r3
 8006a14:	f7fe fce6 	bl	80053e4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006a18:	6839      	ldr	r1, [r7, #0]
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	68ba      	ldr	r2, [r7, #8]
 8006a1e:	9202      	str	r2, [sp, #8]
 8006a20:	9301      	str	r3, [sp, #4]
 8006a22:	2300      	movs	r3, #0
 8006a24:	9300      	str	r3, [sp, #0]
 8006a26:	2300      	movs	r3, #0
 8006a28:	460a      	mov	r2, r1
 8006a2a:	4921      	ldr	r1, [pc, #132]	; (8006ab0 <vTaskStartScheduler+0xb4>)
 8006a2c:	4821      	ldr	r0, [pc, #132]	; (8006ab4 <vTaskStartScheduler+0xb8>)
 8006a2e:	f7ff fdc5 	bl	80065bc <xTaskCreateStatic>
 8006a32:	4603      	mov	r3, r0
 8006a34:	4a20      	ldr	r2, [pc, #128]	; (8006ab8 <vTaskStartScheduler+0xbc>)
 8006a36:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006a38:	4b1f      	ldr	r3, [pc, #124]	; (8006ab8 <vTaskStartScheduler+0xbc>)
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d002      	beq.n	8006a46 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006a40:	2301      	movs	r3, #1
 8006a42:	617b      	str	r3, [r7, #20]
 8006a44:	e001      	b.n	8006a4a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006a46:	2300      	movs	r3, #0
 8006a48:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8006a4a:	697b      	ldr	r3, [r7, #20]
 8006a4c:	2b01      	cmp	r3, #1
 8006a4e:	d102      	bne.n	8006a56 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8006a50:	f000 fe1c 	bl	800768c <xTimerCreateTimerTask>
 8006a54:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006a56:	697b      	ldr	r3, [r7, #20]
 8006a58:	2b01      	cmp	r3, #1
 8006a5a:	d116      	bne.n	8006a8a <vTaskStartScheduler+0x8e>
	__asm volatile
 8006a5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a60:	f383 8811 	msr	BASEPRI, r3
 8006a64:	f3bf 8f6f 	isb	sy
 8006a68:	f3bf 8f4f 	dsb	sy
 8006a6c:	613b      	str	r3, [r7, #16]
}
 8006a6e:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006a70:	4b12      	ldr	r3, [pc, #72]	; (8006abc <vTaskStartScheduler+0xc0>)
 8006a72:	f04f 32ff 	mov.w	r2, #4294967295
 8006a76:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006a78:	4b11      	ldr	r3, [pc, #68]	; (8006ac0 <vTaskStartScheduler+0xc4>)
 8006a7a:	2201      	movs	r2, #1
 8006a7c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006a7e:	4b11      	ldr	r3, [pc, #68]	; (8006ac4 <vTaskStartScheduler+0xc8>)
 8006a80:	2200      	movs	r2, #0
 8006a82:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006a84:	f001 f9d0 	bl	8007e28 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006a88:	e00e      	b.n	8006aa8 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006a8a:	697b      	ldr	r3, [r7, #20]
 8006a8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a90:	d10a      	bne.n	8006aa8 <vTaskStartScheduler+0xac>
	__asm volatile
 8006a92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a96:	f383 8811 	msr	BASEPRI, r3
 8006a9a:	f3bf 8f6f 	isb	sy
 8006a9e:	f3bf 8f4f 	dsb	sy
 8006aa2:	60fb      	str	r3, [r7, #12]
}
 8006aa4:	bf00      	nop
 8006aa6:	e7fe      	b.n	8006aa6 <vTaskStartScheduler+0xaa>
}
 8006aa8:	bf00      	nop
 8006aaa:	3718      	adds	r7, #24
 8006aac:	46bd      	mov	sp, r7
 8006aae:	bd80      	pop	{r7, pc}
 8006ab0:	0800b3a8 	.word	0x0800b3a8
 8006ab4:	08007125 	.word	0x08007125
 8006ab8:	20000f9c 	.word	0x20000f9c
 8006abc:	20000f98 	.word	0x20000f98
 8006ac0:	20000f84 	.word	0x20000f84
 8006ac4:	20000f7c 	.word	0x20000f7c

08006ac8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006ac8:	b480      	push	{r7}
 8006aca:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8006acc:	4b04      	ldr	r3, [pc, #16]	; (8006ae0 <vTaskSuspendAll+0x18>)
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	3301      	adds	r3, #1
 8006ad2:	4a03      	ldr	r2, [pc, #12]	; (8006ae0 <vTaskSuspendAll+0x18>)
 8006ad4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8006ad6:	bf00      	nop
 8006ad8:	46bd      	mov	sp, r7
 8006ada:	bc80      	pop	{r7}
 8006adc:	4770      	bx	lr
 8006ade:	bf00      	nop
 8006ae0:	20000fa0 	.word	0x20000fa0

08006ae4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006ae4:	b580      	push	{r7, lr}
 8006ae6:	b084      	sub	sp, #16
 8006ae8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006aea:	2300      	movs	r3, #0
 8006aec:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006aee:	2300      	movs	r3, #0
 8006af0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006af2:	4b42      	ldr	r3, [pc, #264]	; (8006bfc <xTaskResumeAll+0x118>)
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d10a      	bne.n	8006b10 <xTaskResumeAll+0x2c>
	__asm volatile
 8006afa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006afe:	f383 8811 	msr	BASEPRI, r3
 8006b02:	f3bf 8f6f 	isb	sy
 8006b06:	f3bf 8f4f 	dsb	sy
 8006b0a:	603b      	str	r3, [r7, #0]
}
 8006b0c:	bf00      	nop
 8006b0e:	e7fe      	b.n	8006b0e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006b10:	f001 f9fc 	bl	8007f0c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006b14:	4b39      	ldr	r3, [pc, #228]	; (8006bfc <xTaskResumeAll+0x118>)
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	3b01      	subs	r3, #1
 8006b1a:	4a38      	ldr	r2, [pc, #224]	; (8006bfc <xTaskResumeAll+0x118>)
 8006b1c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006b1e:	4b37      	ldr	r3, [pc, #220]	; (8006bfc <xTaskResumeAll+0x118>)
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d162      	bne.n	8006bec <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006b26:	4b36      	ldr	r3, [pc, #216]	; (8006c00 <xTaskResumeAll+0x11c>)
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d05e      	beq.n	8006bec <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006b2e:	e02f      	b.n	8006b90 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006b30:	4b34      	ldr	r3, [pc, #208]	; (8006c04 <xTaskResumeAll+0x120>)
 8006b32:	68db      	ldr	r3, [r3, #12]
 8006b34:	68db      	ldr	r3, [r3, #12]
 8006b36:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	3318      	adds	r3, #24
 8006b3c:	4618      	mov	r0, r3
 8006b3e:	f7fe fd09 	bl	8005554 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	3304      	adds	r3, #4
 8006b46:	4618      	mov	r0, r3
 8006b48:	f7fe fd04 	bl	8005554 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b50:	4b2d      	ldr	r3, [pc, #180]	; (8006c08 <xTaskResumeAll+0x124>)
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	429a      	cmp	r2, r3
 8006b56:	d903      	bls.n	8006b60 <xTaskResumeAll+0x7c>
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b5c:	4a2a      	ldr	r2, [pc, #168]	; (8006c08 <xTaskResumeAll+0x124>)
 8006b5e:	6013      	str	r3, [r2, #0]
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b64:	4613      	mov	r3, r2
 8006b66:	009b      	lsls	r3, r3, #2
 8006b68:	4413      	add	r3, r2
 8006b6a:	009b      	lsls	r3, r3, #2
 8006b6c:	4a27      	ldr	r2, [pc, #156]	; (8006c0c <xTaskResumeAll+0x128>)
 8006b6e:	441a      	add	r2, r3
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	3304      	adds	r3, #4
 8006b74:	4619      	mov	r1, r3
 8006b76:	4610      	mov	r0, r2
 8006b78:	f7fe fc91 	bl	800549e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b80:	4b23      	ldr	r3, [pc, #140]	; (8006c10 <xTaskResumeAll+0x12c>)
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b86:	429a      	cmp	r2, r3
 8006b88:	d302      	bcc.n	8006b90 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8006b8a:	4b22      	ldr	r3, [pc, #136]	; (8006c14 <xTaskResumeAll+0x130>)
 8006b8c:	2201      	movs	r2, #1
 8006b8e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006b90:	4b1c      	ldr	r3, [pc, #112]	; (8006c04 <xTaskResumeAll+0x120>)
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d1cb      	bne.n	8006b30 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d001      	beq.n	8006ba2 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006b9e:	f000 fb77 	bl	8007290 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8006ba2:	4b1d      	ldr	r3, [pc, #116]	; (8006c18 <xTaskResumeAll+0x134>)
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d010      	beq.n	8006bd0 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006bae:	f000 f845 	bl	8006c3c <xTaskIncrementTick>
 8006bb2:	4603      	mov	r3, r0
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d002      	beq.n	8006bbe <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8006bb8:	4b16      	ldr	r3, [pc, #88]	; (8006c14 <xTaskResumeAll+0x130>)
 8006bba:	2201      	movs	r2, #1
 8006bbc:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	3b01      	subs	r3, #1
 8006bc2:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d1f1      	bne.n	8006bae <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8006bca:	4b13      	ldr	r3, [pc, #76]	; (8006c18 <xTaskResumeAll+0x134>)
 8006bcc:	2200      	movs	r2, #0
 8006bce:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006bd0:	4b10      	ldr	r3, [pc, #64]	; (8006c14 <xTaskResumeAll+0x130>)
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d009      	beq.n	8006bec <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006bd8:	2301      	movs	r3, #1
 8006bda:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006bdc:	4b0f      	ldr	r3, [pc, #60]	; (8006c1c <xTaskResumeAll+0x138>)
 8006bde:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006be2:	601a      	str	r2, [r3, #0]
 8006be4:	f3bf 8f4f 	dsb	sy
 8006be8:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006bec:	f001 f9be 	bl	8007f6c <vPortExitCritical>

	return xAlreadyYielded;
 8006bf0:	68bb      	ldr	r3, [r7, #8]
}
 8006bf2:	4618      	mov	r0, r3
 8006bf4:	3710      	adds	r7, #16
 8006bf6:	46bd      	mov	sp, r7
 8006bf8:	bd80      	pop	{r7, pc}
 8006bfa:	bf00      	nop
 8006bfc:	20000fa0 	.word	0x20000fa0
 8006c00:	20000f78 	.word	0x20000f78
 8006c04:	20000f38 	.word	0x20000f38
 8006c08:	20000f80 	.word	0x20000f80
 8006c0c:	20000aa8 	.word	0x20000aa8
 8006c10:	20000aa4 	.word	0x20000aa4
 8006c14:	20000f8c 	.word	0x20000f8c
 8006c18:	20000f88 	.word	0x20000f88
 8006c1c:	e000ed04 	.word	0xe000ed04

08006c20 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006c20:	b480      	push	{r7}
 8006c22:	b083      	sub	sp, #12
 8006c24:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8006c26:	4b04      	ldr	r3, [pc, #16]	; (8006c38 <xTaskGetTickCount+0x18>)
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8006c2c:	687b      	ldr	r3, [r7, #4]
}
 8006c2e:	4618      	mov	r0, r3
 8006c30:	370c      	adds	r7, #12
 8006c32:	46bd      	mov	sp, r7
 8006c34:	bc80      	pop	{r7}
 8006c36:	4770      	bx	lr
 8006c38:	20000f7c 	.word	0x20000f7c

08006c3c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006c3c:	b580      	push	{r7, lr}
 8006c3e:	b086      	sub	sp, #24
 8006c40:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006c42:	2300      	movs	r3, #0
 8006c44:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006c46:	4b4f      	ldr	r3, [pc, #316]	; (8006d84 <xTaskIncrementTick+0x148>)
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	f040 808f 	bne.w	8006d6e <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006c50:	4b4d      	ldr	r3, [pc, #308]	; (8006d88 <xTaskIncrementTick+0x14c>)
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	3301      	adds	r3, #1
 8006c56:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006c58:	4a4b      	ldr	r2, [pc, #300]	; (8006d88 <xTaskIncrementTick+0x14c>)
 8006c5a:	693b      	ldr	r3, [r7, #16]
 8006c5c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006c5e:	693b      	ldr	r3, [r7, #16]
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d120      	bne.n	8006ca6 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8006c64:	4b49      	ldr	r3, [pc, #292]	; (8006d8c <xTaskIncrementTick+0x150>)
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d00a      	beq.n	8006c84 <xTaskIncrementTick+0x48>
	__asm volatile
 8006c6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c72:	f383 8811 	msr	BASEPRI, r3
 8006c76:	f3bf 8f6f 	isb	sy
 8006c7a:	f3bf 8f4f 	dsb	sy
 8006c7e:	603b      	str	r3, [r7, #0]
}
 8006c80:	bf00      	nop
 8006c82:	e7fe      	b.n	8006c82 <xTaskIncrementTick+0x46>
 8006c84:	4b41      	ldr	r3, [pc, #260]	; (8006d8c <xTaskIncrementTick+0x150>)
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	60fb      	str	r3, [r7, #12]
 8006c8a:	4b41      	ldr	r3, [pc, #260]	; (8006d90 <xTaskIncrementTick+0x154>)
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	4a3f      	ldr	r2, [pc, #252]	; (8006d8c <xTaskIncrementTick+0x150>)
 8006c90:	6013      	str	r3, [r2, #0]
 8006c92:	4a3f      	ldr	r2, [pc, #252]	; (8006d90 <xTaskIncrementTick+0x154>)
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	6013      	str	r3, [r2, #0]
 8006c98:	4b3e      	ldr	r3, [pc, #248]	; (8006d94 <xTaskIncrementTick+0x158>)
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	3301      	adds	r3, #1
 8006c9e:	4a3d      	ldr	r2, [pc, #244]	; (8006d94 <xTaskIncrementTick+0x158>)
 8006ca0:	6013      	str	r3, [r2, #0]
 8006ca2:	f000 faf5 	bl	8007290 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006ca6:	4b3c      	ldr	r3, [pc, #240]	; (8006d98 <xTaskIncrementTick+0x15c>)
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	693a      	ldr	r2, [r7, #16]
 8006cac:	429a      	cmp	r2, r3
 8006cae:	d349      	bcc.n	8006d44 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006cb0:	4b36      	ldr	r3, [pc, #216]	; (8006d8c <xTaskIncrementTick+0x150>)
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d104      	bne.n	8006cc4 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006cba:	4b37      	ldr	r3, [pc, #220]	; (8006d98 <xTaskIncrementTick+0x15c>)
 8006cbc:	f04f 32ff 	mov.w	r2, #4294967295
 8006cc0:	601a      	str	r2, [r3, #0]
					break;
 8006cc2:	e03f      	b.n	8006d44 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006cc4:	4b31      	ldr	r3, [pc, #196]	; (8006d8c <xTaskIncrementTick+0x150>)
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	68db      	ldr	r3, [r3, #12]
 8006cca:	68db      	ldr	r3, [r3, #12]
 8006ccc:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006cce:	68bb      	ldr	r3, [r7, #8]
 8006cd0:	685b      	ldr	r3, [r3, #4]
 8006cd2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006cd4:	693a      	ldr	r2, [r7, #16]
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	429a      	cmp	r2, r3
 8006cda:	d203      	bcs.n	8006ce4 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006cdc:	4a2e      	ldr	r2, [pc, #184]	; (8006d98 <xTaskIncrementTick+0x15c>)
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8006ce2:	e02f      	b.n	8006d44 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006ce4:	68bb      	ldr	r3, [r7, #8]
 8006ce6:	3304      	adds	r3, #4
 8006ce8:	4618      	mov	r0, r3
 8006cea:	f7fe fc33 	bl	8005554 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006cee:	68bb      	ldr	r3, [r7, #8]
 8006cf0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d004      	beq.n	8006d00 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006cf6:	68bb      	ldr	r3, [r7, #8]
 8006cf8:	3318      	adds	r3, #24
 8006cfa:	4618      	mov	r0, r3
 8006cfc:	f7fe fc2a 	bl	8005554 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006d00:	68bb      	ldr	r3, [r7, #8]
 8006d02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d04:	4b25      	ldr	r3, [pc, #148]	; (8006d9c <xTaskIncrementTick+0x160>)
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	429a      	cmp	r2, r3
 8006d0a:	d903      	bls.n	8006d14 <xTaskIncrementTick+0xd8>
 8006d0c:	68bb      	ldr	r3, [r7, #8]
 8006d0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d10:	4a22      	ldr	r2, [pc, #136]	; (8006d9c <xTaskIncrementTick+0x160>)
 8006d12:	6013      	str	r3, [r2, #0]
 8006d14:	68bb      	ldr	r3, [r7, #8]
 8006d16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d18:	4613      	mov	r3, r2
 8006d1a:	009b      	lsls	r3, r3, #2
 8006d1c:	4413      	add	r3, r2
 8006d1e:	009b      	lsls	r3, r3, #2
 8006d20:	4a1f      	ldr	r2, [pc, #124]	; (8006da0 <xTaskIncrementTick+0x164>)
 8006d22:	441a      	add	r2, r3
 8006d24:	68bb      	ldr	r3, [r7, #8]
 8006d26:	3304      	adds	r3, #4
 8006d28:	4619      	mov	r1, r3
 8006d2a:	4610      	mov	r0, r2
 8006d2c:	f7fe fbb7 	bl	800549e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006d30:	68bb      	ldr	r3, [r7, #8]
 8006d32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d34:	4b1b      	ldr	r3, [pc, #108]	; (8006da4 <xTaskIncrementTick+0x168>)
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d3a:	429a      	cmp	r2, r3
 8006d3c:	d3b8      	bcc.n	8006cb0 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8006d3e:	2301      	movs	r3, #1
 8006d40:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006d42:	e7b5      	b.n	8006cb0 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006d44:	4b17      	ldr	r3, [pc, #92]	; (8006da4 <xTaskIncrementTick+0x168>)
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d4a:	4915      	ldr	r1, [pc, #84]	; (8006da0 <xTaskIncrementTick+0x164>)
 8006d4c:	4613      	mov	r3, r2
 8006d4e:	009b      	lsls	r3, r3, #2
 8006d50:	4413      	add	r3, r2
 8006d52:	009b      	lsls	r3, r3, #2
 8006d54:	440b      	add	r3, r1
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	2b01      	cmp	r3, #1
 8006d5a:	d901      	bls.n	8006d60 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8006d5c:	2301      	movs	r3, #1
 8006d5e:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8006d60:	4b11      	ldr	r3, [pc, #68]	; (8006da8 <xTaskIncrementTick+0x16c>)
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d007      	beq.n	8006d78 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8006d68:	2301      	movs	r3, #1
 8006d6a:	617b      	str	r3, [r7, #20]
 8006d6c:	e004      	b.n	8006d78 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8006d6e:	4b0f      	ldr	r3, [pc, #60]	; (8006dac <xTaskIncrementTick+0x170>)
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	3301      	adds	r3, #1
 8006d74:	4a0d      	ldr	r2, [pc, #52]	; (8006dac <xTaskIncrementTick+0x170>)
 8006d76:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8006d78:	697b      	ldr	r3, [r7, #20]
}
 8006d7a:	4618      	mov	r0, r3
 8006d7c:	3718      	adds	r7, #24
 8006d7e:	46bd      	mov	sp, r7
 8006d80:	bd80      	pop	{r7, pc}
 8006d82:	bf00      	nop
 8006d84:	20000fa0 	.word	0x20000fa0
 8006d88:	20000f7c 	.word	0x20000f7c
 8006d8c:	20000f30 	.word	0x20000f30
 8006d90:	20000f34 	.word	0x20000f34
 8006d94:	20000f90 	.word	0x20000f90
 8006d98:	20000f98 	.word	0x20000f98
 8006d9c:	20000f80 	.word	0x20000f80
 8006da0:	20000aa8 	.word	0x20000aa8
 8006da4:	20000aa4 	.word	0x20000aa4
 8006da8:	20000f8c 	.word	0x20000f8c
 8006dac:	20000f88 	.word	0x20000f88

08006db0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006db0:	b580      	push	{r7, lr}
 8006db2:	b086      	sub	sp, #24
 8006db4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006db6:	4b3a      	ldr	r3, [pc, #232]	; (8006ea0 <vTaskSwitchContext+0xf0>)
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d003      	beq.n	8006dc6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006dbe:	4b39      	ldr	r3, [pc, #228]	; (8006ea4 <vTaskSwitchContext+0xf4>)
 8006dc0:	2201      	movs	r2, #1
 8006dc2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006dc4:	e068      	b.n	8006e98 <vTaskSwitchContext+0xe8>
		xYieldPending = pdFALSE;
 8006dc6:	4b37      	ldr	r3, [pc, #220]	; (8006ea4 <vTaskSwitchContext+0xf4>)
 8006dc8:	2200      	movs	r2, #0
 8006dca:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 8006dcc:	4b36      	ldr	r3, [pc, #216]	; (8006ea8 <vTaskSwitchContext+0xf8>)
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006dd2:	613b      	str	r3, [r7, #16]
 8006dd4:	f04f 33a5 	mov.w	r3, #2779096485	; 0xa5a5a5a5
 8006dd8:	60fb      	str	r3, [r7, #12]
 8006dda:	693b      	ldr	r3, [r7, #16]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	68fa      	ldr	r2, [r7, #12]
 8006de0:	429a      	cmp	r2, r3
 8006de2:	d111      	bne.n	8006e08 <vTaskSwitchContext+0x58>
 8006de4:	693b      	ldr	r3, [r7, #16]
 8006de6:	3304      	adds	r3, #4
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	68fa      	ldr	r2, [r7, #12]
 8006dec:	429a      	cmp	r2, r3
 8006dee:	d10b      	bne.n	8006e08 <vTaskSwitchContext+0x58>
 8006df0:	693b      	ldr	r3, [r7, #16]
 8006df2:	3308      	adds	r3, #8
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	68fa      	ldr	r2, [r7, #12]
 8006df8:	429a      	cmp	r2, r3
 8006dfa:	d105      	bne.n	8006e08 <vTaskSwitchContext+0x58>
 8006dfc:	693b      	ldr	r3, [r7, #16]
 8006dfe:	330c      	adds	r3, #12
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	68fa      	ldr	r2, [r7, #12]
 8006e04:	429a      	cmp	r2, r3
 8006e06:	d008      	beq.n	8006e1a <vTaskSwitchContext+0x6a>
 8006e08:	4b27      	ldr	r3, [pc, #156]	; (8006ea8 <vTaskSwitchContext+0xf8>)
 8006e0a:	681a      	ldr	r2, [r3, #0]
 8006e0c:	4b26      	ldr	r3, [pc, #152]	; (8006ea8 <vTaskSwitchContext+0xf8>)
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	3334      	adds	r3, #52	; 0x34
 8006e12:	4619      	mov	r1, r3
 8006e14:	4610      	mov	r0, r2
 8006e16:	f7fe fad5 	bl	80053c4 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006e1a:	4b24      	ldr	r3, [pc, #144]	; (8006eac <vTaskSwitchContext+0xfc>)
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	617b      	str	r3, [r7, #20]
 8006e20:	e010      	b.n	8006e44 <vTaskSwitchContext+0x94>
 8006e22:	697b      	ldr	r3, [r7, #20]
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d10a      	bne.n	8006e3e <vTaskSwitchContext+0x8e>
	__asm volatile
 8006e28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e2c:	f383 8811 	msr	BASEPRI, r3
 8006e30:	f3bf 8f6f 	isb	sy
 8006e34:	f3bf 8f4f 	dsb	sy
 8006e38:	607b      	str	r3, [r7, #4]
}
 8006e3a:	bf00      	nop
 8006e3c:	e7fe      	b.n	8006e3c <vTaskSwitchContext+0x8c>
 8006e3e:	697b      	ldr	r3, [r7, #20]
 8006e40:	3b01      	subs	r3, #1
 8006e42:	617b      	str	r3, [r7, #20]
 8006e44:	491a      	ldr	r1, [pc, #104]	; (8006eb0 <vTaskSwitchContext+0x100>)
 8006e46:	697a      	ldr	r2, [r7, #20]
 8006e48:	4613      	mov	r3, r2
 8006e4a:	009b      	lsls	r3, r3, #2
 8006e4c:	4413      	add	r3, r2
 8006e4e:	009b      	lsls	r3, r3, #2
 8006e50:	440b      	add	r3, r1
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d0e4      	beq.n	8006e22 <vTaskSwitchContext+0x72>
 8006e58:	697a      	ldr	r2, [r7, #20]
 8006e5a:	4613      	mov	r3, r2
 8006e5c:	009b      	lsls	r3, r3, #2
 8006e5e:	4413      	add	r3, r2
 8006e60:	009b      	lsls	r3, r3, #2
 8006e62:	4a13      	ldr	r2, [pc, #76]	; (8006eb0 <vTaskSwitchContext+0x100>)
 8006e64:	4413      	add	r3, r2
 8006e66:	60bb      	str	r3, [r7, #8]
 8006e68:	68bb      	ldr	r3, [r7, #8]
 8006e6a:	685b      	ldr	r3, [r3, #4]
 8006e6c:	685a      	ldr	r2, [r3, #4]
 8006e6e:	68bb      	ldr	r3, [r7, #8]
 8006e70:	605a      	str	r2, [r3, #4]
 8006e72:	68bb      	ldr	r3, [r7, #8]
 8006e74:	685a      	ldr	r2, [r3, #4]
 8006e76:	68bb      	ldr	r3, [r7, #8]
 8006e78:	3308      	adds	r3, #8
 8006e7a:	429a      	cmp	r2, r3
 8006e7c:	d104      	bne.n	8006e88 <vTaskSwitchContext+0xd8>
 8006e7e:	68bb      	ldr	r3, [r7, #8]
 8006e80:	685b      	ldr	r3, [r3, #4]
 8006e82:	685a      	ldr	r2, [r3, #4]
 8006e84:	68bb      	ldr	r3, [r7, #8]
 8006e86:	605a      	str	r2, [r3, #4]
 8006e88:	68bb      	ldr	r3, [r7, #8]
 8006e8a:	685b      	ldr	r3, [r3, #4]
 8006e8c:	68db      	ldr	r3, [r3, #12]
 8006e8e:	4a06      	ldr	r2, [pc, #24]	; (8006ea8 <vTaskSwitchContext+0xf8>)
 8006e90:	6013      	str	r3, [r2, #0]
 8006e92:	4a06      	ldr	r2, [pc, #24]	; (8006eac <vTaskSwitchContext+0xfc>)
 8006e94:	697b      	ldr	r3, [r7, #20]
 8006e96:	6013      	str	r3, [r2, #0]
}
 8006e98:	bf00      	nop
 8006e9a:	3718      	adds	r7, #24
 8006e9c:	46bd      	mov	sp, r7
 8006e9e:	bd80      	pop	{r7, pc}
 8006ea0:	20000fa0 	.word	0x20000fa0
 8006ea4:	20000f8c 	.word	0x20000f8c
 8006ea8:	20000aa4 	.word	0x20000aa4
 8006eac:	20000f80 	.word	0x20000f80
 8006eb0:	20000aa8 	.word	0x20000aa8

08006eb4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006eb4:	b580      	push	{r7, lr}
 8006eb6:	b084      	sub	sp, #16
 8006eb8:	af00      	add	r7, sp, #0
 8006eba:	6078      	str	r0, [r7, #4]
 8006ebc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d10a      	bne.n	8006eda <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8006ec4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ec8:	f383 8811 	msr	BASEPRI, r3
 8006ecc:	f3bf 8f6f 	isb	sy
 8006ed0:	f3bf 8f4f 	dsb	sy
 8006ed4:	60fb      	str	r3, [r7, #12]
}
 8006ed6:	bf00      	nop
 8006ed8:	e7fe      	b.n	8006ed8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006eda:	4b07      	ldr	r3, [pc, #28]	; (8006ef8 <vTaskPlaceOnEventList+0x44>)
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	3318      	adds	r3, #24
 8006ee0:	4619      	mov	r1, r3
 8006ee2:	6878      	ldr	r0, [r7, #4]
 8006ee4:	f7fe fafe 	bl	80054e4 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006ee8:	2101      	movs	r1, #1
 8006eea:	6838      	ldr	r0, [r7, #0]
 8006eec:	f000 fb7a 	bl	80075e4 <prvAddCurrentTaskToDelayedList>
}
 8006ef0:	bf00      	nop
 8006ef2:	3710      	adds	r7, #16
 8006ef4:	46bd      	mov	sp, r7
 8006ef6:	bd80      	pop	{r7, pc}
 8006ef8:	20000aa4 	.word	0x20000aa4

08006efc <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006efc:	b580      	push	{r7, lr}
 8006efe:	b086      	sub	sp, #24
 8006f00:	af00      	add	r7, sp, #0
 8006f02:	60f8      	str	r0, [r7, #12]
 8006f04:	60b9      	str	r1, [r7, #8]
 8006f06:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d10a      	bne.n	8006f24 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8006f0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f12:	f383 8811 	msr	BASEPRI, r3
 8006f16:	f3bf 8f6f 	isb	sy
 8006f1a:	f3bf 8f4f 	dsb	sy
 8006f1e:	617b      	str	r3, [r7, #20]
}
 8006f20:	bf00      	nop
 8006f22:	e7fe      	b.n	8006f22 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006f24:	4b0a      	ldr	r3, [pc, #40]	; (8006f50 <vTaskPlaceOnEventListRestricted+0x54>)
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	3318      	adds	r3, #24
 8006f2a:	4619      	mov	r1, r3
 8006f2c:	68f8      	ldr	r0, [r7, #12]
 8006f2e:	f7fe fab6 	bl	800549e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d002      	beq.n	8006f3e <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8006f38:	f04f 33ff 	mov.w	r3, #4294967295
 8006f3c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8006f3e:	6879      	ldr	r1, [r7, #4]
 8006f40:	68b8      	ldr	r0, [r7, #8]
 8006f42:	f000 fb4f 	bl	80075e4 <prvAddCurrentTaskToDelayedList>
	}
 8006f46:	bf00      	nop
 8006f48:	3718      	adds	r7, #24
 8006f4a:	46bd      	mov	sp, r7
 8006f4c:	bd80      	pop	{r7, pc}
 8006f4e:	bf00      	nop
 8006f50:	20000aa4 	.word	0x20000aa4

08006f54 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006f54:	b580      	push	{r7, lr}
 8006f56:	b086      	sub	sp, #24
 8006f58:	af00      	add	r7, sp, #0
 8006f5a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	68db      	ldr	r3, [r3, #12]
 8006f60:	68db      	ldr	r3, [r3, #12]
 8006f62:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006f64:	693b      	ldr	r3, [r7, #16]
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d10a      	bne.n	8006f80 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8006f6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f6e:	f383 8811 	msr	BASEPRI, r3
 8006f72:	f3bf 8f6f 	isb	sy
 8006f76:	f3bf 8f4f 	dsb	sy
 8006f7a:	60fb      	str	r3, [r7, #12]
}
 8006f7c:	bf00      	nop
 8006f7e:	e7fe      	b.n	8006f7e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006f80:	693b      	ldr	r3, [r7, #16]
 8006f82:	3318      	adds	r3, #24
 8006f84:	4618      	mov	r0, r3
 8006f86:	f7fe fae5 	bl	8005554 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006f8a:	4b1e      	ldr	r3, [pc, #120]	; (8007004 <xTaskRemoveFromEventList+0xb0>)
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d11d      	bne.n	8006fce <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006f92:	693b      	ldr	r3, [r7, #16]
 8006f94:	3304      	adds	r3, #4
 8006f96:	4618      	mov	r0, r3
 8006f98:	f7fe fadc 	bl	8005554 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006f9c:	693b      	ldr	r3, [r7, #16]
 8006f9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006fa0:	4b19      	ldr	r3, [pc, #100]	; (8007008 <xTaskRemoveFromEventList+0xb4>)
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	429a      	cmp	r2, r3
 8006fa6:	d903      	bls.n	8006fb0 <xTaskRemoveFromEventList+0x5c>
 8006fa8:	693b      	ldr	r3, [r7, #16]
 8006faa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fac:	4a16      	ldr	r2, [pc, #88]	; (8007008 <xTaskRemoveFromEventList+0xb4>)
 8006fae:	6013      	str	r3, [r2, #0]
 8006fb0:	693b      	ldr	r3, [r7, #16]
 8006fb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006fb4:	4613      	mov	r3, r2
 8006fb6:	009b      	lsls	r3, r3, #2
 8006fb8:	4413      	add	r3, r2
 8006fba:	009b      	lsls	r3, r3, #2
 8006fbc:	4a13      	ldr	r2, [pc, #76]	; (800700c <xTaskRemoveFromEventList+0xb8>)
 8006fbe:	441a      	add	r2, r3
 8006fc0:	693b      	ldr	r3, [r7, #16]
 8006fc2:	3304      	adds	r3, #4
 8006fc4:	4619      	mov	r1, r3
 8006fc6:	4610      	mov	r0, r2
 8006fc8:	f7fe fa69 	bl	800549e <vListInsertEnd>
 8006fcc:	e005      	b.n	8006fda <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006fce:	693b      	ldr	r3, [r7, #16]
 8006fd0:	3318      	adds	r3, #24
 8006fd2:	4619      	mov	r1, r3
 8006fd4:	480e      	ldr	r0, [pc, #56]	; (8007010 <xTaskRemoveFromEventList+0xbc>)
 8006fd6:	f7fe fa62 	bl	800549e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006fda:	693b      	ldr	r3, [r7, #16]
 8006fdc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006fde:	4b0d      	ldr	r3, [pc, #52]	; (8007014 <xTaskRemoveFromEventList+0xc0>)
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fe4:	429a      	cmp	r2, r3
 8006fe6:	d905      	bls.n	8006ff4 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006fe8:	2301      	movs	r3, #1
 8006fea:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006fec:	4b0a      	ldr	r3, [pc, #40]	; (8007018 <xTaskRemoveFromEventList+0xc4>)
 8006fee:	2201      	movs	r2, #1
 8006ff0:	601a      	str	r2, [r3, #0]
 8006ff2:	e001      	b.n	8006ff8 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8006ff4:	2300      	movs	r3, #0
 8006ff6:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8006ff8:	697b      	ldr	r3, [r7, #20]
}
 8006ffa:	4618      	mov	r0, r3
 8006ffc:	3718      	adds	r7, #24
 8006ffe:	46bd      	mov	sp, r7
 8007000:	bd80      	pop	{r7, pc}
 8007002:	bf00      	nop
 8007004:	20000fa0 	.word	0x20000fa0
 8007008:	20000f80 	.word	0x20000f80
 800700c:	20000aa8 	.word	0x20000aa8
 8007010:	20000f38 	.word	0x20000f38
 8007014:	20000aa4 	.word	0x20000aa4
 8007018:	20000f8c 	.word	0x20000f8c

0800701c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800701c:	b480      	push	{r7}
 800701e:	b083      	sub	sp, #12
 8007020:	af00      	add	r7, sp, #0
 8007022:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007024:	4b06      	ldr	r3, [pc, #24]	; (8007040 <vTaskInternalSetTimeOutState+0x24>)
 8007026:	681a      	ldr	r2, [r3, #0]
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800702c:	4b05      	ldr	r3, [pc, #20]	; (8007044 <vTaskInternalSetTimeOutState+0x28>)
 800702e:	681a      	ldr	r2, [r3, #0]
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	605a      	str	r2, [r3, #4]
}
 8007034:	bf00      	nop
 8007036:	370c      	adds	r7, #12
 8007038:	46bd      	mov	sp, r7
 800703a:	bc80      	pop	{r7}
 800703c:	4770      	bx	lr
 800703e:	bf00      	nop
 8007040:	20000f90 	.word	0x20000f90
 8007044:	20000f7c 	.word	0x20000f7c

08007048 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007048:	b580      	push	{r7, lr}
 800704a:	b088      	sub	sp, #32
 800704c:	af00      	add	r7, sp, #0
 800704e:	6078      	str	r0, [r7, #4]
 8007050:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	2b00      	cmp	r3, #0
 8007056:	d10a      	bne.n	800706e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8007058:	f04f 0350 	mov.w	r3, #80	; 0x50
 800705c:	f383 8811 	msr	BASEPRI, r3
 8007060:	f3bf 8f6f 	isb	sy
 8007064:	f3bf 8f4f 	dsb	sy
 8007068:	613b      	str	r3, [r7, #16]
}
 800706a:	bf00      	nop
 800706c:	e7fe      	b.n	800706c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800706e:	683b      	ldr	r3, [r7, #0]
 8007070:	2b00      	cmp	r3, #0
 8007072:	d10a      	bne.n	800708a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8007074:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007078:	f383 8811 	msr	BASEPRI, r3
 800707c:	f3bf 8f6f 	isb	sy
 8007080:	f3bf 8f4f 	dsb	sy
 8007084:	60fb      	str	r3, [r7, #12]
}
 8007086:	bf00      	nop
 8007088:	e7fe      	b.n	8007088 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800708a:	f000 ff3f 	bl	8007f0c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800708e:	4b1d      	ldr	r3, [pc, #116]	; (8007104 <xTaskCheckForTimeOut+0xbc>)
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	685b      	ldr	r3, [r3, #4]
 8007098:	69ba      	ldr	r2, [r7, #24]
 800709a:	1ad3      	subs	r3, r2, r3
 800709c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800709e:	683b      	ldr	r3, [r7, #0]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80070a6:	d102      	bne.n	80070ae <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80070a8:	2300      	movs	r3, #0
 80070aa:	61fb      	str	r3, [r7, #28]
 80070ac:	e023      	b.n	80070f6 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	681a      	ldr	r2, [r3, #0]
 80070b2:	4b15      	ldr	r3, [pc, #84]	; (8007108 <xTaskCheckForTimeOut+0xc0>)
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	429a      	cmp	r2, r3
 80070b8:	d007      	beq.n	80070ca <xTaskCheckForTimeOut+0x82>
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	685b      	ldr	r3, [r3, #4]
 80070be:	69ba      	ldr	r2, [r7, #24]
 80070c0:	429a      	cmp	r2, r3
 80070c2:	d302      	bcc.n	80070ca <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80070c4:	2301      	movs	r3, #1
 80070c6:	61fb      	str	r3, [r7, #28]
 80070c8:	e015      	b.n	80070f6 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80070ca:	683b      	ldr	r3, [r7, #0]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	697a      	ldr	r2, [r7, #20]
 80070d0:	429a      	cmp	r2, r3
 80070d2:	d20b      	bcs.n	80070ec <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80070d4:	683b      	ldr	r3, [r7, #0]
 80070d6:	681a      	ldr	r2, [r3, #0]
 80070d8:	697b      	ldr	r3, [r7, #20]
 80070da:	1ad2      	subs	r2, r2, r3
 80070dc:	683b      	ldr	r3, [r7, #0]
 80070de:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80070e0:	6878      	ldr	r0, [r7, #4]
 80070e2:	f7ff ff9b 	bl	800701c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80070e6:	2300      	movs	r3, #0
 80070e8:	61fb      	str	r3, [r7, #28]
 80070ea:	e004      	b.n	80070f6 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80070ec:	683b      	ldr	r3, [r7, #0]
 80070ee:	2200      	movs	r2, #0
 80070f0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80070f2:	2301      	movs	r3, #1
 80070f4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80070f6:	f000 ff39 	bl	8007f6c <vPortExitCritical>

	return xReturn;
 80070fa:	69fb      	ldr	r3, [r7, #28]
}
 80070fc:	4618      	mov	r0, r3
 80070fe:	3720      	adds	r7, #32
 8007100:	46bd      	mov	sp, r7
 8007102:	bd80      	pop	{r7, pc}
 8007104:	20000f7c 	.word	0x20000f7c
 8007108:	20000f90 	.word	0x20000f90

0800710c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800710c:	b480      	push	{r7}
 800710e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007110:	4b03      	ldr	r3, [pc, #12]	; (8007120 <vTaskMissedYield+0x14>)
 8007112:	2201      	movs	r2, #1
 8007114:	601a      	str	r2, [r3, #0]
}
 8007116:	bf00      	nop
 8007118:	46bd      	mov	sp, r7
 800711a:	bc80      	pop	{r7}
 800711c:	4770      	bx	lr
 800711e:	bf00      	nop
 8007120:	20000f8c 	.word	0x20000f8c

08007124 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007124:	b580      	push	{r7, lr}
 8007126:	b082      	sub	sp, #8
 8007128:	af00      	add	r7, sp, #0
 800712a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800712c:	f000 f852 	bl	80071d4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007130:	4b06      	ldr	r3, [pc, #24]	; (800714c <prvIdleTask+0x28>)
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	2b01      	cmp	r3, #1
 8007136:	d9f9      	bls.n	800712c <prvIdleTask+0x8>
			{
				taskYIELD();
 8007138:	4b05      	ldr	r3, [pc, #20]	; (8007150 <prvIdleTask+0x2c>)
 800713a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800713e:	601a      	str	r2, [r3, #0]
 8007140:	f3bf 8f4f 	dsb	sy
 8007144:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007148:	e7f0      	b.n	800712c <prvIdleTask+0x8>
 800714a:	bf00      	nop
 800714c:	20000aa8 	.word	0x20000aa8
 8007150:	e000ed04 	.word	0xe000ed04

08007154 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007154:	b580      	push	{r7, lr}
 8007156:	b082      	sub	sp, #8
 8007158:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800715a:	2300      	movs	r3, #0
 800715c:	607b      	str	r3, [r7, #4]
 800715e:	e00c      	b.n	800717a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007160:	687a      	ldr	r2, [r7, #4]
 8007162:	4613      	mov	r3, r2
 8007164:	009b      	lsls	r3, r3, #2
 8007166:	4413      	add	r3, r2
 8007168:	009b      	lsls	r3, r3, #2
 800716a:	4a12      	ldr	r2, [pc, #72]	; (80071b4 <prvInitialiseTaskLists+0x60>)
 800716c:	4413      	add	r3, r2
 800716e:	4618      	mov	r0, r3
 8007170:	f7fe f96a 	bl	8005448 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	3301      	adds	r3, #1
 8007178:	607b      	str	r3, [r7, #4]
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	2b37      	cmp	r3, #55	; 0x37
 800717e:	d9ef      	bls.n	8007160 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007180:	480d      	ldr	r0, [pc, #52]	; (80071b8 <prvInitialiseTaskLists+0x64>)
 8007182:	f7fe f961 	bl	8005448 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007186:	480d      	ldr	r0, [pc, #52]	; (80071bc <prvInitialiseTaskLists+0x68>)
 8007188:	f7fe f95e 	bl	8005448 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800718c:	480c      	ldr	r0, [pc, #48]	; (80071c0 <prvInitialiseTaskLists+0x6c>)
 800718e:	f7fe f95b 	bl	8005448 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007192:	480c      	ldr	r0, [pc, #48]	; (80071c4 <prvInitialiseTaskLists+0x70>)
 8007194:	f7fe f958 	bl	8005448 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007198:	480b      	ldr	r0, [pc, #44]	; (80071c8 <prvInitialiseTaskLists+0x74>)
 800719a:	f7fe f955 	bl	8005448 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800719e:	4b0b      	ldr	r3, [pc, #44]	; (80071cc <prvInitialiseTaskLists+0x78>)
 80071a0:	4a05      	ldr	r2, [pc, #20]	; (80071b8 <prvInitialiseTaskLists+0x64>)
 80071a2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80071a4:	4b0a      	ldr	r3, [pc, #40]	; (80071d0 <prvInitialiseTaskLists+0x7c>)
 80071a6:	4a05      	ldr	r2, [pc, #20]	; (80071bc <prvInitialiseTaskLists+0x68>)
 80071a8:	601a      	str	r2, [r3, #0]
}
 80071aa:	bf00      	nop
 80071ac:	3708      	adds	r7, #8
 80071ae:	46bd      	mov	sp, r7
 80071b0:	bd80      	pop	{r7, pc}
 80071b2:	bf00      	nop
 80071b4:	20000aa8 	.word	0x20000aa8
 80071b8:	20000f08 	.word	0x20000f08
 80071bc:	20000f1c 	.word	0x20000f1c
 80071c0:	20000f38 	.word	0x20000f38
 80071c4:	20000f4c 	.word	0x20000f4c
 80071c8:	20000f64 	.word	0x20000f64
 80071cc:	20000f30 	.word	0x20000f30
 80071d0:	20000f34 	.word	0x20000f34

080071d4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80071d4:	b580      	push	{r7, lr}
 80071d6:	b082      	sub	sp, #8
 80071d8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80071da:	e019      	b.n	8007210 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80071dc:	f000 fe96 	bl	8007f0c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80071e0:	4b10      	ldr	r3, [pc, #64]	; (8007224 <prvCheckTasksWaitingTermination+0x50>)
 80071e2:	68db      	ldr	r3, [r3, #12]
 80071e4:	68db      	ldr	r3, [r3, #12]
 80071e6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	3304      	adds	r3, #4
 80071ec:	4618      	mov	r0, r3
 80071ee:	f7fe f9b1 	bl	8005554 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80071f2:	4b0d      	ldr	r3, [pc, #52]	; (8007228 <prvCheckTasksWaitingTermination+0x54>)
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	3b01      	subs	r3, #1
 80071f8:	4a0b      	ldr	r2, [pc, #44]	; (8007228 <prvCheckTasksWaitingTermination+0x54>)
 80071fa:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80071fc:	4b0b      	ldr	r3, [pc, #44]	; (800722c <prvCheckTasksWaitingTermination+0x58>)
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	3b01      	subs	r3, #1
 8007202:	4a0a      	ldr	r2, [pc, #40]	; (800722c <prvCheckTasksWaitingTermination+0x58>)
 8007204:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007206:	f000 feb1 	bl	8007f6c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800720a:	6878      	ldr	r0, [r7, #4]
 800720c:	f000 f810 	bl	8007230 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007210:	4b06      	ldr	r3, [pc, #24]	; (800722c <prvCheckTasksWaitingTermination+0x58>)
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	2b00      	cmp	r3, #0
 8007216:	d1e1      	bne.n	80071dc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007218:	bf00      	nop
 800721a:	bf00      	nop
 800721c:	3708      	adds	r7, #8
 800721e:	46bd      	mov	sp, r7
 8007220:	bd80      	pop	{r7, pc}
 8007222:	bf00      	nop
 8007224:	20000f4c 	.word	0x20000f4c
 8007228:	20000f78 	.word	0x20000f78
 800722c:	20000f60 	.word	0x20000f60

08007230 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007230:	b580      	push	{r7, lr}
 8007232:	b084      	sub	sp, #16
 8007234:	af00      	add	r7, sp, #0
 8007236:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800723e:	2b00      	cmp	r3, #0
 8007240:	d108      	bne.n	8007254 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007246:	4618      	mov	r0, r3
 8007248:	f001 f82c 	bl	80082a4 <vPortFree>
				vPortFree( pxTCB );
 800724c:	6878      	ldr	r0, [r7, #4]
 800724e:	f001 f829 	bl	80082a4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007252:	e018      	b.n	8007286 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800725a:	2b01      	cmp	r3, #1
 800725c:	d103      	bne.n	8007266 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800725e:	6878      	ldr	r0, [r7, #4]
 8007260:	f001 f820 	bl	80082a4 <vPortFree>
	}
 8007264:	e00f      	b.n	8007286 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800726c:	2b02      	cmp	r3, #2
 800726e:	d00a      	beq.n	8007286 <prvDeleteTCB+0x56>
	__asm volatile
 8007270:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007274:	f383 8811 	msr	BASEPRI, r3
 8007278:	f3bf 8f6f 	isb	sy
 800727c:	f3bf 8f4f 	dsb	sy
 8007280:	60fb      	str	r3, [r7, #12]
}
 8007282:	bf00      	nop
 8007284:	e7fe      	b.n	8007284 <prvDeleteTCB+0x54>
	}
 8007286:	bf00      	nop
 8007288:	3710      	adds	r7, #16
 800728a:	46bd      	mov	sp, r7
 800728c:	bd80      	pop	{r7, pc}
	...

08007290 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007290:	b480      	push	{r7}
 8007292:	b083      	sub	sp, #12
 8007294:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007296:	4b0c      	ldr	r3, [pc, #48]	; (80072c8 <prvResetNextTaskUnblockTime+0x38>)
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	2b00      	cmp	r3, #0
 800729e:	d104      	bne.n	80072aa <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80072a0:	4b0a      	ldr	r3, [pc, #40]	; (80072cc <prvResetNextTaskUnblockTime+0x3c>)
 80072a2:	f04f 32ff 	mov.w	r2, #4294967295
 80072a6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80072a8:	e008      	b.n	80072bc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80072aa:	4b07      	ldr	r3, [pc, #28]	; (80072c8 <prvResetNextTaskUnblockTime+0x38>)
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	68db      	ldr	r3, [r3, #12]
 80072b0:	68db      	ldr	r3, [r3, #12]
 80072b2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	685b      	ldr	r3, [r3, #4]
 80072b8:	4a04      	ldr	r2, [pc, #16]	; (80072cc <prvResetNextTaskUnblockTime+0x3c>)
 80072ba:	6013      	str	r3, [r2, #0]
}
 80072bc:	bf00      	nop
 80072be:	370c      	adds	r7, #12
 80072c0:	46bd      	mov	sp, r7
 80072c2:	bc80      	pop	{r7}
 80072c4:	4770      	bx	lr
 80072c6:	bf00      	nop
 80072c8:	20000f30 	.word	0x20000f30
 80072cc:	20000f98 	.word	0x20000f98

080072d0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80072d0:	b480      	push	{r7}
 80072d2:	b083      	sub	sp, #12
 80072d4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80072d6:	4b0b      	ldr	r3, [pc, #44]	; (8007304 <xTaskGetSchedulerState+0x34>)
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d102      	bne.n	80072e4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80072de:	2301      	movs	r3, #1
 80072e0:	607b      	str	r3, [r7, #4]
 80072e2:	e008      	b.n	80072f6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80072e4:	4b08      	ldr	r3, [pc, #32]	; (8007308 <xTaskGetSchedulerState+0x38>)
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	d102      	bne.n	80072f2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80072ec:	2302      	movs	r3, #2
 80072ee:	607b      	str	r3, [r7, #4]
 80072f0:	e001      	b.n	80072f6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80072f2:	2300      	movs	r3, #0
 80072f4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80072f6:	687b      	ldr	r3, [r7, #4]
	}
 80072f8:	4618      	mov	r0, r3
 80072fa:	370c      	adds	r7, #12
 80072fc:	46bd      	mov	sp, r7
 80072fe:	bc80      	pop	{r7}
 8007300:	4770      	bx	lr
 8007302:	bf00      	nop
 8007304:	20000f84 	.word	0x20000f84
 8007308:	20000fa0 	.word	0x20000fa0

0800730c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800730c:	b580      	push	{r7, lr}
 800730e:	b084      	sub	sp, #16
 8007310:	af00      	add	r7, sp, #0
 8007312:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8007318:	2300      	movs	r3, #0
 800731a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	2b00      	cmp	r3, #0
 8007320:	d051      	beq.n	80073c6 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8007322:	68bb      	ldr	r3, [r7, #8]
 8007324:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007326:	4b2a      	ldr	r3, [pc, #168]	; (80073d0 <xTaskPriorityInherit+0xc4>)
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800732c:	429a      	cmp	r2, r3
 800732e:	d241      	bcs.n	80073b4 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007330:	68bb      	ldr	r3, [r7, #8]
 8007332:	699b      	ldr	r3, [r3, #24]
 8007334:	2b00      	cmp	r3, #0
 8007336:	db06      	blt.n	8007346 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007338:	4b25      	ldr	r3, [pc, #148]	; (80073d0 <xTaskPriorityInherit+0xc4>)
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800733e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007342:	68bb      	ldr	r3, [r7, #8]
 8007344:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8007346:	68bb      	ldr	r3, [r7, #8]
 8007348:	6959      	ldr	r1, [r3, #20]
 800734a:	68bb      	ldr	r3, [r7, #8]
 800734c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800734e:	4613      	mov	r3, r2
 8007350:	009b      	lsls	r3, r3, #2
 8007352:	4413      	add	r3, r2
 8007354:	009b      	lsls	r3, r3, #2
 8007356:	4a1f      	ldr	r2, [pc, #124]	; (80073d4 <xTaskPriorityInherit+0xc8>)
 8007358:	4413      	add	r3, r2
 800735a:	4299      	cmp	r1, r3
 800735c:	d122      	bne.n	80073a4 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800735e:	68bb      	ldr	r3, [r7, #8]
 8007360:	3304      	adds	r3, #4
 8007362:	4618      	mov	r0, r3
 8007364:	f7fe f8f6 	bl	8005554 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007368:	4b19      	ldr	r3, [pc, #100]	; (80073d0 <xTaskPriorityInherit+0xc4>)
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800736e:	68bb      	ldr	r3, [r7, #8]
 8007370:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8007372:	68bb      	ldr	r3, [r7, #8]
 8007374:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007376:	4b18      	ldr	r3, [pc, #96]	; (80073d8 <xTaskPriorityInherit+0xcc>)
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	429a      	cmp	r2, r3
 800737c:	d903      	bls.n	8007386 <xTaskPriorityInherit+0x7a>
 800737e:	68bb      	ldr	r3, [r7, #8]
 8007380:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007382:	4a15      	ldr	r2, [pc, #84]	; (80073d8 <xTaskPriorityInherit+0xcc>)
 8007384:	6013      	str	r3, [r2, #0]
 8007386:	68bb      	ldr	r3, [r7, #8]
 8007388:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800738a:	4613      	mov	r3, r2
 800738c:	009b      	lsls	r3, r3, #2
 800738e:	4413      	add	r3, r2
 8007390:	009b      	lsls	r3, r3, #2
 8007392:	4a10      	ldr	r2, [pc, #64]	; (80073d4 <xTaskPriorityInherit+0xc8>)
 8007394:	441a      	add	r2, r3
 8007396:	68bb      	ldr	r3, [r7, #8]
 8007398:	3304      	adds	r3, #4
 800739a:	4619      	mov	r1, r3
 800739c:	4610      	mov	r0, r2
 800739e:	f7fe f87e 	bl	800549e <vListInsertEnd>
 80073a2:	e004      	b.n	80073ae <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80073a4:	4b0a      	ldr	r3, [pc, #40]	; (80073d0 <xTaskPriorityInherit+0xc4>)
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80073aa:	68bb      	ldr	r3, [r7, #8]
 80073ac:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80073ae:	2301      	movs	r3, #1
 80073b0:	60fb      	str	r3, [r7, #12]
 80073b2:	e008      	b.n	80073c6 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80073b4:	68bb      	ldr	r3, [r7, #8]
 80073b6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80073b8:	4b05      	ldr	r3, [pc, #20]	; (80073d0 <xTaskPriorityInherit+0xc4>)
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073be:	429a      	cmp	r2, r3
 80073c0:	d201      	bcs.n	80073c6 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80073c2:	2301      	movs	r3, #1
 80073c4:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80073c6:	68fb      	ldr	r3, [r7, #12]
	}
 80073c8:	4618      	mov	r0, r3
 80073ca:	3710      	adds	r7, #16
 80073cc:	46bd      	mov	sp, r7
 80073ce:	bd80      	pop	{r7, pc}
 80073d0:	20000aa4 	.word	0x20000aa4
 80073d4:	20000aa8 	.word	0x20000aa8
 80073d8:	20000f80 	.word	0x20000f80

080073dc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80073dc:	b580      	push	{r7, lr}
 80073de:	b086      	sub	sp, #24
 80073e0:	af00      	add	r7, sp, #0
 80073e2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80073e8:	2300      	movs	r3, #0
 80073ea:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d056      	beq.n	80074a0 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80073f2:	4b2e      	ldr	r3, [pc, #184]	; (80074ac <xTaskPriorityDisinherit+0xd0>)
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	693a      	ldr	r2, [r7, #16]
 80073f8:	429a      	cmp	r2, r3
 80073fa:	d00a      	beq.n	8007412 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80073fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007400:	f383 8811 	msr	BASEPRI, r3
 8007404:	f3bf 8f6f 	isb	sy
 8007408:	f3bf 8f4f 	dsb	sy
 800740c:	60fb      	str	r3, [r7, #12]
}
 800740e:	bf00      	nop
 8007410:	e7fe      	b.n	8007410 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8007412:	693b      	ldr	r3, [r7, #16]
 8007414:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007416:	2b00      	cmp	r3, #0
 8007418:	d10a      	bne.n	8007430 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800741a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800741e:	f383 8811 	msr	BASEPRI, r3
 8007422:	f3bf 8f6f 	isb	sy
 8007426:	f3bf 8f4f 	dsb	sy
 800742a:	60bb      	str	r3, [r7, #8]
}
 800742c:	bf00      	nop
 800742e:	e7fe      	b.n	800742e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8007430:	693b      	ldr	r3, [r7, #16]
 8007432:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007434:	1e5a      	subs	r2, r3, #1
 8007436:	693b      	ldr	r3, [r7, #16]
 8007438:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800743a:	693b      	ldr	r3, [r7, #16]
 800743c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800743e:	693b      	ldr	r3, [r7, #16]
 8007440:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007442:	429a      	cmp	r2, r3
 8007444:	d02c      	beq.n	80074a0 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8007446:	693b      	ldr	r3, [r7, #16]
 8007448:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800744a:	2b00      	cmp	r3, #0
 800744c:	d128      	bne.n	80074a0 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800744e:	693b      	ldr	r3, [r7, #16]
 8007450:	3304      	adds	r3, #4
 8007452:	4618      	mov	r0, r3
 8007454:	f7fe f87e 	bl	8005554 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007458:	693b      	ldr	r3, [r7, #16]
 800745a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800745c:	693b      	ldr	r3, [r7, #16]
 800745e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007460:	693b      	ldr	r3, [r7, #16]
 8007462:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007464:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007468:	693b      	ldr	r3, [r7, #16]
 800746a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800746c:	693b      	ldr	r3, [r7, #16]
 800746e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007470:	4b0f      	ldr	r3, [pc, #60]	; (80074b0 <xTaskPriorityDisinherit+0xd4>)
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	429a      	cmp	r2, r3
 8007476:	d903      	bls.n	8007480 <xTaskPriorityDisinherit+0xa4>
 8007478:	693b      	ldr	r3, [r7, #16]
 800747a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800747c:	4a0c      	ldr	r2, [pc, #48]	; (80074b0 <xTaskPriorityDisinherit+0xd4>)
 800747e:	6013      	str	r3, [r2, #0]
 8007480:	693b      	ldr	r3, [r7, #16]
 8007482:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007484:	4613      	mov	r3, r2
 8007486:	009b      	lsls	r3, r3, #2
 8007488:	4413      	add	r3, r2
 800748a:	009b      	lsls	r3, r3, #2
 800748c:	4a09      	ldr	r2, [pc, #36]	; (80074b4 <xTaskPriorityDisinherit+0xd8>)
 800748e:	441a      	add	r2, r3
 8007490:	693b      	ldr	r3, [r7, #16]
 8007492:	3304      	adds	r3, #4
 8007494:	4619      	mov	r1, r3
 8007496:	4610      	mov	r0, r2
 8007498:	f7fe f801 	bl	800549e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800749c:	2301      	movs	r3, #1
 800749e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80074a0:	697b      	ldr	r3, [r7, #20]
	}
 80074a2:	4618      	mov	r0, r3
 80074a4:	3718      	adds	r7, #24
 80074a6:	46bd      	mov	sp, r7
 80074a8:	bd80      	pop	{r7, pc}
 80074aa:	bf00      	nop
 80074ac:	20000aa4 	.word	0x20000aa4
 80074b0:	20000f80 	.word	0x20000f80
 80074b4:	20000aa8 	.word	0x20000aa8

080074b8 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80074b8:	b580      	push	{r7, lr}
 80074ba:	b088      	sub	sp, #32
 80074bc:	af00      	add	r7, sp, #0
 80074be:	6078      	str	r0, [r7, #4]
 80074c0:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80074c6:	2301      	movs	r3, #1
 80074c8:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	d06a      	beq.n	80075a6 <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80074d0:	69bb      	ldr	r3, [r7, #24]
 80074d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d10a      	bne.n	80074ee <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 80074d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074dc:	f383 8811 	msr	BASEPRI, r3
 80074e0:	f3bf 8f6f 	isb	sy
 80074e4:	f3bf 8f4f 	dsb	sy
 80074e8:	60fb      	str	r3, [r7, #12]
}
 80074ea:	bf00      	nop
 80074ec:	e7fe      	b.n	80074ec <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80074ee:	69bb      	ldr	r3, [r7, #24]
 80074f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80074f2:	683a      	ldr	r2, [r7, #0]
 80074f4:	429a      	cmp	r2, r3
 80074f6:	d902      	bls.n	80074fe <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80074f8:	683b      	ldr	r3, [r7, #0]
 80074fa:	61fb      	str	r3, [r7, #28]
 80074fc:	e002      	b.n	8007504 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80074fe:	69bb      	ldr	r3, [r7, #24]
 8007500:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007502:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8007504:	69bb      	ldr	r3, [r7, #24]
 8007506:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007508:	69fa      	ldr	r2, [r7, #28]
 800750a:	429a      	cmp	r2, r3
 800750c:	d04b      	beq.n	80075a6 <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800750e:	69bb      	ldr	r3, [r7, #24]
 8007510:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007512:	697a      	ldr	r2, [r7, #20]
 8007514:	429a      	cmp	r2, r3
 8007516:	d146      	bne.n	80075a6 <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8007518:	4b25      	ldr	r3, [pc, #148]	; (80075b0 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	69ba      	ldr	r2, [r7, #24]
 800751e:	429a      	cmp	r2, r3
 8007520:	d10a      	bne.n	8007538 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8007522:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007526:	f383 8811 	msr	BASEPRI, r3
 800752a:	f3bf 8f6f 	isb	sy
 800752e:	f3bf 8f4f 	dsb	sy
 8007532:	60bb      	str	r3, [r7, #8]
}
 8007534:	bf00      	nop
 8007536:	e7fe      	b.n	8007536 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8007538:	69bb      	ldr	r3, [r7, #24]
 800753a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800753c:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800753e:	69bb      	ldr	r3, [r7, #24]
 8007540:	69fa      	ldr	r2, [r7, #28]
 8007542:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007544:	69bb      	ldr	r3, [r7, #24]
 8007546:	699b      	ldr	r3, [r3, #24]
 8007548:	2b00      	cmp	r3, #0
 800754a:	db04      	blt.n	8007556 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800754c:	69fb      	ldr	r3, [r7, #28]
 800754e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007552:	69bb      	ldr	r3, [r7, #24]
 8007554:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8007556:	69bb      	ldr	r3, [r7, #24]
 8007558:	6959      	ldr	r1, [r3, #20]
 800755a:	693a      	ldr	r2, [r7, #16]
 800755c:	4613      	mov	r3, r2
 800755e:	009b      	lsls	r3, r3, #2
 8007560:	4413      	add	r3, r2
 8007562:	009b      	lsls	r3, r3, #2
 8007564:	4a13      	ldr	r2, [pc, #76]	; (80075b4 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8007566:	4413      	add	r3, r2
 8007568:	4299      	cmp	r1, r3
 800756a:	d11c      	bne.n	80075a6 <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800756c:	69bb      	ldr	r3, [r7, #24]
 800756e:	3304      	adds	r3, #4
 8007570:	4618      	mov	r0, r3
 8007572:	f7fd ffef 	bl	8005554 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8007576:	69bb      	ldr	r3, [r7, #24]
 8007578:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800757a:	4b0f      	ldr	r3, [pc, #60]	; (80075b8 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	429a      	cmp	r2, r3
 8007580:	d903      	bls.n	800758a <vTaskPriorityDisinheritAfterTimeout+0xd2>
 8007582:	69bb      	ldr	r3, [r7, #24]
 8007584:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007586:	4a0c      	ldr	r2, [pc, #48]	; (80075b8 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8007588:	6013      	str	r3, [r2, #0]
 800758a:	69bb      	ldr	r3, [r7, #24]
 800758c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800758e:	4613      	mov	r3, r2
 8007590:	009b      	lsls	r3, r3, #2
 8007592:	4413      	add	r3, r2
 8007594:	009b      	lsls	r3, r3, #2
 8007596:	4a07      	ldr	r2, [pc, #28]	; (80075b4 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8007598:	441a      	add	r2, r3
 800759a:	69bb      	ldr	r3, [r7, #24]
 800759c:	3304      	adds	r3, #4
 800759e:	4619      	mov	r1, r3
 80075a0:	4610      	mov	r0, r2
 80075a2:	f7fd ff7c 	bl	800549e <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80075a6:	bf00      	nop
 80075a8:	3720      	adds	r7, #32
 80075aa:	46bd      	mov	sp, r7
 80075ac:	bd80      	pop	{r7, pc}
 80075ae:	bf00      	nop
 80075b0:	20000aa4 	.word	0x20000aa4
 80075b4:	20000aa8 	.word	0x20000aa8
 80075b8:	20000f80 	.word	0x20000f80

080075bc <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 80075bc:	b480      	push	{r7}
 80075be:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80075c0:	4b07      	ldr	r3, [pc, #28]	; (80075e0 <pvTaskIncrementMutexHeldCount+0x24>)
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d004      	beq.n	80075d2 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80075c8:	4b05      	ldr	r3, [pc, #20]	; (80075e0 <pvTaskIncrementMutexHeldCount+0x24>)
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80075ce:	3201      	adds	r2, #1
 80075d0:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 80075d2:	4b03      	ldr	r3, [pc, #12]	; (80075e0 <pvTaskIncrementMutexHeldCount+0x24>)
 80075d4:	681b      	ldr	r3, [r3, #0]
	}
 80075d6:	4618      	mov	r0, r3
 80075d8:	46bd      	mov	sp, r7
 80075da:	bc80      	pop	{r7}
 80075dc:	4770      	bx	lr
 80075de:	bf00      	nop
 80075e0:	20000aa4 	.word	0x20000aa4

080075e4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80075e4:	b580      	push	{r7, lr}
 80075e6:	b084      	sub	sp, #16
 80075e8:	af00      	add	r7, sp, #0
 80075ea:	6078      	str	r0, [r7, #4]
 80075ec:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80075ee:	4b21      	ldr	r3, [pc, #132]	; (8007674 <prvAddCurrentTaskToDelayedList+0x90>)
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80075f4:	4b20      	ldr	r3, [pc, #128]	; (8007678 <prvAddCurrentTaskToDelayedList+0x94>)
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	3304      	adds	r3, #4
 80075fa:	4618      	mov	r0, r3
 80075fc:	f7fd ffaa 	bl	8005554 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007606:	d10a      	bne.n	800761e <prvAddCurrentTaskToDelayedList+0x3a>
 8007608:	683b      	ldr	r3, [r7, #0]
 800760a:	2b00      	cmp	r3, #0
 800760c:	d007      	beq.n	800761e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800760e:	4b1a      	ldr	r3, [pc, #104]	; (8007678 <prvAddCurrentTaskToDelayedList+0x94>)
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	3304      	adds	r3, #4
 8007614:	4619      	mov	r1, r3
 8007616:	4819      	ldr	r0, [pc, #100]	; (800767c <prvAddCurrentTaskToDelayedList+0x98>)
 8007618:	f7fd ff41 	bl	800549e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800761c:	e026      	b.n	800766c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800761e:	68fa      	ldr	r2, [r7, #12]
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	4413      	add	r3, r2
 8007624:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007626:	4b14      	ldr	r3, [pc, #80]	; (8007678 <prvAddCurrentTaskToDelayedList+0x94>)
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	68ba      	ldr	r2, [r7, #8]
 800762c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800762e:	68ba      	ldr	r2, [r7, #8]
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	429a      	cmp	r2, r3
 8007634:	d209      	bcs.n	800764a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007636:	4b12      	ldr	r3, [pc, #72]	; (8007680 <prvAddCurrentTaskToDelayedList+0x9c>)
 8007638:	681a      	ldr	r2, [r3, #0]
 800763a:	4b0f      	ldr	r3, [pc, #60]	; (8007678 <prvAddCurrentTaskToDelayedList+0x94>)
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	3304      	adds	r3, #4
 8007640:	4619      	mov	r1, r3
 8007642:	4610      	mov	r0, r2
 8007644:	f7fd ff4e 	bl	80054e4 <vListInsert>
}
 8007648:	e010      	b.n	800766c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800764a:	4b0e      	ldr	r3, [pc, #56]	; (8007684 <prvAddCurrentTaskToDelayedList+0xa0>)
 800764c:	681a      	ldr	r2, [r3, #0]
 800764e:	4b0a      	ldr	r3, [pc, #40]	; (8007678 <prvAddCurrentTaskToDelayedList+0x94>)
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	3304      	adds	r3, #4
 8007654:	4619      	mov	r1, r3
 8007656:	4610      	mov	r0, r2
 8007658:	f7fd ff44 	bl	80054e4 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800765c:	4b0a      	ldr	r3, [pc, #40]	; (8007688 <prvAddCurrentTaskToDelayedList+0xa4>)
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	68ba      	ldr	r2, [r7, #8]
 8007662:	429a      	cmp	r2, r3
 8007664:	d202      	bcs.n	800766c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8007666:	4a08      	ldr	r2, [pc, #32]	; (8007688 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007668:	68bb      	ldr	r3, [r7, #8]
 800766a:	6013      	str	r3, [r2, #0]
}
 800766c:	bf00      	nop
 800766e:	3710      	adds	r7, #16
 8007670:	46bd      	mov	sp, r7
 8007672:	bd80      	pop	{r7, pc}
 8007674:	20000f7c 	.word	0x20000f7c
 8007678:	20000aa4 	.word	0x20000aa4
 800767c:	20000f64 	.word	0x20000f64
 8007680:	20000f34 	.word	0x20000f34
 8007684:	20000f30 	.word	0x20000f30
 8007688:	20000f98 	.word	0x20000f98

0800768c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800768c:	b580      	push	{r7, lr}
 800768e:	b08a      	sub	sp, #40	; 0x28
 8007690:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8007692:	2300      	movs	r3, #0
 8007694:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8007696:	f000 fb05 	bl	8007ca4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800769a:	4b1c      	ldr	r3, [pc, #112]	; (800770c <xTimerCreateTimerTask+0x80>)
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d021      	beq.n	80076e6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80076a2:	2300      	movs	r3, #0
 80076a4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80076a6:	2300      	movs	r3, #0
 80076a8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80076aa:	1d3a      	adds	r2, r7, #4
 80076ac:	f107 0108 	add.w	r1, r7, #8
 80076b0:	f107 030c 	add.w	r3, r7, #12
 80076b4:	4618      	mov	r0, r3
 80076b6:	f7fd fead 	bl	8005414 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80076ba:	6879      	ldr	r1, [r7, #4]
 80076bc:	68bb      	ldr	r3, [r7, #8]
 80076be:	68fa      	ldr	r2, [r7, #12]
 80076c0:	9202      	str	r2, [sp, #8]
 80076c2:	9301      	str	r3, [sp, #4]
 80076c4:	2302      	movs	r3, #2
 80076c6:	9300      	str	r3, [sp, #0]
 80076c8:	2300      	movs	r3, #0
 80076ca:	460a      	mov	r2, r1
 80076cc:	4910      	ldr	r1, [pc, #64]	; (8007710 <xTimerCreateTimerTask+0x84>)
 80076ce:	4811      	ldr	r0, [pc, #68]	; (8007714 <xTimerCreateTimerTask+0x88>)
 80076d0:	f7fe ff74 	bl	80065bc <xTaskCreateStatic>
 80076d4:	4603      	mov	r3, r0
 80076d6:	4a10      	ldr	r2, [pc, #64]	; (8007718 <xTimerCreateTimerTask+0x8c>)
 80076d8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80076da:	4b0f      	ldr	r3, [pc, #60]	; (8007718 <xTimerCreateTimerTask+0x8c>)
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d001      	beq.n	80076e6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80076e2:	2301      	movs	r3, #1
 80076e4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80076e6:	697b      	ldr	r3, [r7, #20]
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	d10a      	bne.n	8007702 <xTimerCreateTimerTask+0x76>
	__asm volatile
 80076ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076f0:	f383 8811 	msr	BASEPRI, r3
 80076f4:	f3bf 8f6f 	isb	sy
 80076f8:	f3bf 8f4f 	dsb	sy
 80076fc:	613b      	str	r3, [r7, #16]
}
 80076fe:	bf00      	nop
 8007700:	e7fe      	b.n	8007700 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8007702:	697b      	ldr	r3, [r7, #20]
}
 8007704:	4618      	mov	r0, r3
 8007706:	3718      	adds	r7, #24
 8007708:	46bd      	mov	sp, r7
 800770a:	bd80      	pop	{r7, pc}
 800770c:	20000fd4 	.word	0x20000fd4
 8007710:	0800b3b0 	.word	0x0800b3b0
 8007714:	08007851 	.word	0x08007851
 8007718:	20000fd8 	.word	0x20000fd8

0800771c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800771c:	b580      	push	{r7, lr}
 800771e:	b08a      	sub	sp, #40	; 0x28
 8007720:	af00      	add	r7, sp, #0
 8007722:	60f8      	str	r0, [r7, #12]
 8007724:	60b9      	str	r1, [r7, #8]
 8007726:	607a      	str	r2, [r7, #4]
 8007728:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800772a:	2300      	movs	r3, #0
 800772c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	2b00      	cmp	r3, #0
 8007732:	d10a      	bne.n	800774a <xTimerGenericCommand+0x2e>
	__asm volatile
 8007734:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007738:	f383 8811 	msr	BASEPRI, r3
 800773c:	f3bf 8f6f 	isb	sy
 8007740:	f3bf 8f4f 	dsb	sy
 8007744:	623b      	str	r3, [r7, #32]
}
 8007746:	bf00      	nop
 8007748:	e7fe      	b.n	8007748 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800774a:	4b1a      	ldr	r3, [pc, #104]	; (80077b4 <xTimerGenericCommand+0x98>)
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	2b00      	cmp	r3, #0
 8007750:	d02a      	beq.n	80077a8 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8007752:	68bb      	ldr	r3, [r7, #8]
 8007754:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800775e:	68bb      	ldr	r3, [r7, #8]
 8007760:	2b05      	cmp	r3, #5
 8007762:	dc18      	bgt.n	8007796 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8007764:	f7ff fdb4 	bl	80072d0 <xTaskGetSchedulerState>
 8007768:	4603      	mov	r3, r0
 800776a:	2b02      	cmp	r3, #2
 800776c:	d109      	bne.n	8007782 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800776e:	4b11      	ldr	r3, [pc, #68]	; (80077b4 <xTimerGenericCommand+0x98>)
 8007770:	6818      	ldr	r0, [r3, #0]
 8007772:	f107 0110 	add.w	r1, r7, #16
 8007776:	2300      	movs	r3, #0
 8007778:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800777a:	f7fe f8bd 	bl	80058f8 <xQueueGenericSend>
 800777e:	6278      	str	r0, [r7, #36]	; 0x24
 8007780:	e012      	b.n	80077a8 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8007782:	4b0c      	ldr	r3, [pc, #48]	; (80077b4 <xTimerGenericCommand+0x98>)
 8007784:	6818      	ldr	r0, [r3, #0]
 8007786:	f107 0110 	add.w	r1, r7, #16
 800778a:	2300      	movs	r3, #0
 800778c:	2200      	movs	r2, #0
 800778e:	f7fe f8b3 	bl	80058f8 <xQueueGenericSend>
 8007792:	6278      	str	r0, [r7, #36]	; 0x24
 8007794:	e008      	b.n	80077a8 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8007796:	4b07      	ldr	r3, [pc, #28]	; (80077b4 <xTimerGenericCommand+0x98>)
 8007798:	6818      	ldr	r0, [r3, #0]
 800779a:	f107 0110 	add.w	r1, r7, #16
 800779e:	2300      	movs	r3, #0
 80077a0:	683a      	ldr	r2, [r7, #0]
 80077a2:	f7fe f9a7 	bl	8005af4 <xQueueGenericSendFromISR>
 80077a6:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80077a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80077aa:	4618      	mov	r0, r3
 80077ac:	3728      	adds	r7, #40	; 0x28
 80077ae:	46bd      	mov	sp, r7
 80077b0:	bd80      	pop	{r7, pc}
 80077b2:	bf00      	nop
 80077b4:	20000fd4 	.word	0x20000fd4

080077b8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80077b8:	b580      	push	{r7, lr}
 80077ba:	b088      	sub	sp, #32
 80077bc:	af02      	add	r7, sp, #8
 80077be:	6078      	str	r0, [r7, #4]
 80077c0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80077c2:	4b22      	ldr	r3, [pc, #136]	; (800784c <prvProcessExpiredTimer+0x94>)
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	68db      	ldr	r3, [r3, #12]
 80077c8:	68db      	ldr	r3, [r3, #12]
 80077ca:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80077cc:	697b      	ldr	r3, [r7, #20]
 80077ce:	3304      	adds	r3, #4
 80077d0:	4618      	mov	r0, r3
 80077d2:	f7fd febf 	bl	8005554 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80077d6:	697b      	ldr	r3, [r7, #20]
 80077d8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80077dc:	f003 0304 	and.w	r3, r3, #4
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d022      	beq.n	800782a <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80077e4:	697b      	ldr	r3, [r7, #20]
 80077e6:	699a      	ldr	r2, [r3, #24]
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	18d1      	adds	r1, r2, r3
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	683a      	ldr	r2, [r7, #0]
 80077f0:	6978      	ldr	r0, [r7, #20]
 80077f2:	f000 f8cf 	bl	8007994 <prvInsertTimerInActiveList>
 80077f6:	4603      	mov	r3, r0
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	d01f      	beq.n	800783c <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80077fc:	2300      	movs	r3, #0
 80077fe:	9300      	str	r3, [sp, #0]
 8007800:	2300      	movs	r3, #0
 8007802:	687a      	ldr	r2, [r7, #4]
 8007804:	2100      	movs	r1, #0
 8007806:	6978      	ldr	r0, [r7, #20]
 8007808:	f7ff ff88 	bl	800771c <xTimerGenericCommand>
 800780c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800780e:	693b      	ldr	r3, [r7, #16]
 8007810:	2b00      	cmp	r3, #0
 8007812:	d113      	bne.n	800783c <prvProcessExpiredTimer+0x84>
	__asm volatile
 8007814:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007818:	f383 8811 	msr	BASEPRI, r3
 800781c:	f3bf 8f6f 	isb	sy
 8007820:	f3bf 8f4f 	dsb	sy
 8007824:	60fb      	str	r3, [r7, #12]
}
 8007826:	bf00      	nop
 8007828:	e7fe      	b.n	8007828 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800782a:	697b      	ldr	r3, [r7, #20]
 800782c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007830:	f023 0301 	bic.w	r3, r3, #1
 8007834:	b2da      	uxtb	r2, r3
 8007836:	697b      	ldr	r3, [r7, #20]
 8007838:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800783c:	697b      	ldr	r3, [r7, #20]
 800783e:	6a1b      	ldr	r3, [r3, #32]
 8007840:	6978      	ldr	r0, [r7, #20]
 8007842:	4798      	blx	r3
}
 8007844:	bf00      	nop
 8007846:	3718      	adds	r7, #24
 8007848:	46bd      	mov	sp, r7
 800784a:	bd80      	pop	{r7, pc}
 800784c:	20000fcc 	.word	0x20000fcc

08007850 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8007850:	b580      	push	{r7, lr}
 8007852:	b084      	sub	sp, #16
 8007854:	af00      	add	r7, sp, #0
 8007856:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007858:	f107 0308 	add.w	r3, r7, #8
 800785c:	4618      	mov	r0, r3
 800785e:	f000 f857 	bl	8007910 <prvGetNextExpireTime>
 8007862:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8007864:	68bb      	ldr	r3, [r7, #8]
 8007866:	4619      	mov	r1, r3
 8007868:	68f8      	ldr	r0, [r7, #12]
 800786a:	f000 f803 	bl	8007874 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800786e:	f000 f8d3 	bl	8007a18 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007872:	e7f1      	b.n	8007858 <prvTimerTask+0x8>

08007874 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8007874:	b580      	push	{r7, lr}
 8007876:	b084      	sub	sp, #16
 8007878:	af00      	add	r7, sp, #0
 800787a:	6078      	str	r0, [r7, #4]
 800787c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800787e:	f7ff f923 	bl	8006ac8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007882:	f107 0308 	add.w	r3, r7, #8
 8007886:	4618      	mov	r0, r3
 8007888:	f000 f864 	bl	8007954 <prvSampleTimeNow>
 800788c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800788e:	68bb      	ldr	r3, [r7, #8]
 8007890:	2b00      	cmp	r3, #0
 8007892:	d130      	bne.n	80078f6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8007894:	683b      	ldr	r3, [r7, #0]
 8007896:	2b00      	cmp	r3, #0
 8007898:	d10a      	bne.n	80078b0 <prvProcessTimerOrBlockTask+0x3c>
 800789a:	687a      	ldr	r2, [r7, #4]
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	429a      	cmp	r2, r3
 80078a0:	d806      	bhi.n	80078b0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80078a2:	f7ff f91f 	bl	8006ae4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80078a6:	68f9      	ldr	r1, [r7, #12]
 80078a8:	6878      	ldr	r0, [r7, #4]
 80078aa:	f7ff ff85 	bl	80077b8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80078ae:	e024      	b.n	80078fa <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80078b0:	683b      	ldr	r3, [r7, #0]
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d008      	beq.n	80078c8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80078b6:	4b13      	ldr	r3, [pc, #76]	; (8007904 <prvProcessTimerOrBlockTask+0x90>)
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	2b00      	cmp	r3, #0
 80078be:	d101      	bne.n	80078c4 <prvProcessTimerOrBlockTask+0x50>
 80078c0:	2301      	movs	r3, #1
 80078c2:	e000      	b.n	80078c6 <prvProcessTimerOrBlockTask+0x52>
 80078c4:	2300      	movs	r3, #0
 80078c6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80078c8:	4b0f      	ldr	r3, [pc, #60]	; (8007908 <prvProcessTimerOrBlockTask+0x94>)
 80078ca:	6818      	ldr	r0, [r3, #0]
 80078cc:	687a      	ldr	r2, [r7, #4]
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	1ad3      	subs	r3, r2, r3
 80078d2:	683a      	ldr	r2, [r7, #0]
 80078d4:	4619      	mov	r1, r3
 80078d6:	f7fe fe3d 	bl	8006554 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80078da:	f7ff f903 	bl	8006ae4 <xTaskResumeAll>
 80078de:	4603      	mov	r3, r0
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	d10a      	bne.n	80078fa <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80078e4:	4b09      	ldr	r3, [pc, #36]	; (800790c <prvProcessTimerOrBlockTask+0x98>)
 80078e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80078ea:	601a      	str	r2, [r3, #0]
 80078ec:	f3bf 8f4f 	dsb	sy
 80078f0:	f3bf 8f6f 	isb	sy
}
 80078f4:	e001      	b.n	80078fa <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80078f6:	f7ff f8f5 	bl	8006ae4 <xTaskResumeAll>
}
 80078fa:	bf00      	nop
 80078fc:	3710      	adds	r7, #16
 80078fe:	46bd      	mov	sp, r7
 8007900:	bd80      	pop	{r7, pc}
 8007902:	bf00      	nop
 8007904:	20000fd0 	.word	0x20000fd0
 8007908:	20000fd4 	.word	0x20000fd4
 800790c:	e000ed04 	.word	0xe000ed04

08007910 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8007910:	b480      	push	{r7}
 8007912:	b085      	sub	sp, #20
 8007914:	af00      	add	r7, sp, #0
 8007916:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8007918:	4b0d      	ldr	r3, [pc, #52]	; (8007950 <prvGetNextExpireTime+0x40>)
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	2b00      	cmp	r3, #0
 8007920:	d101      	bne.n	8007926 <prvGetNextExpireTime+0x16>
 8007922:	2201      	movs	r2, #1
 8007924:	e000      	b.n	8007928 <prvGetNextExpireTime+0x18>
 8007926:	2200      	movs	r2, #0
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	2b00      	cmp	r3, #0
 8007932:	d105      	bne.n	8007940 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007934:	4b06      	ldr	r3, [pc, #24]	; (8007950 <prvGetNextExpireTime+0x40>)
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	68db      	ldr	r3, [r3, #12]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	60fb      	str	r3, [r7, #12]
 800793e:	e001      	b.n	8007944 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8007940:	2300      	movs	r3, #0
 8007942:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8007944:	68fb      	ldr	r3, [r7, #12]
}
 8007946:	4618      	mov	r0, r3
 8007948:	3714      	adds	r7, #20
 800794a:	46bd      	mov	sp, r7
 800794c:	bc80      	pop	{r7}
 800794e:	4770      	bx	lr
 8007950:	20000fcc 	.word	0x20000fcc

08007954 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8007954:	b580      	push	{r7, lr}
 8007956:	b084      	sub	sp, #16
 8007958:	af00      	add	r7, sp, #0
 800795a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800795c:	f7ff f960 	bl	8006c20 <xTaskGetTickCount>
 8007960:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8007962:	4b0b      	ldr	r3, [pc, #44]	; (8007990 <prvSampleTimeNow+0x3c>)
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	68fa      	ldr	r2, [r7, #12]
 8007968:	429a      	cmp	r2, r3
 800796a:	d205      	bcs.n	8007978 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800796c:	f000 f936 	bl	8007bdc <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	2201      	movs	r2, #1
 8007974:	601a      	str	r2, [r3, #0]
 8007976:	e002      	b.n	800797e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	2200      	movs	r2, #0
 800797c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800797e:	4a04      	ldr	r2, [pc, #16]	; (8007990 <prvSampleTimeNow+0x3c>)
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8007984:	68fb      	ldr	r3, [r7, #12]
}
 8007986:	4618      	mov	r0, r3
 8007988:	3710      	adds	r7, #16
 800798a:	46bd      	mov	sp, r7
 800798c:	bd80      	pop	{r7, pc}
 800798e:	bf00      	nop
 8007990:	20000fdc 	.word	0x20000fdc

08007994 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8007994:	b580      	push	{r7, lr}
 8007996:	b086      	sub	sp, #24
 8007998:	af00      	add	r7, sp, #0
 800799a:	60f8      	str	r0, [r7, #12]
 800799c:	60b9      	str	r1, [r7, #8]
 800799e:	607a      	str	r2, [r7, #4]
 80079a0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80079a2:	2300      	movs	r3, #0
 80079a4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	68ba      	ldr	r2, [r7, #8]
 80079aa:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	68fa      	ldr	r2, [r7, #12]
 80079b0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80079b2:	68ba      	ldr	r2, [r7, #8]
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	429a      	cmp	r2, r3
 80079b8:	d812      	bhi.n	80079e0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80079ba:	687a      	ldr	r2, [r7, #4]
 80079bc:	683b      	ldr	r3, [r7, #0]
 80079be:	1ad2      	subs	r2, r2, r3
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	699b      	ldr	r3, [r3, #24]
 80079c4:	429a      	cmp	r2, r3
 80079c6:	d302      	bcc.n	80079ce <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80079c8:	2301      	movs	r3, #1
 80079ca:	617b      	str	r3, [r7, #20]
 80079cc:	e01b      	b.n	8007a06 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80079ce:	4b10      	ldr	r3, [pc, #64]	; (8007a10 <prvInsertTimerInActiveList+0x7c>)
 80079d0:	681a      	ldr	r2, [r3, #0]
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	3304      	adds	r3, #4
 80079d6:	4619      	mov	r1, r3
 80079d8:	4610      	mov	r0, r2
 80079da:	f7fd fd83 	bl	80054e4 <vListInsert>
 80079de:	e012      	b.n	8007a06 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80079e0:	687a      	ldr	r2, [r7, #4]
 80079e2:	683b      	ldr	r3, [r7, #0]
 80079e4:	429a      	cmp	r2, r3
 80079e6:	d206      	bcs.n	80079f6 <prvInsertTimerInActiveList+0x62>
 80079e8:	68ba      	ldr	r2, [r7, #8]
 80079ea:	683b      	ldr	r3, [r7, #0]
 80079ec:	429a      	cmp	r2, r3
 80079ee:	d302      	bcc.n	80079f6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80079f0:	2301      	movs	r3, #1
 80079f2:	617b      	str	r3, [r7, #20]
 80079f4:	e007      	b.n	8007a06 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80079f6:	4b07      	ldr	r3, [pc, #28]	; (8007a14 <prvInsertTimerInActiveList+0x80>)
 80079f8:	681a      	ldr	r2, [r3, #0]
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	3304      	adds	r3, #4
 80079fe:	4619      	mov	r1, r3
 8007a00:	4610      	mov	r0, r2
 8007a02:	f7fd fd6f 	bl	80054e4 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8007a06:	697b      	ldr	r3, [r7, #20]
}
 8007a08:	4618      	mov	r0, r3
 8007a0a:	3718      	adds	r7, #24
 8007a0c:	46bd      	mov	sp, r7
 8007a0e:	bd80      	pop	{r7, pc}
 8007a10:	20000fd0 	.word	0x20000fd0
 8007a14:	20000fcc 	.word	0x20000fcc

08007a18 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8007a18:	b580      	push	{r7, lr}
 8007a1a:	b08e      	sub	sp, #56	; 0x38
 8007a1c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007a1e:	e0ca      	b.n	8007bb6 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	da18      	bge.n	8007a58 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8007a26:	1d3b      	adds	r3, r7, #4
 8007a28:	3304      	adds	r3, #4
 8007a2a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8007a2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d10a      	bne.n	8007a48 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8007a32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a36:	f383 8811 	msr	BASEPRI, r3
 8007a3a:	f3bf 8f6f 	isb	sy
 8007a3e:	f3bf 8f4f 	dsb	sy
 8007a42:	61fb      	str	r3, [r7, #28]
}
 8007a44:	bf00      	nop
 8007a46:	e7fe      	b.n	8007a46 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8007a48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007a4e:	6850      	ldr	r0, [r2, #4]
 8007a50:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007a52:	6892      	ldr	r2, [r2, #8]
 8007a54:	4611      	mov	r1, r2
 8007a56:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	f2c0 80ab 	blt.w	8007bb6 <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8007a64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a66:	695b      	ldr	r3, [r3, #20]
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	d004      	beq.n	8007a76 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007a6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a6e:	3304      	adds	r3, #4
 8007a70:	4618      	mov	r0, r3
 8007a72:	f7fd fd6f 	bl	8005554 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007a76:	463b      	mov	r3, r7
 8007a78:	4618      	mov	r0, r3
 8007a7a:	f7ff ff6b 	bl	8007954 <prvSampleTimeNow>
 8007a7e:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	2b09      	cmp	r3, #9
 8007a84:	f200 8096 	bhi.w	8007bb4 <prvProcessReceivedCommands+0x19c>
 8007a88:	a201      	add	r2, pc, #4	; (adr r2, 8007a90 <prvProcessReceivedCommands+0x78>)
 8007a8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a8e:	bf00      	nop
 8007a90:	08007ab9 	.word	0x08007ab9
 8007a94:	08007ab9 	.word	0x08007ab9
 8007a98:	08007ab9 	.word	0x08007ab9
 8007a9c:	08007b2d 	.word	0x08007b2d
 8007aa0:	08007b41 	.word	0x08007b41
 8007aa4:	08007b8b 	.word	0x08007b8b
 8007aa8:	08007ab9 	.word	0x08007ab9
 8007aac:	08007ab9 	.word	0x08007ab9
 8007ab0:	08007b2d 	.word	0x08007b2d
 8007ab4:	08007b41 	.word	0x08007b41
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007ab8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007aba:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007abe:	f043 0301 	orr.w	r3, r3, #1
 8007ac2:	b2da      	uxtb	r2, r3
 8007ac4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ac6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8007aca:	68ba      	ldr	r2, [r7, #8]
 8007acc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ace:	699b      	ldr	r3, [r3, #24]
 8007ad0:	18d1      	adds	r1, r2, r3
 8007ad2:	68bb      	ldr	r3, [r7, #8]
 8007ad4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007ad6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007ad8:	f7ff ff5c 	bl	8007994 <prvInsertTimerInActiveList>
 8007adc:	4603      	mov	r3, r0
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d069      	beq.n	8007bb6 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007ae2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ae4:	6a1b      	ldr	r3, [r3, #32]
 8007ae6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007ae8:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007aea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007aec:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007af0:	f003 0304 	and.w	r3, r3, #4
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	d05e      	beq.n	8007bb6 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8007af8:	68ba      	ldr	r2, [r7, #8]
 8007afa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007afc:	699b      	ldr	r3, [r3, #24]
 8007afe:	441a      	add	r2, r3
 8007b00:	2300      	movs	r3, #0
 8007b02:	9300      	str	r3, [sp, #0]
 8007b04:	2300      	movs	r3, #0
 8007b06:	2100      	movs	r1, #0
 8007b08:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007b0a:	f7ff fe07 	bl	800771c <xTimerGenericCommand>
 8007b0e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8007b10:	6a3b      	ldr	r3, [r7, #32]
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	d14f      	bne.n	8007bb6 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8007b16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b1a:	f383 8811 	msr	BASEPRI, r3
 8007b1e:	f3bf 8f6f 	isb	sy
 8007b22:	f3bf 8f4f 	dsb	sy
 8007b26:	61bb      	str	r3, [r7, #24]
}
 8007b28:	bf00      	nop
 8007b2a:	e7fe      	b.n	8007b2a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007b2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b2e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007b32:	f023 0301 	bic.w	r3, r3, #1
 8007b36:	b2da      	uxtb	r2, r3
 8007b38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b3a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8007b3e:	e03a      	b.n	8007bb6 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007b40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b42:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007b46:	f043 0301 	orr.w	r3, r3, #1
 8007b4a:	b2da      	uxtb	r2, r3
 8007b4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b4e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8007b52:	68ba      	ldr	r2, [r7, #8]
 8007b54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b56:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8007b58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b5a:	699b      	ldr	r3, [r3, #24]
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	d10a      	bne.n	8007b76 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8007b60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b64:	f383 8811 	msr	BASEPRI, r3
 8007b68:	f3bf 8f6f 	isb	sy
 8007b6c:	f3bf 8f4f 	dsb	sy
 8007b70:	617b      	str	r3, [r7, #20]
}
 8007b72:	bf00      	nop
 8007b74:	e7fe      	b.n	8007b74 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8007b76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b78:	699a      	ldr	r2, [r3, #24]
 8007b7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b7c:	18d1      	adds	r1, r2, r3
 8007b7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007b82:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007b84:	f7ff ff06 	bl	8007994 <prvInsertTimerInActiveList>
					break;
 8007b88:	e015      	b.n	8007bb6 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8007b8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b8c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007b90:	f003 0302 	and.w	r3, r3, #2
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	d103      	bne.n	8007ba0 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8007b98:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007b9a:	f000 fb83 	bl	80082a4 <vPortFree>
 8007b9e:	e00a      	b.n	8007bb6 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007ba0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ba2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007ba6:	f023 0301 	bic.w	r3, r3, #1
 8007baa:	b2da      	uxtb	r2, r3
 8007bac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bae:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8007bb2:	e000      	b.n	8007bb6 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 8007bb4:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007bb6:	4b08      	ldr	r3, [pc, #32]	; (8007bd8 <prvProcessReceivedCommands+0x1c0>)
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	1d39      	adds	r1, r7, #4
 8007bbc:	2200      	movs	r2, #0
 8007bbe:	4618      	mov	r0, r3
 8007bc0:	f7fe f8c0 	bl	8005d44 <xQueueReceive>
 8007bc4:	4603      	mov	r3, r0
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	f47f af2a 	bne.w	8007a20 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8007bcc:	bf00      	nop
 8007bce:	bf00      	nop
 8007bd0:	3730      	adds	r7, #48	; 0x30
 8007bd2:	46bd      	mov	sp, r7
 8007bd4:	bd80      	pop	{r7, pc}
 8007bd6:	bf00      	nop
 8007bd8:	20000fd4 	.word	0x20000fd4

08007bdc <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8007bdc:	b580      	push	{r7, lr}
 8007bde:	b088      	sub	sp, #32
 8007be0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007be2:	e048      	b.n	8007c76 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007be4:	4b2d      	ldr	r3, [pc, #180]	; (8007c9c <prvSwitchTimerLists+0xc0>)
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	68db      	ldr	r3, [r3, #12]
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007bee:	4b2b      	ldr	r3, [pc, #172]	; (8007c9c <prvSwitchTimerLists+0xc0>)
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	68db      	ldr	r3, [r3, #12]
 8007bf4:	68db      	ldr	r3, [r3, #12]
 8007bf6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	3304      	adds	r3, #4
 8007bfc:	4618      	mov	r0, r3
 8007bfe:	f7fd fca9 	bl	8005554 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	6a1b      	ldr	r3, [r3, #32]
 8007c06:	68f8      	ldr	r0, [r7, #12]
 8007c08:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007c10:	f003 0304 	and.w	r3, r3, #4
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	d02e      	beq.n	8007c76 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	699b      	ldr	r3, [r3, #24]
 8007c1c:	693a      	ldr	r2, [r7, #16]
 8007c1e:	4413      	add	r3, r2
 8007c20:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8007c22:	68ba      	ldr	r2, [r7, #8]
 8007c24:	693b      	ldr	r3, [r7, #16]
 8007c26:	429a      	cmp	r2, r3
 8007c28:	d90e      	bls.n	8007c48 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	68ba      	ldr	r2, [r7, #8]
 8007c2e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	68fa      	ldr	r2, [r7, #12]
 8007c34:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007c36:	4b19      	ldr	r3, [pc, #100]	; (8007c9c <prvSwitchTimerLists+0xc0>)
 8007c38:	681a      	ldr	r2, [r3, #0]
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	3304      	adds	r3, #4
 8007c3e:	4619      	mov	r1, r3
 8007c40:	4610      	mov	r0, r2
 8007c42:	f7fd fc4f 	bl	80054e4 <vListInsert>
 8007c46:	e016      	b.n	8007c76 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007c48:	2300      	movs	r3, #0
 8007c4a:	9300      	str	r3, [sp, #0]
 8007c4c:	2300      	movs	r3, #0
 8007c4e:	693a      	ldr	r2, [r7, #16]
 8007c50:	2100      	movs	r1, #0
 8007c52:	68f8      	ldr	r0, [r7, #12]
 8007c54:	f7ff fd62 	bl	800771c <xTimerGenericCommand>
 8007c58:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	d10a      	bne.n	8007c76 <prvSwitchTimerLists+0x9a>
	__asm volatile
 8007c60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c64:	f383 8811 	msr	BASEPRI, r3
 8007c68:	f3bf 8f6f 	isb	sy
 8007c6c:	f3bf 8f4f 	dsb	sy
 8007c70:	603b      	str	r3, [r7, #0]
}
 8007c72:	bf00      	nop
 8007c74:	e7fe      	b.n	8007c74 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007c76:	4b09      	ldr	r3, [pc, #36]	; (8007c9c <prvSwitchTimerLists+0xc0>)
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	d1b1      	bne.n	8007be4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8007c80:	4b06      	ldr	r3, [pc, #24]	; (8007c9c <prvSwitchTimerLists+0xc0>)
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8007c86:	4b06      	ldr	r3, [pc, #24]	; (8007ca0 <prvSwitchTimerLists+0xc4>)
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	4a04      	ldr	r2, [pc, #16]	; (8007c9c <prvSwitchTimerLists+0xc0>)
 8007c8c:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8007c8e:	4a04      	ldr	r2, [pc, #16]	; (8007ca0 <prvSwitchTimerLists+0xc4>)
 8007c90:	697b      	ldr	r3, [r7, #20]
 8007c92:	6013      	str	r3, [r2, #0]
}
 8007c94:	bf00      	nop
 8007c96:	3718      	adds	r7, #24
 8007c98:	46bd      	mov	sp, r7
 8007c9a:	bd80      	pop	{r7, pc}
 8007c9c:	20000fcc 	.word	0x20000fcc
 8007ca0:	20000fd0 	.word	0x20000fd0

08007ca4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8007ca4:	b580      	push	{r7, lr}
 8007ca6:	b082      	sub	sp, #8
 8007ca8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8007caa:	f000 f92f 	bl	8007f0c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8007cae:	4b15      	ldr	r3, [pc, #84]	; (8007d04 <prvCheckForValidListAndQueue+0x60>)
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d120      	bne.n	8007cf8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8007cb6:	4814      	ldr	r0, [pc, #80]	; (8007d08 <prvCheckForValidListAndQueue+0x64>)
 8007cb8:	f7fd fbc6 	bl	8005448 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8007cbc:	4813      	ldr	r0, [pc, #76]	; (8007d0c <prvCheckForValidListAndQueue+0x68>)
 8007cbe:	f7fd fbc3 	bl	8005448 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8007cc2:	4b13      	ldr	r3, [pc, #76]	; (8007d10 <prvCheckForValidListAndQueue+0x6c>)
 8007cc4:	4a10      	ldr	r2, [pc, #64]	; (8007d08 <prvCheckForValidListAndQueue+0x64>)
 8007cc6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8007cc8:	4b12      	ldr	r3, [pc, #72]	; (8007d14 <prvCheckForValidListAndQueue+0x70>)
 8007cca:	4a10      	ldr	r2, [pc, #64]	; (8007d0c <prvCheckForValidListAndQueue+0x68>)
 8007ccc:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8007cce:	2300      	movs	r3, #0
 8007cd0:	9300      	str	r3, [sp, #0]
 8007cd2:	4b11      	ldr	r3, [pc, #68]	; (8007d18 <prvCheckForValidListAndQueue+0x74>)
 8007cd4:	4a11      	ldr	r2, [pc, #68]	; (8007d1c <prvCheckForValidListAndQueue+0x78>)
 8007cd6:	2110      	movs	r1, #16
 8007cd8:	200a      	movs	r0, #10
 8007cda:	f7fd fccd 	bl	8005678 <xQueueGenericCreateStatic>
 8007cde:	4603      	mov	r3, r0
 8007ce0:	4a08      	ldr	r2, [pc, #32]	; (8007d04 <prvCheckForValidListAndQueue+0x60>)
 8007ce2:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8007ce4:	4b07      	ldr	r3, [pc, #28]	; (8007d04 <prvCheckForValidListAndQueue+0x60>)
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	d005      	beq.n	8007cf8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8007cec:	4b05      	ldr	r3, [pc, #20]	; (8007d04 <prvCheckForValidListAndQueue+0x60>)
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	490b      	ldr	r1, [pc, #44]	; (8007d20 <prvCheckForValidListAndQueue+0x7c>)
 8007cf2:	4618      	mov	r0, r3
 8007cf4:	f7fe fbdc 	bl	80064b0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007cf8:	f000 f938 	bl	8007f6c <vPortExitCritical>
}
 8007cfc:	bf00      	nop
 8007cfe:	46bd      	mov	sp, r7
 8007d00:	bd80      	pop	{r7, pc}
 8007d02:	bf00      	nop
 8007d04:	20000fd4 	.word	0x20000fd4
 8007d08:	20000fa4 	.word	0x20000fa4
 8007d0c:	20000fb8 	.word	0x20000fb8
 8007d10:	20000fcc 	.word	0x20000fcc
 8007d14:	20000fd0 	.word	0x20000fd0
 8007d18:	20001080 	.word	0x20001080
 8007d1c:	20000fe0 	.word	0x20000fe0
 8007d20:	0800b3b8 	.word	0x0800b3b8

08007d24 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007d24:	b480      	push	{r7}
 8007d26:	b085      	sub	sp, #20
 8007d28:	af00      	add	r7, sp, #0
 8007d2a:	60f8      	str	r0, [r7, #12]
 8007d2c:	60b9      	str	r1, [r7, #8]
 8007d2e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	3b04      	subs	r3, #4
 8007d34:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007d3c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007d3e:	68fb      	ldr	r3, [r7, #12]
 8007d40:	3b04      	subs	r3, #4
 8007d42:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007d44:	68bb      	ldr	r3, [r7, #8]
 8007d46:	f023 0201 	bic.w	r2, r3, #1
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	3b04      	subs	r3, #4
 8007d52:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007d54:	4a08      	ldr	r2, [pc, #32]	; (8007d78 <pxPortInitialiseStack+0x54>)
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007d5a:	68fb      	ldr	r3, [r7, #12]
 8007d5c:	3b14      	subs	r3, #20
 8007d5e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007d60:	687a      	ldr	r2, [r7, #4]
 8007d62:	68fb      	ldr	r3, [r7, #12]
 8007d64:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007d66:	68fb      	ldr	r3, [r7, #12]
 8007d68:	3b20      	subs	r3, #32
 8007d6a:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007d6c:	68fb      	ldr	r3, [r7, #12]
}
 8007d6e:	4618      	mov	r0, r3
 8007d70:	3714      	adds	r7, #20
 8007d72:	46bd      	mov	sp, r7
 8007d74:	bc80      	pop	{r7}
 8007d76:	4770      	bx	lr
 8007d78:	08007d7d 	.word	0x08007d7d

08007d7c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007d7c:	b480      	push	{r7}
 8007d7e:	b085      	sub	sp, #20
 8007d80:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8007d82:	2300      	movs	r3, #0
 8007d84:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007d86:	4b12      	ldr	r3, [pc, #72]	; (8007dd0 <prvTaskExitError+0x54>)
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d8e:	d00a      	beq.n	8007da6 <prvTaskExitError+0x2a>
	__asm volatile
 8007d90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d94:	f383 8811 	msr	BASEPRI, r3
 8007d98:	f3bf 8f6f 	isb	sy
 8007d9c:	f3bf 8f4f 	dsb	sy
 8007da0:	60fb      	str	r3, [r7, #12]
}
 8007da2:	bf00      	nop
 8007da4:	e7fe      	b.n	8007da4 <prvTaskExitError+0x28>
	__asm volatile
 8007da6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007daa:	f383 8811 	msr	BASEPRI, r3
 8007dae:	f3bf 8f6f 	isb	sy
 8007db2:	f3bf 8f4f 	dsb	sy
 8007db6:	60bb      	str	r3, [r7, #8]
}
 8007db8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007dba:	bf00      	nop
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	d0fc      	beq.n	8007dbc <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007dc2:	bf00      	nop
 8007dc4:	bf00      	nop
 8007dc6:	3714      	adds	r7, #20
 8007dc8:	46bd      	mov	sp, r7
 8007dca:	bc80      	pop	{r7}
 8007dcc:	4770      	bx	lr
 8007dce:	bf00      	nop
 8007dd0:	2000001c 	.word	0x2000001c
	...

08007de0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007de0:	4b07      	ldr	r3, [pc, #28]	; (8007e00 <pxCurrentTCBConst2>)
 8007de2:	6819      	ldr	r1, [r3, #0]
 8007de4:	6808      	ldr	r0, [r1, #0]
 8007de6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8007dea:	f380 8809 	msr	PSP, r0
 8007dee:	f3bf 8f6f 	isb	sy
 8007df2:	f04f 0000 	mov.w	r0, #0
 8007df6:	f380 8811 	msr	BASEPRI, r0
 8007dfa:	f04e 0e0d 	orr.w	lr, lr, #13
 8007dfe:	4770      	bx	lr

08007e00 <pxCurrentTCBConst2>:
 8007e00:	20000aa4 	.word	0x20000aa4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007e04:	bf00      	nop
 8007e06:	bf00      	nop

08007e08 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8007e08:	4806      	ldr	r0, [pc, #24]	; (8007e24 <prvPortStartFirstTask+0x1c>)
 8007e0a:	6800      	ldr	r0, [r0, #0]
 8007e0c:	6800      	ldr	r0, [r0, #0]
 8007e0e:	f380 8808 	msr	MSP, r0
 8007e12:	b662      	cpsie	i
 8007e14:	b661      	cpsie	f
 8007e16:	f3bf 8f4f 	dsb	sy
 8007e1a:	f3bf 8f6f 	isb	sy
 8007e1e:	df00      	svc	0
 8007e20:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8007e22:	bf00      	nop
 8007e24:	e000ed08 	.word	0xe000ed08

08007e28 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007e28:	b580      	push	{r7, lr}
 8007e2a:	b084      	sub	sp, #16
 8007e2c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007e2e:	4b32      	ldr	r3, [pc, #200]	; (8007ef8 <xPortStartScheduler+0xd0>)
 8007e30:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007e32:	68fb      	ldr	r3, [r7, #12]
 8007e34:	781b      	ldrb	r3, [r3, #0]
 8007e36:	b2db      	uxtb	r3, r3
 8007e38:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007e3a:	68fb      	ldr	r3, [r7, #12]
 8007e3c:	22ff      	movs	r2, #255	; 0xff
 8007e3e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	781b      	ldrb	r3, [r3, #0]
 8007e44:	b2db      	uxtb	r3, r3
 8007e46:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007e48:	78fb      	ldrb	r3, [r7, #3]
 8007e4a:	b2db      	uxtb	r3, r3
 8007e4c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007e50:	b2da      	uxtb	r2, r3
 8007e52:	4b2a      	ldr	r3, [pc, #168]	; (8007efc <xPortStartScheduler+0xd4>)
 8007e54:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007e56:	4b2a      	ldr	r3, [pc, #168]	; (8007f00 <xPortStartScheduler+0xd8>)
 8007e58:	2207      	movs	r2, #7
 8007e5a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007e5c:	e009      	b.n	8007e72 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8007e5e:	4b28      	ldr	r3, [pc, #160]	; (8007f00 <xPortStartScheduler+0xd8>)
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	3b01      	subs	r3, #1
 8007e64:	4a26      	ldr	r2, [pc, #152]	; (8007f00 <xPortStartScheduler+0xd8>)
 8007e66:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007e68:	78fb      	ldrb	r3, [r7, #3]
 8007e6a:	b2db      	uxtb	r3, r3
 8007e6c:	005b      	lsls	r3, r3, #1
 8007e6e:	b2db      	uxtb	r3, r3
 8007e70:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007e72:	78fb      	ldrb	r3, [r7, #3]
 8007e74:	b2db      	uxtb	r3, r3
 8007e76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007e7a:	2b80      	cmp	r3, #128	; 0x80
 8007e7c:	d0ef      	beq.n	8007e5e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007e7e:	4b20      	ldr	r3, [pc, #128]	; (8007f00 <xPortStartScheduler+0xd8>)
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	f1c3 0307 	rsb	r3, r3, #7
 8007e86:	2b04      	cmp	r3, #4
 8007e88:	d00a      	beq.n	8007ea0 <xPortStartScheduler+0x78>
	__asm volatile
 8007e8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e8e:	f383 8811 	msr	BASEPRI, r3
 8007e92:	f3bf 8f6f 	isb	sy
 8007e96:	f3bf 8f4f 	dsb	sy
 8007e9a:	60bb      	str	r3, [r7, #8]
}
 8007e9c:	bf00      	nop
 8007e9e:	e7fe      	b.n	8007e9e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007ea0:	4b17      	ldr	r3, [pc, #92]	; (8007f00 <xPortStartScheduler+0xd8>)
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	021b      	lsls	r3, r3, #8
 8007ea6:	4a16      	ldr	r2, [pc, #88]	; (8007f00 <xPortStartScheduler+0xd8>)
 8007ea8:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007eaa:	4b15      	ldr	r3, [pc, #84]	; (8007f00 <xPortStartScheduler+0xd8>)
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007eb2:	4a13      	ldr	r2, [pc, #76]	; (8007f00 <xPortStartScheduler+0xd8>)
 8007eb4:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	b2da      	uxtb	r2, r3
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007ebe:	4b11      	ldr	r3, [pc, #68]	; (8007f04 <xPortStartScheduler+0xdc>)
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	4a10      	ldr	r2, [pc, #64]	; (8007f04 <xPortStartScheduler+0xdc>)
 8007ec4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007ec8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007eca:	4b0e      	ldr	r3, [pc, #56]	; (8007f04 <xPortStartScheduler+0xdc>)
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	4a0d      	ldr	r2, [pc, #52]	; (8007f04 <xPortStartScheduler+0xdc>)
 8007ed0:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8007ed4:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007ed6:	f000 f8b9 	bl	800804c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007eda:	4b0b      	ldr	r3, [pc, #44]	; (8007f08 <xPortStartScheduler+0xe0>)
 8007edc:	2200      	movs	r2, #0
 8007ede:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007ee0:	f7ff ff92 	bl	8007e08 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007ee4:	f7fe ff64 	bl	8006db0 <vTaskSwitchContext>
	prvTaskExitError();
 8007ee8:	f7ff ff48 	bl	8007d7c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007eec:	2300      	movs	r3, #0
}
 8007eee:	4618      	mov	r0, r3
 8007ef0:	3710      	adds	r7, #16
 8007ef2:	46bd      	mov	sp, r7
 8007ef4:	bd80      	pop	{r7, pc}
 8007ef6:	bf00      	nop
 8007ef8:	e000e400 	.word	0xe000e400
 8007efc:	200010d0 	.word	0x200010d0
 8007f00:	200010d4 	.word	0x200010d4
 8007f04:	e000ed20 	.word	0xe000ed20
 8007f08:	2000001c 	.word	0x2000001c

08007f0c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007f0c:	b480      	push	{r7}
 8007f0e:	b083      	sub	sp, #12
 8007f10:	af00      	add	r7, sp, #0
	__asm volatile
 8007f12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f16:	f383 8811 	msr	BASEPRI, r3
 8007f1a:	f3bf 8f6f 	isb	sy
 8007f1e:	f3bf 8f4f 	dsb	sy
 8007f22:	607b      	str	r3, [r7, #4]
}
 8007f24:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007f26:	4b0f      	ldr	r3, [pc, #60]	; (8007f64 <vPortEnterCritical+0x58>)
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	3301      	adds	r3, #1
 8007f2c:	4a0d      	ldr	r2, [pc, #52]	; (8007f64 <vPortEnterCritical+0x58>)
 8007f2e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007f30:	4b0c      	ldr	r3, [pc, #48]	; (8007f64 <vPortEnterCritical+0x58>)
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	2b01      	cmp	r3, #1
 8007f36:	d10f      	bne.n	8007f58 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007f38:	4b0b      	ldr	r3, [pc, #44]	; (8007f68 <vPortEnterCritical+0x5c>)
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	b2db      	uxtb	r3, r3
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	d00a      	beq.n	8007f58 <vPortEnterCritical+0x4c>
	__asm volatile
 8007f42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f46:	f383 8811 	msr	BASEPRI, r3
 8007f4a:	f3bf 8f6f 	isb	sy
 8007f4e:	f3bf 8f4f 	dsb	sy
 8007f52:	603b      	str	r3, [r7, #0]
}
 8007f54:	bf00      	nop
 8007f56:	e7fe      	b.n	8007f56 <vPortEnterCritical+0x4a>
	}
}
 8007f58:	bf00      	nop
 8007f5a:	370c      	adds	r7, #12
 8007f5c:	46bd      	mov	sp, r7
 8007f5e:	bc80      	pop	{r7}
 8007f60:	4770      	bx	lr
 8007f62:	bf00      	nop
 8007f64:	2000001c 	.word	0x2000001c
 8007f68:	e000ed04 	.word	0xe000ed04

08007f6c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007f6c:	b480      	push	{r7}
 8007f6e:	b083      	sub	sp, #12
 8007f70:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007f72:	4b11      	ldr	r3, [pc, #68]	; (8007fb8 <vPortExitCritical+0x4c>)
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	d10a      	bne.n	8007f90 <vPortExitCritical+0x24>
	__asm volatile
 8007f7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f7e:	f383 8811 	msr	BASEPRI, r3
 8007f82:	f3bf 8f6f 	isb	sy
 8007f86:	f3bf 8f4f 	dsb	sy
 8007f8a:	607b      	str	r3, [r7, #4]
}
 8007f8c:	bf00      	nop
 8007f8e:	e7fe      	b.n	8007f8e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007f90:	4b09      	ldr	r3, [pc, #36]	; (8007fb8 <vPortExitCritical+0x4c>)
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	3b01      	subs	r3, #1
 8007f96:	4a08      	ldr	r2, [pc, #32]	; (8007fb8 <vPortExitCritical+0x4c>)
 8007f98:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007f9a:	4b07      	ldr	r3, [pc, #28]	; (8007fb8 <vPortExitCritical+0x4c>)
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	d105      	bne.n	8007fae <vPortExitCritical+0x42>
 8007fa2:	2300      	movs	r3, #0
 8007fa4:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007fa6:	683b      	ldr	r3, [r7, #0]
 8007fa8:	f383 8811 	msr	BASEPRI, r3
}
 8007fac:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007fae:	bf00      	nop
 8007fb0:	370c      	adds	r7, #12
 8007fb2:	46bd      	mov	sp, r7
 8007fb4:	bc80      	pop	{r7}
 8007fb6:	4770      	bx	lr
 8007fb8:	2000001c 	.word	0x2000001c
 8007fbc:	00000000 	.word	0x00000000

08007fc0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007fc0:	f3ef 8009 	mrs	r0, PSP
 8007fc4:	f3bf 8f6f 	isb	sy
 8007fc8:	4b0d      	ldr	r3, [pc, #52]	; (8008000 <pxCurrentTCBConst>)
 8007fca:	681a      	ldr	r2, [r3, #0]
 8007fcc:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8007fd0:	6010      	str	r0, [r2, #0]
 8007fd2:	e92d 4008 	stmdb	sp!, {r3, lr}
 8007fd6:	f04f 0050 	mov.w	r0, #80	; 0x50
 8007fda:	f380 8811 	msr	BASEPRI, r0
 8007fde:	f7fe fee7 	bl	8006db0 <vTaskSwitchContext>
 8007fe2:	f04f 0000 	mov.w	r0, #0
 8007fe6:	f380 8811 	msr	BASEPRI, r0
 8007fea:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8007fee:	6819      	ldr	r1, [r3, #0]
 8007ff0:	6808      	ldr	r0, [r1, #0]
 8007ff2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8007ff6:	f380 8809 	msr	PSP, r0
 8007ffa:	f3bf 8f6f 	isb	sy
 8007ffe:	4770      	bx	lr

08008000 <pxCurrentTCBConst>:
 8008000:	20000aa4 	.word	0x20000aa4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008004:	bf00      	nop
 8008006:	bf00      	nop

08008008 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008008:	b580      	push	{r7, lr}
 800800a:	b082      	sub	sp, #8
 800800c:	af00      	add	r7, sp, #0
	__asm volatile
 800800e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008012:	f383 8811 	msr	BASEPRI, r3
 8008016:	f3bf 8f6f 	isb	sy
 800801a:	f3bf 8f4f 	dsb	sy
 800801e:	607b      	str	r3, [r7, #4]
}
 8008020:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008022:	f7fe fe0b 	bl	8006c3c <xTaskIncrementTick>
 8008026:	4603      	mov	r3, r0
 8008028:	2b00      	cmp	r3, #0
 800802a:	d003      	beq.n	8008034 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800802c:	4b06      	ldr	r3, [pc, #24]	; (8008048 <xPortSysTickHandler+0x40>)
 800802e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008032:	601a      	str	r2, [r3, #0]
 8008034:	2300      	movs	r3, #0
 8008036:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008038:	683b      	ldr	r3, [r7, #0]
 800803a:	f383 8811 	msr	BASEPRI, r3
}
 800803e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008040:	bf00      	nop
 8008042:	3708      	adds	r7, #8
 8008044:	46bd      	mov	sp, r7
 8008046:	bd80      	pop	{r7, pc}
 8008048:	e000ed04 	.word	0xe000ed04

0800804c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800804c:	b480      	push	{r7}
 800804e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008050:	4b0a      	ldr	r3, [pc, #40]	; (800807c <vPortSetupTimerInterrupt+0x30>)
 8008052:	2200      	movs	r2, #0
 8008054:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008056:	4b0a      	ldr	r3, [pc, #40]	; (8008080 <vPortSetupTimerInterrupt+0x34>)
 8008058:	2200      	movs	r2, #0
 800805a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800805c:	4b09      	ldr	r3, [pc, #36]	; (8008084 <vPortSetupTimerInterrupt+0x38>)
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	4a09      	ldr	r2, [pc, #36]	; (8008088 <vPortSetupTimerInterrupt+0x3c>)
 8008062:	fba2 2303 	umull	r2, r3, r2, r3
 8008066:	099b      	lsrs	r3, r3, #6
 8008068:	4a08      	ldr	r2, [pc, #32]	; (800808c <vPortSetupTimerInterrupt+0x40>)
 800806a:	3b01      	subs	r3, #1
 800806c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800806e:	4b03      	ldr	r3, [pc, #12]	; (800807c <vPortSetupTimerInterrupt+0x30>)
 8008070:	2207      	movs	r2, #7
 8008072:	601a      	str	r2, [r3, #0]
}
 8008074:	bf00      	nop
 8008076:	46bd      	mov	sp, r7
 8008078:	bc80      	pop	{r7}
 800807a:	4770      	bx	lr
 800807c:	e000e010 	.word	0xe000e010
 8008080:	e000e018 	.word	0xe000e018
 8008084:	20000010 	.word	0x20000010
 8008088:	10624dd3 	.word	0x10624dd3
 800808c:	e000e014 	.word	0xe000e014

08008090 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008090:	b480      	push	{r7}
 8008092:	b085      	sub	sp, #20
 8008094:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8008096:	f3ef 8305 	mrs	r3, IPSR
 800809a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800809c:	68fb      	ldr	r3, [r7, #12]
 800809e:	2b0f      	cmp	r3, #15
 80080a0:	d914      	bls.n	80080cc <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80080a2:	4a16      	ldr	r2, [pc, #88]	; (80080fc <vPortValidateInterruptPriority+0x6c>)
 80080a4:	68fb      	ldr	r3, [r7, #12]
 80080a6:	4413      	add	r3, r2
 80080a8:	781b      	ldrb	r3, [r3, #0]
 80080aa:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80080ac:	4b14      	ldr	r3, [pc, #80]	; (8008100 <vPortValidateInterruptPriority+0x70>)
 80080ae:	781b      	ldrb	r3, [r3, #0]
 80080b0:	7afa      	ldrb	r2, [r7, #11]
 80080b2:	429a      	cmp	r2, r3
 80080b4:	d20a      	bcs.n	80080cc <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80080b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080ba:	f383 8811 	msr	BASEPRI, r3
 80080be:	f3bf 8f6f 	isb	sy
 80080c2:	f3bf 8f4f 	dsb	sy
 80080c6:	607b      	str	r3, [r7, #4]
}
 80080c8:	bf00      	nop
 80080ca:	e7fe      	b.n	80080ca <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80080cc:	4b0d      	ldr	r3, [pc, #52]	; (8008104 <vPortValidateInterruptPriority+0x74>)
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80080d4:	4b0c      	ldr	r3, [pc, #48]	; (8008108 <vPortValidateInterruptPriority+0x78>)
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	429a      	cmp	r2, r3
 80080da:	d90a      	bls.n	80080f2 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80080dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080e0:	f383 8811 	msr	BASEPRI, r3
 80080e4:	f3bf 8f6f 	isb	sy
 80080e8:	f3bf 8f4f 	dsb	sy
 80080ec:	603b      	str	r3, [r7, #0]
}
 80080ee:	bf00      	nop
 80080f0:	e7fe      	b.n	80080f0 <vPortValidateInterruptPriority+0x60>
	}
 80080f2:	bf00      	nop
 80080f4:	3714      	adds	r7, #20
 80080f6:	46bd      	mov	sp, r7
 80080f8:	bc80      	pop	{r7}
 80080fa:	4770      	bx	lr
 80080fc:	e000e3f0 	.word	0xe000e3f0
 8008100:	200010d0 	.word	0x200010d0
 8008104:	e000ed0c 	.word	0xe000ed0c
 8008108:	200010d4 	.word	0x200010d4

0800810c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800810c:	b580      	push	{r7, lr}
 800810e:	b08a      	sub	sp, #40	; 0x28
 8008110:	af00      	add	r7, sp, #0
 8008112:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008114:	2300      	movs	r3, #0
 8008116:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008118:	f7fe fcd6 	bl	8006ac8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800811c:	4b5b      	ldr	r3, [pc, #364]	; (800828c <pvPortMalloc+0x180>)
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	2b00      	cmp	r3, #0
 8008122:	d101      	bne.n	8008128 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008124:	f000 f920 	bl	8008368 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008128:	4b59      	ldr	r3, [pc, #356]	; (8008290 <pvPortMalloc+0x184>)
 800812a:	681a      	ldr	r2, [r3, #0]
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	4013      	ands	r3, r2
 8008130:	2b00      	cmp	r3, #0
 8008132:	f040 8093 	bne.w	800825c <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	2b00      	cmp	r3, #0
 800813a:	d01d      	beq.n	8008178 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800813c:	2208      	movs	r2, #8
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	4413      	add	r3, r2
 8008142:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	f003 0307 	and.w	r3, r3, #7
 800814a:	2b00      	cmp	r3, #0
 800814c:	d014      	beq.n	8008178 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	f023 0307 	bic.w	r3, r3, #7
 8008154:	3308      	adds	r3, #8
 8008156:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	f003 0307 	and.w	r3, r3, #7
 800815e:	2b00      	cmp	r3, #0
 8008160:	d00a      	beq.n	8008178 <pvPortMalloc+0x6c>
	__asm volatile
 8008162:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008166:	f383 8811 	msr	BASEPRI, r3
 800816a:	f3bf 8f6f 	isb	sy
 800816e:	f3bf 8f4f 	dsb	sy
 8008172:	617b      	str	r3, [r7, #20]
}
 8008174:	bf00      	nop
 8008176:	e7fe      	b.n	8008176 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	2b00      	cmp	r3, #0
 800817c:	d06e      	beq.n	800825c <pvPortMalloc+0x150>
 800817e:	4b45      	ldr	r3, [pc, #276]	; (8008294 <pvPortMalloc+0x188>)
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	687a      	ldr	r2, [r7, #4]
 8008184:	429a      	cmp	r2, r3
 8008186:	d869      	bhi.n	800825c <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008188:	4b43      	ldr	r3, [pc, #268]	; (8008298 <pvPortMalloc+0x18c>)
 800818a:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800818c:	4b42      	ldr	r3, [pc, #264]	; (8008298 <pvPortMalloc+0x18c>)
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008192:	e004      	b.n	800819e <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8008194:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008196:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008198:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800819e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081a0:	685b      	ldr	r3, [r3, #4]
 80081a2:	687a      	ldr	r2, [r7, #4]
 80081a4:	429a      	cmp	r2, r3
 80081a6:	d903      	bls.n	80081b0 <pvPortMalloc+0xa4>
 80081a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	d1f1      	bne.n	8008194 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80081b0:	4b36      	ldr	r3, [pc, #216]	; (800828c <pvPortMalloc+0x180>)
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80081b6:	429a      	cmp	r2, r3
 80081b8:	d050      	beq.n	800825c <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80081ba:	6a3b      	ldr	r3, [r7, #32]
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	2208      	movs	r2, #8
 80081c0:	4413      	add	r3, r2
 80081c2:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80081c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081c6:	681a      	ldr	r2, [r3, #0]
 80081c8:	6a3b      	ldr	r3, [r7, #32]
 80081ca:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80081cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081ce:	685a      	ldr	r2, [r3, #4]
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	1ad2      	subs	r2, r2, r3
 80081d4:	2308      	movs	r3, #8
 80081d6:	005b      	lsls	r3, r3, #1
 80081d8:	429a      	cmp	r2, r3
 80081da:	d91f      	bls.n	800821c <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80081dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	4413      	add	r3, r2
 80081e2:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80081e4:	69bb      	ldr	r3, [r7, #24]
 80081e6:	f003 0307 	and.w	r3, r3, #7
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	d00a      	beq.n	8008204 <pvPortMalloc+0xf8>
	__asm volatile
 80081ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081f2:	f383 8811 	msr	BASEPRI, r3
 80081f6:	f3bf 8f6f 	isb	sy
 80081fa:	f3bf 8f4f 	dsb	sy
 80081fe:	613b      	str	r3, [r7, #16]
}
 8008200:	bf00      	nop
 8008202:	e7fe      	b.n	8008202 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008204:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008206:	685a      	ldr	r2, [r3, #4]
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	1ad2      	subs	r2, r2, r3
 800820c:	69bb      	ldr	r3, [r7, #24]
 800820e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008210:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008212:	687a      	ldr	r2, [r7, #4]
 8008214:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008216:	69b8      	ldr	r0, [r7, #24]
 8008218:	f000 f908 	bl	800842c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800821c:	4b1d      	ldr	r3, [pc, #116]	; (8008294 <pvPortMalloc+0x188>)
 800821e:	681a      	ldr	r2, [r3, #0]
 8008220:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008222:	685b      	ldr	r3, [r3, #4]
 8008224:	1ad3      	subs	r3, r2, r3
 8008226:	4a1b      	ldr	r2, [pc, #108]	; (8008294 <pvPortMalloc+0x188>)
 8008228:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800822a:	4b1a      	ldr	r3, [pc, #104]	; (8008294 <pvPortMalloc+0x188>)
 800822c:	681a      	ldr	r2, [r3, #0]
 800822e:	4b1b      	ldr	r3, [pc, #108]	; (800829c <pvPortMalloc+0x190>)
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	429a      	cmp	r2, r3
 8008234:	d203      	bcs.n	800823e <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008236:	4b17      	ldr	r3, [pc, #92]	; (8008294 <pvPortMalloc+0x188>)
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	4a18      	ldr	r2, [pc, #96]	; (800829c <pvPortMalloc+0x190>)
 800823c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800823e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008240:	685a      	ldr	r2, [r3, #4]
 8008242:	4b13      	ldr	r3, [pc, #76]	; (8008290 <pvPortMalloc+0x184>)
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	431a      	orrs	r2, r3
 8008248:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800824a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800824c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800824e:	2200      	movs	r2, #0
 8008250:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8008252:	4b13      	ldr	r3, [pc, #76]	; (80082a0 <pvPortMalloc+0x194>)
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	3301      	adds	r3, #1
 8008258:	4a11      	ldr	r2, [pc, #68]	; (80082a0 <pvPortMalloc+0x194>)
 800825a:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800825c:	f7fe fc42 	bl	8006ae4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008260:	69fb      	ldr	r3, [r7, #28]
 8008262:	f003 0307 	and.w	r3, r3, #7
 8008266:	2b00      	cmp	r3, #0
 8008268:	d00a      	beq.n	8008280 <pvPortMalloc+0x174>
	__asm volatile
 800826a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800826e:	f383 8811 	msr	BASEPRI, r3
 8008272:	f3bf 8f6f 	isb	sy
 8008276:	f3bf 8f4f 	dsb	sy
 800827a:	60fb      	str	r3, [r7, #12]
}
 800827c:	bf00      	nop
 800827e:	e7fe      	b.n	800827e <pvPortMalloc+0x172>
	return pvReturn;
 8008280:	69fb      	ldr	r3, [r7, #28]
}
 8008282:	4618      	mov	r0, r3
 8008284:	3728      	adds	r7, #40	; 0x28
 8008286:	46bd      	mov	sp, r7
 8008288:	bd80      	pop	{r7, pc}
 800828a:	bf00      	nop
 800828c:	20001ce0 	.word	0x20001ce0
 8008290:	20001cf4 	.word	0x20001cf4
 8008294:	20001ce4 	.word	0x20001ce4
 8008298:	20001cd8 	.word	0x20001cd8
 800829c:	20001ce8 	.word	0x20001ce8
 80082a0:	20001cec 	.word	0x20001cec

080082a4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80082a4:	b580      	push	{r7, lr}
 80082a6:	b086      	sub	sp, #24
 80082a8:	af00      	add	r7, sp, #0
 80082aa:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	2b00      	cmp	r3, #0
 80082b4:	d04d      	beq.n	8008352 <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80082b6:	2308      	movs	r3, #8
 80082b8:	425b      	negs	r3, r3
 80082ba:	697a      	ldr	r2, [r7, #20]
 80082bc:	4413      	add	r3, r2
 80082be:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80082c0:	697b      	ldr	r3, [r7, #20]
 80082c2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80082c4:	693b      	ldr	r3, [r7, #16]
 80082c6:	685a      	ldr	r2, [r3, #4]
 80082c8:	4b24      	ldr	r3, [pc, #144]	; (800835c <vPortFree+0xb8>)
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	4013      	ands	r3, r2
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	d10a      	bne.n	80082e8 <vPortFree+0x44>
	__asm volatile
 80082d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082d6:	f383 8811 	msr	BASEPRI, r3
 80082da:	f3bf 8f6f 	isb	sy
 80082de:	f3bf 8f4f 	dsb	sy
 80082e2:	60fb      	str	r3, [r7, #12]
}
 80082e4:	bf00      	nop
 80082e6:	e7fe      	b.n	80082e6 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80082e8:	693b      	ldr	r3, [r7, #16]
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	2b00      	cmp	r3, #0
 80082ee:	d00a      	beq.n	8008306 <vPortFree+0x62>
	__asm volatile
 80082f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082f4:	f383 8811 	msr	BASEPRI, r3
 80082f8:	f3bf 8f6f 	isb	sy
 80082fc:	f3bf 8f4f 	dsb	sy
 8008300:	60bb      	str	r3, [r7, #8]
}
 8008302:	bf00      	nop
 8008304:	e7fe      	b.n	8008304 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008306:	693b      	ldr	r3, [r7, #16]
 8008308:	685a      	ldr	r2, [r3, #4]
 800830a:	4b14      	ldr	r3, [pc, #80]	; (800835c <vPortFree+0xb8>)
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	4013      	ands	r3, r2
 8008310:	2b00      	cmp	r3, #0
 8008312:	d01e      	beq.n	8008352 <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008314:	693b      	ldr	r3, [r7, #16]
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	2b00      	cmp	r3, #0
 800831a:	d11a      	bne.n	8008352 <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800831c:	693b      	ldr	r3, [r7, #16]
 800831e:	685a      	ldr	r2, [r3, #4]
 8008320:	4b0e      	ldr	r3, [pc, #56]	; (800835c <vPortFree+0xb8>)
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	43db      	mvns	r3, r3
 8008326:	401a      	ands	r2, r3
 8008328:	693b      	ldr	r3, [r7, #16]
 800832a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800832c:	f7fe fbcc 	bl	8006ac8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8008330:	693b      	ldr	r3, [r7, #16]
 8008332:	685a      	ldr	r2, [r3, #4]
 8008334:	4b0a      	ldr	r3, [pc, #40]	; (8008360 <vPortFree+0xbc>)
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	4413      	add	r3, r2
 800833a:	4a09      	ldr	r2, [pc, #36]	; (8008360 <vPortFree+0xbc>)
 800833c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800833e:	6938      	ldr	r0, [r7, #16]
 8008340:	f000 f874 	bl	800842c <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8008344:	4b07      	ldr	r3, [pc, #28]	; (8008364 <vPortFree+0xc0>)
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	3301      	adds	r3, #1
 800834a:	4a06      	ldr	r2, [pc, #24]	; (8008364 <vPortFree+0xc0>)
 800834c:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800834e:	f7fe fbc9 	bl	8006ae4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8008352:	bf00      	nop
 8008354:	3718      	adds	r7, #24
 8008356:	46bd      	mov	sp, r7
 8008358:	bd80      	pop	{r7, pc}
 800835a:	bf00      	nop
 800835c:	20001cf4 	.word	0x20001cf4
 8008360:	20001ce4 	.word	0x20001ce4
 8008364:	20001cf0 	.word	0x20001cf0

08008368 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008368:	b480      	push	{r7}
 800836a:	b085      	sub	sp, #20
 800836c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800836e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8008372:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008374:	4b27      	ldr	r3, [pc, #156]	; (8008414 <prvHeapInit+0xac>)
 8008376:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008378:	68fb      	ldr	r3, [r7, #12]
 800837a:	f003 0307 	and.w	r3, r3, #7
 800837e:	2b00      	cmp	r3, #0
 8008380:	d00c      	beq.n	800839c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8008382:	68fb      	ldr	r3, [r7, #12]
 8008384:	3307      	adds	r3, #7
 8008386:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008388:	68fb      	ldr	r3, [r7, #12]
 800838a:	f023 0307 	bic.w	r3, r3, #7
 800838e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8008390:	68ba      	ldr	r2, [r7, #8]
 8008392:	68fb      	ldr	r3, [r7, #12]
 8008394:	1ad3      	subs	r3, r2, r3
 8008396:	4a1f      	ldr	r2, [pc, #124]	; (8008414 <prvHeapInit+0xac>)
 8008398:	4413      	add	r3, r2
 800839a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800839c:	68fb      	ldr	r3, [r7, #12]
 800839e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80083a0:	4a1d      	ldr	r2, [pc, #116]	; (8008418 <prvHeapInit+0xb0>)
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80083a6:	4b1c      	ldr	r3, [pc, #112]	; (8008418 <prvHeapInit+0xb0>)
 80083a8:	2200      	movs	r2, #0
 80083aa:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	68ba      	ldr	r2, [r7, #8]
 80083b0:	4413      	add	r3, r2
 80083b2:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80083b4:	2208      	movs	r2, #8
 80083b6:	68fb      	ldr	r3, [r7, #12]
 80083b8:	1a9b      	subs	r3, r3, r2
 80083ba:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80083bc:	68fb      	ldr	r3, [r7, #12]
 80083be:	f023 0307 	bic.w	r3, r3, #7
 80083c2:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80083c4:	68fb      	ldr	r3, [r7, #12]
 80083c6:	4a15      	ldr	r2, [pc, #84]	; (800841c <prvHeapInit+0xb4>)
 80083c8:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80083ca:	4b14      	ldr	r3, [pc, #80]	; (800841c <prvHeapInit+0xb4>)
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	2200      	movs	r2, #0
 80083d0:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80083d2:	4b12      	ldr	r3, [pc, #72]	; (800841c <prvHeapInit+0xb4>)
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	2200      	movs	r2, #0
 80083d8:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80083de:	683b      	ldr	r3, [r7, #0]
 80083e0:	68fa      	ldr	r2, [r7, #12]
 80083e2:	1ad2      	subs	r2, r2, r3
 80083e4:	683b      	ldr	r3, [r7, #0]
 80083e6:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80083e8:	4b0c      	ldr	r3, [pc, #48]	; (800841c <prvHeapInit+0xb4>)
 80083ea:	681a      	ldr	r2, [r3, #0]
 80083ec:	683b      	ldr	r3, [r7, #0]
 80083ee:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80083f0:	683b      	ldr	r3, [r7, #0]
 80083f2:	685b      	ldr	r3, [r3, #4]
 80083f4:	4a0a      	ldr	r2, [pc, #40]	; (8008420 <prvHeapInit+0xb8>)
 80083f6:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80083f8:	683b      	ldr	r3, [r7, #0]
 80083fa:	685b      	ldr	r3, [r3, #4]
 80083fc:	4a09      	ldr	r2, [pc, #36]	; (8008424 <prvHeapInit+0xbc>)
 80083fe:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8008400:	4b09      	ldr	r3, [pc, #36]	; (8008428 <prvHeapInit+0xc0>)
 8008402:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8008406:	601a      	str	r2, [r3, #0]
}
 8008408:	bf00      	nop
 800840a:	3714      	adds	r7, #20
 800840c:	46bd      	mov	sp, r7
 800840e:	bc80      	pop	{r7}
 8008410:	4770      	bx	lr
 8008412:	bf00      	nop
 8008414:	200010d8 	.word	0x200010d8
 8008418:	20001cd8 	.word	0x20001cd8
 800841c:	20001ce0 	.word	0x20001ce0
 8008420:	20001ce8 	.word	0x20001ce8
 8008424:	20001ce4 	.word	0x20001ce4
 8008428:	20001cf4 	.word	0x20001cf4

0800842c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800842c:	b480      	push	{r7}
 800842e:	b085      	sub	sp, #20
 8008430:	af00      	add	r7, sp, #0
 8008432:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008434:	4b27      	ldr	r3, [pc, #156]	; (80084d4 <prvInsertBlockIntoFreeList+0xa8>)
 8008436:	60fb      	str	r3, [r7, #12]
 8008438:	e002      	b.n	8008440 <prvInsertBlockIntoFreeList+0x14>
 800843a:	68fb      	ldr	r3, [r7, #12]
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	60fb      	str	r3, [r7, #12]
 8008440:	68fb      	ldr	r3, [r7, #12]
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	687a      	ldr	r2, [r7, #4]
 8008446:	429a      	cmp	r2, r3
 8008448:	d8f7      	bhi.n	800843a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800844a:	68fb      	ldr	r3, [r7, #12]
 800844c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800844e:	68fb      	ldr	r3, [r7, #12]
 8008450:	685b      	ldr	r3, [r3, #4]
 8008452:	68ba      	ldr	r2, [r7, #8]
 8008454:	4413      	add	r3, r2
 8008456:	687a      	ldr	r2, [r7, #4]
 8008458:	429a      	cmp	r2, r3
 800845a:	d108      	bne.n	800846e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800845c:	68fb      	ldr	r3, [r7, #12]
 800845e:	685a      	ldr	r2, [r3, #4]
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	685b      	ldr	r3, [r3, #4]
 8008464:	441a      	add	r2, r3
 8008466:	68fb      	ldr	r3, [r7, #12]
 8008468:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800846a:	68fb      	ldr	r3, [r7, #12]
 800846c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	685b      	ldr	r3, [r3, #4]
 8008476:	68ba      	ldr	r2, [r7, #8]
 8008478:	441a      	add	r2, r3
 800847a:	68fb      	ldr	r3, [r7, #12]
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	429a      	cmp	r2, r3
 8008480:	d118      	bne.n	80084b4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8008482:	68fb      	ldr	r3, [r7, #12]
 8008484:	681a      	ldr	r2, [r3, #0]
 8008486:	4b14      	ldr	r3, [pc, #80]	; (80084d8 <prvInsertBlockIntoFreeList+0xac>)
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	429a      	cmp	r2, r3
 800848c:	d00d      	beq.n	80084aa <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	685a      	ldr	r2, [r3, #4]
 8008492:	68fb      	ldr	r3, [r7, #12]
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	685b      	ldr	r3, [r3, #4]
 8008498:	441a      	add	r2, r3
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800849e:	68fb      	ldr	r3, [r7, #12]
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	681a      	ldr	r2, [r3, #0]
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	601a      	str	r2, [r3, #0]
 80084a8:	e008      	b.n	80084bc <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80084aa:	4b0b      	ldr	r3, [pc, #44]	; (80084d8 <prvInsertBlockIntoFreeList+0xac>)
 80084ac:	681a      	ldr	r2, [r3, #0]
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	601a      	str	r2, [r3, #0]
 80084b2:	e003      	b.n	80084bc <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80084b4:	68fb      	ldr	r3, [r7, #12]
 80084b6:	681a      	ldr	r2, [r3, #0]
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80084bc:	68fa      	ldr	r2, [r7, #12]
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	429a      	cmp	r2, r3
 80084c2:	d002      	beq.n	80084ca <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80084c4:	68fb      	ldr	r3, [r7, #12]
 80084c6:	687a      	ldr	r2, [r7, #4]
 80084c8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80084ca:	bf00      	nop
 80084cc:	3714      	adds	r7, #20
 80084ce:	46bd      	mov	sp, r7
 80084d0:	bc80      	pop	{r7}
 80084d2:	4770      	bx	lr
 80084d4:	20001cd8 	.word	0x20001cd8
 80084d8:	20001ce0 	.word	0x20001ce0

080084dc <__cvt>:
 80084dc:	2b00      	cmp	r3, #0
 80084de:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80084e2:	461f      	mov	r7, r3
 80084e4:	bfbb      	ittet	lt
 80084e6:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 80084ea:	461f      	movlt	r7, r3
 80084ec:	2300      	movge	r3, #0
 80084ee:	232d      	movlt	r3, #45	; 0x2d
 80084f0:	b088      	sub	sp, #32
 80084f2:	4614      	mov	r4, r2
 80084f4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80084f6:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80084f8:	7013      	strb	r3, [r2, #0]
 80084fa:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80084fc:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8008500:	f023 0820 	bic.w	r8, r3, #32
 8008504:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008508:	d005      	beq.n	8008516 <__cvt+0x3a>
 800850a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800850e:	d100      	bne.n	8008512 <__cvt+0x36>
 8008510:	3501      	adds	r5, #1
 8008512:	2302      	movs	r3, #2
 8008514:	e000      	b.n	8008518 <__cvt+0x3c>
 8008516:	2303      	movs	r3, #3
 8008518:	aa07      	add	r2, sp, #28
 800851a:	9204      	str	r2, [sp, #16]
 800851c:	aa06      	add	r2, sp, #24
 800851e:	e9cd a202 	strd	sl, r2, [sp, #8]
 8008522:	e9cd 3500 	strd	r3, r5, [sp]
 8008526:	4622      	mov	r2, r4
 8008528:	463b      	mov	r3, r7
 800852a:	f000 ff71 	bl	8009410 <_dtoa_r>
 800852e:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8008532:	4606      	mov	r6, r0
 8008534:	d102      	bne.n	800853c <__cvt+0x60>
 8008536:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008538:	07db      	lsls	r3, r3, #31
 800853a:	d522      	bpl.n	8008582 <__cvt+0xa6>
 800853c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008540:	eb06 0905 	add.w	r9, r6, r5
 8008544:	d110      	bne.n	8008568 <__cvt+0x8c>
 8008546:	7833      	ldrb	r3, [r6, #0]
 8008548:	2b30      	cmp	r3, #48	; 0x30
 800854a:	d10a      	bne.n	8008562 <__cvt+0x86>
 800854c:	2200      	movs	r2, #0
 800854e:	2300      	movs	r3, #0
 8008550:	4620      	mov	r0, r4
 8008552:	4639      	mov	r1, r7
 8008554:	f7f8 fa28 	bl	80009a8 <__aeabi_dcmpeq>
 8008558:	b918      	cbnz	r0, 8008562 <__cvt+0x86>
 800855a:	f1c5 0501 	rsb	r5, r5, #1
 800855e:	f8ca 5000 	str.w	r5, [sl]
 8008562:	f8da 3000 	ldr.w	r3, [sl]
 8008566:	4499      	add	r9, r3
 8008568:	2200      	movs	r2, #0
 800856a:	2300      	movs	r3, #0
 800856c:	4620      	mov	r0, r4
 800856e:	4639      	mov	r1, r7
 8008570:	f7f8 fa1a 	bl	80009a8 <__aeabi_dcmpeq>
 8008574:	b108      	cbz	r0, 800857a <__cvt+0x9e>
 8008576:	f8cd 901c 	str.w	r9, [sp, #28]
 800857a:	2230      	movs	r2, #48	; 0x30
 800857c:	9b07      	ldr	r3, [sp, #28]
 800857e:	454b      	cmp	r3, r9
 8008580:	d307      	bcc.n	8008592 <__cvt+0xb6>
 8008582:	4630      	mov	r0, r6
 8008584:	9b07      	ldr	r3, [sp, #28]
 8008586:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8008588:	1b9b      	subs	r3, r3, r6
 800858a:	6013      	str	r3, [r2, #0]
 800858c:	b008      	add	sp, #32
 800858e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008592:	1c59      	adds	r1, r3, #1
 8008594:	9107      	str	r1, [sp, #28]
 8008596:	701a      	strb	r2, [r3, #0]
 8008598:	e7f0      	b.n	800857c <__cvt+0xa0>

0800859a <__exponent>:
 800859a:	4603      	mov	r3, r0
 800859c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800859e:	2900      	cmp	r1, #0
 80085a0:	f803 2b02 	strb.w	r2, [r3], #2
 80085a4:	bfb6      	itet	lt
 80085a6:	222d      	movlt	r2, #45	; 0x2d
 80085a8:	222b      	movge	r2, #43	; 0x2b
 80085aa:	4249      	neglt	r1, r1
 80085ac:	2909      	cmp	r1, #9
 80085ae:	7042      	strb	r2, [r0, #1]
 80085b0:	dd2a      	ble.n	8008608 <__exponent+0x6e>
 80085b2:	f10d 0207 	add.w	r2, sp, #7
 80085b6:	4617      	mov	r7, r2
 80085b8:	260a      	movs	r6, #10
 80085ba:	fb91 f5f6 	sdiv	r5, r1, r6
 80085be:	4694      	mov	ip, r2
 80085c0:	fb06 1415 	mls	r4, r6, r5, r1
 80085c4:	3430      	adds	r4, #48	; 0x30
 80085c6:	f80c 4c01 	strb.w	r4, [ip, #-1]
 80085ca:	460c      	mov	r4, r1
 80085cc:	2c63      	cmp	r4, #99	; 0x63
 80085ce:	4629      	mov	r1, r5
 80085d0:	f102 32ff 	add.w	r2, r2, #4294967295
 80085d4:	dcf1      	bgt.n	80085ba <__exponent+0x20>
 80085d6:	3130      	adds	r1, #48	; 0x30
 80085d8:	f1ac 0402 	sub.w	r4, ip, #2
 80085dc:	f802 1c01 	strb.w	r1, [r2, #-1]
 80085e0:	4622      	mov	r2, r4
 80085e2:	1c41      	adds	r1, r0, #1
 80085e4:	42ba      	cmp	r2, r7
 80085e6:	d30a      	bcc.n	80085fe <__exponent+0x64>
 80085e8:	f10d 0209 	add.w	r2, sp, #9
 80085ec:	eba2 020c 	sub.w	r2, r2, ip
 80085f0:	42bc      	cmp	r4, r7
 80085f2:	bf88      	it	hi
 80085f4:	2200      	movhi	r2, #0
 80085f6:	4413      	add	r3, r2
 80085f8:	1a18      	subs	r0, r3, r0
 80085fa:	b003      	add	sp, #12
 80085fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80085fe:	f812 5b01 	ldrb.w	r5, [r2], #1
 8008602:	f801 5f01 	strb.w	r5, [r1, #1]!
 8008606:	e7ed      	b.n	80085e4 <__exponent+0x4a>
 8008608:	2330      	movs	r3, #48	; 0x30
 800860a:	3130      	adds	r1, #48	; 0x30
 800860c:	7083      	strb	r3, [r0, #2]
 800860e:	70c1      	strb	r1, [r0, #3]
 8008610:	1d03      	adds	r3, r0, #4
 8008612:	e7f1      	b.n	80085f8 <__exponent+0x5e>

08008614 <_printf_float>:
 8008614:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008618:	b091      	sub	sp, #68	; 0x44
 800861a:	460c      	mov	r4, r1
 800861c:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8008620:	4616      	mov	r6, r2
 8008622:	461f      	mov	r7, r3
 8008624:	4605      	mov	r5, r0
 8008626:	f000 fdd5 	bl	80091d4 <_localeconv_r>
 800862a:	6803      	ldr	r3, [r0, #0]
 800862c:	4618      	mov	r0, r3
 800862e:	9309      	str	r3, [sp, #36]	; 0x24
 8008630:	f7f7 fd8e 	bl	8000150 <strlen>
 8008634:	2300      	movs	r3, #0
 8008636:	930e      	str	r3, [sp, #56]	; 0x38
 8008638:	f8d8 3000 	ldr.w	r3, [r8]
 800863c:	900a      	str	r0, [sp, #40]	; 0x28
 800863e:	3307      	adds	r3, #7
 8008640:	f023 0307 	bic.w	r3, r3, #7
 8008644:	f103 0208 	add.w	r2, r3, #8
 8008648:	f894 9018 	ldrb.w	r9, [r4, #24]
 800864c:	f8d4 b000 	ldr.w	fp, [r4]
 8008650:	f8c8 2000 	str.w	r2, [r8]
 8008654:	e9d3 a800 	ldrd	sl, r8, [r3]
 8008658:	4652      	mov	r2, sl
 800865a:	4643      	mov	r3, r8
 800865c:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8008660:	f028 4300 	bic.w	r3, r8, #2147483648	; 0x80000000
 8008664:	930b      	str	r3, [sp, #44]	; 0x2c
 8008666:	f04f 32ff 	mov.w	r2, #4294967295
 800866a:	4650      	mov	r0, sl
 800866c:	4b9c      	ldr	r3, [pc, #624]	; (80088e0 <_printf_float+0x2cc>)
 800866e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008670:	f7f8 f9cc 	bl	8000a0c <__aeabi_dcmpun>
 8008674:	bb70      	cbnz	r0, 80086d4 <_printf_float+0xc0>
 8008676:	f04f 32ff 	mov.w	r2, #4294967295
 800867a:	4650      	mov	r0, sl
 800867c:	4b98      	ldr	r3, [pc, #608]	; (80088e0 <_printf_float+0x2cc>)
 800867e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008680:	f7f8 f9a6 	bl	80009d0 <__aeabi_dcmple>
 8008684:	bb30      	cbnz	r0, 80086d4 <_printf_float+0xc0>
 8008686:	2200      	movs	r2, #0
 8008688:	2300      	movs	r3, #0
 800868a:	4650      	mov	r0, sl
 800868c:	4641      	mov	r1, r8
 800868e:	f7f8 f995 	bl	80009bc <__aeabi_dcmplt>
 8008692:	b110      	cbz	r0, 800869a <_printf_float+0x86>
 8008694:	232d      	movs	r3, #45	; 0x2d
 8008696:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800869a:	4a92      	ldr	r2, [pc, #584]	; (80088e4 <_printf_float+0x2d0>)
 800869c:	4b92      	ldr	r3, [pc, #584]	; (80088e8 <_printf_float+0x2d4>)
 800869e:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 80086a2:	bf94      	ite	ls
 80086a4:	4690      	movls	r8, r2
 80086a6:	4698      	movhi	r8, r3
 80086a8:	2303      	movs	r3, #3
 80086aa:	f04f 0a00 	mov.w	sl, #0
 80086ae:	6123      	str	r3, [r4, #16]
 80086b0:	f02b 0304 	bic.w	r3, fp, #4
 80086b4:	6023      	str	r3, [r4, #0]
 80086b6:	4633      	mov	r3, r6
 80086b8:	4621      	mov	r1, r4
 80086ba:	4628      	mov	r0, r5
 80086bc:	9700      	str	r7, [sp, #0]
 80086be:	aa0f      	add	r2, sp, #60	; 0x3c
 80086c0:	f000 f9d6 	bl	8008a70 <_printf_common>
 80086c4:	3001      	adds	r0, #1
 80086c6:	f040 8090 	bne.w	80087ea <_printf_float+0x1d6>
 80086ca:	f04f 30ff 	mov.w	r0, #4294967295
 80086ce:	b011      	add	sp, #68	; 0x44
 80086d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80086d4:	4652      	mov	r2, sl
 80086d6:	4643      	mov	r3, r8
 80086d8:	4650      	mov	r0, sl
 80086da:	4641      	mov	r1, r8
 80086dc:	f7f8 f996 	bl	8000a0c <__aeabi_dcmpun>
 80086e0:	b148      	cbz	r0, 80086f6 <_printf_float+0xe2>
 80086e2:	f1b8 0f00 	cmp.w	r8, #0
 80086e6:	bfb8      	it	lt
 80086e8:	232d      	movlt	r3, #45	; 0x2d
 80086ea:	4a80      	ldr	r2, [pc, #512]	; (80088ec <_printf_float+0x2d8>)
 80086ec:	bfb8      	it	lt
 80086ee:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80086f2:	4b7f      	ldr	r3, [pc, #508]	; (80088f0 <_printf_float+0x2dc>)
 80086f4:	e7d3      	b.n	800869e <_printf_float+0x8a>
 80086f6:	6863      	ldr	r3, [r4, #4]
 80086f8:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 80086fc:	1c5a      	adds	r2, r3, #1
 80086fe:	d142      	bne.n	8008786 <_printf_float+0x172>
 8008700:	2306      	movs	r3, #6
 8008702:	6063      	str	r3, [r4, #4]
 8008704:	2200      	movs	r2, #0
 8008706:	9206      	str	r2, [sp, #24]
 8008708:	aa0e      	add	r2, sp, #56	; 0x38
 800870a:	e9cd 9204 	strd	r9, r2, [sp, #16]
 800870e:	aa0d      	add	r2, sp, #52	; 0x34
 8008710:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8008714:	9203      	str	r2, [sp, #12]
 8008716:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 800871a:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800871e:	6023      	str	r3, [r4, #0]
 8008720:	6863      	ldr	r3, [r4, #4]
 8008722:	4652      	mov	r2, sl
 8008724:	9300      	str	r3, [sp, #0]
 8008726:	4628      	mov	r0, r5
 8008728:	4643      	mov	r3, r8
 800872a:	910b      	str	r1, [sp, #44]	; 0x2c
 800872c:	f7ff fed6 	bl	80084dc <__cvt>
 8008730:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008732:	4680      	mov	r8, r0
 8008734:	2947      	cmp	r1, #71	; 0x47
 8008736:	990d      	ldr	r1, [sp, #52]	; 0x34
 8008738:	d108      	bne.n	800874c <_printf_float+0x138>
 800873a:	1cc8      	adds	r0, r1, #3
 800873c:	db02      	blt.n	8008744 <_printf_float+0x130>
 800873e:	6863      	ldr	r3, [r4, #4]
 8008740:	4299      	cmp	r1, r3
 8008742:	dd40      	ble.n	80087c6 <_printf_float+0x1b2>
 8008744:	f1a9 0902 	sub.w	r9, r9, #2
 8008748:	fa5f f989 	uxtb.w	r9, r9
 800874c:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8008750:	d81f      	bhi.n	8008792 <_printf_float+0x17e>
 8008752:	464a      	mov	r2, r9
 8008754:	3901      	subs	r1, #1
 8008756:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800875a:	910d      	str	r1, [sp, #52]	; 0x34
 800875c:	f7ff ff1d 	bl	800859a <__exponent>
 8008760:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008762:	4682      	mov	sl, r0
 8008764:	1813      	adds	r3, r2, r0
 8008766:	2a01      	cmp	r2, #1
 8008768:	6123      	str	r3, [r4, #16]
 800876a:	dc02      	bgt.n	8008772 <_printf_float+0x15e>
 800876c:	6822      	ldr	r2, [r4, #0]
 800876e:	07d2      	lsls	r2, r2, #31
 8008770:	d501      	bpl.n	8008776 <_printf_float+0x162>
 8008772:	3301      	adds	r3, #1
 8008774:	6123      	str	r3, [r4, #16]
 8008776:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 800877a:	2b00      	cmp	r3, #0
 800877c:	d09b      	beq.n	80086b6 <_printf_float+0xa2>
 800877e:	232d      	movs	r3, #45	; 0x2d
 8008780:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008784:	e797      	b.n	80086b6 <_printf_float+0xa2>
 8008786:	2947      	cmp	r1, #71	; 0x47
 8008788:	d1bc      	bne.n	8008704 <_printf_float+0xf0>
 800878a:	2b00      	cmp	r3, #0
 800878c:	d1ba      	bne.n	8008704 <_printf_float+0xf0>
 800878e:	2301      	movs	r3, #1
 8008790:	e7b7      	b.n	8008702 <_printf_float+0xee>
 8008792:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8008796:	d118      	bne.n	80087ca <_printf_float+0x1b6>
 8008798:	2900      	cmp	r1, #0
 800879a:	6863      	ldr	r3, [r4, #4]
 800879c:	dd0b      	ble.n	80087b6 <_printf_float+0x1a2>
 800879e:	6121      	str	r1, [r4, #16]
 80087a0:	b913      	cbnz	r3, 80087a8 <_printf_float+0x194>
 80087a2:	6822      	ldr	r2, [r4, #0]
 80087a4:	07d0      	lsls	r0, r2, #31
 80087a6:	d502      	bpl.n	80087ae <_printf_float+0x19a>
 80087a8:	3301      	adds	r3, #1
 80087aa:	440b      	add	r3, r1
 80087ac:	6123      	str	r3, [r4, #16]
 80087ae:	f04f 0a00 	mov.w	sl, #0
 80087b2:	65a1      	str	r1, [r4, #88]	; 0x58
 80087b4:	e7df      	b.n	8008776 <_printf_float+0x162>
 80087b6:	b913      	cbnz	r3, 80087be <_printf_float+0x1aa>
 80087b8:	6822      	ldr	r2, [r4, #0]
 80087ba:	07d2      	lsls	r2, r2, #31
 80087bc:	d501      	bpl.n	80087c2 <_printf_float+0x1ae>
 80087be:	3302      	adds	r3, #2
 80087c0:	e7f4      	b.n	80087ac <_printf_float+0x198>
 80087c2:	2301      	movs	r3, #1
 80087c4:	e7f2      	b.n	80087ac <_printf_float+0x198>
 80087c6:	f04f 0967 	mov.w	r9, #103	; 0x67
 80087ca:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80087cc:	4299      	cmp	r1, r3
 80087ce:	db05      	blt.n	80087dc <_printf_float+0x1c8>
 80087d0:	6823      	ldr	r3, [r4, #0]
 80087d2:	6121      	str	r1, [r4, #16]
 80087d4:	07d8      	lsls	r0, r3, #31
 80087d6:	d5ea      	bpl.n	80087ae <_printf_float+0x19a>
 80087d8:	1c4b      	adds	r3, r1, #1
 80087da:	e7e7      	b.n	80087ac <_printf_float+0x198>
 80087dc:	2900      	cmp	r1, #0
 80087de:	bfcc      	ite	gt
 80087e0:	2201      	movgt	r2, #1
 80087e2:	f1c1 0202 	rsble	r2, r1, #2
 80087e6:	4413      	add	r3, r2
 80087e8:	e7e0      	b.n	80087ac <_printf_float+0x198>
 80087ea:	6823      	ldr	r3, [r4, #0]
 80087ec:	055a      	lsls	r2, r3, #21
 80087ee:	d407      	bmi.n	8008800 <_printf_float+0x1ec>
 80087f0:	6923      	ldr	r3, [r4, #16]
 80087f2:	4642      	mov	r2, r8
 80087f4:	4631      	mov	r1, r6
 80087f6:	4628      	mov	r0, r5
 80087f8:	47b8      	blx	r7
 80087fa:	3001      	adds	r0, #1
 80087fc:	d12b      	bne.n	8008856 <_printf_float+0x242>
 80087fe:	e764      	b.n	80086ca <_printf_float+0xb6>
 8008800:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8008804:	f240 80dd 	bls.w	80089c2 <_printf_float+0x3ae>
 8008808:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800880c:	2200      	movs	r2, #0
 800880e:	2300      	movs	r3, #0
 8008810:	f7f8 f8ca 	bl	80009a8 <__aeabi_dcmpeq>
 8008814:	2800      	cmp	r0, #0
 8008816:	d033      	beq.n	8008880 <_printf_float+0x26c>
 8008818:	2301      	movs	r3, #1
 800881a:	4631      	mov	r1, r6
 800881c:	4628      	mov	r0, r5
 800881e:	4a35      	ldr	r2, [pc, #212]	; (80088f4 <_printf_float+0x2e0>)
 8008820:	47b8      	blx	r7
 8008822:	3001      	adds	r0, #1
 8008824:	f43f af51 	beq.w	80086ca <_printf_float+0xb6>
 8008828:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800882c:	429a      	cmp	r2, r3
 800882e:	db02      	blt.n	8008836 <_printf_float+0x222>
 8008830:	6823      	ldr	r3, [r4, #0]
 8008832:	07d8      	lsls	r0, r3, #31
 8008834:	d50f      	bpl.n	8008856 <_printf_float+0x242>
 8008836:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800883a:	4631      	mov	r1, r6
 800883c:	4628      	mov	r0, r5
 800883e:	47b8      	blx	r7
 8008840:	3001      	adds	r0, #1
 8008842:	f43f af42 	beq.w	80086ca <_printf_float+0xb6>
 8008846:	f04f 0800 	mov.w	r8, #0
 800884a:	f104 091a 	add.w	r9, r4, #26
 800884e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008850:	3b01      	subs	r3, #1
 8008852:	4543      	cmp	r3, r8
 8008854:	dc09      	bgt.n	800886a <_printf_float+0x256>
 8008856:	6823      	ldr	r3, [r4, #0]
 8008858:	079b      	lsls	r3, r3, #30
 800885a:	f100 8104 	bmi.w	8008a66 <_printf_float+0x452>
 800885e:	68e0      	ldr	r0, [r4, #12]
 8008860:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008862:	4298      	cmp	r0, r3
 8008864:	bfb8      	it	lt
 8008866:	4618      	movlt	r0, r3
 8008868:	e731      	b.n	80086ce <_printf_float+0xba>
 800886a:	2301      	movs	r3, #1
 800886c:	464a      	mov	r2, r9
 800886e:	4631      	mov	r1, r6
 8008870:	4628      	mov	r0, r5
 8008872:	47b8      	blx	r7
 8008874:	3001      	adds	r0, #1
 8008876:	f43f af28 	beq.w	80086ca <_printf_float+0xb6>
 800887a:	f108 0801 	add.w	r8, r8, #1
 800887e:	e7e6      	b.n	800884e <_printf_float+0x23a>
 8008880:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008882:	2b00      	cmp	r3, #0
 8008884:	dc38      	bgt.n	80088f8 <_printf_float+0x2e4>
 8008886:	2301      	movs	r3, #1
 8008888:	4631      	mov	r1, r6
 800888a:	4628      	mov	r0, r5
 800888c:	4a19      	ldr	r2, [pc, #100]	; (80088f4 <_printf_float+0x2e0>)
 800888e:	47b8      	blx	r7
 8008890:	3001      	adds	r0, #1
 8008892:	f43f af1a 	beq.w	80086ca <_printf_float+0xb6>
 8008896:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 800889a:	4313      	orrs	r3, r2
 800889c:	d102      	bne.n	80088a4 <_printf_float+0x290>
 800889e:	6823      	ldr	r3, [r4, #0]
 80088a0:	07d9      	lsls	r1, r3, #31
 80088a2:	d5d8      	bpl.n	8008856 <_printf_float+0x242>
 80088a4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80088a8:	4631      	mov	r1, r6
 80088aa:	4628      	mov	r0, r5
 80088ac:	47b8      	blx	r7
 80088ae:	3001      	adds	r0, #1
 80088b0:	f43f af0b 	beq.w	80086ca <_printf_float+0xb6>
 80088b4:	f04f 0900 	mov.w	r9, #0
 80088b8:	f104 0a1a 	add.w	sl, r4, #26
 80088bc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80088be:	425b      	negs	r3, r3
 80088c0:	454b      	cmp	r3, r9
 80088c2:	dc01      	bgt.n	80088c8 <_printf_float+0x2b4>
 80088c4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80088c6:	e794      	b.n	80087f2 <_printf_float+0x1de>
 80088c8:	2301      	movs	r3, #1
 80088ca:	4652      	mov	r2, sl
 80088cc:	4631      	mov	r1, r6
 80088ce:	4628      	mov	r0, r5
 80088d0:	47b8      	blx	r7
 80088d2:	3001      	adds	r0, #1
 80088d4:	f43f aef9 	beq.w	80086ca <_printf_float+0xb6>
 80088d8:	f109 0901 	add.w	r9, r9, #1
 80088dc:	e7ee      	b.n	80088bc <_printf_float+0x2a8>
 80088de:	bf00      	nop
 80088e0:	7fefffff 	.word	0x7fefffff
 80088e4:	0800b466 	.word	0x0800b466
 80088e8:	0800b46a 	.word	0x0800b46a
 80088ec:	0800b46e 	.word	0x0800b46e
 80088f0:	0800b472 	.word	0x0800b472
 80088f4:	0800b476 	.word	0x0800b476
 80088f8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80088fa:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80088fc:	429a      	cmp	r2, r3
 80088fe:	bfa8      	it	ge
 8008900:	461a      	movge	r2, r3
 8008902:	2a00      	cmp	r2, #0
 8008904:	4691      	mov	r9, r2
 8008906:	dc37      	bgt.n	8008978 <_printf_float+0x364>
 8008908:	f04f 0b00 	mov.w	fp, #0
 800890c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008910:	f104 021a 	add.w	r2, r4, #26
 8008914:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8008918:	ebaa 0309 	sub.w	r3, sl, r9
 800891c:	455b      	cmp	r3, fp
 800891e:	dc33      	bgt.n	8008988 <_printf_float+0x374>
 8008920:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8008924:	429a      	cmp	r2, r3
 8008926:	db3b      	blt.n	80089a0 <_printf_float+0x38c>
 8008928:	6823      	ldr	r3, [r4, #0]
 800892a:	07da      	lsls	r2, r3, #31
 800892c:	d438      	bmi.n	80089a0 <_printf_float+0x38c>
 800892e:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8008932:	eba2 0903 	sub.w	r9, r2, r3
 8008936:	eba2 020a 	sub.w	r2, r2, sl
 800893a:	4591      	cmp	r9, r2
 800893c:	bfa8      	it	ge
 800893e:	4691      	movge	r9, r2
 8008940:	f1b9 0f00 	cmp.w	r9, #0
 8008944:	dc34      	bgt.n	80089b0 <_printf_float+0x39c>
 8008946:	f04f 0800 	mov.w	r8, #0
 800894a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800894e:	f104 0a1a 	add.w	sl, r4, #26
 8008952:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8008956:	1a9b      	subs	r3, r3, r2
 8008958:	eba3 0309 	sub.w	r3, r3, r9
 800895c:	4543      	cmp	r3, r8
 800895e:	f77f af7a 	ble.w	8008856 <_printf_float+0x242>
 8008962:	2301      	movs	r3, #1
 8008964:	4652      	mov	r2, sl
 8008966:	4631      	mov	r1, r6
 8008968:	4628      	mov	r0, r5
 800896a:	47b8      	blx	r7
 800896c:	3001      	adds	r0, #1
 800896e:	f43f aeac 	beq.w	80086ca <_printf_float+0xb6>
 8008972:	f108 0801 	add.w	r8, r8, #1
 8008976:	e7ec      	b.n	8008952 <_printf_float+0x33e>
 8008978:	4613      	mov	r3, r2
 800897a:	4631      	mov	r1, r6
 800897c:	4642      	mov	r2, r8
 800897e:	4628      	mov	r0, r5
 8008980:	47b8      	blx	r7
 8008982:	3001      	adds	r0, #1
 8008984:	d1c0      	bne.n	8008908 <_printf_float+0x2f4>
 8008986:	e6a0      	b.n	80086ca <_printf_float+0xb6>
 8008988:	2301      	movs	r3, #1
 800898a:	4631      	mov	r1, r6
 800898c:	4628      	mov	r0, r5
 800898e:	920b      	str	r2, [sp, #44]	; 0x2c
 8008990:	47b8      	blx	r7
 8008992:	3001      	adds	r0, #1
 8008994:	f43f ae99 	beq.w	80086ca <_printf_float+0xb6>
 8008998:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800899a:	f10b 0b01 	add.w	fp, fp, #1
 800899e:	e7b9      	b.n	8008914 <_printf_float+0x300>
 80089a0:	4631      	mov	r1, r6
 80089a2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80089a6:	4628      	mov	r0, r5
 80089a8:	47b8      	blx	r7
 80089aa:	3001      	adds	r0, #1
 80089ac:	d1bf      	bne.n	800892e <_printf_float+0x31a>
 80089ae:	e68c      	b.n	80086ca <_printf_float+0xb6>
 80089b0:	464b      	mov	r3, r9
 80089b2:	4631      	mov	r1, r6
 80089b4:	4628      	mov	r0, r5
 80089b6:	eb08 020a 	add.w	r2, r8, sl
 80089ba:	47b8      	blx	r7
 80089bc:	3001      	adds	r0, #1
 80089be:	d1c2      	bne.n	8008946 <_printf_float+0x332>
 80089c0:	e683      	b.n	80086ca <_printf_float+0xb6>
 80089c2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80089c4:	2a01      	cmp	r2, #1
 80089c6:	dc01      	bgt.n	80089cc <_printf_float+0x3b8>
 80089c8:	07db      	lsls	r3, r3, #31
 80089ca:	d539      	bpl.n	8008a40 <_printf_float+0x42c>
 80089cc:	2301      	movs	r3, #1
 80089ce:	4642      	mov	r2, r8
 80089d0:	4631      	mov	r1, r6
 80089d2:	4628      	mov	r0, r5
 80089d4:	47b8      	blx	r7
 80089d6:	3001      	adds	r0, #1
 80089d8:	f43f ae77 	beq.w	80086ca <_printf_float+0xb6>
 80089dc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80089e0:	4631      	mov	r1, r6
 80089e2:	4628      	mov	r0, r5
 80089e4:	47b8      	blx	r7
 80089e6:	3001      	adds	r0, #1
 80089e8:	f43f ae6f 	beq.w	80086ca <_printf_float+0xb6>
 80089ec:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80089f0:	2200      	movs	r2, #0
 80089f2:	2300      	movs	r3, #0
 80089f4:	f8dd 9038 	ldr.w	r9, [sp, #56]	; 0x38
 80089f8:	f7f7 ffd6 	bl	80009a8 <__aeabi_dcmpeq>
 80089fc:	b9d8      	cbnz	r0, 8008a36 <_printf_float+0x422>
 80089fe:	f109 33ff 	add.w	r3, r9, #4294967295
 8008a02:	f108 0201 	add.w	r2, r8, #1
 8008a06:	4631      	mov	r1, r6
 8008a08:	4628      	mov	r0, r5
 8008a0a:	47b8      	blx	r7
 8008a0c:	3001      	adds	r0, #1
 8008a0e:	d10e      	bne.n	8008a2e <_printf_float+0x41a>
 8008a10:	e65b      	b.n	80086ca <_printf_float+0xb6>
 8008a12:	2301      	movs	r3, #1
 8008a14:	464a      	mov	r2, r9
 8008a16:	4631      	mov	r1, r6
 8008a18:	4628      	mov	r0, r5
 8008a1a:	47b8      	blx	r7
 8008a1c:	3001      	adds	r0, #1
 8008a1e:	f43f ae54 	beq.w	80086ca <_printf_float+0xb6>
 8008a22:	f108 0801 	add.w	r8, r8, #1
 8008a26:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008a28:	3b01      	subs	r3, #1
 8008a2a:	4543      	cmp	r3, r8
 8008a2c:	dcf1      	bgt.n	8008a12 <_printf_float+0x3fe>
 8008a2e:	4653      	mov	r3, sl
 8008a30:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8008a34:	e6de      	b.n	80087f4 <_printf_float+0x1e0>
 8008a36:	f04f 0800 	mov.w	r8, #0
 8008a3a:	f104 091a 	add.w	r9, r4, #26
 8008a3e:	e7f2      	b.n	8008a26 <_printf_float+0x412>
 8008a40:	2301      	movs	r3, #1
 8008a42:	4642      	mov	r2, r8
 8008a44:	e7df      	b.n	8008a06 <_printf_float+0x3f2>
 8008a46:	2301      	movs	r3, #1
 8008a48:	464a      	mov	r2, r9
 8008a4a:	4631      	mov	r1, r6
 8008a4c:	4628      	mov	r0, r5
 8008a4e:	47b8      	blx	r7
 8008a50:	3001      	adds	r0, #1
 8008a52:	f43f ae3a 	beq.w	80086ca <_printf_float+0xb6>
 8008a56:	f108 0801 	add.w	r8, r8, #1
 8008a5a:	68e3      	ldr	r3, [r4, #12]
 8008a5c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8008a5e:	1a5b      	subs	r3, r3, r1
 8008a60:	4543      	cmp	r3, r8
 8008a62:	dcf0      	bgt.n	8008a46 <_printf_float+0x432>
 8008a64:	e6fb      	b.n	800885e <_printf_float+0x24a>
 8008a66:	f04f 0800 	mov.w	r8, #0
 8008a6a:	f104 0919 	add.w	r9, r4, #25
 8008a6e:	e7f4      	b.n	8008a5a <_printf_float+0x446>

08008a70 <_printf_common>:
 8008a70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008a74:	4616      	mov	r6, r2
 8008a76:	4699      	mov	r9, r3
 8008a78:	688a      	ldr	r2, [r1, #8]
 8008a7a:	690b      	ldr	r3, [r1, #16]
 8008a7c:	4607      	mov	r7, r0
 8008a7e:	4293      	cmp	r3, r2
 8008a80:	bfb8      	it	lt
 8008a82:	4613      	movlt	r3, r2
 8008a84:	6033      	str	r3, [r6, #0]
 8008a86:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008a8a:	460c      	mov	r4, r1
 8008a8c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008a90:	b10a      	cbz	r2, 8008a96 <_printf_common+0x26>
 8008a92:	3301      	adds	r3, #1
 8008a94:	6033      	str	r3, [r6, #0]
 8008a96:	6823      	ldr	r3, [r4, #0]
 8008a98:	0699      	lsls	r1, r3, #26
 8008a9a:	bf42      	ittt	mi
 8008a9c:	6833      	ldrmi	r3, [r6, #0]
 8008a9e:	3302      	addmi	r3, #2
 8008aa0:	6033      	strmi	r3, [r6, #0]
 8008aa2:	6825      	ldr	r5, [r4, #0]
 8008aa4:	f015 0506 	ands.w	r5, r5, #6
 8008aa8:	d106      	bne.n	8008ab8 <_printf_common+0x48>
 8008aaa:	f104 0a19 	add.w	sl, r4, #25
 8008aae:	68e3      	ldr	r3, [r4, #12]
 8008ab0:	6832      	ldr	r2, [r6, #0]
 8008ab2:	1a9b      	subs	r3, r3, r2
 8008ab4:	42ab      	cmp	r3, r5
 8008ab6:	dc2b      	bgt.n	8008b10 <_printf_common+0xa0>
 8008ab8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008abc:	1e13      	subs	r3, r2, #0
 8008abe:	6822      	ldr	r2, [r4, #0]
 8008ac0:	bf18      	it	ne
 8008ac2:	2301      	movne	r3, #1
 8008ac4:	0692      	lsls	r2, r2, #26
 8008ac6:	d430      	bmi.n	8008b2a <_printf_common+0xba>
 8008ac8:	4649      	mov	r1, r9
 8008aca:	4638      	mov	r0, r7
 8008acc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008ad0:	47c0      	blx	r8
 8008ad2:	3001      	adds	r0, #1
 8008ad4:	d023      	beq.n	8008b1e <_printf_common+0xae>
 8008ad6:	6823      	ldr	r3, [r4, #0]
 8008ad8:	6922      	ldr	r2, [r4, #16]
 8008ada:	f003 0306 	and.w	r3, r3, #6
 8008ade:	2b04      	cmp	r3, #4
 8008ae0:	bf14      	ite	ne
 8008ae2:	2500      	movne	r5, #0
 8008ae4:	6833      	ldreq	r3, [r6, #0]
 8008ae6:	f04f 0600 	mov.w	r6, #0
 8008aea:	bf08      	it	eq
 8008aec:	68e5      	ldreq	r5, [r4, #12]
 8008aee:	f104 041a 	add.w	r4, r4, #26
 8008af2:	bf08      	it	eq
 8008af4:	1aed      	subeq	r5, r5, r3
 8008af6:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8008afa:	bf08      	it	eq
 8008afc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008b00:	4293      	cmp	r3, r2
 8008b02:	bfc4      	itt	gt
 8008b04:	1a9b      	subgt	r3, r3, r2
 8008b06:	18ed      	addgt	r5, r5, r3
 8008b08:	42b5      	cmp	r5, r6
 8008b0a:	d11a      	bne.n	8008b42 <_printf_common+0xd2>
 8008b0c:	2000      	movs	r0, #0
 8008b0e:	e008      	b.n	8008b22 <_printf_common+0xb2>
 8008b10:	2301      	movs	r3, #1
 8008b12:	4652      	mov	r2, sl
 8008b14:	4649      	mov	r1, r9
 8008b16:	4638      	mov	r0, r7
 8008b18:	47c0      	blx	r8
 8008b1a:	3001      	adds	r0, #1
 8008b1c:	d103      	bne.n	8008b26 <_printf_common+0xb6>
 8008b1e:	f04f 30ff 	mov.w	r0, #4294967295
 8008b22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008b26:	3501      	adds	r5, #1
 8008b28:	e7c1      	b.n	8008aae <_printf_common+0x3e>
 8008b2a:	2030      	movs	r0, #48	; 0x30
 8008b2c:	18e1      	adds	r1, r4, r3
 8008b2e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008b32:	1c5a      	adds	r2, r3, #1
 8008b34:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008b38:	4422      	add	r2, r4
 8008b3a:	3302      	adds	r3, #2
 8008b3c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008b40:	e7c2      	b.n	8008ac8 <_printf_common+0x58>
 8008b42:	2301      	movs	r3, #1
 8008b44:	4622      	mov	r2, r4
 8008b46:	4649      	mov	r1, r9
 8008b48:	4638      	mov	r0, r7
 8008b4a:	47c0      	blx	r8
 8008b4c:	3001      	adds	r0, #1
 8008b4e:	d0e6      	beq.n	8008b1e <_printf_common+0xae>
 8008b50:	3601      	adds	r6, #1
 8008b52:	e7d9      	b.n	8008b08 <_printf_common+0x98>

08008b54 <_printf_i>:
 8008b54:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008b58:	7e0f      	ldrb	r7, [r1, #24]
 8008b5a:	4691      	mov	r9, r2
 8008b5c:	2f78      	cmp	r7, #120	; 0x78
 8008b5e:	4680      	mov	r8, r0
 8008b60:	460c      	mov	r4, r1
 8008b62:	469a      	mov	sl, r3
 8008b64:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008b66:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008b6a:	d807      	bhi.n	8008b7c <_printf_i+0x28>
 8008b6c:	2f62      	cmp	r7, #98	; 0x62
 8008b6e:	d80a      	bhi.n	8008b86 <_printf_i+0x32>
 8008b70:	2f00      	cmp	r7, #0
 8008b72:	f000 80d5 	beq.w	8008d20 <_printf_i+0x1cc>
 8008b76:	2f58      	cmp	r7, #88	; 0x58
 8008b78:	f000 80c1 	beq.w	8008cfe <_printf_i+0x1aa>
 8008b7c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008b80:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008b84:	e03a      	b.n	8008bfc <_printf_i+0xa8>
 8008b86:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008b8a:	2b15      	cmp	r3, #21
 8008b8c:	d8f6      	bhi.n	8008b7c <_printf_i+0x28>
 8008b8e:	a101      	add	r1, pc, #4	; (adr r1, 8008b94 <_printf_i+0x40>)
 8008b90:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008b94:	08008bed 	.word	0x08008bed
 8008b98:	08008c01 	.word	0x08008c01
 8008b9c:	08008b7d 	.word	0x08008b7d
 8008ba0:	08008b7d 	.word	0x08008b7d
 8008ba4:	08008b7d 	.word	0x08008b7d
 8008ba8:	08008b7d 	.word	0x08008b7d
 8008bac:	08008c01 	.word	0x08008c01
 8008bb0:	08008b7d 	.word	0x08008b7d
 8008bb4:	08008b7d 	.word	0x08008b7d
 8008bb8:	08008b7d 	.word	0x08008b7d
 8008bbc:	08008b7d 	.word	0x08008b7d
 8008bc0:	08008d07 	.word	0x08008d07
 8008bc4:	08008c2d 	.word	0x08008c2d
 8008bc8:	08008cc1 	.word	0x08008cc1
 8008bcc:	08008b7d 	.word	0x08008b7d
 8008bd0:	08008b7d 	.word	0x08008b7d
 8008bd4:	08008d29 	.word	0x08008d29
 8008bd8:	08008b7d 	.word	0x08008b7d
 8008bdc:	08008c2d 	.word	0x08008c2d
 8008be0:	08008b7d 	.word	0x08008b7d
 8008be4:	08008b7d 	.word	0x08008b7d
 8008be8:	08008cc9 	.word	0x08008cc9
 8008bec:	682b      	ldr	r3, [r5, #0]
 8008bee:	1d1a      	adds	r2, r3, #4
 8008bf0:	681b      	ldr	r3, [r3, #0]
 8008bf2:	602a      	str	r2, [r5, #0]
 8008bf4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008bf8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008bfc:	2301      	movs	r3, #1
 8008bfe:	e0a0      	b.n	8008d42 <_printf_i+0x1ee>
 8008c00:	6820      	ldr	r0, [r4, #0]
 8008c02:	682b      	ldr	r3, [r5, #0]
 8008c04:	0607      	lsls	r7, r0, #24
 8008c06:	f103 0104 	add.w	r1, r3, #4
 8008c0a:	6029      	str	r1, [r5, #0]
 8008c0c:	d501      	bpl.n	8008c12 <_printf_i+0xbe>
 8008c0e:	681e      	ldr	r6, [r3, #0]
 8008c10:	e003      	b.n	8008c1a <_printf_i+0xc6>
 8008c12:	0646      	lsls	r6, r0, #25
 8008c14:	d5fb      	bpl.n	8008c0e <_printf_i+0xba>
 8008c16:	f9b3 6000 	ldrsh.w	r6, [r3]
 8008c1a:	2e00      	cmp	r6, #0
 8008c1c:	da03      	bge.n	8008c26 <_printf_i+0xd2>
 8008c1e:	232d      	movs	r3, #45	; 0x2d
 8008c20:	4276      	negs	r6, r6
 8008c22:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008c26:	230a      	movs	r3, #10
 8008c28:	4859      	ldr	r0, [pc, #356]	; (8008d90 <_printf_i+0x23c>)
 8008c2a:	e012      	b.n	8008c52 <_printf_i+0xfe>
 8008c2c:	682b      	ldr	r3, [r5, #0]
 8008c2e:	6820      	ldr	r0, [r4, #0]
 8008c30:	1d19      	adds	r1, r3, #4
 8008c32:	6029      	str	r1, [r5, #0]
 8008c34:	0605      	lsls	r5, r0, #24
 8008c36:	d501      	bpl.n	8008c3c <_printf_i+0xe8>
 8008c38:	681e      	ldr	r6, [r3, #0]
 8008c3a:	e002      	b.n	8008c42 <_printf_i+0xee>
 8008c3c:	0641      	lsls	r1, r0, #25
 8008c3e:	d5fb      	bpl.n	8008c38 <_printf_i+0xe4>
 8008c40:	881e      	ldrh	r6, [r3, #0]
 8008c42:	2f6f      	cmp	r7, #111	; 0x6f
 8008c44:	bf0c      	ite	eq
 8008c46:	2308      	moveq	r3, #8
 8008c48:	230a      	movne	r3, #10
 8008c4a:	4851      	ldr	r0, [pc, #324]	; (8008d90 <_printf_i+0x23c>)
 8008c4c:	2100      	movs	r1, #0
 8008c4e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008c52:	6865      	ldr	r5, [r4, #4]
 8008c54:	2d00      	cmp	r5, #0
 8008c56:	bfa8      	it	ge
 8008c58:	6821      	ldrge	r1, [r4, #0]
 8008c5a:	60a5      	str	r5, [r4, #8]
 8008c5c:	bfa4      	itt	ge
 8008c5e:	f021 0104 	bicge.w	r1, r1, #4
 8008c62:	6021      	strge	r1, [r4, #0]
 8008c64:	b90e      	cbnz	r6, 8008c6a <_printf_i+0x116>
 8008c66:	2d00      	cmp	r5, #0
 8008c68:	d04b      	beq.n	8008d02 <_printf_i+0x1ae>
 8008c6a:	4615      	mov	r5, r2
 8008c6c:	fbb6 f1f3 	udiv	r1, r6, r3
 8008c70:	fb03 6711 	mls	r7, r3, r1, r6
 8008c74:	5dc7      	ldrb	r7, [r0, r7]
 8008c76:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008c7a:	4637      	mov	r7, r6
 8008c7c:	42bb      	cmp	r3, r7
 8008c7e:	460e      	mov	r6, r1
 8008c80:	d9f4      	bls.n	8008c6c <_printf_i+0x118>
 8008c82:	2b08      	cmp	r3, #8
 8008c84:	d10b      	bne.n	8008c9e <_printf_i+0x14a>
 8008c86:	6823      	ldr	r3, [r4, #0]
 8008c88:	07de      	lsls	r6, r3, #31
 8008c8a:	d508      	bpl.n	8008c9e <_printf_i+0x14a>
 8008c8c:	6923      	ldr	r3, [r4, #16]
 8008c8e:	6861      	ldr	r1, [r4, #4]
 8008c90:	4299      	cmp	r1, r3
 8008c92:	bfde      	ittt	le
 8008c94:	2330      	movle	r3, #48	; 0x30
 8008c96:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008c9a:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008c9e:	1b52      	subs	r2, r2, r5
 8008ca0:	6122      	str	r2, [r4, #16]
 8008ca2:	464b      	mov	r3, r9
 8008ca4:	4621      	mov	r1, r4
 8008ca6:	4640      	mov	r0, r8
 8008ca8:	f8cd a000 	str.w	sl, [sp]
 8008cac:	aa03      	add	r2, sp, #12
 8008cae:	f7ff fedf 	bl	8008a70 <_printf_common>
 8008cb2:	3001      	adds	r0, #1
 8008cb4:	d14a      	bne.n	8008d4c <_printf_i+0x1f8>
 8008cb6:	f04f 30ff 	mov.w	r0, #4294967295
 8008cba:	b004      	add	sp, #16
 8008cbc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008cc0:	6823      	ldr	r3, [r4, #0]
 8008cc2:	f043 0320 	orr.w	r3, r3, #32
 8008cc6:	6023      	str	r3, [r4, #0]
 8008cc8:	2778      	movs	r7, #120	; 0x78
 8008cca:	4832      	ldr	r0, [pc, #200]	; (8008d94 <_printf_i+0x240>)
 8008ccc:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8008cd0:	6823      	ldr	r3, [r4, #0]
 8008cd2:	6829      	ldr	r1, [r5, #0]
 8008cd4:	061f      	lsls	r7, r3, #24
 8008cd6:	f851 6b04 	ldr.w	r6, [r1], #4
 8008cda:	d402      	bmi.n	8008ce2 <_printf_i+0x18e>
 8008cdc:	065f      	lsls	r7, r3, #25
 8008cde:	bf48      	it	mi
 8008ce0:	b2b6      	uxthmi	r6, r6
 8008ce2:	07df      	lsls	r7, r3, #31
 8008ce4:	bf48      	it	mi
 8008ce6:	f043 0320 	orrmi.w	r3, r3, #32
 8008cea:	6029      	str	r1, [r5, #0]
 8008cec:	bf48      	it	mi
 8008cee:	6023      	strmi	r3, [r4, #0]
 8008cf0:	b91e      	cbnz	r6, 8008cfa <_printf_i+0x1a6>
 8008cf2:	6823      	ldr	r3, [r4, #0]
 8008cf4:	f023 0320 	bic.w	r3, r3, #32
 8008cf8:	6023      	str	r3, [r4, #0]
 8008cfa:	2310      	movs	r3, #16
 8008cfc:	e7a6      	b.n	8008c4c <_printf_i+0xf8>
 8008cfe:	4824      	ldr	r0, [pc, #144]	; (8008d90 <_printf_i+0x23c>)
 8008d00:	e7e4      	b.n	8008ccc <_printf_i+0x178>
 8008d02:	4615      	mov	r5, r2
 8008d04:	e7bd      	b.n	8008c82 <_printf_i+0x12e>
 8008d06:	682b      	ldr	r3, [r5, #0]
 8008d08:	6826      	ldr	r6, [r4, #0]
 8008d0a:	1d18      	adds	r0, r3, #4
 8008d0c:	6961      	ldr	r1, [r4, #20]
 8008d0e:	6028      	str	r0, [r5, #0]
 8008d10:	0635      	lsls	r5, r6, #24
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	d501      	bpl.n	8008d1a <_printf_i+0x1c6>
 8008d16:	6019      	str	r1, [r3, #0]
 8008d18:	e002      	b.n	8008d20 <_printf_i+0x1cc>
 8008d1a:	0670      	lsls	r0, r6, #25
 8008d1c:	d5fb      	bpl.n	8008d16 <_printf_i+0x1c2>
 8008d1e:	8019      	strh	r1, [r3, #0]
 8008d20:	2300      	movs	r3, #0
 8008d22:	4615      	mov	r5, r2
 8008d24:	6123      	str	r3, [r4, #16]
 8008d26:	e7bc      	b.n	8008ca2 <_printf_i+0x14e>
 8008d28:	682b      	ldr	r3, [r5, #0]
 8008d2a:	2100      	movs	r1, #0
 8008d2c:	1d1a      	adds	r2, r3, #4
 8008d2e:	602a      	str	r2, [r5, #0]
 8008d30:	681d      	ldr	r5, [r3, #0]
 8008d32:	6862      	ldr	r2, [r4, #4]
 8008d34:	4628      	mov	r0, r5
 8008d36:	f000 fac4 	bl	80092c2 <memchr>
 8008d3a:	b108      	cbz	r0, 8008d40 <_printf_i+0x1ec>
 8008d3c:	1b40      	subs	r0, r0, r5
 8008d3e:	6060      	str	r0, [r4, #4]
 8008d40:	6863      	ldr	r3, [r4, #4]
 8008d42:	6123      	str	r3, [r4, #16]
 8008d44:	2300      	movs	r3, #0
 8008d46:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008d4a:	e7aa      	b.n	8008ca2 <_printf_i+0x14e>
 8008d4c:	462a      	mov	r2, r5
 8008d4e:	4649      	mov	r1, r9
 8008d50:	4640      	mov	r0, r8
 8008d52:	6923      	ldr	r3, [r4, #16]
 8008d54:	47d0      	blx	sl
 8008d56:	3001      	adds	r0, #1
 8008d58:	d0ad      	beq.n	8008cb6 <_printf_i+0x162>
 8008d5a:	6823      	ldr	r3, [r4, #0]
 8008d5c:	079b      	lsls	r3, r3, #30
 8008d5e:	d413      	bmi.n	8008d88 <_printf_i+0x234>
 8008d60:	68e0      	ldr	r0, [r4, #12]
 8008d62:	9b03      	ldr	r3, [sp, #12]
 8008d64:	4298      	cmp	r0, r3
 8008d66:	bfb8      	it	lt
 8008d68:	4618      	movlt	r0, r3
 8008d6a:	e7a6      	b.n	8008cba <_printf_i+0x166>
 8008d6c:	2301      	movs	r3, #1
 8008d6e:	4632      	mov	r2, r6
 8008d70:	4649      	mov	r1, r9
 8008d72:	4640      	mov	r0, r8
 8008d74:	47d0      	blx	sl
 8008d76:	3001      	adds	r0, #1
 8008d78:	d09d      	beq.n	8008cb6 <_printf_i+0x162>
 8008d7a:	3501      	adds	r5, #1
 8008d7c:	68e3      	ldr	r3, [r4, #12]
 8008d7e:	9903      	ldr	r1, [sp, #12]
 8008d80:	1a5b      	subs	r3, r3, r1
 8008d82:	42ab      	cmp	r3, r5
 8008d84:	dcf2      	bgt.n	8008d6c <_printf_i+0x218>
 8008d86:	e7eb      	b.n	8008d60 <_printf_i+0x20c>
 8008d88:	2500      	movs	r5, #0
 8008d8a:	f104 0619 	add.w	r6, r4, #25
 8008d8e:	e7f5      	b.n	8008d7c <_printf_i+0x228>
 8008d90:	0800b478 	.word	0x0800b478
 8008d94:	0800b489 	.word	0x0800b489

08008d98 <std>:
 8008d98:	2300      	movs	r3, #0
 8008d9a:	b510      	push	{r4, lr}
 8008d9c:	4604      	mov	r4, r0
 8008d9e:	e9c0 3300 	strd	r3, r3, [r0]
 8008da2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008da6:	6083      	str	r3, [r0, #8]
 8008da8:	8181      	strh	r1, [r0, #12]
 8008daa:	6643      	str	r3, [r0, #100]	; 0x64
 8008dac:	81c2      	strh	r2, [r0, #14]
 8008dae:	6183      	str	r3, [r0, #24]
 8008db0:	4619      	mov	r1, r3
 8008db2:	2208      	movs	r2, #8
 8008db4:	305c      	adds	r0, #92	; 0x5c
 8008db6:	f000 fa05 	bl	80091c4 <memset>
 8008dba:	4b0d      	ldr	r3, [pc, #52]	; (8008df0 <std+0x58>)
 8008dbc:	6224      	str	r4, [r4, #32]
 8008dbe:	6263      	str	r3, [r4, #36]	; 0x24
 8008dc0:	4b0c      	ldr	r3, [pc, #48]	; (8008df4 <std+0x5c>)
 8008dc2:	62a3      	str	r3, [r4, #40]	; 0x28
 8008dc4:	4b0c      	ldr	r3, [pc, #48]	; (8008df8 <std+0x60>)
 8008dc6:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008dc8:	4b0c      	ldr	r3, [pc, #48]	; (8008dfc <std+0x64>)
 8008dca:	6323      	str	r3, [r4, #48]	; 0x30
 8008dcc:	4b0c      	ldr	r3, [pc, #48]	; (8008e00 <std+0x68>)
 8008dce:	429c      	cmp	r4, r3
 8008dd0:	d006      	beq.n	8008de0 <std+0x48>
 8008dd2:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8008dd6:	4294      	cmp	r4, r2
 8008dd8:	d002      	beq.n	8008de0 <std+0x48>
 8008dda:	33d0      	adds	r3, #208	; 0xd0
 8008ddc:	429c      	cmp	r4, r3
 8008dde:	d105      	bne.n	8008dec <std+0x54>
 8008de0:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008de4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008de8:	f000 ba68 	b.w	80092bc <__retarget_lock_init_recursive>
 8008dec:	bd10      	pop	{r4, pc}
 8008dee:	bf00      	nop
 8008df0:	08009015 	.word	0x08009015
 8008df4:	08009037 	.word	0x08009037
 8008df8:	0800906f 	.word	0x0800906f
 8008dfc:	08009093 	.word	0x08009093
 8008e00:	20001cf8 	.word	0x20001cf8

08008e04 <stdio_exit_handler>:
 8008e04:	4a02      	ldr	r2, [pc, #8]	; (8008e10 <stdio_exit_handler+0xc>)
 8008e06:	4903      	ldr	r1, [pc, #12]	; (8008e14 <stdio_exit_handler+0x10>)
 8008e08:	4803      	ldr	r0, [pc, #12]	; (8008e18 <stdio_exit_handler+0x14>)
 8008e0a:	f000 b869 	b.w	8008ee0 <_fwalk_sglue>
 8008e0e:	bf00      	nop
 8008e10:	20000020 	.word	0x20000020
 8008e14:	0800ac75 	.word	0x0800ac75
 8008e18:	2000002c 	.word	0x2000002c

08008e1c <cleanup_stdio>:
 8008e1c:	6841      	ldr	r1, [r0, #4]
 8008e1e:	4b0c      	ldr	r3, [pc, #48]	; (8008e50 <cleanup_stdio+0x34>)
 8008e20:	b510      	push	{r4, lr}
 8008e22:	4299      	cmp	r1, r3
 8008e24:	4604      	mov	r4, r0
 8008e26:	d001      	beq.n	8008e2c <cleanup_stdio+0x10>
 8008e28:	f001 ff24 	bl	800ac74 <_fflush_r>
 8008e2c:	68a1      	ldr	r1, [r4, #8]
 8008e2e:	4b09      	ldr	r3, [pc, #36]	; (8008e54 <cleanup_stdio+0x38>)
 8008e30:	4299      	cmp	r1, r3
 8008e32:	d002      	beq.n	8008e3a <cleanup_stdio+0x1e>
 8008e34:	4620      	mov	r0, r4
 8008e36:	f001 ff1d 	bl	800ac74 <_fflush_r>
 8008e3a:	68e1      	ldr	r1, [r4, #12]
 8008e3c:	4b06      	ldr	r3, [pc, #24]	; (8008e58 <cleanup_stdio+0x3c>)
 8008e3e:	4299      	cmp	r1, r3
 8008e40:	d004      	beq.n	8008e4c <cleanup_stdio+0x30>
 8008e42:	4620      	mov	r0, r4
 8008e44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008e48:	f001 bf14 	b.w	800ac74 <_fflush_r>
 8008e4c:	bd10      	pop	{r4, pc}
 8008e4e:	bf00      	nop
 8008e50:	20001cf8 	.word	0x20001cf8
 8008e54:	20001d60 	.word	0x20001d60
 8008e58:	20001dc8 	.word	0x20001dc8

08008e5c <global_stdio_init.part.0>:
 8008e5c:	b510      	push	{r4, lr}
 8008e5e:	4b0b      	ldr	r3, [pc, #44]	; (8008e8c <global_stdio_init.part.0+0x30>)
 8008e60:	4c0b      	ldr	r4, [pc, #44]	; (8008e90 <global_stdio_init.part.0+0x34>)
 8008e62:	4a0c      	ldr	r2, [pc, #48]	; (8008e94 <global_stdio_init.part.0+0x38>)
 8008e64:	4620      	mov	r0, r4
 8008e66:	601a      	str	r2, [r3, #0]
 8008e68:	2104      	movs	r1, #4
 8008e6a:	2200      	movs	r2, #0
 8008e6c:	f7ff ff94 	bl	8008d98 <std>
 8008e70:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8008e74:	2201      	movs	r2, #1
 8008e76:	2109      	movs	r1, #9
 8008e78:	f7ff ff8e 	bl	8008d98 <std>
 8008e7c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8008e80:	2202      	movs	r2, #2
 8008e82:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008e86:	2112      	movs	r1, #18
 8008e88:	f7ff bf86 	b.w	8008d98 <std>
 8008e8c:	20001e30 	.word	0x20001e30
 8008e90:	20001cf8 	.word	0x20001cf8
 8008e94:	08008e05 	.word	0x08008e05

08008e98 <__sfp_lock_acquire>:
 8008e98:	4801      	ldr	r0, [pc, #4]	; (8008ea0 <__sfp_lock_acquire+0x8>)
 8008e9a:	f000 ba10 	b.w	80092be <__retarget_lock_acquire_recursive>
 8008e9e:	bf00      	nop
 8008ea0:	20001e39 	.word	0x20001e39

08008ea4 <__sfp_lock_release>:
 8008ea4:	4801      	ldr	r0, [pc, #4]	; (8008eac <__sfp_lock_release+0x8>)
 8008ea6:	f000 ba0b 	b.w	80092c0 <__retarget_lock_release_recursive>
 8008eaa:	bf00      	nop
 8008eac:	20001e39 	.word	0x20001e39

08008eb0 <__sinit>:
 8008eb0:	b510      	push	{r4, lr}
 8008eb2:	4604      	mov	r4, r0
 8008eb4:	f7ff fff0 	bl	8008e98 <__sfp_lock_acquire>
 8008eb8:	6a23      	ldr	r3, [r4, #32]
 8008eba:	b11b      	cbz	r3, 8008ec4 <__sinit+0x14>
 8008ebc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008ec0:	f7ff bff0 	b.w	8008ea4 <__sfp_lock_release>
 8008ec4:	4b04      	ldr	r3, [pc, #16]	; (8008ed8 <__sinit+0x28>)
 8008ec6:	6223      	str	r3, [r4, #32]
 8008ec8:	4b04      	ldr	r3, [pc, #16]	; (8008edc <__sinit+0x2c>)
 8008eca:	681b      	ldr	r3, [r3, #0]
 8008ecc:	2b00      	cmp	r3, #0
 8008ece:	d1f5      	bne.n	8008ebc <__sinit+0xc>
 8008ed0:	f7ff ffc4 	bl	8008e5c <global_stdio_init.part.0>
 8008ed4:	e7f2      	b.n	8008ebc <__sinit+0xc>
 8008ed6:	bf00      	nop
 8008ed8:	08008e1d 	.word	0x08008e1d
 8008edc:	20001e30 	.word	0x20001e30

08008ee0 <_fwalk_sglue>:
 8008ee0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008ee4:	4607      	mov	r7, r0
 8008ee6:	4688      	mov	r8, r1
 8008ee8:	4614      	mov	r4, r2
 8008eea:	2600      	movs	r6, #0
 8008eec:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008ef0:	f1b9 0901 	subs.w	r9, r9, #1
 8008ef4:	d505      	bpl.n	8008f02 <_fwalk_sglue+0x22>
 8008ef6:	6824      	ldr	r4, [r4, #0]
 8008ef8:	2c00      	cmp	r4, #0
 8008efa:	d1f7      	bne.n	8008eec <_fwalk_sglue+0xc>
 8008efc:	4630      	mov	r0, r6
 8008efe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008f02:	89ab      	ldrh	r3, [r5, #12]
 8008f04:	2b01      	cmp	r3, #1
 8008f06:	d907      	bls.n	8008f18 <_fwalk_sglue+0x38>
 8008f08:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008f0c:	3301      	adds	r3, #1
 8008f0e:	d003      	beq.n	8008f18 <_fwalk_sglue+0x38>
 8008f10:	4629      	mov	r1, r5
 8008f12:	4638      	mov	r0, r7
 8008f14:	47c0      	blx	r8
 8008f16:	4306      	orrs	r6, r0
 8008f18:	3568      	adds	r5, #104	; 0x68
 8008f1a:	e7e9      	b.n	8008ef0 <_fwalk_sglue+0x10>

08008f1c <_puts_r>:
 8008f1c:	6a03      	ldr	r3, [r0, #32]
 8008f1e:	b570      	push	{r4, r5, r6, lr}
 8008f20:	4605      	mov	r5, r0
 8008f22:	460e      	mov	r6, r1
 8008f24:	6884      	ldr	r4, [r0, #8]
 8008f26:	b90b      	cbnz	r3, 8008f2c <_puts_r+0x10>
 8008f28:	f7ff ffc2 	bl	8008eb0 <__sinit>
 8008f2c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008f2e:	07db      	lsls	r3, r3, #31
 8008f30:	d405      	bmi.n	8008f3e <_puts_r+0x22>
 8008f32:	89a3      	ldrh	r3, [r4, #12]
 8008f34:	0598      	lsls	r0, r3, #22
 8008f36:	d402      	bmi.n	8008f3e <_puts_r+0x22>
 8008f38:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008f3a:	f000 f9c0 	bl	80092be <__retarget_lock_acquire_recursive>
 8008f3e:	89a3      	ldrh	r3, [r4, #12]
 8008f40:	0719      	lsls	r1, r3, #28
 8008f42:	d513      	bpl.n	8008f6c <_puts_r+0x50>
 8008f44:	6923      	ldr	r3, [r4, #16]
 8008f46:	b18b      	cbz	r3, 8008f6c <_puts_r+0x50>
 8008f48:	3e01      	subs	r6, #1
 8008f4a:	68a3      	ldr	r3, [r4, #8]
 8008f4c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8008f50:	3b01      	subs	r3, #1
 8008f52:	60a3      	str	r3, [r4, #8]
 8008f54:	b9e9      	cbnz	r1, 8008f92 <_puts_r+0x76>
 8008f56:	2b00      	cmp	r3, #0
 8008f58:	da2e      	bge.n	8008fb8 <_puts_r+0x9c>
 8008f5a:	4622      	mov	r2, r4
 8008f5c:	210a      	movs	r1, #10
 8008f5e:	4628      	mov	r0, r5
 8008f60:	f000 f89b 	bl	800909a <__swbuf_r>
 8008f64:	3001      	adds	r0, #1
 8008f66:	d007      	beq.n	8008f78 <_puts_r+0x5c>
 8008f68:	250a      	movs	r5, #10
 8008f6a:	e007      	b.n	8008f7c <_puts_r+0x60>
 8008f6c:	4621      	mov	r1, r4
 8008f6e:	4628      	mov	r0, r5
 8008f70:	f000 f8d0 	bl	8009114 <__swsetup_r>
 8008f74:	2800      	cmp	r0, #0
 8008f76:	d0e7      	beq.n	8008f48 <_puts_r+0x2c>
 8008f78:	f04f 35ff 	mov.w	r5, #4294967295
 8008f7c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008f7e:	07da      	lsls	r2, r3, #31
 8008f80:	d405      	bmi.n	8008f8e <_puts_r+0x72>
 8008f82:	89a3      	ldrh	r3, [r4, #12]
 8008f84:	059b      	lsls	r3, r3, #22
 8008f86:	d402      	bmi.n	8008f8e <_puts_r+0x72>
 8008f88:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008f8a:	f000 f999 	bl	80092c0 <__retarget_lock_release_recursive>
 8008f8e:	4628      	mov	r0, r5
 8008f90:	bd70      	pop	{r4, r5, r6, pc}
 8008f92:	2b00      	cmp	r3, #0
 8008f94:	da04      	bge.n	8008fa0 <_puts_r+0x84>
 8008f96:	69a2      	ldr	r2, [r4, #24]
 8008f98:	429a      	cmp	r2, r3
 8008f9a:	dc06      	bgt.n	8008faa <_puts_r+0x8e>
 8008f9c:	290a      	cmp	r1, #10
 8008f9e:	d004      	beq.n	8008faa <_puts_r+0x8e>
 8008fa0:	6823      	ldr	r3, [r4, #0]
 8008fa2:	1c5a      	adds	r2, r3, #1
 8008fa4:	6022      	str	r2, [r4, #0]
 8008fa6:	7019      	strb	r1, [r3, #0]
 8008fa8:	e7cf      	b.n	8008f4a <_puts_r+0x2e>
 8008faa:	4622      	mov	r2, r4
 8008fac:	4628      	mov	r0, r5
 8008fae:	f000 f874 	bl	800909a <__swbuf_r>
 8008fb2:	3001      	adds	r0, #1
 8008fb4:	d1c9      	bne.n	8008f4a <_puts_r+0x2e>
 8008fb6:	e7df      	b.n	8008f78 <_puts_r+0x5c>
 8008fb8:	250a      	movs	r5, #10
 8008fba:	6823      	ldr	r3, [r4, #0]
 8008fbc:	1c5a      	adds	r2, r3, #1
 8008fbe:	6022      	str	r2, [r4, #0]
 8008fc0:	701d      	strb	r5, [r3, #0]
 8008fc2:	e7db      	b.n	8008f7c <_puts_r+0x60>

08008fc4 <puts>:
 8008fc4:	4b02      	ldr	r3, [pc, #8]	; (8008fd0 <puts+0xc>)
 8008fc6:	4601      	mov	r1, r0
 8008fc8:	6818      	ldr	r0, [r3, #0]
 8008fca:	f7ff bfa7 	b.w	8008f1c <_puts_r>
 8008fce:	bf00      	nop
 8008fd0:	20000078 	.word	0x20000078

08008fd4 <siprintf>:
 8008fd4:	b40e      	push	{r1, r2, r3}
 8008fd6:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008fda:	b500      	push	{lr}
 8008fdc:	b09c      	sub	sp, #112	; 0x70
 8008fde:	ab1d      	add	r3, sp, #116	; 0x74
 8008fe0:	9002      	str	r0, [sp, #8]
 8008fe2:	9006      	str	r0, [sp, #24]
 8008fe4:	9107      	str	r1, [sp, #28]
 8008fe6:	9104      	str	r1, [sp, #16]
 8008fe8:	4808      	ldr	r0, [pc, #32]	; (800900c <siprintf+0x38>)
 8008fea:	4909      	ldr	r1, [pc, #36]	; (8009010 <siprintf+0x3c>)
 8008fec:	f853 2b04 	ldr.w	r2, [r3], #4
 8008ff0:	9105      	str	r1, [sp, #20]
 8008ff2:	6800      	ldr	r0, [r0, #0]
 8008ff4:	a902      	add	r1, sp, #8
 8008ff6:	9301      	str	r3, [sp, #4]
 8008ff8:	f001 fcbc 	bl	800a974 <_svfiprintf_r>
 8008ffc:	2200      	movs	r2, #0
 8008ffe:	9b02      	ldr	r3, [sp, #8]
 8009000:	701a      	strb	r2, [r3, #0]
 8009002:	b01c      	add	sp, #112	; 0x70
 8009004:	f85d eb04 	ldr.w	lr, [sp], #4
 8009008:	b003      	add	sp, #12
 800900a:	4770      	bx	lr
 800900c:	20000078 	.word	0x20000078
 8009010:	ffff0208 	.word	0xffff0208

08009014 <__sread>:
 8009014:	b510      	push	{r4, lr}
 8009016:	460c      	mov	r4, r1
 8009018:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800901c:	f000 f900 	bl	8009220 <_read_r>
 8009020:	2800      	cmp	r0, #0
 8009022:	bfab      	itete	ge
 8009024:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009026:	89a3      	ldrhlt	r3, [r4, #12]
 8009028:	181b      	addge	r3, r3, r0
 800902a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800902e:	bfac      	ite	ge
 8009030:	6563      	strge	r3, [r4, #84]	; 0x54
 8009032:	81a3      	strhlt	r3, [r4, #12]
 8009034:	bd10      	pop	{r4, pc}

08009036 <__swrite>:
 8009036:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800903a:	461f      	mov	r7, r3
 800903c:	898b      	ldrh	r3, [r1, #12]
 800903e:	4605      	mov	r5, r0
 8009040:	05db      	lsls	r3, r3, #23
 8009042:	460c      	mov	r4, r1
 8009044:	4616      	mov	r6, r2
 8009046:	d505      	bpl.n	8009054 <__swrite+0x1e>
 8009048:	2302      	movs	r3, #2
 800904a:	2200      	movs	r2, #0
 800904c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009050:	f000 f8d4 	bl	80091fc <_lseek_r>
 8009054:	89a3      	ldrh	r3, [r4, #12]
 8009056:	4632      	mov	r2, r6
 8009058:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800905c:	81a3      	strh	r3, [r4, #12]
 800905e:	4628      	mov	r0, r5
 8009060:	463b      	mov	r3, r7
 8009062:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009066:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800906a:	f000 b8eb 	b.w	8009244 <_write_r>

0800906e <__sseek>:
 800906e:	b510      	push	{r4, lr}
 8009070:	460c      	mov	r4, r1
 8009072:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009076:	f000 f8c1 	bl	80091fc <_lseek_r>
 800907a:	1c43      	adds	r3, r0, #1
 800907c:	89a3      	ldrh	r3, [r4, #12]
 800907e:	bf15      	itete	ne
 8009080:	6560      	strne	r0, [r4, #84]	; 0x54
 8009082:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009086:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800908a:	81a3      	strheq	r3, [r4, #12]
 800908c:	bf18      	it	ne
 800908e:	81a3      	strhne	r3, [r4, #12]
 8009090:	bd10      	pop	{r4, pc}

08009092 <__sclose>:
 8009092:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009096:	f000 b8a1 	b.w	80091dc <_close_r>

0800909a <__swbuf_r>:
 800909a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800909c:	460e      	mov	r6, r1
 800909e:	4614      	mov	r4, r2
 80090a0:	4605      	mov	r5, r0
 80090a2:	b118      	cbz	r0, 80090ac <__swbuf_r+0x12>
 80090a4:	6a03      	ldr	r3, [r0, #32]
 80090a6:	b90b      	cbnz	r3, 80090ac <__swbuf_r+0x12>
 80090a8:	f7ff ff02 	bl	8008eb0 <__sinit>
 80090ac:	69a3      	ldr	r3, [r4, #24]
 80090ae:	60a3      	str	r3, [r4, #8]
 80090b0:	89a3      	ldrh	r3, [r4, #12]
 80090b2:	071a      	lsls	r2, r3, #28
 80090b4:	d525      	bpl.n	8009102 <__swbuf_r+0x68>
 80090b6:	6923      	ldr	r3, [r4, #16]
 80090b8:	b31b      	cbz	r3, 8009102 <__swbuf_r+0x68>
 80090ba:	6823      	ldr	r3, [r4, #0]
 80090bc:	6922      	ldr	r2, [r4, #16]
 80090be:	b2f6      	uxtb	r6, r6
 80090c0:	1a98      	subs	r0, r3, r2
 80090c2:	6963      	ldr	r3, [r4, #20]
 80090c4:	4637      	mov	r7, r6
 80090c6:	4283      	cmp	r3, r0
 80090c8:	dc04      	bgt.n	80090d4 <__swbuf_r+0x3a>
 80090ca:	4621      	mov	r1, r4
 80090cc:	4628      	mov	r0, r5
 80090ce:	f001 fdd1 	bl	800ac74 <_fflush_r>
 80090d2:	b9e0      	cbnz	r0, 800910e <__swbuf_r+0x74>
 80090d4:	68a3      	ldr	r3, [r4, #8]
 80090d6:	3b01      	subs	r3, #1
 80090d8:	60a3      	str	r3, [r4, #8]
 80090da:	6823      	ldr	r3, [r4, #0]
 80090dc:	1c5a      	adds	r2, r3, #1
 80090de:	6022      	str	r2, [r4, #0]
 80090e0:	701e      	strb	r6, [r3, #0]
 80090e2:	6962      	ldr	r2, [r4, #20]
 80090e4:	1c43      	adds	r3, r0, #1
 80090e6:	429a      	cmp	r2, r3
 80090e8:	d004      	beq.n	80090f4 <__swbuf_r+0x5a>
 80090ea:	89a3      	ldrh	r3, [r4, #12]
 80090ec:	07db      	lsls	r3, r3, #31
 80090ee:	d506      	bpl.n	80090fe <__swbuf_r+0x64>
 80090f0:	2e0a      	cmp	r6, #10
 80090f2:	d104      	bne.n	80090fe <__swbuf_r+0x64>
 80090f4:	4621      	mov	r1, r4
 80090f6:	4628      	mov	r0, r5
 80090f8:	f001 fdbc 	bl	800ac74 <_fflush_r>
 80090fc:	b938      	cbnz	r0, 800910e <__swbuf_r+0x74>
 80090fe:	4638      	mov	r0, r7
 8009100:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009102:	4621      	mov	r1, r4
 8009104:	4628      	mov	r0, r5
 8009106:	f000 f805 	bl	8009114 <__swsetup_r>
 800910a:	2800      	cmp	r0, #0
 800910c:	d0d5      	beq.n	80090ba <__swbuf_r+0x20>
 800910e:	f04f 37ff 	mov.w	r7, #4294967295
 8009112:	e7f4      	b.n	80090fe <__swbuf_r+0x64>

08009114 <__swsetup_r>:
 8009114:	b538      	push	{r3, r4, r5, lr}
 8009116:	4b2a      	ldr	r3, [pc, #168]	; (80091c0 <__swsetup_r+0xac>)
 8009118:	4605      	mov	r5, r0
 800911a:	6818      	ldr	r0, [r3, #0]
 800911c:	460c      	mov	r4, r1
 800911e:	b118      	cbz	r0, 8009128 <__swsetup_r+0x14>
 8009120:	6a03      	ldr	r3, [r0, #32]
 8009122:	b90b      	cbnz	r3, 8009128 <__swsetup_r+0x14>
 8009124:	f7ff fec4 	bl	8008eb0 <__sinit>
 8009128:	89a3      	ldrh	r3, [r4, #12]
 800912a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800912e:	0718      	lsls	r0, r3, #28
 8009130:	d422      	bmi.n	8009178 <__swsetup_r+0x64>
 8009132:	06d9      	lsls	r1, r3, #27
 8009134:	d407      	bmi.n	8009146 <__swsetup_r+0x32>
 8009136:	2309      	movs	r3, #9
 8009138:	602b      	str	r3, [r5, #0]
 800913a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800913e:	f04f 30ff 	mov.w	r0, #4294967295
 8009142:	81a3      	strh	r3, [r4, #12]
 8009144:	e034      	b.n	80091b0 <__swsetup_r+0x9c>
 8009146:	0758      	lsls	r0, r3, #29
 8009148:	d512      	bpl.n	8009170 <__swsetup_r+0x5c>
 800914a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800914c:	b141      	cbz	r1, 8009160 <__swsetup_r+0x4c>
 800914e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009152:	4299      	cmp	r1, r3
 8009154:	d002      	beq.n	800915c <__swsetup_r+0x48>
 8009156:	4628      	mov	r0, r5
 8009158:	f000 ff3e 	bl	8009fd8 <_free_r>
 800915c:	2300      	movs	r3, #0
 800915e:	6363      	str	r3, [r4, #52]	; 0x34
 8009160:	89a3      	ldrh	r3, [r4, #12]
 8009162:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009166:	81a3      	strh	r3, [r4, #12]
 8009168:	2300      	movs	r3, #0
 800916a:	6063      	str	r3, [r4, #4]
 800916c:	6923      	ldr	r3, [r4, #16]
 800916e:	6023      	str	r3, [r4, #0]
 8009170:	89a3      	ldrh	r3, [r4, #12]
 8009172:	f043 0308 	orr.w	r3, r3, #8
 8009176:	81a3      	strh	r3, [r4, #12]
 8009178:	6923      	ldr	r3, [r4, #16]
 800917a:	b94b      	cbnz	r3, 8009190 <__swsetup_r+0x7c>
 800917c:	89a3      	ldrh	r3, [r4, #12]
 800917e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009182:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009186:	d003      	beq.n	8009190 <__swsetup_r+0x7c>
 8009188:	4621      	mov	r1, r4
 800918a:	4628      	mov	r0, r5
 800918c:	f001 fdbf 	bl	800ad0e <__smakebuf_r>
 8009190:	89a0      	ldrh	r0, [r4, #12]
 8009192:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009196:	f010 0301 	ands.w	r3, r0, #1
 800919a:	d00a      	beq.n	80091b2 <__swsetup_r+0x9e>
 800919c:	2300      	movs	r3, #0
 800919e:	60a3      	str	r3, [r4, #8]
 80091a0:	6963      	ldr	r3, [r4, #20]
 80091a2:	425b      	negs	r3, r3
 80091a4:	61a3      	str	r3, [r4, #24]
 80091a6:	6923      	ldr	r3, [r4, #16]
 80091a8:	b943      	cbnz	r3, 80091bc <__swsetup_r+0xa8>
 80091aa:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80091ae:	d1c4      	bne.n	800913a <__swsetup_r+0x26>
 80091b0:	bd38      	pop	{r3, r4, r5, pc}
 80091b2:	0781      	lsls	r1, r0, #30
 80091b4:	bf58      	it	pl
 80091b6:	6963      	ldrpl	r3, [r4, #20]
 80091b8:	60a3      	str	r3, [r4, #8]
 80091ba:	e7f4      	b.n	80091a6 <__swsetup_r+0x92>
 80091bc:	2000      	movs	r0, #0
 80091be:	e7f7      	b.n	80091b0 <__swsetup_r+0x9c>
 80091c0:	20000078 	.word	0x20000078

080091c4 <memset>:
 80091c4:	4603      	mov	r3, r0
 80091c6:	4402      	add	r2, r0
 80091c8:	4293      	cmp	r3, r2
 80091ca:	d100      	bne.n	80091ce <memset+0xa>
 80091cc:	4770      	bx	lr
 80091ce:	f803 1b01 	strb.w	r1, [r3], #1
 80091d2:	e7f9      	b.n	80091c8 <memset+0x4>

080091d4 <_localeconv_r>:
 80091d4:	4800      	ldr	r0, [pc, #0]	; (80091d8 <_localeconv_r+0x4>)
 80091d6:	4770      	bx	lr
 80091d8:	2000016c 	.word	0x2000016c

080091dc <_close_r>:
 80091dc:	b538      	push	{r3, r4, r5, lr}
 80091de:	2300      	movs	r3, #0
 80091e0:	4d05      	ldr	r5, [pc, #20]	; (80091f8 <_close_r+0x1c>)
 80091e2:	4604      	mov	r4, r0
 80091e4:	4608      	mov	r0, r1
 80091e6:	602b      	str	r3, [r5, #0]
 80091e8:	f7f8 fd94 	bl	8001d14 <_close>
 80091ec:	1c43      	adds	r3, r0, #1
 80091ee:	d102      	bne.n	80091f6 <_close_r+0x1a>
 80091f0:	682b      	ldr	r3, [r5, #0]
 80091f2:	b103      	cbz	r3, 80091f6 <_close_r+0x1a>
 80091f4:	6023      	str	r3, [r4, #0]
 80091f6:	bd38      	pop	{r3, r4, r5, pc}
 80091f8:	20001e34 	.word	0x20001e34

080091fc <_lseek_r>:
 80091fc:	b538      	push	{r3, r4, r5, lr}
 80091fe:	4604      	mov	r4, r0
 8009200:	4608      	mov	r0, r1
 8009202:	4611      	mov	r1, r2
 8009204:	2200      	movs	r2, #0
 8009206:	4d05      	ldr	r5, [pc, #20]	; (800921c <_lseek_r+0x20>)
 8009208:	602a      	str	r2, [r5, #0]
 800920a:	461a      	mov	r2, r3
 800920c:	f7f8 fda6 	bl	8001d5c <_lseek>
 8009210:	1c43      	adds	r3, r0, #1
 8009212:	d102      	bne.n	800921a <_lseek_r+0x1e>
 8009214:	682b      	ldr	r3, [r5, #0]
 8009216:	b103      	cbz	r3, 800921a <_lseek_r+0x1e>
 8009218:	6023      	str	r3, [r4, #0]
 800921a:	bd38      	pop	{r3, r4, r5, pc}
 800921c:	20001e34 	.word	0x20001e34

08009220 <_read_r>:
 8009220:	b538      	push	{r3, r4, r5, lr}
 8009222:	4604      	mov	r4, r0
 8009224:	4608      	mov	r0, r1
 8009226:	4611      	mov	r1, r2
 8009228:	2200      	movs	r2, #0
 800922a:	4d05      	ldr	r5, [pc, #20]	; (8009240 <_read_r+0x20>)
 800922c:	602a      	str	r2, [r5, #0]
 800922e:	461a      	mov	r2, r3
 8009230:	f7f8 fd37 	bl	8001ca2 <_read>
 8009234:	1c43      	adds	r3, r0, #1
 8009236:	d102      	bne.n	800923e <_read_r+0x1e>
 8009238:	682b      	ldr	r3, [r5, #0]
 800923a:	b103      	cbz	r3, 800923e <_read_r+0x1e>
 800923c:	6023      	str	r3, [r4, #0]
 800923e:	bd38      	pop	{r3, r4, r5, pc}
 8009240:	20001e34 	.word	0x20001e34

08009244 <_write_r>:
 8009244:	b538      	push	{r3, r4, r5, lr}
 8009246:	4604      	mov	r4, r0
 8009248:	4608      	mov	r0, r1
 800924a:	4611      	mov	r1, r2
 800924c:	2200      	movs	r2, #0
 800924e:	4d05      	ldr	r5, [pc, #20]	; (8009264 <_write_r+0x20>)
 8009250:	602a      	str	r2, [r5, #0]
 8009252:	461a      	mov	r2, r3
 8009254:	f7f8 fd42 	bl	8001cdc <_write>
 8009258:	1c43      	adds	r3, r0, #1
 800925a:	d102      	bne.n	8009262 <_write_r+0x1e>
 800925c:	682b      	ldr	r3, [r5, #0]
 800925e:	b103      	cbz	r3, 8009262 <_write_r+0x1e>
 8009260:	6023      	str	r3, [r4, #0]
 8009262:	bd38      	pop	{r3, r4, r5, pc}
 8009264:	20001e34 	.word	0x20001e34

08009268 <__errno>:
 8009268:	4b01      	ldr	r3, [pc, #4]	; (8009270 <__errno+0x8>)
 800926a:	6818      	ldr	r0, [r3, #0]
 800926c:	4770      	bx	lr
 800926e:	bf00      	nop
 8009270:	20000078 	.word	0x20000078

08009274 <__libc_init_array>:
 8009274:	b570      	push	{r4, r5, r6, lr}
 8009276:	2600      	movs	r6, #0
 8009278:	4d0c      	ldr	r5, [pc, #48]	; (80092ac <__libc_init_array+0x38>)
 800927a:	4c0d      	ldr	r4, [pc, #52]	; (80092b0 <__libc_init_array+0x3c>)
 800927c:	1b64      	subs	r4, r4, r5
 800927e:	10a4      	asrs	r4, r4, #2
 8009280:	42a6      	cmp	r6, r4
 8009282:	d109      	bne.n	8009298 <__libc_init_array+0x24>
 8009284:	f001 fff2 	bl	800b26c <_init>
 8009288:	2600      	movs	r6, #0
 800928a:	4d0a      	ldr	r5, [pc, #40]	; (80092b4 <__libc_init_array+0x40>)
 800928c:	4c0a      	ldr	r4, [pc, #40]	; (80092b8 <__libc_init_array+0x44>)
 800928e:	1b64      	subs	r4, r4, r5
 8009290:	10a4      	asrs	r4, r4, #2
 8009292:	42a6      	cmp	r6, r4
 8009294:	d105      	bne.n	80092a2 <__libc_init_array+0x2e>
 8009296:	bd70      	pop	{r4, r5, r6, pc}
 8009298:	f855 3b04 	ldr.w	r3, [r5], #4
 800929c:	4798      	blx	r3
 800929e:	3601      	adds	r6, #1
 80092a0:	e7ee      	b.n	8009280 <__libc_init_array+0xc>
 80092a2:	f855 3b04 	ldr.w	r3, [r5], #4
 80092a6:	4798      	blx	r3
 80092a8:	3601      	adds	r6, #1
 80092aa:	e7f2      	b.n	8009292 <__libc_init_array+0x1e>
 80092ac:	0800b7d4 	.word	0x0800b7d4
 80092b0:	0800b7d4 	.word	0x0800b7d4
 80092b4:	0800b7d4 	.word	0x0800b7d4
 80092b8:	0800b7d8 	.word	0x0800b7d8

080092bc <__retarget_lock_init_recursive>:
 80092bc:	4770      	bx	lr

080092be <__retarget_lock_acquire_recursive>:
 80092be:	4770      	bx	lr

080092c0 <__retarget_lock_release_recursive>:
 80092c0:	4770      	bx	lr

080092c2 <memchr>:
 80092c2:	4603      	mov	r3, r0
 80092c4:	b510      	push	{r4, lr}
 80092c6:	b2c9      	uxtb	r1, r1
 80092c8:	4402      	add	r2, r0
 80092ca:	4293      	cmp	r3, r2
 80092cc:	4618      	mov	r0, r3
 80092ce:	d101      	bne.n	80092d4 <memchr+0x12>
 80092d0:	2000      	movs	r0, #0
 80092d2:	e003      	b.n	80092dc <memchr+0x1a>
 80092d4:	7804      	ldrb	r4, [r0, #0]
 80092d6:	3301      	adds	r3, #1
 80092d8:	428c      	cmp	r4, r1
 80092da:	d1f6      	bne.n	80092ca <memchr+0x8>
 80092dc:	bd10      	pop	{r4, pc}

080092de <memcpy>:
 80092de:	440a      	add	r2, r1
 80092e0:	4291      	cmp	r1, r2
 80092e2:	f100 33ff 	add.w	r3, r0, #4294967295
 80092e6:	d100      	bne.n	80092ea <memcpy+0xc>
 80092e8:	4770      	bx	lr
 80092ea:	b510      	push	{r4, lr}
 80092ec:	f811 4b01 	ldrb.w	r4, [r1], #1
 80092f0:	4291      	cmp	r1, r2
 80092f2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80092f6:	d1f9      	bne.n	80092ec <memcpy+0xe>
 80092f8:	bd10      	pop	{r4, pc}

080092fa <quorem>:
 80092fa:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80092fe:	6903      	ldr	r3, [r0, #16]
 8009300:	690c      	ldr	r4, [r1, #16]
 8009302:	4607      	mov	r7, r0
 8009304:	42a3      	cmp	r3, r4
 8009306:	db7f      	blt.n	8009408 <quorem+0x10e>
 8009308:	3c01      	subs	r4, #1
 800930a:	f100 0514 	add.w	r5, r0, #20
 800930e:	f101 0814 	add.w	r8, r1, #20
 8009312:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009316:	9301      	str	r3, [sp, #4]
 8009318:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800931c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009320:	3301      	adds	r3, #1
 8009322:	429a      	cmp	r2, r3
 8009324:	fbb2 f6f3 	udiv	r6, r2, r3
 8009328:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800932c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009330:	d331      	bcc.n	8009396 <quorem+0x9c>
 8009332:	f04f 0e00 	mov.w	lr, #0
 8009336:	4640      	mov	r0, r8
 8009338:	46ac      	mov	ip, r5
 800933a:	46f2      	mov	sl, lr
 800933c:	f850 2b04 	ldr.w	r2, [r0], #4
 8009340:	b293      	uxth	r3, r2
 8009342:	fb06 e303 	mla	r3, r6, r3, lr
 8009346:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800934a:	0c1a      	lsrs	r2, r3, #16
 800934c:	b29b      	uxth	r3, r3
 800934e:	fb06 220e 	mla	r2, r6, lr, r2
 8009352:	ebaa 0303 	sub.w	r3, sl, r3
 8009356:	f8dc a000 	ldr.w	sl, [ip]
 800935a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800935e:	fa1f fa8a 	uxth.w	sl, sl
 8009362:	4453      	add	r3, sl
 8009364:	f8dc a000 	ldr.w	sl, [ip]
 8009368:	b292      	uxth	r2, r2
 800936a:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800936e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009372:	b29b      	uxth	r3, r3
 8009374:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009378:	4581      	cmp	r9, r0
 800937a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800937e:	f84c 3b04 	str.w	r3, [ip], #4
 8009382:	d2db      	bcs.n	800933c <quorem+0x42>
 8009384:	f855 300b 	ldr.w	r3, [r5, fp]
 8009388:	b92b      	cbnz	r3, 8009396 <quorem+0x9c>
 800938a:	9b01      	ldr	r3, [sp, #4]
 800938c:	3b04      	subs	r3, #4
 800938e:	429d      	cmp	r5, r3
 8009390:	461a      	mov	r2, r3
 8009392:	d32d      	bcc.n	80093f0 <quorem+0xf6>
 8009394:	613c      	str	r4, [r7, #16]
 8009396:	4638      	mov	r0, r7
 8009398:	f001 f994 	bl	800a6c4 <__mcmp>
 800939c:	2800      	cmp	r0, #0
 800939e:	db23      	blt.n	80093e8 <quorem+0xee>
 80093a0:	4629      	mov	r1, r5
 80093a2:	2000      	movs	r0, #0
 80093a4:	3601      	adds	r6, #1
 80093a6:	f858 2b04 	ldr.w	r2, [r8], #4
 80093aa:	f8d1 c000 	ldr.w	ip, [r1]
 80093ae:	b293      	uxth	r3, r2
 80093b0:	1ac3      	subs	r3, r0, r3
 80093b2:	0c12      	lsrs	r2, r2, #16
 80093b4:	fa1f f08c 	uxth.w	r0, ip
 80093b8:	4403      	add	r3, r0
 80093ba:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 80093be:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80093c2:	b29b      	uxth	r3, r3
 80093c4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80093c8:	45c1      	cmp	r9, r8
 80093ca:	ea4f 4022 	mov.w	r0, r2, asr #16
 80093ce:	f841 3b04 	str.w	r3, [r1], #4
 80093d2:	d2e8      	bcs.n	80093a6 <quorem+0xac>
 80093d4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80093d8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80093dc:	b922      	cbnz	r2, 80093e8 <quorem+0xee>
 80093de:	3b04      	subs	r3, #4
 80093e0:	429d      	cmp	r5, r3
 80093e2:	461a      	mov	r2, r3
 80093e4:	d30a      	bcc.n	80093fc <quorem+0x102>
 80093e6:	613c      	str	r4, [r7, #16]
 80093e8:	4630      	mov	r0, r6
 80093ea:	b003      	add	sp, #12
 80093ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80093f0:	6812      	ldr	r2, [r2, #0]
 80093f2:	3b04      	subs	r3, #4
 80093f4:	2a00      	cmp	r2, #0
 80093f6:	d1cd      	bne.n	8009394 <quorem+0x9a>
 80093f8:	3c01      	subs	r4, #1
 80093fa:	e7c8      	b.n	800938e <quorem+0x94>
 80093fc:	6812      	ldr	r2, [r2, #0]
 80093fe:	3b04      	subs	r3, #4
 8009400:	2a00      	cmp	r2, #0
 8009402:	d1f0      	bne.n	80093e6 <quorem+0xec>
 8009404:	3c01      	subs	r4, #1
 8009406:	e7eb      	b.n	80093e0 <quorem+0xe6>
 8009408:	2000      	movs	r0, #0
 800940a:	e7ee      	b.n	80093ea <quorem+0xf0>
 800940c:	0000      	movs	r0, r0
	...

08009410 <_dtoa_r>:
 8009410:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009414:	4616      	mov	r6, r2
 8009416:	461f      	mov	r7, r3
 8009418:	69c4      	ldr	r4, [r0, #28]
 800941a:	b099      	sub	sp, #100	; 0x64
 800941c:	4605      	mov	r5, r0
 800941e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8009422:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8009426:	b974      	cbnz	r4, 8009446 <_dtoa_r+0x36>
 8009428:	2010      	movs	r0, #16
 800942a:	f000 fe1d 	bl	800a068 <malloc>
 800942e:	4602      	mov	r2, r0
 8009430:	61e8      	str	r0, [r5, #28]
 8009432:	b920      	cbnz	r0, 800943e <_dtoa_r+0x2e>
 8009434:	21ef      	movs	r1, #239	; 0xef
 8009436:	4bac      	ldr	r3, [pc, #688]	; (80096e8 <_dtoa_r+0x2d8>)
 8009438:	48ac      	ldr	r0, [pc, #688]	; (80096ec <_dtoa_r+0x2dc>)
 800943a:	f001 fcf1 	bl	800ae20 <__assert_func>
 800943e:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009442:	6004      	str	r4, [r0, #0]
 8009444:	60c4      	str	r4, [r0, #12]
 8009446:	69eb      	ldr	r3, [r5, #28]
 8009448:	6819      	ldr	r1, [r3, #0]
 800944a:	b151      	cbz	r1, 8009462 <_dtoa_r+0x52>
 800944c:	685a      	ldr	r2, [r3, #4]
 800944e:	2301      	movs	r3, #1
 8009450:	4093      	lsls	r3, r2
 8009452:	604a      	str	r2, [r1, #4]
 8009454:	608b      	str	r3, [r1, #8]
 8009456:	4628      	mov	r0, r5
 8009458:	f000 fefa 	bl	800a250 <_Bfree>
 800945c:	2200      	movs	r2, #0
 800945e:	69eb      	ldr	r3, [r5, #28]
 8009460:	601a      	str	r2, [r3, #0]
 8009462:	1e3b      	subs	r3, r7, #0
 8009464:	bfaf      	iteee	ge
 8009466:	2300      	movge	r3, #0
 8009468:	2201      	movlt	r2, #1
 800946a:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800946e:	9305      	strlt	r3, [sp, #20]
 8009470:	bfa8      	it	ge
 8009472:	f8c8 3000 	strge.w	r3, [r8]
 8009476:	f8dd 9014 	ldr.w	r9, [sp, #20]
 800947a:	4b9d      	ldr	r3, [pc, #628]	; (80096f0 <_dtoa_r+0x2e0>)
 800947c:	bfb8      	it	lt
 800947e:	f8c8 2000 	strlt.w	r2, [r8]
 8009482:	ea33 0309 	bics.w	r3, r3, r9
 8009486:	d119      	bne.n	80094bc <_dtoa_r+0xac>
 8009488:	f242 730f 	movw	r3, #9999	; 0x270f
 800948c:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800948e:	6013      	str	r3, [r2, #0]
 8009490:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009494:	4333      	orrs	r3, r6
 8009496:	f000 8589 	beq.w	8009fac <_dtoa_r+0xb9c>
 800949a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800949c:	b953      	cbnz	r3, 80094b4 <_dtoa_r+0xa4>
 800949e:	4b95      	ldr	r3, [pc, #596]	; (80096f4 <_dtoa_r+0x2e4>)
 80094a0:	e023      	b.n	80094ea <_dtoa_r+0xda>
 80094a2:	4b95      	ldr	r3, [pc, #596]	; (80096f8 <_dtoa_r+0x2e8>)
 80094a4:	9303      	str	r3, [sp, #12]
 80094a6:	3308      	adds	r3, #8
 80094a8:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80094aa:	6013      	str	r3, [r2, #0]
 80094ac:	9803      	ldr	r0, [sp, #12]
 80094ae:	b019      	add	sp, #100	; 0x64
 80094b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80094b4:	4b8f      	ldr	r3, [pc, #572]	; (80096f4 <_dtoa_r+0x2e4>)
 80094b6:	9303      	str	r3, [sp, #12]
 80094b8:	3303      	adds	r3, #3
 80094ba:	e7f5      	b.n	80094a8 <_dtoa_r+0x98>
 80094bc:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 80094c0:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 80094c4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80094c8:	2200      	movs	r2, #0
 80094ca:	2300      	movs	r3, #0
 80094cc:	f7f7 fa6c 	bl	80009a8 <__aeabi_dcmpeq>
 80094d0:	4680      	mov	r8, r0
 80094d2:	b160      	cbz	r0, 80094ee <_dtoa_r+0xde>
 80094d4:	2301      	movs	r3, #1
 80094d6:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80094d8:	6013      	str	r3, [r2, #0]
 80094da:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80094dc:	2b00      	cmp	r3, #0
 80094de:	f000 8562 	beq.w	8009fa6 <_dtoa_r+0xb96>
 80094e2:	4b86      	ldr	r3, [pc, #536]	; (80096fc <_dtoa_r+0x2ec>)
 80094e4:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80094e6:	6013      	str	r3, [r2, #0]
 80094e8:	3b01      	subs	r3, #1
 80094ea:	9303      	str	r3, [sp, #12]
 80094ec:	e7de      	b.n	80094ac <_dtoa_r+0x9c>
 80094ee:	ab16      	add	r3, sp, #88	; 0x58
 80094f0:	9301      	str	r3, [sp, #4]
 80094f2:	ab17      	add	r3, sp, #92	; 0x5c
 80094f4:	9300      	str	r3, [sp, #0]
 80094f6:	4628      	mov	r0, r5
 80094f8:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80094fc:	f001 f98a 	bl	800a814 <__d2b>
 8009500:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8009504:	4682      	mov	sl, r0
 8009506:	2c00      	cmp	r4, #0
 8009508:	d07e      	beq.n	8009608 <_dtoa_r+0x1f8>
 800950a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800950e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009510:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8009514:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009518:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800951c:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8009520:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8009524:	4619      	mov	r1, r3
 8009526:	2200      	movs	r2, #0
 8009528:	4b75      	ldr	r3, [pc, #468]	; (8009700 <_dtoa_r+0x2f0>)
 800952a:	f7f6 fe1d 	bl	8000168 <__aeabi_dsub>
 800952e:	a368      	add	r3, pc, #416	; (adr r3, 80096d0 <_dtoa_r+0x2c0>)
 8009530:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009534:	f7f6 ffd0 	bl	80004d8 <__aeabi_dmul>
 8009538:	a367      	add	r3, pc, #412	; (adr r3, 80096d8 <_dtoa_r+0x2c8>)
 800953a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800953e:	f7f6 fe15 	bl	800016c <__adddf3>
 8009542:	4606      	mov	r6, r0
 8009544:	4620      	mov	r0, r4
 8009546:	460f      	mov	r7, r1
 8009548:	f7f6 ff5c 	bl	8000404 <__aeabi_i2d>
 800954c:	a364      	add	r3, pc, #400	; (adr r3, 80096e0 <_dtoa_r+0x2d0>)
 800954e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009552:	f7f6 ffc1 	bl	80004d8 <__aeabi_dmul>
 8009556:	4602      	mov	r2, r0
 8009558:	460b      	mov	r3, r1
 800955a:	4630      	mov	r0, r6
 800955c:	4639      	mov	r1, r7
 800955e:	f7f6 fe05 	bl	800016c <__adddf3>
 8009562:	4606      	mov	r6, r0
 8009564:	460f      	mov	r7, r1
 8009566:	f7f7 fa67 	bl	8000a38 <__aeabi_d2iz>
 800956a:	2200      	movs	r2, #0
 800956c:	4683      	mov	fp, r0
 800956e:	2300      	movs	r3, #0
 8009570:	4630      	mov	r0, r6
 8009572:	4639      	mov	r1, r7
 8009574:	f7f7 fa22 	bl	80009bc <__aeabi_dcmplt>
 8009578:	b148      	cbz	r0, 800958e <_dtoa_r+0x17e>
 800957a:	4658      	mov	r0, fp
 800957c:	f7f6 ff42 	bl	8000404 <__aeabi_i2d>
 8009580:	4632      	mov	r2, r6
 8009582:	463b      	mov	r3, r7
 8009584:	f7f7 fa10 	bl	80009a8 <__aeabi_dcmpeq>
 8009588:	b908      	cbnz	r0, 800958e <_dtoa_r+0x17e>
 800958a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800958e:	f1bb 0f16 	cmp.w	fp, #22
 8009592:	d857      	bhi.n	8009644 <_dtoa_r+0x234>
 8009594:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009598:	4b5a      	ldr	r3, [pc, #360]	; (8009704 <_dtoa_r+0x2f4>)
 800959a:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800959e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095a2:	f7f7 fa0b 	bl	80009bc <__aeabi_dcmplt>
 80095a6:	2800      	cmp	r0, #0
 80095a8:	d04e      	beq.n	8009648 <_dtoa_r+0x238>
 80095aa:	2300      	movs	r3, #0
 80095ac:	f10b 3bff 	add.w	fp, fp, #4294967295
 80095b0:	930f      	str	r3, [sp, #60]	; 0x3c
 80095b2:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80095b4:	1b1b      	subs	r3, r3, r4
 80095b6:	1e5a      	subs	r2, r3, #1
 80095b8:	bf46      	itte	mi
 80095ba:	f1c3 0901 	rsbmi	r9, r3, #1
 80095be:	2300      	movmi	r3, #0
 80095c0:	f04f 0900 	movpl.w	r9, #0
 80095c4:	9209      	str	r2, [sp, #36]	; 0x24
 80095c6:	bf48      	it	mi
 80095c8:	9309      	strmi	r3, [sp, #36]	; 0x24
 80095ca:	f1bb 0f00 	cmp.w	fp, #0
 80095ce:	db3d      	blt.n	800964c <_dtoa_r+0x23c>
 80095d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80095d2:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 80095d6:	445b      	add	r3, fp
 80095d8:	9309      	str	r3, [sp, #36]	; 0x24
 80095da:	2300      	movs	r3, #0
 80095dc:	930a      	str	r3, [sp, #40]	; 0x28
 80095de:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80095e0:	2b09      	cmp	r3, #9
 80095e2:	d867      	bhi.n	80096b4 <_dtoa_r+0x2a4>
 80095e4:	2b05      	cmp	r3, #5
 80095e6:	bfc4      	itt	gt
 80095e8:	3b04      	subgt	r3, #4
 80095ea:	9322      	strgt	r3, [sp, #136]	; 0x88
 80095ec:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80095ee:	bfc8      	it	gt
 80095f0:	2400      	movgt	r4, #0
 80095f2:	f1a3 0302 	sub.w	r3, r3, #2
 80095f6:	bfd8      	it	le
 80095f8:	2401      	movle	r4, #1
 80095fa:	2b03      	cmp	r3, #3
 80095fc:	f200 8086 	bhi.w	800970c <_dtoa_r+0x2fc>
 8009600:	e8df f003 	tbb	[pc, r3]
 8009604:	5637392c 	.word	0x5637392c
 8009608:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 800960c:	441c      	add	r4, r3
 800960e:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8009612:	2b20      	cmp	r3, #32
 8009614:	bfc1      	itttt	gt
 8009616:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800961a:	fa09 f903 	lslgt.w	r9, r9, r3
 800961e:	f204 4312 	addwgt	r3, r4, #1042	; 0x412
 8009622:	fa26 f303 	lsrgt.w	r3, r6, r3
 8009626:	bfd6      	itet	le
 8009628:	f1c3 0320 	rsble	r3, r3, #32
 800962c:	ea49 0003 	orrgt.w	r0, r9, r3
 8009630:	fa06 f003 	lslle.w	r0, r6, r3
 8009634:	f7f6 fed6 	bl	80003e4 <__aeabi_ui2d>
 8009638:	2201      	movs	r2, #1
 800963a:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800963e:	3c01      	subs	r4, #1
 8009640:	9213      	str	r2, [sp, #76]	; 0x4c
 8009642:	e76f      	b.n	8009524 <_dtoa_r+0x114>
 8009644:	2301      	movs	r3, #1
 8009646:	e7b3      	b.n	80095b0 <_dtoa_r+0x1a0>
 8009648:	900f      	str	r0, [sp, #60]	; 0x3c
 800964a:	e7b2      	b.n	80095b2 <_dtoa_r+0x1a2>
 800964c:	f1cb 0300 	rsb	r3, fp, #0
 8009650:	930a      	str	r3, [sp, #40]	; 0x28
 8009652:	2300      	movs	r3, #0
 8009654:	eba9 090b 	sub.w	r9, r9, fp
 8009658:	930e      	str	r3, [sp, #56]	; 0x38
 800965a:	e7c0      	b.n	80095de <_dtoa_r+0x1ce>
 800965c:	2300      	movs	r3, #0
 800965e:	930b      	str	r3, [sp, #44]	; 0x2c
 8009660:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8009662:	2b00      	cmp	r3, #0
 8009664:	dc55      	bgt.n	8009712 <_dtoa_r+0x302>
 8009666:	2301      	movs	r3, #1
 8009668:	461a      	mov	r2, r3
 800966a:	9306      	str	r3, [sp, #24]
 800966c:	9308      	str	r3, [sp, #32]
 800966e:	9223      	str	r2, [sp, #140]	; 0x8c
 8009670:	e00b      	b.n	800968a <_dtoa_r+0x27a>
 8009672:	2301      	movs	r3, #1
 8009674:	e7f3      	b.n	800965e <_dtoa_r+0x24e>
 8009676:	2300      	movs	r3, #0
 8009678:	930b      	str	r3, [sp, #44]	; 0x2c
 800967a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800967c:	445b      	add	r3, fp
 800967e:	9306      	str	r3, [sp, #24]
 8009680:	3301      	adds	r3, #1
 8009682:	2b01      	cmp	r3, #1
 8009684:	9308      	str	r3, [sp, #32]
 8009686:	bfb8      	it	lt
 8009688:	2301      	movlt	r3, #1
 800968a:	2100      	movs	r1, #0
 800968c:	2204      	movs	r2, #4
 800968e:	69e8      	ldr	r0, [r5, #28]
 8009690:	f102 0614 	add.w	r6, r2, #20
 8009694:	429e      	cmp	r6, r3
 8009696:	d940      	bls.n	800971a <_dtoa_r+0x30a>
 8009698:	6041      	str	r1, [r0, #4]
 800969a:	4628      	mov	r0, r5
 800969c:	f000 fd98 	bl	800a1d0 <_Balloc>
 80096a0:	9003      	str	r0, [sp, #12]
 80096a2:	2800      	cmp	r0, #0
 80096a4:	d13c      	bne.n	8009720 <_dtoa_r+0x310>
 80096a6:	4602      	mov	r2, r0
 80096a8:	f240 11af 	movw	r1, #431	; 0x1af
 80096ac:	4b16      	ldr	r3, [pc, #88]	; (8009708 <_dtoa_r+0x2f8>)
 80096ae:	e6c3      	b.n	8009438 <_dtoa_r+0x28>
 80096b0:	2301      	movs	r3, #1
 80096b2:	e7e1      	b.n	8009678 <_dtoa_r+0x268>
 80096b4:	2401      	movs	r4, #1
 80096b6:	2300      	movs	r3, #0
 80096b8:	940b      	str	r4, [sp, #44]	; 0x2c
 80096ba:	9322      	str	r3, [sp, #136]	; 0x88
 80096bc:	f04f 33ff 	mov.w	r3, #4294967295
 80096c0:	2200      	movs	r2, #0
 80096c2:	9306      	str	r3, [sp, #24]
 80096c4:	9308      	str	r3, [sp, #32]
 80096c6:	2312      	movs	r3, #18
 80096c8:	e7d1      	b.n	800966e <_dtoa_r+0x25e>
 80096ca:	bf00      	nop
 80096cc:	f3af 8000 	nop.w
 80096d0:	636f4361 	.word	0x636f4361
 80096d4:	3fd287a7 	.word	0x3fd287a7
 80096d8:	8b60c8b3 	.word	0x8b60c8b3
 80096dc:	3fc68a28 	.word	0x3fc68a28
 80096e0:	509f79fb 	.word	0x509f79fb
 80096e4:	3fd34413 	.word	0x3fd34413
 80096e8:	0800b4a7 	.word	0x0800b4a7
 80096ec:	0800b4be 	.word	0x0800b4be
 80096f0:	7ff00000 	.word	0x7ff00000
 80096f4:	0800b4a3 	.word	0x0800b4a3
 80096f8:	0800b49a 	.word	0x0800b49a
 80096fc:	0800b477 	.word	0x0800b477
 8009700:	3ff80000 	.word	0x3ff80000
 8009704:	0800b5a8 	.word	0x0800b5a8
 8009708:	0800b516 	.word	0x0800b516
 800970c:	2301      	movs	r3, #1
 800970e:	930b      	str	r3, [sp, #44]	; 0x2c
 8009710:	e7d4      	b.n	80096bc <_dtoa_r+0x2ac>
 8009712:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8009714:	9306      	str	r3, [sp, #24]
 8009716:	9308      	str	r3, [sp, #32]
 8009718:	e7b7      	b.n	800968a <_dtoa_r+0x27a>
 800971a:	3101      	adds	r1, #1
 800971c:	0052      	lsls	r2, r2, #1
 800971e:	e7b7      	b.n	8009690 <_dtoa_r+0x280>
 8009720:	69eb      	ldr	r3, [r5, #28]
 8009722:	9a03      	ldr	r2, [sp, #12]
 8009724:	601a      	str	r2, [r3, #0]
 8009726:	9b08      	ldr	r3, [sp, #32]
 8009728:	2b0e      	cmp	r3, #14
 800972a:	f200 80a8 	bhi.w	800987e <_dtoa_r+0x46e>
 800972e:	2c00      	cmp	r4, #0
 8009730:	f000 80a5 	beq.w	800987e <_dtoa_r+0x46e>
 8009734:	f1bb 0f00 	cmp.w	fp, #0
 8009738:	dd34      	ble.n	80097a4 <_dtoa_r+0x394>
 800973a:	4b9a      	ldr	r3, [pc, #616]	; (80099a4 <_dtoa_r+0x594>)
 800973c:	f00b 020f 	and.w	r2, fp, #15
 8009740:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009744:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8009748:	e9d3 3400 	ldrd	r3, r4, [r3]
 800974c:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8009750:	ea4f 142b 	mov.w	r4, fp, asr #4
 8009754:	d016      	beq.n	8009784 <_dtoa_r+0x374>
 8009756:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800975a:	4b93      	ldr	r3, [pc, #588]	; (80099a8 <_dtoa_r+0x598>)
 800975c:	2703      	movs	r7, #3
 800975e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009762:	f7f6 ffe3 	bl	800072c <__aeabi_ddiv>
 8009766:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800976a:	f004 040f 	and.w	r4, r4, #15
 800976e:	4e8e      	ldr	r6, [pc, #568]	; (80099a8 <_dtoa_r+0x598>)
 8009770:	b954      	cbnz	r4, 8009788 <_dtoa_r+0x378>
 8009772:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8009776:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800977a:	f7f6 ffd7 	bl	800072c <__aeabi_ddiv>
 800977e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009782:	e029      	b.n	80097d8 <_dtoa_r+0x3c8>
 8009784:	2702      	movs	r7, #2
 8009786:	e7f2      	b.n	800976e <_dtoa_r+0x35e>
 8009788:	07e1      	lsls	r1, r4, #31
 800978a:	d508      	bpl.n	800979e <_dtoa_r+0x38e>
 800978c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8009790:	e9d6 2300 	ldrd	r2, r3, [r6]
 8009794:	f7f6 fea0 	bl	80004d8 <__aeabi_dmul>
 8009798:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800979c:	3701      	adds	r7, #1
 800979e:	1064      	asrs	r4, r4, #1
 80097a0:	3608      	adds	r6, #8
 80097a2:	e7e5      	b.n	8009770 <_dtoa_r+0x360>
 80097a4:	f000 80a5 	beq.w	80098f2 <_dtoa_r+0x4e2>
 80097a8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80097ac:	f1cb 0400 	rsb	r4, fp, #0
 80097b0:	4b7c      	ldr	r3, [pc, #496]	; (80099a4 <_dtoa_r+0x594>)
 80097b2:	f004 020f 	and.w	r2, r4, #15
 80097b6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80097ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097be:	f7f6 fe8b 	bl	80004d8 <__aeabi_dmul>
 80097c2:	2702      	movs	r7, #2
 80097c4:	2300      	movs	r3, #0
 80097c6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80097ca:	4e77      	ldr	r6, [pc, #476]	; (80099a8 <_dtoa_r+0x598>)
 80097cc:	1124      	asrs	r4, r4, #4
 80097ce:	2c00      	cmp	r4, #0
 80097d0:	f040 8084 	bne.w	80098dc <_dtoa_r+0x4cc>
 80097d4:	2b00      	cmp	r3, #0
 80097d6:	d1d2      	bne.n	800977e <_dtoa_r+0x36e>
 80097d8:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 80097dc:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 80097e0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80097e2:	2b00      	cmp	r3, #0
 80097e4:	f000 8087 	beq.w	80098f6 <_dtoa_r+0x4e6>
 80097e8:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80097ec:	2200      	movs	r2, #0
 80097ee:	4b6f      	ldr	r3, [pc, #444]	; (80099ac <_dtoa_r+0x59c>)
 80097f0:	f7f7 f8e4 	bl	80009bc <__aeabi_dcmplt>
 80097f4:	2800      	cmp	r0, #0
 80097f6:	d07e      	beq.n	80098f6 <_dtoa_r+0x4e6>
 80097f8:	9b08      	ldr	r3, [sp, #32]
 80097fa:	2b00      	cmp	r3, #0
 80097fc:	d07b      	beq.n	80098f6 <_dtoa_r+0x4e6>
 80097fe:	9b06      	ldr	r3, [sp, #24]
 8009800:	2b00      	cmp	r3, #0
 8009802:	dd38      	ble.n	8009876 <_dtoa_r+0x466>
 8009804:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8009808:	2200      	movs	r2, #0
 800980a:	4b69      	ldr	r3, [pc, #420]	; (80099b0 <_dtoa_r+0x5a0>)
 800980c:	f7f6 fe64 	bl	80004d8 <__aeabi_dmul>
 8009810:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009814:	9c06      	ldr	r4, [sp, #24]
 8009816:	f10b 38ff 	add.w	r8, fp, #4294967295
 800981a:	3701      	adds	r7, #1
 800981c:	4638      	mov	r0, r7
 800981e:	f7f6 fdf1 	bl	8000404 <__aeabi_i2d>
 8009822:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009826:	f7f6 fe57 	bl	80004d8 <__aeabi_dmul>
 800982a:	2200      	movs	r2, #0
 800982c:	4b61      	ldr	r3, [pc, #388]	; (80099b4 <_dtoa_r+0x5a4>)
 800982e:	f7f6 fc9d 	bl	800016c <__adddf3>
 8009832:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8009836:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800983a:	9611      	str	r6, [sp, #68]	; 0x44
 800983c:	2c00      	cmp	r4, #0
 800983e:	d15d      	bne.n	80098fc <_dtoa_r+0x4ec>
 8009840:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009844:	2200      	movs	r2, #0
 8009846:	4b5c      	ldr	r3, [pc, #368]	; (80099b8 <_dtoa_r+0x5a8>)
 8009848:	f7f6 fc8e 	bl	8000168 <__aeabi_dsub>
 800984c:	4602      	mov	r2, r0
 800984e:	460b      	mov	r3, r1
 8009850:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8009854:	4633      	mov	r3, r6
 8009856:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8009858:	f7f7 f8ce 	bl	80009f8 <__aeabi_dcmpgt>
 800985c:	2800      	cmp	r0, #0
 800985e:	f040 8295 	bne.w	8009d8c <_dtoa_r+0x97c>
 8009862:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009866:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8009868:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800986c:	f7f7 f8a6 	bl	80009bc <__aeabi_dcmplt>
 8009870:	2800      	cmp	r0, #0
 8009872:	f040 8289 	bne.w	8009d88 <_dtoa_r+0x978>
 8009876:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 800987a:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800987e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009880:	2b00      	cmp	r3, #0
 8009882:	f2c0 8151 	blt.w	8009b28 <_dtoa_r+0x718>
 8009886:	f1bb 0f0e 	cmp.w	fp, #14
 800988a:	f300 814d 	bgt.w	8009b28 <_dtoa_r+0x718>
 800988e:	4b45      	ldr	r3, [pc, #276]	; (80099a4 <_dtoa_r+0x594>)
 8009890:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8009894:	e9d3 3400 	ldrd	r3, r4, [r3]
 8009898:	e9cd 3406 	strd	r3, r4, [sp, #24]
 800989c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800989e:	2b00      	cmp	r3, #0
 80098a0:	f280 80da 	bge.w	8009a58 <_dtoa_r+0x648>
 80098a4:	9b08      	ldr	r3, [sp, #32]
 80098a6:	2b00      	cmp	r3, #0
 80098a8:	f300 80d6 	bgt.w	8009a58 <_dtoa_r+0x648>
 80098ac:	f040 826b 	bne.w	8009d86 <_dtoa_r+0x976>
 80098b0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80098b4:	2200      	movs	r2, #0
 80098b6:	4b40      	ldr	r3, [pc, #256]	; (80099b8 <_dtoa_r+0x5a8>)
 80098b8:	f7f6 fe0e 	bl	80004d8 <__aeabi_dmul>
 80098bc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80098c0:	f7f7 f890 	bl	80009e4 <__aeabi_dcmpge>
 80098c4:	9c08      	ldr	r4, [sp, #32]
 80098c6:	4626      	mov	r6, r4
 80098c8:	2800      	cmp	r0, #0
 80098ca:	f040 8241 	bne.w	8009d50 <_dtoa_r+0x940>
 80098ce:	2331      	movs	r3, #49	; 0x31
 80098d0:	9f03      	ldr	r7, [sp, #12]
 80098d2:	f10b 0b01 	add.w	fp, fp, #1
 80098d6:	f807 3b01 	strb.w	r3, [r7], #1
 80098da:	e23d      	b.n	8009d58 <_dtoa_r+0x948>
 80098dc:	07e2      	lsls	r2, r4, #31
 80098de:	d505      	bpl.n	80098ec <_dtoa_r+0x4dc>
 80098e0:	e9d6 2300 	ldrd	r2, r3, [r6]
 80098e4:	f7f6 fdf8 	bl	80004d8 <__aeabi_dmul>
 80098e8:	2301      	movs	r3, #1
 80098ea:	3701      	adds	r7, #1
 80098ec:	1064      	asrs	r4, r4, #1
 80098ee:	3608      	adds	r6, #8
 80098f0:	e76d      	b.n	80097ce <_dtoa_r+0x3be>
 80098f2:	2702      	movs	r7, #2
 80098f4:	e770      	b.n	80097d8 <_dtoa_r+0x3c8>
 80098f6:	46d8      	mov	r8, fp
 80098f8:	9c08      	ldr	r4, [sp, #32]
 80098fa:	e78f      	b.n	800981c <_dtoa_r+0x40c>
 80098fc:	9903      	ldr	r1, [sp, #12]
 80098fe:	4b29      	ldr	r3, [pc, #164]	; (80099a4 <_dtoa_r+0x594>)
 8009900:	4421      	add	r1, r4
 8009902:	9112      	str	r1, [sp, #72]	; 0x48
 8009904:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009906:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800990a:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800990e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8009912:	2900      	cmp	r1, #0
 8009914:	d054      	beq.n	80099c0 <_dtoa_r+0x5b0>
 8009916:	2000      	movs	r0, #0
 8009918:	4928      	ldr	r1, [pc, #160]	; (80099bc <_dtoa_r+0x5ac>)
 800991a:	f7f6 ff07 	bl	800072c <__aeabi_ddiv>
 800991e:	463b      	mov	r3, r7
 8009920:	4632      	mov	r2, r6
 8009922:	f7f6 fc21 	bl	8000168 <__aeabi_dsub>
 8009926:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800992a:	9f03      	ldr	r7, [sp, #12]
 800992c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009930:	f7f7 f882 	bl	8000a38 <__aeabi_d2iz>
 8009934:	4604      	mov	r4, r0
 8009936:	f7f6 fd65 	bl	8000404 <__aeabi_i2d>
 800993a:	4602      	mov	r2, r0
 800993c:	460b      	mov	r3, r1
 800993e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009942:	f7f6 fc11 	bl	8000168 <__aeabi_dsub>
 8009946:	4602      	mov	r2, r0
 8009948:	460b      	mov	r3, r1
 800994a:	3430      	adds	r4, #48	; 0x30
 800994c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8009950:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8009954:	f807 4b01 	strb.w	r4, [r7], #1
 8009958:	f7f7 f830 	bl	80009bc <__aeabi_dcmplt>
 800995c:	2800      	cmp	r0, #0
 800995e:	d173      	bne.n	8009a48 <_dtoa_r+0x638>
 8009960:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009964:	2000      	movs	r0, #0
 8009966:	4911      	ldr	r1, [pc, #68]	; (80099ac <_dtoa_r+0x59c>)
 8009968:	f7f6 fbfe 	bl	8000168 <__aeabi_dsub>
 800996c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8009970:	f7f7 f824 	bl	80009bc <__aeabi_dcmplt>
 8009974:	2800      	cmp	r0, #0
 8009976:	f040 80b6 	bne.w	8009ae6 <_dtoa_r+0x6d6>
 800997a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800997c:	429f      	cmp	r7, r3
 800997e:	f43f af7a 	beq.w	8009876 <_dtoa_r+0x466>
 8009982:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8009986:	2200      	movs	r2, #0
 8009988:	4b09      	ldr	r3, [pc, #36]	; (80099b0 <_dtoa_r+0x5a0>)
 800998a:	f7f6 fda5 	bl	80004d8 <__aeabi_dmul>
 800998e:	2200      	movs	r2, #0
 8009990:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8009994:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009998:	4b05      	ldr	r3, [pc, #20]	; (80099b0 <_dtoa_r+0x5a0>)
 800999a:	f7f6 fd9d 	bl	80004d8 <__aeabi_dmul>
 800999e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80099a2:	e7c3      	b.n	800992c <_dtoa_r+0x51c>
 80099a4:	0800b5a8 	.word	0x0800b5a8
 80099a8:	0800b580 	.word	0x0800b580
 80099ac:	3ff00000 	.word	0x3ff00000
 80099b0:	40240000 	.word	0x40240000
 80099b4:	401c0000 	.word	0x401c0000
 80099b8:	40140000 	.word	0x40140000
 80099bc:	3fe00000 	.word	0x3fe00000
 80099c0:	4630      	mov	r0, r6
 80099c2:	4639      	mov	r1, r7
 80099c4:	f7f6 fd88 	bl	80004d8 <__aeabi_dmul>
 80099c8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80099ca:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80099ce:	9c03      	ldr	r4, [sp, #12]
 80099d0:	9314      	str	r3, [sp, #80]	; 0x50
 80099d2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80099d6:	f7f7 f82f 	bl	8000a38 <__aeabi_d2iz>
 80099da:	9015      	str	r0, [sp, #84]	; 0x54
 80099dc:	f7f6 fd12 	bl	8000404 <__aeabi_i2d>
 80099e0:	4602      	mov	r2, r0
 80099e2:	460b      	mov	r3, r1
 80099e4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80099e8:	f7f6 fbbe 	bl	8000168 <__aeabi_dsub>
 80099ec:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80099ee:	4606      	mov	r6, r0
 80099f0:	3330      	adds	r3, #48	; 0x30
 80099f2:	f804 3b01 	strb.w	r3, [r4], #1
 80099f6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80099f8:	460f      	mov	r7, r1
 80099fa:	429c      	cmp	r4, r3
 80099fc:	f04f 0200 	mov.w	r2, #0
 8009a00:	d124      	bne.n	8009a4c <_dtoa_r+0x63c>
 8009a02:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8009a06:	4baf      	ldr	r3, [pc, #700]	; (8009cc4 <_dtoa_r+0x8b4>)
 8009a08:	f7f6 fbb0 	bl	800016c <__adddf3>
 8009a0c:	4602      	mov	r2, r0
 8009a0e:	460b      	mov	r3, r1
 8009a10:	4630      	mov	r0, r6
 8009a12:	4639      	mov	r1, r7
 8009a14:	f7f6 fff0 	bl	80009f8 <__aeabi_dcmpgt>
 8009a18:	2800      	cmp	r0, #0
 8009a1a:	d163      	bne.n	8009ae4 <_dtoa_r+0x6d4>
 8009a1c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8009a20:	2000      	movs	r0, #0
 8009a22:	49a8      	ldr	r1, [pc, #672]	; (8009cc4 <_dtoa_r+0x8b4>)
 8009a24:	f7f6 fba0 	bl	8000168 <__aeabi_dsub>
 8009a28:	4602      	mov	r2, r0
 8009a2a:	460b      	mov	r3, r1
 8009a2c:	4630      	mov	r0, r6
 8009a2e:	4639      	mov	r1, r7
 8009a30:	f7f6 ffc4 	bl	80009bc <__aeabi_dcmplt>
 8009a34:	2800      	cmp	r0, #0
 8009a36:	f43f af1e 	beq.w	8009876 <_dtoa_r+0x466>
 8009a3a:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8009a3c:	1e7b      	subs	r3, r7, #1
 8009a3e:	9314      	str	r3, [sp, #80]	; 0x50
 8009a40:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8009a44:	2b30      	cmp	r3, #48	; 0x30
 8009a46:	d0f8      	beq.n	8009a3a <_dtoa_r+0x62a>
 8009a48:	46c3      	mov	fp, r8
 8009a4a:	e03b      	b.n	8009ac4 <_dtoa_r+0x6b4>
 8009a4c:	4b9e      	ldr	r3, [pc, #632]	; (8009cc8 <_dtoa_r+0x8b8>)
 8009a4e:	f7f6 fd43 	bl	80004d8 <__aeabi_dmul>
 8009a52:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009a56:	e7bc      	b.n	80099d2 <_dtoa_r+0x5c2>
 8009a58:	9f03      	ldr	r7, [sp, #12]
 8009a5a:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8009a5e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009a62:	4640      	mov	r0, r8
 8009a64:	4649      	mov	r1, r9
 8009a66:	f7f6 fe61 	bl	800072c <__aeabi_ddiv>
 8009a6a:	f7f6 ffe5 	bl	8000a38 <__aeabi_d2iz>
 8009a6e:	4604      	mov	r4, r0
 8009a70:	f7f6 fcc8 	bl	8000404 <__aeabi_i2d>
 8009a74:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009a78:	f7f6 fd2e 	bl	80004d8 <__aeabi_dmul>
 8009a7c:	4602      	mov	r2, r0
 8009a7e:	460b      	mov	r3, r1
 8009a80:	4640      	mov	r0, r8
 8009a82:	4649      	mov	r1, r9
 8009a84:	f7f6 fb70 	bl	8000168 <__aeabi_dsub>
 8009a88:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8009a8c:	f807 6b01 	strb.w	r6, [r7], #1
 8009a90:	9e03      	ldr	r6, [sp, #12]
 8009a92:	f8dd c020 	ldr.w	ip, [sp, #32]
 8009a96:	1bbe      	subs	r6, r7, r6
 8009a98:	45b4      	cmp	ip, r6
 8009a9a:	4602      	mov	r2, r0
 8009a9c:	460b      	mov	r3, r1
 8009a9e:	d136      	bne.n	8009b0e <_dtoa_r+0x6fe>
 8009aa0:	f7f6 fb64 	bl	800016c <__adddf3>
 8009aa4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009aa8:	4680      	mov	r8, r0
 8009aaa:	4689      	mov	r9, r1
 8009aac:	f7f6 ffa4 	bl	80009f8 <__aeabi_dcmpgt>
 8009ab0:	bb58      	cbnz	r0, 8009b0a <_dtoa_r+0x6fa>
 8009ab2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009ab6:	4640      	mov	r0, r8
 8009ab8:	4649      	mov	r1, r9
 8009aba:	f7f6 ff75 	bl	80009a8 <__aeabi_dcmpeq>
 8009abe:	b108      	cbz	r0, 8009ac4 <_dtoa_r+0x6b4>
 8009ac0:	07e3      	lsls	r3, r4, #31
 8009ac2:	d422      	bmi.n	8009b0a <_dtoa_r+0x6fa>
 8009ac4:	4651      	mov	r1, sl
 8009ac6:	4628      	mov	r0, r5
 8009ac8:	f000 fbc2 	bl	800a250 <_Bfree>
 8009acc:	2300      	movs	r3, #0
 8009ace:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8009ad0:	703b      	strb	r3, [r7, #0]
 8009ad2:	f10b 0301 	add.w	r3, fp, #1
 8009ad6:	6013      	str	r3, [r2, #0]
 8009ad8:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8009ada:	2b00      	cmp	r3, #0
 8009adc:	f43f ace6 	beq.w	80094ac <_dtoa_r+0x9c>
 8009ae0:	601f      	str	r7, [r3, #0]
 8009ae2:	e4e3      	b.n	80094ac <_dtoa_r+0x9c>
 8009ae4:	4627      	mov	r7, r4
 8009ae6:	463b      	mov	r3, r7
 8009ae8:	461f      	mov	r7, r3
 8009aea:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009aee:	2a39      	cmp	r2, #57	; 0x39
 8009af0:	d107      	bne.n	8009b02 <_dtoa_r+0x6f2>
 8009af2:	9a03      	ldr	r2, [sp, #12]
 8009af4:	429a      	cmp	r2, r3
 8009af6:	d1f7      	bne.n	8009ae8 <_dtoa_r+0x6d8>
 8009af8:	2230      	movs	r2, #48	; 0x30
 8009afa:	9903      	ldr	r1, [sp, #12]
 8009afc:	f108 0801 	add.w	r8, r8, #1
 8009b00:	700a      	strb	r2, [r1, #0]
 8009b02:	781a      	ldrb	r2, [r3, #0]
 8009b04:	3201      	adds	r2, #1
 8009b06:	701a      	strb	r2, [r3, #0]
 8009b08:	e79e      	b.n	8009a48 <_dtoa_r+0x638>
 8009b0a:	46d8      	mov	r8, fp
 8009b0c:	e7eb      	b.n	8009ae6 <_dtoa_r+0x6d6>
 8009b0e:	2200      	movs	r2, #0
 8009b10:	4b6d      	ldr	r3, [pc, #436]	; (8009cc8 <_dtoa_r+0x8b8>)
 8009b12:	f7f6 fce1 	bl	80004d8 <__aeabi_dmul>
 8009b16:	2200      	movs	r2, #0
 8009b18:	2300      	movs	r3, #0
 8009b1a:	4680      	mov	r8, r0
 8009b1c:	4689      	mov	r9, r1
 8009b1e:	f7f6 ff43 	bl	80009a8 <__aeabi_dcmpeq>
 8009b22:	2800      	cmp	r0, #0
 8009b24:	d09b      	beq.n	8009a5e <_dtoa_r+0x64e>
 8009b26:	e7cd      	b.n	8009ac4 <_dtoa_r+0x6b4>
 8009b28:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009b2a:	2a00      	cmp	r2, #0
 8009b2c:	f000 80c4 	beq.w	8009cb8 <_dtoa_r+0x8a8>
 8009b30:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8009b32:	2a01      	cmp	r2, #1
 8009b34:	f300 80a8 	bgt.w	8009c88 <_dtoa_r+0x878>
 8009b38:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8009b3a:	2a00      	cmp	r2, #0
 8009b3c:	f000 80a0 	beq.w	8009c80 <_dtoa_r+0x870>
 8009b40:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8009b44:	464f      	mov	r7, r9
 8009b46:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8009b48:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009b4a:	2101      	movs	r1, #1
 8009b4c:	441a      	add	r2, r3
 8009b4e:	4628      	mov	r0, r5
 8009b50:	4499      	add	r9, r3
 8009b52:	9209      	str	r2, [sp, #36]	; 0x24
 8009b54:	f000 fc32 	bl	800a3bc <__i2b>
 8009b58:	4606      	mov	r6, r0
 8009b5a:	b15f      	cbz	r7, 8009b74 <_dtoa_r+0x764>
 8009b5c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009b5e:	2b00      	cmp	r3, #0
 8009b60:	dd08      	ble.n	8009b74 <_dtoa_r+0x764>
 8009b62:	42bb      	cmp	r3, r7
 8009b64:	bfa8      	it	ge
 8009b66:	463b      	movge	r3, r7
 8009b68:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009b6a:	eba9 0903 	sub.w	r9, r9, r3
 8009b6e:	1aff      	subs	r7, r7, r3
 8009b70:	1ad3      	subs	r3, r2, r3
 8009b72:	9309      	str	r3, [sp, #36]	; 0x24
 8009b74:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009b76:	b1f3      	cbz	r3, 8009bb6 <_dtoa_r+0x7a6>
 8009b78:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009b7a:	2b00      	cmp	r3, #0
 8009b7c:	f000 80a0 	beq.w	8009cc0 <_dtoa_r+0x8b0>
 8009b80:	2c00      	cmp	r4, #0
 8009b82:	dd10      	ble.n	8009ba6 <_dtoa_r+0x796>
 8009b84:	4631      	mov	r1, r6
 8009b86:	4622      	mov	r2, r4
 8009b88:	4628      	mov	r0, r5
 8009b8a:	f000 fcd5 	bl	800a538 <__pow5mult>
 8009b8e:	4652      	mov	r2, sl
 8009b90:	4601      	mov	r1, r0
 8009b92:	4606      	mov	r6, r0
 8009b94:	4628      	mov	r0, r5
 8009b96:	f000 fc27 	bl	800a3e8 <__multiply>
 8009b9a:	4680      	mov	r8, r0
 8009b9c:	4651      	mov	r1, sl
 8009b9e:	4628      	mov	r0, r5
 8009ba0:	f000 fb56 	bl	800a250 <_Bfree>
 8009ba4:	46c2      	mov	sl, r8
 8009ba6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009ba8:	1b1a      	subs	r2, r3, r4
 8009baa:	d004      	beq.n	8009bb6 <_dtoa_r+0x7a6>
 8009bac:	4651      	mov	r1, sl
 8009bae:	4628      	mov	r0, r5
 8009bb0:	f000 fcc2 	bl	800a538 <__pow5mult>
 8009bb4:	4682      	mov	sl, r0
 8009bb6:	2101      	movs	r1, #1
 8009bb8:	4628      	mov	r0, r5
 8009bba:	f000 fbff 	bl	800a3bc <__i2b>
 8009bbe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009bc0:	4604      	mov	r4, r0
 8009bc2:	2b00      	cmp	r3, #0
 8009bc4:	f340 8082 	ble.w	8009ccc <_dtoa_r+0x8bc>
 8009bc8:	461a      	mov	r2, r3
 8009bca:	4601      	mov	r1, r0
 8009bcc:	4628      	mov	r0, r5
 8009bce:	f000 fcb3 	bl	800a538 <__pow5mult>
 8009bd2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009bd4:	4604      	mov	r4, r0
 8009bd6:	2b01      	cmp	r3, #1
 8009bd8:	dd7b      	ble.n	8009cd2 <_dtoa_r+0x8c2>
 8009bda:	f04f 0800 	mov.w	r8, #0
 8009bde:	6923      	ldr	r3, [r4, #16]
 8009be0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009be4:	6918      	ldr	r0, [r3, #16]
 8009be6:	f000 fb9b 	bl	800a320 <__hi0bits>
 8009bea:	f1c0 0020 	rsb	r0, r0, #32
 8009bee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009bf0:	4418      	add	r0, r3
 8009bf2:	f010 001f 	ands.w	r0, r0, #31
 8009bf6:	f000 8092 	beq.w	8009d1e <_dtoa_r+0x90e>
 8009bfa:	f1c0 0320 	rsb	r3, r0, #32
 8009bfe:	2b04      	cmp	r3, #4
 8009c00:	f340 8085 	ble.w	8009d0e <_dtoa_r+0x8fe>
 8009c04:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009c06:	f1c0 001c 	rsb	r0, r0, #28
 8009c0a:	4403      	add	r3, r0
 8009c0c:	4481      	add	r9, r0
 8009c0e:	4407      	add	r7, r0
 8009c10:	9309      	str	r3, [sp, #36]	; 0x24
 8009c12:	f1b9 0f00 	cmp.w	r9, #0
 8009c16:	dd05      	ble.n	8009c24 <_dtoa_r+0x814>
 8009c18:	4651      	mov	r1, sl
 8009c1a:	464a      	mov	r2, r9
 8009c1c:	4628      	mov	r0, r5
 8009c1e:	f000 fce5 	bl	800a5ec <__lshift>
 8009c22:	4682      	mov	sl, r0
 8009c24:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009c26:	2b00      	cmp	r3, #0
 8009c28:	dd05      	ble.n	8009c36 <_dtoa_r+0x826>
 8009c2a:	4621      	mov	r1, r4
 8009c2c:	461a      	mov	r2, r3
 8009c2e:	4628      	mov	r0, r5
 8009c30:	f000 fcdc 	bl	800a5ec <__lshift>
 8009c34:	4604      	mov	r4, r0
 8009c36:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009c38:	2b00      	cmp	r3, #0
 8009c3a:	d072      	beq.n	8009d22 <_dtoa_r+0x912>
 8009c3c:	4621      	mov	r1, r4
 8009c3e:	4650      	mov	r0, sl
 8009c40:	f000 fd40 	bl	800a6c4 <__mcmp>
 8009c44:	2800      	cmp	r0, #0
 8009c46:	da6c      	bge.n	8009d22 <_dtoa_r+0x912>
 8009c48:	2300      	movs	r3, #0
 8009c4a:	4651      	mov	r1, sl
 8009c4c:	220a      	movs	r2, #10
 8009c4e:	4628      	mov	r0, r5
 8009c50:	f000 fb20 	bl	800a294 <__multadd>
 8009c54:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009c56:	4682      	mov	sl, r0
 8009c58:	f10b 3bff 	add.w	fp, fp, #4294967295
 8009c5c:	2b00      	cmp	r3, #0
 8009c5e:	f000 81ac 	beq.w	8009fba <_dtoa_r+0xbaa>
 8009c62:	2300      	movs	r3, #0
 8009c64:	4631      	mov	r1, r6
 8009c66:	220a      	movs	r2, #10
 8009c68:	4628      	mov	r0, r5
 8009c6a:	f000 fb13 	bl	800a294 <__multadd>
 8009c6e:	9b06      	ldr	r3, [sp, #24]
 8009c70:	4606      	mov	r6, r0
 8009c72:	2b00      	cmp	r3, #0
 8009c74:	f300 8093 	bgt.w	8009d9e <_dtoa_r+0x98e>
 8009c78:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009c7a:	2b02      	cmp	r3, #2
 8009c7c:	dc59      	bgt.n	8009d32 <_dtoa_r+0x922>
 8009c7e:	e08e      	b.n	8009d9e <_dtoa_r+0x98e>
 8009c80:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8009c82:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8009c86:	e75d      	b.n	8009b44 <_dtoa_r+0x734>
 8009c88:	9b08      	ldr	r3, [sp, #32]
 8009c8a:	1e5c      	subs	r4, r3, #1
 8009c8c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009c8e:	42a3      	cmp	r3, r4
 8009c90:	bfbf      	itttt	lt
 8009c92:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8009c94:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 8009c96:	1ae3      	sublt	r3, r4, r3
 8009c98:	18d2      	addlt	r2, r2, r3
 8009c9a:	bfa8      	it	ge
 8009c9c:	1b1c      	subge	r4, r3, r4
 8009c9e:	9b08      	ldr	r3, [sp, #32]
 8009ca0:	bfbe      	ittt	lt
 8009ca2:	940a      	strlt	r4, [sp, #40]	; 0x28
 8009ca4:	920e      	strlt	r2, [sp, #56]	; 0x38
 8009ca6:	2400      	movlt	r4, #0
 8009ca8:	2b00      	cmp	r3, #0
 8009caa:	bfb5      	itete	lt
 8009cac:	eba9 0703 	sublt.w	r7, r9, r3
 8009cb0:	464f      	movge	r7, r9
 8009cb2:	2300      	movlt	r3, #0
 8009cb4:	9b08      	ldrge	r3, [sp, #32]
 8009cb6:	e747      	b.n	8009b48 <_dtoa_r+0x738>
 8009cb8:	464f      	mov	r7, r9
 8009cba:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8009cbc:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8009cbe:	e74c      	b.n	8009b5a <_dtoa_r+0x74a>
 8009cc0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009cc2:	e773      	b.n	8009bac <_dtoa_r+0x79c>
 8009cc4:	3fe00000 	.word	0x3fe00000
 8009cc8:	40240000 	.word	0x40240000
 8009ccc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009cce:	2b01      	cmp	r3, #1
 8009cd0:	dc18      	bgt.n	8009d04 <_dtoa_r+0x8f4>
 8009cd2:	9b04      	ldr	r3, [sp, #16]
 8009cd4:	b9b3      	cbnz	r3, 8009d04 <_dtoa_r+0x8f4>
 8009cd6:	9b05      	ldr	r3, [sp, #20]
 8009cd8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009cdc:	b993      	cbnz	r3, 8009d04 <_dtoa_r+0x8f4>
 8009cde:	9b05      	ldr	r3, [sp, #20]
 8009ce0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009ce4:	0d1b      	lsrs	r3, r3, #20
 8009ce6:	051b      	lsls	r3, r3, #20
 8009ce8:	b17b      	cbz	r3, 8009d0a <_dtoa_r+0x8fa>
 8009cea:	f04f 0801 	mov.w	r8, #1
 8009cee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009cf0:	f109 0901 	add.w	r9, r9, #1
 8009cf4:	3301      	adds	r3, #1
 8009cf6:	9309      	str	r3, [sp, #36]	; 0x24
 8009cf8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009cfa:	2b00      	cmp	r3, #0
 8009cfc:	f47f af6f 	bne.w	8009bde <_dtoa_r+0x7ce>
 8009d00:	2001      	movs	r0, #1
 8009d02:	e774      	b.n	8009bee <_dtoa_r+0x7de>
 8009d04:	f04f 0800 	mov.w	r8, #0
 8009d08:	e7f6      	b.n	8009cf8 <_dtoa_r+0x8e8>
 8009d0a:	4698      	mov	r8, r3
 8009d0c:	e7f4      	b.n	8009cf8 <_dtoa_r+0x8e8>
 8009d0e:	d080      	beq.n	8009c12 <_dtoa_r+0x802>
 8009d10:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009d12:	331c      	adds	r3, #28
 8009d14:	441a      	add	r2, r3
 8009d16:	4499      	add	r9, r3
 8009d18:	441f      	add	r7, r3
 8009d1a:	9209      	str	r2, [sp, #36]	; 0x24
 8009d1c:	e779      	b.n	8009c12 <_dtoa_r+0x802>
 8009d1e:	4603      	mov	r3, r0
 8009d20:	e7f6      	b.n	8009d10 <_dtoa_r+0x900>
 8009d22:	9b08      	ldr	r3, [sp, #32]
 8009d24:	2b00      	cmp	r3, #0
 8009d26:	dc34      	bgt.n	8009d92 <_dtoa_r+0x982>
 8009d28:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009d2a:	2b02      	cmp	r3, #2
 8009d2c:	dd31      	ble.n	8009d92 <_dtoa_r+0x982>
 8009d2e:	9b08      	ldr	r3, [sp, #32]
 8009d30:	9306      	str	r3, [sp, #24]
 8009d32:	9b06      	ldr	r3, [sp, #24]
 8009d34:	b963      	cbnz	r3, 8009d50 <_dtoa_r+0x940>
 8009d36:	4621      	mov	r1, r4
 8009d38:	2205      	movs	r2, #5
 8009d3a:	4628      	mov	r0, r5
 8009d3c:	f000 faaa 	bl	800a294 <__multadd>
 8009d40:	4601      	mov	r1, r0
 8009d42:	4604      	mov	r4, r0
 8009d44:	4650      	mov	r0, sl
 8009d46:	f000 fcbd 	bl	800a6c4 <__mcmp>
 8009d4a:	2800      	cmp	r0, #0
 8009d4c:	f73f adbf 	bgt.w	80098ce <_dtoa_r+0x4be>
 8009d50:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8009d52:	9f03      	ldr	r7, [sp, #12]
 8009d54:	ea6f 0b03 	mvn.w	fp, r3
 8009d58:	f04f 0800 	mov.w	r8, #0
 8009d5c:	4621      	mov	r1, r4
 8009d5e:	4628      	mov	r0, r5
 8009d60:	f000 fa76 	bl	800a250 <_Bfree>
 8009d64:	2e00      	cmp	r6, #0
 8009d66:	f43f aead 	beq.w	8009ac4 <_dtoa_r+0x6b4>
 8009d6a:	f1b8 0f00 	cmp.w	r8, #0
 8009d6e:	d005      	beq.n	8009d7c <_dtoa_r+0x96c>
 8009d70:	45b0      	cmp	r8, r6
 8009d72:	d003      	beq.n	8009d7c <_dtoa_r+0x96c>
 8009d74:	4641      	mov	r1, r8
 8009d76:	4628      	mov	r0, r5
 8009d78:	f000 fa6a 	bl	800a250 <_Bfree>
 8009d7c:	4631      	mov	r1, r6
 8009d7e:	4628      	mov	r0, r5
 8009d80:	f000 fa66 	bl	800a250 <_Bfree>
 8009d84:	e69e      	b.n	8009ac4 <_dtoa_r+0x6b4>
 8009d86:	2400      	movs	r4, #0
 8009d88:	4626      	mov	r6, r4
 8009d8a:	e7e1      	b.n	8009d50 <_dtoa_r+0x940>
 8009d8c:	46c3      	mov	fp, r8
 8009d8e:	4626      	mov	r6, r4
 8009d90:	e59d      	b.n	80098ce <_dtoa_r+0x4be>
 8009d92:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009d94:	2b00      	cmp	r3, #0
 8009d96:	f000 80c8 	beq.w	8009f2a <_dtoa_r+0xb1a>
 8009d9a:	9b08      	ldr	r3, [sp, #32]
 8009d9c:	9306      	str	r3, [sp, #24]
 8009d9e:	2f00      	cmp	r7, #0
 8009da0:	dd05      	ble.n	8009dae <_dtoa_r+0x99e>
 8009da2:	4631      	mov	r1, r6
 8009da4:	463a      	mov	r2, r7
 8009da6:	4628      	mov	r0, r5
 8009da8:	f000 fc20 	bl	800a5ec <__lshift>
 8009dac:	4606      	mov	r6, r0
 8009dae:	f1b8 0f00 	cmp.w	r8, #0
 8009db2:	d05b      	beq.n	8009e6c <_dtoa_r+0xa5c>
 8009db4:	4628      	mov	r0, r5
 8009db6:	6871      	ldr	r1, [r6, #4]
 8009db8:	f000 fa0a 	bl	800a1d0 <_Balloc>
 8009dbc:	4607      	mov	r7, r0
 8009dbe:	b928      	cbnz	r0, 8009dcc <_dtoa_r+0x9bc>
 8009dc0:	4602      	mov	r2, r0
 8009dc2:	f240 21ef 	movw	r1, #751	; 0x2ef
 8009dc6:	4b81      	ldr	r3, [pc, #516]	; (8009fcc <_dtoa_r+0xbbc>)
 8009dc8:	f7ff bb36 	b.w	8009438 <_dtoa_r+0x28>
 8009dcc:	6932      	ldr	r2, [r6, #16]
 8009dce:	f106 010c 	add.w	r1, r6, #12
 8009dd2:	3202      	adds	r2, #2
 8009dd4:	0092      	lsls	r2, r2, #2
 8009dd6:	300c      	adds	r0, #12
 8009dd8:	f7ff fa81 	bl	80092de <memcpy>
 8009ddc:	2201      	movs	r2, #1
 8009dde:	4639      	mov	r1, r7
 8009de0:	4628      	mov	r0, r5
 8009de2:	f000 fc03 	bl	800a5ec <__lshift>
 8009de6:	46b0      	mov	r8, r6
 8009de8:	4606      	mov	r6, r0
 8009dea:	9b03      	ldr	r3, [sp, #12]
 8009dec:	9a03      	ldr	r2, [sp, #12]
 8009dee:	3301      	adds	r3, #1
 8009df0:	9308      	str	r3, [sp, #32]
 8009df2:	9b06      	ldr	r3, [sp, #24]
 8009df4:	4413      	add	r3, r2
 8009df6:	930b      	str	r3, [sp, #44]	; 0x2c
 8009df8:	9b04      	ldr	r3, [sp, #16]
 8009dfa:	f003 0301 	and.w	r3, r3, #1
 8009dfe:	930a      	str	r3, [sp, #40]	; 0x28
 8009e00:	9b08      	ldr	r3, [sp, #32]
 8009e02:	4621      	mov	r1, r4
 8009e04:	3b01      	subs	r3, #1
 8009e06:	4650      	mov	r0, sl
 8009e08:	9304      	str	r3, [sp, #16]
 8009e0a:	f7ff fa76 	bl	80092fa <quorem>
 8009e0e:	4641      	mov	r1, r8
 8009e10:	9006      	str	r0, [sp, #24]
 8009e12:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8009e16:	4650      	mov	r0, sl
 8009e18:	f000 fc54 	bl	800a6c4 <__mcmp>
 8009e1c:	4632      	mov	r2, r6
 8009e1e:	9009      	str	r0, [sp, #36]	; 0x24
 8009e20:	4621      	mov	r1, r4
 8009e22:	4628      	mov	r0, r5
 8009e24:	f000 fc6a 	bl	800a6fc <__mdiff>
 8009e28:	68c2      	ldr	r2, [r0, #12]
 8009e2a:	4607      	mov	r7, r0
 8009e2c:	bb02      	cbnz	r2, 8009e70 <_dtoa_r+0xa60>
 8009e2e:	4601      	mov	r1, r0
 8009e30:	4650      	mov	r0, sl
 8009e32:	f000 fc47 	bl	800a6c4 <__mcmp>
 8009e36:	4602      	mov	r2, r0
 8009e38:	4639      	mov	r1, r7
 8009e3a:	4628      	mov	r0, r5
 8009e3c:	920c      	str	r2, [sp, #48]	; 0x30
 8009e3e:	f000 fa07 	bl	800a250 <_Bfree>
 8009e42:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009e44:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009e46:	9f08      	ldr	r7, [sp, #32]
 8009e48:	ea43 0102 	orr.w	r1, r3, r2
 8009e4c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009e4e:	4319      	orrs	r1, r3
 8009e50:	d110      	bne.n	8009e74 <_dtoa_r+0xa64>
 8009e52:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8009e56:	d029      	beq.n	8009eac <_dtoa_r+0xa9c>
 8009e58:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009e5a:	2b00      	cmp	r3, #0
 8009e5c:	dd02      	ble.n	8009e64 <_dtoa_r+0xa54>
 8009e5e:	9b06      	ldr	r3, [sp, #24]
 8009e60:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8009e64:	9b04      	ldr	r3, [sp, #16]
 8009e66:	f883 9000 	strb.w	r9, [r3]
 8009e6a:	e777      	b.n	8009d5c <_dtoa_r+0x94c>
 8009e6c:	4630      	mov	r0, r6
 8009e6e:	e7ba      	b.n	8009de6 <_dtoa_r+0x9d6>
 8009e70:	2201      	movs	r2, #1
 8009e72:	e7e1      	b.n	8009e38 <_dtoa_r+0xa28>
 8009e74:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009e76:	2b00      	cmp	r3, #0
 8009e78:	db04      	blt.n	8009e84 <_dtoa_r+0xa74>
 8009e7a:	9922      	ldr	r1, [sp, #136]	; 0x88
 8009e7c:	430b      	orrs	r3, r1
 8009e7e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8009e80:	430b      	orrs	r3, r1
 8009e82:	d120      	bne.n	8009ec6 <_dtoa_r+0xab6>
 8009e84:	2a00      	cmp	r2, #0
 8009e86:	dded      	ble.n	8009e64 <_dtoa_r+0xa54>
 8009e88:	4651      	mov	r1, sl
 8009e8a:	2201      	movs	r2, #1
 8009e8c:	4628      	mov	r0, r5
 8009e8e:	f000 fbad 	bl	800a5ec <__lshift>
 8009e92:	4621      	mov	r1, r4
 8009e94:	4682      	mov	sl, r0
 8009e96:	f000 fc15 	bl	800a6c4 <__mcmp>
 8009e9a:	2800      	cmp	r0, #0
 8009e9c:	dc03      	bgt.n	8009ea6 <_dtoa_r+0xa96>
 8009e9e:	d1e1      	bne.n	8009e64 <_dtoa_r+0xa54>
 8009ea0:	f019 0f01 	tst.w	r9, #1
 8009ea4:	d0de      	beq.n	8009e64 <_dtoa_r+0xa54>
 8009ea6:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8009eaa:	d1d8      	bne.n	8009e5e <_dtoa_r+0xa4e>
 8009eac:	2339      	movs	r3, #57	; 0x39
 8009eae:	9a04      	ldr	r2, [sp, #16]
 8009eb0:	7013      	strb	r3, [r2, #0]
 8009eb2:	463b      	mov	r3, r7
 8009eb4:	461f      	mov	r7, r3
 8009eb6:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8009eba:	3b01      	subs	r3, #1
 8009ebc:	2a39      	cmp	r2, #57	; 0x39
 8009ebe:	d06b      	beq.n	8009f98 <_dtoa_r+0xb88>
 8009ec0:	3201      	adds	r2, #1
 8009ec2:	701a      	strb	r2, [r3, #0]
 8009ec4:	e74a      	b.n	8009d5c <_dtoa_r+0x94c>
 8009ec6:	2a00      	cmp	r2, #0
 8009ec8:	dd07      	ble.n	8009eda <_dtoa_r+0xaca>
 8009eca:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8009ece:	d0ed      	beq.n	8009eac <_dtoa_r+0xa9c>
 8009ed0:	9a04      	ldr	r2, [sp, #16]
 8009ed2:	f109 0301 	add.w	r3, r9, #1
 8009ed6:	7013      	strb	r3, [r2, #0]
 8009ed8:	e740      	b.n	8009d5c <_dtoa_r+0x94c>
 8009eda:	9b08      	ldr	r3, [sp, #32]
 8009edc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009ede:	f803 9c01 	strb.w	r9, [r3, #-1]
 8009ee2:	4293      	cmp	r3, r2
 8009ee4:	d042      	beq.n	8009f6c <_dtoa_r+0xb5c>
 8009ee6:	4651      	mov	r1, sl
 8009ee8:	2300      	movs	r3, #0
 8009eea:	220a      	movs	r2, #10
 8009eec:	4628      	mov	r0, r5
 8009eee:	f000 f9d1 	bl	800a294 <__multadd>
 8009ef2:	45b0      	cmp	r8, r6
 8009ef4:	4682      	mov	sl, r0
 8009ef6:	f04f 0300 	mov.w	r3, #0
 8009efa:	f04f 020a 	mov.w	r2, #10
 8009efe:	4641      	mov	r1, r8
 8009f00:	4628      	mov	r0, r5
 8009f02:	d107      	bne.n	8009f14 <_dtoa_r+0xb04>
 8009f04:	f000 f9c6 	bl	800a294 <__multadd>
 8009f08:	4680      	mov	r8, r0
 8009f0a:	4606      	mov	r6, r0
 8009f0c:	9b08      	ldr	r3, [sp, #32]
 8009f0e:	3301      	adds	r3, #1
 8009f10:	9308      	str	r3, [sp, #32]
 8009f12:	e775      	b.n	8009e00 <_dtoa_r+0x9f0>
 8009f14:	f000 f9be 	bl	800a294 <__multadd>
 8009f18:	4631      	mov	r1, r6
 8009f1a:	4680      	mov	r8, r0
 8009f1c:	2300      	movs	r3, #0
 8009f1e:	220a      	movs	r2, #10
 8009f20:	4628      	mov	r0, r5
 8009f22:	f000 f9b7 	bl	800a294 <__multadd>
 8009f26:	4606      	mov	r6, r0
 8009f28:	e7f0      	b.n	8009f0c <_dtoa_r+0xafc>
 8009f2a:	9b08      	ldr	r3, [sp, #32]
 8009f2c:	9306      	str	r3, [sp, #24]
 8009f2e:	9f03      	ldr	r7, [sp, #12]
 8009f30:	4621      	mov	r1, r4
 8009f32:	4650      	mov	r0, sl
 8009f34:	f7ff f9e1 	bl	80092fa <quorem>
 8009f38:	9b03      	ldr	r3, [sp, #12]
 8009f3a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8009f3e:	f807 9b01 	strb.w	r9, [r7], #1
 8009f42:	1afa      	subs	r2, r7, r3
 8009f44:	9b06      	ldr	r3, [sp, #24]
 8009f46:	4293      	cmp	r3, r2
 8009f48:	dd07      	ble.n	8009f5a <_dtoa_r+0xb4a>
 8009f4a:	4651      	mov	r1, sl
 8009f4c:	2300      	movs	r3, #0
 8009f4e:	220a      	movs	r2, #10
 8009f50:	4628      	mov	r0, r5
 8009f52:	f000 f99f 	bl	800a294 <__multadd>
 8009f56:	4682      	mov	sl, r0
 8009f58:	e7ea      	b.n	8009f30 <_dtoa_r+0xb20>
 8009f5a:	9b06      	ldr	r3, [sp, #24]
 8009f5c:	f04f 0800 	mov.w	r8, #0
 8009f60:	2b00      	cmp	r3, #0
 8009f62:	bfcc      	ite	gt
 8009f64:	461f      	movgt	r7, r3
 8009f66:	2701      	movle	r7, #1
 8009f68:	9b03      	ldr	r3, [sp, #12]
 8009f6a:	441f      	add	r7, r3
 8009f6c:	4651      	mov	r1, sl
 8009f6e:	2201      	movs	r2, #1
 8009f70:	4628      	mov	r0, r5
 8009f72:	f000 fb3b 	bl	800a5ec <__lshift>
 8009f76:	4621      	mov	r1, r4
 8009f78:	4682      	mov	sl, r0
 8009f7a:	f000 fba3 	bl	800a6c4 <__mcmp>
 8009f7e:	2800      	cmp	r0, #0
 8009f80:	dc97      	bgt.n	8009eb2 <_dtoa_r+0xaa2>
 8009f82:	d102      	bne.n	8009f8a <_dtoa_r+0xb7a>
 8009f84:	f019 0f01 	tst.w	r9, #1
 8009f88:	d193      	bne.n	8009eb2 <_dtoa_r+0xaa2>
 8009f8a:	463b      	mov	r3, r7
 8009f8c:	461f      	mov	r7, r3
 8009f8e:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009f92:	2a30      	cmp	r2, #48	; 0x30
 8009f94:	d0fa      	beq.n	8009f8c <_dtoa_r+0xb7c>
 8009f96:	e6e1      	b.n	8009d5c <_dtoa_r+0x94c>
 8009f98:	9a03      	ldr	r2, [sp, #12]
 8009f9a:	429a      	cmp	r2, r3
 8009f9c:	d18a      	bne.n	8009eb4 <_dtoa_r+0xaa4>
 8009f9e:	2331      	movs	r3, #49	; 0x31
 8009fa0:	f10b 0b01 	add.w	fp, fp, #1
 8009fa4:	e797      	b.n	8009ed6 <_dtoa_r+0xac6>
 8009fa6:	4b0a      	ldr	r3, [pc, #40]	; (8009fd0 <_dtoa_r+0xbc0>)
 8009fa8:	f7ff ba9f 	b.w	80094ea <_dtoa_r+0xda>
 8009fac:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8009fae:	2b00      	cmp	r3, #0
 8009fb0:	f47f aa77 	bne.w	80094a2 <_dtoa_r+0x92>
 8009fb4:	4b07      	ldr	r3, [pc, #28]	; (8009fd4 <_dtoa_r+0xbc4>)
 8009fb6:	f7ff ba98 	b.w	80094ea <_dtoa_r+0xda>
 8009fba:	9b06      	ldr	r3, [sp, #24]
 8009fbc:	2b00      	cmp	r3, #0
 8009fbe:	dcb6      	bgt.n	8009f2e <_dtoa_r+0xb1e>
 8009fc0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009fc2:	2b02      	cmp	r3, #2
 8009fc4:	f73f aeb5 	bgt.w	8009d32 <_dtoa_r+0x922>
 8009fc8:	e7b1      	b.n	8009f2e <_dtoa_r+0xb1e>
 8009fca:	bf00      	nop
 8009fcc:	0800b516 	.word	0x0800b516
 8009fd0:	0800b476 	.word	0x0800b476
 8009fd4:	0800b49a 	.word	0x0800b49a

08009fd8 <_free_r>:
 8009fd8:	b538      	push	{r3, r4, r5, lr}
 8009fda:	4605      	mov	r5, r0
 8009fdc:	2900      	cmp	r1, #0
 8009fde:	d040      	beq.n	800a062 <_free_r+0x8a>
 8009fe0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009fe4:	1f0c      	subs	r4, r1, #4
 8009fe6:	2b00      	cmp	r3, #0
 8009fe8:	bfb8      	it	lt
 8009fea:	18e4      	addlt	r4, r4, r3
 8009fec:	f000 f8e4 	bl	800a1b8 <__malloc_lock>
 8009ff0:	4a1c      	ldr	r2, [pc, #112]	; (800a064 <_free_r+0x8c>)
 8009ff2:	6813      	ldr	r3, [r2, #0]
 8009ff4:	b933      	cbnz	r3, 800a004 <_free_r+0x2c>
 8009ff6:	6063      	str	r3, [r4, #4]
 8009ff8:	6014      	str	r4, [r2, #0]
 8009ffa:	4628      	mov	r0, r5
 8009ffc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a000:	f000 b8e0 	b.w	800a1c4 <__malloc_unlock>
 800a004:	42a3      	cmp	r3, r4
 800a006:	d908      	bls.n	800a01a <_free_r+0x42>
 800a008:	6820      	ldr	r0, [r4, #0]
 800a00a:	1821      	adds	r1, r4, r0
 800a00c:	428b      	cmp	r3, r1
 800a00e:	bf01      	itttt	eq
 800a010:	6819      	ldreq	r1, [r3, #0]
 800a012:	685b      	ldreq	r3, [r3, #4]
 800a014:	1809      	addeq	r1, r1, r0
 800a016:	6021      	streq	r1, [r4, #0]
 800a018:	e7ed      	b.n	8009ff6 <_free_r+0x1e>
 800a01a:	461a      	mov	r2, r3
 800a01c:	685b      	ldr	r3, [r3, #4]
 800a01e:	b10b      	cbz	r3, 800a024 <_free_r+0x4c>
 800a020:	42a3      	cmp	r3, r4
 800a022:	d9fa      	bls.n	800a01a <_free_r+0x42>
 800a024:	6811      	ldr	r1, [r2, #0]
 800a026:	1850      	adds	r0, r2, r1
 800a028:	42a0      	cmp	r0, r4
 800a02a:	d10b      	bne.n	800a044 <_free_r+0x6c>
 800a02c:	6820      	ldr	r0, [r4, #0]
 800a02e:	4401      	add	r1, r0
 800a030:	1850      	adds	r0, r2, r1
 800a032:	4283      	cmp	r3, r0
 800a034:	6011      	str	r1, [r2, #0]
 800a036:	d1e0      	bne.n	8009ffa <_free_r+0x22>
 800a038:	6818      	ldr	r0, [r3, #0]
 800a03a:	685b      	ldr	r3, [r3, #4]
 800a03c:	4408      	add	r0, r1
 800a03e:	6010      	str	r0, [r2, #0]
 800a040:	6053      	str	r3, [r2, #4]
 800a042:	e7da      	b.n	8009ffa <_free_r+0x22>
 800a044:	d902      	bls.n	800a04c <_free_r+0x74>
 800a046:	230c      	movs	r3, #12
 800a048:	602b      	str	r3, [r5, #0]
 800a04a:	e7d6      	b.n	8009ffa <_free_r+0x22>
 800a04c:	6820      	ldr	r0, [r4, #0]
 800a04e:	1821      	adds	r1, r4, r0
 800a050:	428b      	cmp	r3, r1
 800a052:	bf01      	itttt	eq
 800a054:	6819      	ldreq	r1, [r3, #0]
 800a056:	685b      	ldreq	r3, [r3, #4]
 800a058:	1809      	addeq	r1, r1, r0
 800a05a:	6021      	streq	r1, [r4, #0]
 800a05c:	6063      	str	r3, [r4, #4]
 800a05e:	6054      	str	r4, [r2, #4]
 800a060:	e7cb      	b.n	8009ffa <_free_r+0x22>
 800a062:	bd38      	pop	{r3, r4, r5, pc}
 800a064:	20001e3c 	.word	0x20001e3c

0800a068 <malloc>:
 800a068:	4b02      	ldr	r3, [pc, #8]	; (800a074 <malloc+0xc>)
 800a06a:	4601      	mov	r1, r0
 800a06c:	6818      	ldr	r0, [r3, #0]
 800a06e:	f000 b823 	b.w	800a0b8 <_malloc_r>
 800a072:	bf00      	nop
 800a074:	20000078 	.word	0x20000078

0800a078 <sbrk_aligned>:
 800a078:	b570      	push	{r4, r5, r6, lr}
 800a07a:	4e0e      	ldr	r6, [pc, #56]	; (800a0b4 <sbrk_aligned+0x3c>)
 800a07c:	460c      	mov	r4, r1
 800a07e:	6831      	ldr	r1, [r6, #0]
 800a080:	4605      	mov	r5, r0
 800a082:	b911      	cbnz	r1, 800a08a <sbrk_aligned+0x12>
 800a084:	f000 febc 	bl	800ae00 <_sbrk_r>
 800a088:	6030      	str	r0, [r6, #0]
 800a08a:	4621      	mov	r1, r4
 800a08c:	4628      	mov	r0, r5
 800a08e:	f000 feb7 	bl	800ae00 <_sbrk_r>
 800a092:	1c43      	adds	r3, r0, #1
 800a094:	d00a      	beq.n	800a0ac <sbrk_aligned+0x34>
 800a096:	1cc4      	adds	r4, r0, #3
 800a098:	f024 0403 	bic.w	r4, r4, #3
 800a09c:	42a0      	cmp	r0, r4
 800a09e:	d007      	beq.n	800a0b0 <sbrk_aligned+0x38>
 800a0a0:	1a21      	subs	r1, r4, r0
 800a0a2:	4628      	mov	r0, r5
 800a0a4:	f000 feac 	bl	800ae00 <_sbrk_r>
 800a0a8:	3001      	adds	r0, #1
 800a0aa:	d101      	bne.n	800a0b0 <sbrk_aligned+0x38>
 800a0ac:	f04f 34ff 	mov.w	r4, #4294967295
 800a0b0:	4620      	mov	r0, r4
 800a0b2:	bd70      	pop	{r4, r5, r6, pc}
 800a0b4:	20001e40 	.word	0x20001e40

0800a0b8 <_malloc_r>:
 800a0b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a0bc:	1ccd      	adds	r5, r1, #3
 800a0be:	f025 0503 	bic.w	r5, r5, #3
 800a0c2:	3508      	adds	r5, #8
 800a0c4:	2d0c      	cmp	r5, #12
 800a0c6:	bf38      	it	cc
 800a0c8:	250c      	movcc	r5, #12
 800a0ca:	2d00      	cmp	r5, #0
 800a0cc:	4607      	mov	r7, r0
 800a0ce:	db01      	blt.n	800a0d4 <_malloc_r+0x1c>
 800a0d0:	42a9      	cmp	r1, r5
 800a0d2:	d905      	bls.n	800a0e0 <_malloc_r+0x28>
 800a0d4:	230c      	movs	r3, #12
 800a0d6:	2600      	movs	r6, #0
 800a0d8:	603b      	str	r3, [r7, #0]
 800a0da:	4630      	mov	r0, r6
 800a0dc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a0e0:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800a1b4 <_malloc_r+0xfc>
 800a0e4:	f000 f868 	bl	800a1b8 <__malloc_lock>
 800a0e8:	f8d8 3000 	ldr.w	r3, [r8]
 800a0ec:	461c      	mov	r4, r3
 800a0ee:	bb5c      	cbnz	r4, 800a148 <_malloc_r+0x90>
 800a0f0:	4629      	mov	r1, r5
 800a0f2:	4638      	mov	r0, r7
 800a0f4:	f7ff ffc0 	bl	800a078 <sbrk_aligned>
 800a0f8:	1c43      	adds	r3, r0, #1
 800a0fa:	4604      	mov	r4, r0
 800a0fc:	d155      	bne.n	800a1aa <_malloc_r+0xf2>
 800a0fe:	f8d8 4000 	ldr.w	r4, [r8]
 800a102:	4626      	mov	r6, r4
 800a104:	2e00      	cmp	r6, #0
 800a106:	d145      	bne.n	800a194 <_malloc_r+0xdc>
 800a108:	2c00      	cmp	r4, #0
 800a10a:	d048      	beq.n	800a19e <_malloc_r+0xe6>
 800a10c:	6823      	ldr	r3, [r4, #0]
 800a10e:	4631      	mov	r1, r6
 800a110:	4638      	mov	r0, r7
 800a112:	eb04 0903 	add.w	r9, r4, r3
 800a116:	f000 fe73 	bl	800ae00 <_sbrk_r>
 800a11a:	4581      	cmp	r9, r0
 800a11c:	d13f      	bne.n	800a19e <_malloc_r+0xe6>
 800a11e:	6821      	ldr	r1, [r4, #0]
 800a120:	4638      	mov	r0, r7
 800a122:	1a6d      	subs	r5, r5, r1
 800a124:	4629      	mov	r1, r5
 800a126:	f7ff ffa7 	bl	800a078 <sbrk_aligned>
 800a12a:	3001      	adds	r0, #1
 800a12c:	d037      	beq.n	800a19e <_malloc_r+0xe6>
 800a12e:	6823      	ldr	r3, [r4, #0]
 800a130:	442b      	add	r3, r5
 800a132:	6023      	str	r3, [r4, #0]
 800a134:	f8d8 3000 	ldr.w	r3, [r8]
 800a138:	2b00      	cmp	r3, #0
 800a13a:	d038      	beq.n	800a1ae <_malloc_r+0xf6>
 800a13c:	685a      	ldr	r2, [r3, #4]
 800a13e:	42a2      	cmp	r2, r4
 800a140:	d12b      	bne.n	800a19a <_malloc_r+0xe2>
 800a142:	2200      	movs	r2, #0
 800a144:	605a      	str	r2, [r3, #4]
 800a146:	e00f      	b.n	800a168 <_malloc_r+0xb0>
 800a148:	6822      	ldr	r2, [r4, #0]
 800a14a:	1b52      	subs	r2, r2, r5
 800a14c:	d41f      	bmi.n	800a18e <_malloc_r+0xd6>
 800a14e:	2a0b      	cmp	r2, #11
 800a150:	d917      	bls.n	800a182 <_malloc_r+0xca>
 800a152:	1961      	adds	r1, r4, r5
 800a154:	42a3      	cmp	r3, r4
 800a156:	6025      	str	r5, [r4, #0]
 800a158:	bf18      	it	ne
 800a15a:	6059      	strne	r1, [r3, #4]
 800a15c:	6863      	ldr	r3, [r4, #4]
 800a15e:	bf08      	it	eq
 800a160:	f8c8 1000 	streq.w	r1, [r8]
 800a164:	5162      	str	r2, [r4, r5]
 800a166:	604b      	str	r3, [r1, #4]
 800a168:	4638      	mov	r0, r7
 800a16a:	f104 060b 	add.w	r6, r4, #11
 800a16e:	f000 f829 	bl	800a1c4 <__malloc_unlock>
 800a172:	f026 0607 	bic.w	r6, r6, #7
 800a176:	1d23      	adds	r3, r4, #4
 800a178:	1af2      	subs	r2, r6, r3
 800a17a:	d0ae      	beq.n	800a0da <_malloc_r+0x22>
 800a17c:	1b9b      	subs	r3, r3, r6
 800a17e:	50a3      	str	r3, [r4, r2]
 800a180:	e7ab      	b.n	800a0da <_malloc_r+0x22>
 800a182:	42a3      	cmp	r3, r4
 800a184:	6862      	ldr	r2, [r4, #4]
 800a186:	d1dd      	bne.n	800a144 <_malloc_r+0x8c>
 800a188:	f8c8 2000 	str.w	r2, [r8]
 800a18c:	e7ec      	b.n	800a168 <_malloc_r+0xb0>
 800a18e:	4623      	mov	r3, r4
 800a190:	6864      	ldr	r4, [r4, #4]
 800a192:	e7ac      	b.n	800a0ee <_malloc_r+0x36>
 800a194:	4634      	mov	r4, r6
 800a196:	6876      	ldr	r6, [r6, #4]
 800a198:	e7b4      	b.n	800a104 <_malloc_r+0x4c>
 800a19a:	4613      	mov	r3, r2
 800a19c:	e7cc      	b.n	800a138 <_malloc_r+0x80>
 800a19e:	230c      	movs	r3, #12
 800a1a0:	4638      	mov	r0, r7
 800a1a2:	603b      	str	r3, [r7, #0]
 800a1a4:	f000 f80e 	bl	800a1c4 <__malloc_unlock>
 800a1a8:	e797      	b.n	800a0da <_malloc_r+0x22>
 800a1aa:	6025      	str	r5, [r4, #0]
 800a1ac:	e7dc      	b.n	800a168 <_malloc_r+0xb0>
 800a1ae:	605b      	str	r3, [r3, #4]
 800a1b0:	deff      	udf	#255	; 0xff
 800a1b2:	bf00      	nop
 800a1b4:	20001e3c 	.word	0x20001e3c

0800a1b8 <__malloc_lock>:
 800a1b8:	4801      	ldr	r0, [pc, #4]	; (800a1c0 <__malloc_lock+0x8>)
 800a1ba:	f7ff b880 	b.w	80092be <__retarget_lock_acquire_recursive>
 800a1be:	bf00      	nop
 800a1c0:	20001e38 	.word	0x20001e38

0800a1c4 <__malloc_unlock>:
 800a1c4:	4801      	ldr	r0, [pc, #4]	; (800a1cc <__malloc_unlock+0x8>)
 800a1c6:	f7ff b87b 	b.w	80092c0 <__retarget_lock_release_recursive>
 800a1ca:	bf00      	nop
 800a1cc:	20001e38 	.word	0x20001e38

0800a1d0 <_Balloc>:
 800a1d0:	b570      	push	{r4, r5, r6, lr}
 800a1d2:	69c6      	ldr	r6, [r0, #28]
 800a1d4:	4604      	mov	r4, r0
 800a1d6:	460d      	mov	r5, r1
 800a1d8:	b976      	cbnz	r6, 800a1f8 <_Balloc+0x28>
 800a1da:	2010      	movs	r0, #16
 800a1dc:	f7ff ff44 	bl	800a068 <malloc>
 800a1e0:	4602      	mov	r2, r0
 800a1e2:	61e0      	str	r0, [r4, #28]
 800a1e4:	b920      	cbnz	r0, 800a1f0 <_Balloc+0x20>
 800a1e6:	216b      	movs	r1, #107	; 0x6b
 800a1e8:	4b17      	ldr	r3, [pc, #92]	; (800a248 <_Balloc+0x78>)
 800a1ea:	4818      	ldr	r0, [pc, #96]	; (800a24c <_Balloc+0x7c>)
 800a1ec:	f000 fe18 	bl	800ae20 <__assert_func>
 800a1f0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a1f4:	6006      	str	r6, [r0, #0]
 800a1f6:	60c6      	str	r6, [r0, #12]
 800a1f8:	69e6      	ldr	r6, [r4, #28]
 800a1fa:	68f3      	ldr	r3, [r6, #12]
 800a1fc:	b183      	cbz	r3, 800a220 <_Balloc+0x50>
 800a1fe:	69e3      	ldr	r3, [r4, #28]
 800a200:	68db      	ldr	r3, [r3, #12]
 800a202:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a206:	b9b8      	cbnz	r0, 800a238 <_Balloc+0x68>
 800a208:	2101      	movs	r1, #1
 800a20a:	fa01 f605 	lsl.w	r6, r1, r5
 800a20e:	1d72      	adds	r2, r6, #5
 800a210:	4620      	mov	r0, r4
 800a212:	0092      	lsls	r2, r2, #2
 800a214:	f000 fe22 	bl	800ae5c <_calloc_r>
 800a218:	b160      	cbz	r0, 800a234 <_Balloc+0x64>
 800a21a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a21e:	e00e      	b.n	800a23e <_Balloc+0x6e>
 800a220:	2221      	movs	r2, #33	; 0x21
 800a222:	2104      	movs	r1, #4
 800a224:	4620      	mov	r0, r4
 800a226:	f000 fe19 	bl	800ae5c <_calloc_r>
 800a22a:	69e3      	ldr	r3, [r4, #28]
 800a22c:	60f0      	str	r0, [r6, #12]
 800a22e:	68db      	ldr	r3, [r3, #12]
 800a230:	2b00      	cmp	r3, #0
 800a232:	d1e4      	bne.n	800a1fe <_Balloc+0x2e>
 800a234:	2000      	movs	r0, #0
 800a236:	bd70      	pop	{r4, r5, r6, pc}
 800a238:	6802      	ldr	r2, [r0, #0]
 800a23a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a23e:	2300      	movs	r3, #0
 800a240:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a244:	e7f7      	b.n	800a236 <_Balloc+0x66>
 800a246:	bf00      	nop
 800a248:	0800b4a7 	.word	0x0800b4a7
 800a24c:	0800b527 	.word	0x0800b527

0800a250 <_Bfree>:
 800a250:	b570      	push	{r4, r5, r6, lr}
 800a252:	69c6      	ldr	r6, [r0, #28]
 800a254:	4605      	mov	r5, r0
 800a256:	460c      	mov	r4, r1
 800a258:	b976      	cbnz	r6, 800a278 <_Bfree+0x28>
 800a25a:	2010      	movs	r0, #16
 800a25c:	f7ff ff04 	bl	800a068 <malloc>
 800a260:	4602      	mov	r2, r0
 800a262:	61e8      	str	r0, [r5, #28]
 800a264:	b920      	cbnz	r0, 800a270 <_Bfree+0x20>
 800a266:	218f      	movs	r1, #143	; 0x8f
 800a268:	4b08      	ldr	r3, [pc, #32]	; (800a28c <_Bfree+0x3c>)
 800a26a:	4809      	ldr	r0, [pc, #36]	; (800a290 <_Bfree+0x40>)
 800a26c:	f000 fdd8 	bl	800ae20 <__assert_func>
 800a270:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a274:	6006      	str	r6, [r0, #0]
 800a276:	60c6      	str	r6, [r0, #12]
 800a278:	b13c      	cbz	r4, 800a28a <_Bfree+0x3a>
 800a27a:	69eb      	ldr	r3, [r5, #28]
 800a27c:	6862      	ldr	r2, [r4, #4]
 800a27e:	68db      	ldr	r3, [r3, #12]
 800a280:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a284:	6021      	str	r1, [r4, #0]
 800a286:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a28a:	bd70      	pop	{r4, r5, r6, pc}
 800a28c:	0800b4a7 	.word	0x0800b4a7
 800a290:	0800b527 	.word	0x0800b527

0800a294 <__multadd>:
 800a294:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a298:	4607      	mov	r7, r0
 800a29a:	460c      	mov	r4, r1
 800a29c:	461e      	mov	r6, r3
 800a29e:	2000      	movs	r0, #0
 800a2a0:	690d      	ldr	r5, [r1, #16]
 800a2a2:	f101 0c14 	add.w	ip, r1, #20
 800a2a6:	f8dc 3000 	ldr.w	r3, [ip]
 800a2aa:	3001      	adds	r0, #1
 800a2ac:	b299      	uxth	r1, r3
 800a2ae:	fb02 6101 	mla	r1, r2, r1, r6
 800a2b2:	0c1e      	lsrs	r6, r3, #16
 800a2b4:	0c0b      	lsrs	r3, r1, #16
 800a2b6:	fb02 3306 	mla	r3, r2, r6, r3
 800a2ba:	b289      	uxth	r1, r1
 800a2bc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800a2c0:	4285      	cmp	r5, r0
 800a2c2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800a2c6:	f84c 1b04 	str.w	r1, [ip], #4
 800a2ca:	dcec      	bgt.n	800a2a6 <__multadd+0x12>
 800a2cc:	b30e      	cbz	r6, 800a312 <__multadd+0x7e>
 800a2ce:	68a3      	ldr	r3, [r4, #8]
 800a2d0:	42ab      	cmp	r3, r5
 800a2d2:	dc19      	bgt.n	800a308 <__multadd+0x74>
 800a2d4:	6861      	ldr	r1, [r4, #4]
 800a2d6:	4638      	mov	r0, r7
 800a2d8:	3101      	adds	r1, #1
 800a2da:	f7ff ff79 	bl	800a1d0 <_Balloc>
 800a2de:	4680      	mov	r8, r0
 800a2e0:	b928      	cbnz	r0, 800a2ee <__multadd+0x5a>
 800a2e2:	4602      	mov	r2, r0
 800a2e4:	21ba      	movs	r1, #186	; 0xba
 800a2e6:	4b0c      	ldr	r3, [pc, #48]	; (800a318 <__multadd+0x84>)
 800a2e8:	480c      	ldr	r0, [pc, #48]	; (800a31c <__multadd+0x88>)
 800a2ea:	f000 fd99 	bl	800ae20 <__assert_func>
 800a2ee:	6922      	ldr	r2, [r4, #16]
 800a2f0:	f104 010c 	add.w	r1, r4, #12
 800a2f4:	3202      	adds	r2, #2
 800a2f6:	0092      	lsls	r2, r2, #2
 800a2f8:	300c      	adds	r0, #12
 800a2fa:	f7fe fff0 	bl	80092de <memcpy>
 800a2fe:	4621      	mov	r1, r4
 800a300:	4638      	mov	r0, r7
 800a302:	f7ff ffa5 	bl	800a250 <_Bfree>
 800a306:	4644      	mov	r4, r8
 800a308:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a30c:	3501      	adds	r5, #1
 800a30e:	615e      	str	r6, [r3, #20]
 800a310:	6125      	str	r5, [r4, #16]
 800a312:	4620      	mov	r0, r4
 800a314:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a318:	0800b516 	.word	0x0800b516
 800a31c:	0800b527 	.word	0x0800b527

0800a320 <__hi0bits>:
 800a320:	0c02      	lsrs	r2, r0, #16
 800a322:	0412      	lsls	r2, r2, #16
 800a324:	4603      	mov	r3, r0
 800a326:	b9ca      	cbnz	r2, 800a35c <__hi0bits+0x3c>
 800a328:	0403      	lsls	r3, r0, #16
 800a32a:	2010      	movs	r0, #16
 800a32c:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800a330:	bf04      	itt	eq
 800a332:	021b      	lsleq	r3, r3, #8
 800a334:	3008      	addeq	r0, #8
 800a336:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800a33a:	bf04      	itt	eq
 800a33c:	011b      	lsleq	r3, r3, #4
 800a33e:	3004      	addeq	r0, #4
 800a340:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800a344:	bf04      	itt	eq
 800a346:	009b      	lsleq	r3, r3, #2
 800a348:	3002      	addeq	r0, #2
 800a34a:	2b00      	cmp	r3, #0
 800a34c:	db05      	blt.n	800a35a <__hi0bits+0x3a>
 800a34e:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 800a352:	f100 0001 	add.w	r0, r0, #1
 800a356:	bf08      	it	eq
 800a358:	2020      	moveq	r0, #32
 800a35a:	4770      	bx	lr
 800a35c:	2000      	movs	r0, #0
 800a35e:	e7e5      	b.n	800a32c <__hi0bits+0xc>

0800a360 <__lo0bits>:
 800a360:	6803      	ldr	r3, [r0, #0]
 800a362:	4602      	mov	r2, r0
 800a364:	f013 0007 	ands.w	r0, r3, #7
 800a368:	d00b      	beq.n	800a382 <__lo0bits+0x22>
 800a36a:	07d9      	lsls	r1, r3, #31
 800a36c:	d421      	bmi.n	800a3b2 <__lo0bits+0x52>
 800a36e:	0798      	lsls	r0, r3, #30
 800a370:	bf49      	itett	mi
 800a372:	085b      	lsrmi	r3, r3, #1
 800a374:	089b      	lsrpl	r3, r3, #2
 800a376:	2001      	movmi	r0, #1
 800a378:	6013      	strmi	r3, [r2, #0]
 800a37a:	bf5c      	itt	pl
 800a37c:	2002      	movpl	r0, #2
 800a37e:	6013      	strpl	r3, [r2, #0]
 800a380:	4770      	bx	lr
 800a382:	b299      	uxth	r1, r3
 800a384:	b909      	cbnz	r1, 800a38a <__lo0bits+0x2a>
 800a386:	2010      	movs	r0, #16
 800a388:	0c1b      	lsrs	r3, r3, #16
 800a38a:	b2d9      	uxtb	r1, r3
 800a38c:	b909      	cbnz	r1, 800a392 <__lo0bits+0x32>
 800a38e:	3008      	adds	r0, #8
 800a390:	0a1b      	lsrs	r3, r3, #8
 800a392:	0719      	lsls	r1, r3, #28
 800a394:	bf04      	itt	eq
 800a396:	091b      	lsreq	r3, r3, #4
 800a398:	3004      	addeq	r0, #4
 800a39a:	0799      	lsls	r1, r3, #30
 800a39c:	bf04      	itt	eq
 800a39e:	089b      	lsreq	r3, r3, #2
 800a3a0:	3002      	addeq	r0, #2
 800a3a2:	07d9      	lsls	r1, r3, #31
 800a3a4:	d403      	bmi.n	800a3ae <__lo0bits+0x4e>
 800a3a6:	085b      	lsrs	r3, r3, #1
 800a3a8:	f100 0001 	add.w	r0, r0, #1
 800a3ac:	d003      	beq.n	800a3b6 <__lo0bits+0x56>
 800a3ae:	6013      	str	r3, [r2, #0]
 800a3b0:	4770      	bx	lr
 800a3b2:	2000      	movs	r0, #0
 800a3b4:	4770      	bx	lr
 800a3b6:	2020      	movs	r0, #32
 800a3b8:	4770      	bx	lr
	...

0800a3bc <__i2b>:
 800a3bc:	b510      	push	{r4, lr}
 800a3be:	460c      	mov	r4, r1
 800a3c0:	2101      	movs	r1, #1
 800a3c2:	f7ff ff05 	bl	800a1d0 <_Balloc>
 800a3c6:	4602      	mov	r2, r0
 800a3c8:	b928      	cbnz	r0, 800a3d6 <__i2b+0x1a>
 800a3ca:	f240 1145 	movw	r1, #325	; 0x145
 800a3ce:	4b04      	ldr	r3, [pc, #16]	; (800a3e0 <__i2b+0x24>)
 800a3d0:	4804      	ldr	r0, [pc, #16]	; (800a3e4 <__i2b+0x28>)
 800a3d2:	f000 fd25 	bl	800ae20 <__assert_func>
 800a3d6:	2301      	movs	r3, #1
 800a3d8:	6144      	str	r4, [r0, #20]
 800a3da:	6103      	str	r3, [r0, #16]
 800a3dc:	bd10      	pop	{r4, pc}
 800a3de:	bf00      	nop
 800a3e0:	0800b516 	.word	0x0800b516
 800a3e4:	0800b527 	.word	0x0800b527

0800a3e8 <__multiply>:
 800a3e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a3ec:	4691      	mov	r9, r2
 800a3ee:	690a      	ldr	r2, [r1, #16]
 800a3f0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a3f4:	460c      	mov	r4, r1
 800a3f6:	429a      	cmp	r2, r3
 800a3f8:	bfbe      	ittt	lt
 800a3fa:	460b      	movlt	r3, r1
 800a3fc:	464c      	movlt	r4, r9
 800a3fe:	4699      	movlt	r9, r3
 800a400:	6927      	ldr	r7, [r4, #16]
 800a402:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800a406:	68a3      	ldr	r3, [r4, #8]
 800a408:	6861      	ldr	r1, [r4, #4]
 800a40a:	eb07 060a 	add.w	r6, r7, sl
 800a40e:	42b3      	cmp	r3, r6
 800a410:	b085      	sub	sp, #20
 800a412:	bfb8      	it	lt
 800a414:	3101      	addlt	r1, #1
 800a416:	f7ff fedb 	bl	800a1d0 <_Balloc>
 800a41a:	b930      	cbnz	r0, 800a42a <__multiply+0x42>
 800a41c:	4602      	mov	r2, r0
 800a41e:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800a422:	4b43      	ldr	r3, [pc, #268]	; (800a530 <__multiply+0x148>)
 800a424:	4843      	ldr	r0, [pc, #268]	; (800a534 <__multiply+0x14c>)
 800a426:	f000 fcfb 	bl	800ae20 <__assert_func>
 800a42a:	f100 0514 	add.w	r5, r0, #20
 800a42e:	462b      	mov	r3, r5
 800a430:	2200      	movs	r2, #0
 800a432:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800a436:	4543      	cmp	r3, r8
 800a438:	d321      	bcc.n	800a47e <__multiply+0x96>
 800a43a:	f104 0314 	add.w	r3, r4, #20
 800a43e:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800a442:	f109 0314 	add.w	r3, r9, #20
 800a446:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800a44a:	9202      	str	r2, [sp, #8]
 800a44c:	1b3a      	subs	r2, r7, r4
 800a44e:	3a15      	subs	r2, #21
 800a450:	f022 0203 	bic.w	r2, r2, #3
 800a454:	3204      	adds	r2, #4
 800a456:	f104 0115 	add.w	r1, r4, #21
 800a45a:	428f      	cmp	r7, r1
 800a45c:	bf38      	it	cc
 800a45e:	2204      	movcc	r2, #4
 800a460:	9201      	str	r2, [sp, #4]
 800a462:	9a02      	ldr	r2, [sp, #8]
 800a464:	9303      	str	r3, [sp, #12]
 800a466:	429a      	cmp	r2, r3
 800a468:	d80c      	bhi.n	800a484 <__multiply+0x9c>
 800a46a:	2e00      	cmp	r6, #0
 800a46c:	dd03      	ble.n	800a476 <__multiply+0x8e>
 800a46e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800a472:	2b00      	cmp	r3, #0
 800a474:	d05a      	beq.n	800a52c <__multiply+0x144>
 800a476:	6106      	str	r6, [r0, #16]
 800a478:	b005      	add	sp, #20
 800a47a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a47e:	f843 2b04 	str.w	r2, [r3], #4
 800a482:	e7d8      	b.n	800a436 <__multiply+0x4e>
 800a484:	f8b3 a000 	ldrh.w	sl, [r3]
 800a488:	f1ba 0f00 	cmp.w	sl, #0
 800a48c:	d023      	beq.n	800a4d6 <__multiply+0xee>
 800a48e:	46a9      	mov	r9, r5
 800a490:	f04f 0c00 	mov.w	ip, #0
 800a494:	f104 0e14 	add.w	lr, r4, #20
 800a498:	f85e 2b04 	ldr.w	r2, [lr], #4
 800a49c:	f8d9 1000 	ldr.w	r1, [r9]
 800a4a0:	fa1f fb82 	uxth.w	fp, r2
 800a4a4:	b289      	uxth	r1, r1
 800a4a6:	fb0a 110b 	mla	r1, sl, fp, r1
 800a4aa:	4461      	add	r1, ip
 800a4ac:	f8d9 c000 	ldr.w	ip, [r9]
 800a4b0:	0c12      	lsrs	r2, r2, #16
 800a4b2:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800a4b6:	fb0a c202 	mla	r2, sl, r2, ip
 800a4ba:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800a4be:	b289      	uxth	r1, r1
 800a4c0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800a4c4:	4577      	cmp	r7, lr
 800a4c6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a4ca:	f849 1b04 	str.w	r1, [r9], #4
 800a4ce:	d8e3      	bhi.n	800a498 <__multiply+0xb0>
 800a4d0:	9a01      	ldr	r2, [sp, #4]
 800a4d2:	f845 c002 	str.w	ip, [r5, r2]
 800a4d6:	9a03      	ldr	r2, [sp, #12]
 800a4d8:	3304      	adds	r3, #4
 800a4da:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800a4de:	f1b9 0f00 	cmp.w	r9, #0
 800a4e2:	d021      	beq.n	800a528 <__multiply+0x140>
 800a4e4:	46ae      	mov	lr, r5
 800a4e6:	f04f 0a00 	mov.w	sl, #0
 800a4ea:	6829      	ldr	r1, [r5, #0]
 800a4ec:	f104 0c14 	add.w	ip, r4, #20
 800a4f0:	f8bc b000 	ldrh.w	fp, [ip]
 800a4f4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800a4f8:	b289      	uxth	r1, r1
 800a4fa:	fb09 220b 	mla	r2, r9, fp, r2
 800a4fe:	4452      	add	r2, sl
 800a500:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800a504:	f84e 1b04 	str.w	r1, [lr], #4
 800a508:	f85c 1b04 	ldr.w	r1, [ip], #4
 800a50c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800a510:	f8be 1000 	ldrh.w	r1, [lr]
 800a514:	4567      	cmp	r7, ip
 800a516:	fb09 110a 	mla	r1, r9, sl, r1
 800a51a:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800a51e:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800a522:	d8e5      	bhi.n	800a4f0 <__multiply+0x108>
 800a524:	9a01      	ldr	r2, [sp, #4]
 800a526:	50a9      	str	r1, [r5, r2]
 800a528:	3504      	adds	r5, #4
 800a52a:	e79a      	b.n	800a462 <__multiply+0x7a>
 800a52c:	3e01      	subs	r6, #1
 800a52e:	e79c      	b.n	800a46a <__multiply+0x82>
 800a530:	0800b516 	.word	0x0800b516
 800a534:	0800b527 	.word	0x0800b527

0800a538 <__pow5mult>:
 800a538:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a53c:	4615      	mov	r5, r2
 800a53e:	f012 0203 	ands.w	r2, r2, #3
 800a542:	4606      	mov	r6, r0
 800a544:	460f      	mov	r7, r1
 800a546:	d007      	beq.n	800a558 <__pow5mult+0x20>
 800a548:	4c25      	ldr	r4, [pc, #148]	; (800a5e0 <__pow5mult+0xa8>)
 800a54a:	3a01      	subs	r2, #1
 800a54c:	2300      	movs	r3, #0
 800a54e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a552:	f7ff fe9f 	bl	800a294 <__multadd>
 800a556:	4607      	mov	r7, r0
 800a558:	10ad      	asrs	r5, r5, #2
 800a55a:	d03d      	beq.n	800a5d8 <__pow5mult+0xa0>
 800a55c:	69f4      	ldr	r4, [r6, #28]
 800a55e:	b97c      	cbnz	r4, 800a580 <__pow5mult+0x48>
 800a560:	2010      	movs	r0, #16
 800a562:	f7ff fd81 	bl	800a068 <malloc>
 800a566:	4602      	mov	r2, r0
 800a568:	61f0      	str	r0, [r6, #28]
 800a56a:	b928      	cbnz	r0, 800a578 <__pow5mult+0x40>
 800a56c:	f240 11b3 	movw	r1, #435	; 0x1b3
 800a570:	4b1c      	ldr	r3, [pc, #112]	; (800a5e4 <__pow5mult+0xac>)
 800a572:	481d      	ldr	r0, [pc, #116]	; (800a5e8 <__pow5mult+0xb0>)
 800a574:	f000 fc54 	bl	800ae20 <__assert_func>
 800a578:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a57c:	6004      	str	r4, [r0, #0]
 800a57e:	60c4      	str	r4, [r0, #12]
 800a580:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800a584:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a588:	b94c      	cbnz	r4, 800a59e <__pow5mult+0x66>
 800a58a:	f240 2171 	movw	r1, #625	; 0x271
 800a58e:	4630      	mov	r0, r6
 800a590:	f7ff ff14 	bl	800a3bc <__i2b>
 800a594:	2300      	movs	r3, #0
 800a596:	4604      	mov	r4, r0
 800a598:	f8c8 0008 	str.w	r0, [r8, #8]
 800a59c:	6003      	str	r3, [r0, #0]
 800a59e:	f04f 0900 	mov.w	r9, #0
 800a5a2:	07eb      	lsls	r3, r5, #31
 800a5a4:	d50a      	bpl.n	800a5bc <__pow5mult+0x84>
 800a5a6:	4639      	mov	r1, r7
 800a5a8:	4622      	mov	r2, r4
 800a5aa:	4630      	mov	r0, r6
 800a5ac:	f7ff ff1c 	bl	800a3e8 <__multiply>
 800a5b0:	4680      	mov	r8, r0
 800a5b2:	4639      	mov	r1, r7
 800a5b4:	4630      	mov	r0, r6
 800a5b6:	f7ff fe4b 	bl	800a250 <_Bfree>
 800a5ba:	4647      	mov	r7, r8
 800a5bc:	106d      	asrs	r5, r5, #1
 800a5be:	d00b      	beq.n	800a5d8 <__pow5mult+0xa0>
 800a5c0:	6820      	ldr	r0, [r4, #0]
 800a5c2:	b938      	cbnz	r0, 800a5d4 <__pow5mult+0x9c>
 800a5c4:	4622      	mov	r2, r4
 800a5c6:	4621      	mov	r1, r4
 800a5c8:	4630      	mov	r0, r6
 800a5ca:	f7ff ff0d 	bl	800a3e8 <__multiply>
 800a5ce:	6020      	str	r0, [r4, #0]
 800a5d0:	f8c0 9000 	str.w	r9, [r0]
 800a5d4:	4604      	mov	r4, r0
 800a5d6:	e7e4      	b.n	800a5a2 <__pow5mult+0x6a>
 800a5d8:	4638      	mov	r0, r7
 800a5da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a5de:	bf00      	nop
 800a5e0:	0800b670 	.word	0x0800b670
 800a5e4:	0800b4a7 	.word	0x0800b4a7
 800a5e8:	0800b527 	.word	0x0800b527

0800a5ec <__lshift>:
 800a5ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a5f0:	460c      	mov	r4, r1
 800a5f2:	4607      	mov	r7, r0
 800a5f4:	4691      	mov	r9, r2
 800a5f6:	6923      	ldr	r3, [r4, #16]
 800a5f8:	6849      	ldr	r1, [r1, #4]
 800a5fa:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a5fe:	68a3      	ldr	r3, [r4, #8]
 800a600:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a604:	f108 0601 	add.w	r6, r8, #1
 800a608:	42b3      	cmp	r3, r6
 800a60a:	db0b      	blt.n	800a624 <__lshift+0x38>
 800a60c:	4638      	mov	r0, r7
 800a60e:	f7ff fddf 	bl	800a1d0 <_Balloc>
 800a612:	4605      	mov	r5, r0
 800a614:	b948      	cbnz	r0, 800a62a <__lshift+0x3e>
 800a616:	4602      	mov	r2, r0
 800a618:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800a61c:	4b27      	ldr	r3, [pc, #156]	; (800a6bc <__lshift+0xd0>)
 800a61e:	4828      	ldr	r0, [pc, #160]	; (800a6c0 <__lshift+0xd4>)
 800a620:	f000 fbfe 	bl	800ae20 <__assert_func>
 800a624:	3101      	adds	r1, #1
 800a626:	005b      	lsls	r3, r3, #1
 800a628:	e7ee      	b.n	800a608 <__lshift+0x1c>
 800a62a:	2300      	movs	r3, #0
 800a62c:	f100 0114 	add.w	r1, r0, #20
 800a630:	f100 0210 	add.w	r2, r0, #16
 800a634:	4618      	mov	r0, r3
 800a636:	4553      	cmp	r3, sl
 800a638:	db33      	blt.n	800a6a2 <__lshift+0xb6>
 800a63a:	6920      	ldr	r0, [r4, #16]
 800a63c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a640:	f104 0314 	add.w	r3, r4, #20
 800a644:	f019 091f 	ands.w	r9, r9, #31
 800a648:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a64c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800a650:	d02b      	beq.n	800a6aa <__lshift+0xbe>
 800a652:	468a      	mov	sl, r1
 800a654:	2200      	movs	r2, #0
 800a656:	f1c9 0e20 	rsb	lr, r9, #32
 800a65a:	6818      	ldr	r0, [r3, #0]
 800a65c:	fa00 f009 	lsl.w	r0, r0, r9
 800a660:	4310      	orrs	r0, r2
 800a662:	f84a 0b04 	str.w	r0, [sl], #4
 800a666:	f853 2b04 	ldr.w	r2, [r3], #4
 800a66a:	459c      	cmp	ip, r3
 800a66c:	fa22 f20e 	lsr.w	r2, r2, lr
 800a670:	d8f3      	bhi.n	800a65a <__lshift+0x6e>
 800a672:	ebac 0304 	sub.w	r3, ip, r4
 800a676:	3b15      	subs	r3, #21
 800a678:	f023 0303 	bic.w	r3, r3, #3
 800a67c:	3304      	adds	r3, #4
 800a67e:	f104 0015 	add.w	r0, r4, #21
 800a682:	4584      	cmp	ip, r0
 800a684:	bf38      	it	cc
 800a686:	2304      	movcc	r3, #4
 800a688:	50ca      	str	r2, [r1, r3]
 800a68a:	b10a      	cbz	r2, 800a690 <__lshift+0xa4>
 800a68c:	f108 0602 	add.w	r6, r8, #2
 800a690:	3e01      	subs	r6, #1
 800a692:	4638      	mov	r0, r7
 800a694:	4621      	mov	r1, r4
 800a696:	612e      	str	r6, [r5, #16]
 800a698:	f7ff fdda 	bl	800a250 <_Bfree>
 800a69c:	4628      	mov	r0, r5
 800a69e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a6a2:	f842 0f04 	str.w	r0, [r2, #4]!
 800a6a6:	3301      	adds	r3, #1
 800a6a8:	e7c5      	b.n	800a636 <__lshift+0x4a>
 800a6aa:	3904      	subs	r1, #4
 800a6ac:	f853 2b04 	ldr.w	r2, [r3], #4
 800a6b0:	459c      	cmp	ip, r3
 800a6b2:	f841 2f04 	str.w	r2, [r1, #4]!
 800a6b6:	d8f9      	bhi.n	800a6ac <__lshift+0xc0>
 800a6b8:	e7ea      	b.n	800a690 <__lshift+0xa4>
 800a6ba:	bf00      	nop
 800a6bc:	0800b516 	.word	0x0800b516
 800a6c0:	0800b527 	.word	0x0800b527

0800a6c4 <__mcmp>:
 800a6c4:	4603      	mov	r3, r0
 800a6c6:	690a      	ldr	r2, [r1, #16]
 800a6c8:	6900      	ldr	r0, [r0, #16]
 800a6ca:	b530      	push	{r4, r5, lr}
 800a6cc:	1a80      	subs	r0, r0, r2
 800a6ce:	d10d      	bne.n	800a6ec <__mcmp+0x28>
 800a6d0:	3314      	adds	r3, #20
 800a6d2:	3114      	adds	r1, #20
 800a6d4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800a6d8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800a6dc:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800a6e0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800a6e4:	4295      	cmp	r5, r2
 800a6e6:	d002      	beq.n	800a6ee <__mcmp+0x2a>
 800a6e8:	d304      	bcc.n	800a6f4 <__mcmp+0x30>
 800a6ea:	2001      	movs	r0, #1
 800a6ec:	bd30      	pop	{r4, r5, pc}
 800a6ee:	42a3      	cmp	r3, r4
 800a6f0:	d3f4      	bcc.n	800a6dc <__mcmp+0x18>
 800a6f2:	e7fb      	b.n	800a6ec <__mcmp+0x28>
 800a6f4:	f04f 30ff 	mov.w	r0, #4294967295
 800a6f8:	e7f8      	b.n	800a6ec <__mcmp+0x28>
	...

0800a6fc <__mdiff>:
 800a6fc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a700:	460d      	mov	r5, r1
 800a702:	4607      	mov	r7, r0
 800a704:	4611      	mov	r1, r2
 800a706:	4628      	mov	r0, r5
 800a708:	4614      	mov	r4, r2
 800a70a:	f7ff ffdb 	bl	800a6c4 <__mcmp>
 800a70e:	1e06      	subs	r6, r0, #0
 800a710:	d111      	bne.n	800a736 <__mdiff+0x3a>
 800a712:	4631      	mov	r1, r6
 800a714:	4638      	mov	r0, r7
 800a716:	f7ff fd5b 	bl	800a1d0 <_Balloc>
 800a71a:	4602      	mov	r2, r0
 800a71c:	b928      	cbnz	r0, 800a72a <__mdiff+0x2e>
 800a71e:	f240 2137 	movw	r1, #567	; 0x237
 800a722:	4b3a      	ldr	r3, [pc, #232]	; (800a80c <__mdiff+0x110>)
 800a724:	483a      	ldr	r0, [pc, #232]	; (800a810 <__mdiff+0x114>)
 800a726:	f000 fb7b 	bl	800ae20 <__assert_func>
 800a72a:	2301      	movs	r3, #1
 800a72c:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800a730:	4610      	mov	r0, r2
 800a732:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a736:	bfa4      	itt	ge
 800a738:	4623      	movge	r3, r4
 800a73a:	462c      	movge	r4, r5
 800a73c:	4638      	mov	r0, r7
 800a73e:	6861      	ldr	r1, [r4, #4]
 800a740:	bfa6      	itte	ge
 800a742:	461d      	movge	r5, r3
 800a744:	2600      	movge	r6, #0
 800a746:	2601      	movlt	r6, #1
 800a748:	f7ff fd42 	bl	800a1d0 <_Balloc>
 800a74c:	4602      	mov	r2, r0
 800a74e:	b918      	cbnz	r0, 800a758 <__mdiff+0x5c>
 800a750:	f240 2145 	movw	r1, #581	; 0x245
 800a754:	4b2d      	ldr	r3, [pc, #180]	; (800a80c <__mdiff+0x110>)
 800a756:	e7e5      	b.n	800a724 <__mdiff+0x28>
 800a758:	f102 0814 	add.w	r8, r2, #20
 800a75c:	46c2      	mov	sl, r8
 800a75e:	f04f 0c00 	mov.w	ip, #0
 800a762:	6927      	ldr	r7, [r4, #16]
 800a764:	60c6      	str	r6, [r0, #12]
 800a766:	692e      	ldr	r6, [r5, #16]
 800a768:	f104 0014 	add.w	r0, r4, #20
 800a76c:	f105 0914 	add.w	r9, r5, #20
 800a770:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 800a774:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800a778:	3410      	adds	r4, #16
 800a77a:	f854 bf04 	ldr.w	fp, [r4, #4]!
 800a77e:	f859 3b04 	ldr.w	r3, [r9], #4
 800a782:	fa1f f18b 	uxth.w	r1, fp
 800a786:	4461      	add	r1, ip
 800a788:	fa1f fc83 	uxth.w	ip, r3
 800a78c:	0c1b      	lsrs	r3, r3, #16
 800a78e:	eba1 010c 	sub.w	r1, r1, ip
 800a792:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800a796:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800a79a:	b289      	uxth	r1, r1
 800a79c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800a7a0:	454e      	cmp	r6, r9
 800a7a2:	ea4f 4c23 	mov.w	ip, r3, asr #16
 800a7a6:	f84a 1b04 	str.w	r1, [sl], #4
 800a7aa:	d8e6      	bhi.n	800a77a <__mdiff+0x7e>
 800a7ac:	1b73      	subs	r3, r6, r5
 800a7ae:	3b15      	subs	r3, #21
 800a7b0:	f023 0303 	bic.w	r3, r3, #3
 800a7b4:	3515      	adds	r5, #21
 800a7b6:	3304      	adds	r3, #4
 800a7b8:	42ae      	cmp	r6, r5
 800a7ba:	bf38      	it	cc
 800a7bc:	2304      	movcc	r3, #4
 800a7be:	4418      	add	r0, r3
 800a7c0:	4443      	add	r3, r8
 800a7c2:	461e      	mov	r6, r3
 800a7c4:	4605      	mov	r5, r0
 800a7c6:	4575      	cmp	r5, lr
 800a7c8:	d30e      	bcc.n	800a7e8 <__mdiff+0xec>
 800a7ca:	f10e 0103 	add.w	r1, lr, #3
 800a7ce:	1a09      	subs	r1, r1, r0
 800a7d0:	f021 0103 	bic.w	r1, r1, #3
 800a7d4:	3803      	subs	r0, #3
 800a7d6:	4586      	cmp	lr, r0
 800a7d8:	bf38      	it	cc
 800a7da:	2100      	movcc	r1, #0
 800a7dc:	440b      	add	r3, r1
 800a7de:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a7e2:	b189      	cbz	r1, 800a808 <__mdiff+0x10c>
 800a7e4:	6117      	str	r7, [r2, #16]
 800a7e6:	e7a3      	b.n	800a730 <__mdiff+0x34>
 800a7e8:	f855 8b04 	ldr.w	r8, [r5], #4
 800a7ec:	fa1f f188 	uxth.w	r1, r8
 800a7f0:	4461      	add	r1, ip
 800a7f2:	140c      	asrs	r4, r1, #16
 800a7f4:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800a7f8:	b289      	uxth	r1, r1
 800a7fa:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800a7fe:	ea4f 4c24 	mov.w	ip, r4, asr #16
 800a802:	f846 1b04 	str.w	r1, [r6], #4
 800a806:	e7de      	b.n	800a7c6 <__mdiff+0xca>
 800a808:	3f01      	subs	r7, #1
 800a80a:	e7e8      	b.n	800a7de <__mdiff+0xe2>
 800a80c:	0800b516 	.word	0x0800b516
 800a810:	0800b527 	.word	0x0800b527

0800a814 <__d2b>:
 800a814:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a816:	2101      	movs	r1, #1
 800a818:	4617      	mov	r7, r2
 800a81a:	461c      	mov	r4, r3
 800a81c:	9e08      	ldr	r6, [sp, #32]
 800a81e:	f7ff fcd7 	bl	800a1d0 <_Balloc>
 800a822:	4605      	mov	r5, r0
 800a824:	b930      	cbnz	r0, 800a834 <__d2b+0x20>
 800a826:	4602      	mov	r2, r0
 800a828:	f240 310f 	movw	r1, #783	; 0x30f
 800a82c:	4b22      	ldr	r3, [pc, #136]	; (800a8b8 <__d2b+0xa4>)
 800a82e:	4823      	ldr	r0, [pc, #140]	; (800a8bc <__d2b+0xa8>)
 800a830:	f000 faf6 	bl	800ae20 <__assert_func>
 800a834:	f3c4 0313 	ubfx	r3, r4, #0, #20
 800a838:	f3c4 540a 	ubfx	r4, r4, #20, #11
 800a83c:	bb24      	cbnz	r4, 800a888 <__d2b+0x74>
 800a83e:	2f00      	cmp	r7, #0
 800a840:	9301      	str	r3, [sp, #4]
 800a842:	d026      	beq.n	800a892 <__d2b+0x7e>
 800a844:	4668      	mov	r0, sp
 800a846:	9700      	str	r7, [sp, #0]
 800a848:	f7ff fd8a 	bl	800a360 <__lo0bits>
 800a84c:	e9dd 1200 	ldrd	r1, r2, [sp]
 800a850:	b1e8      	cbz	r0, 800a88e <__d2b+0x7a>
 800a852:	f1c0 0320 	rsb	r3, r0, #32
 800a856:	fa02 f303 	lsl.w	r3, r2, r3
 800a85a:	430b      	orrs	r3, r1
 800a85c:	40c2      	lsrs	r2, r0
 800a85e:	616b      	str	r3, [r5, #20]
 800a860:	9201      	str	r2, [sp, #4]
 800a862:	9b01      	ldr	r3, [sp, #4]
 800a864:	2b00      	cmp	r3, #0
 800a866:	bf14      	ite	ne
 800a868:	2102      	movne	r1, #2
 800a86a:	2101      	moveq	r1, #1
 800a86c:	61ab      	str	r3, [r5, #24]
 800a86e:	6129      	str	r1, [r5, #16]
 800a870:	b1bc      	cbz	r4, 800a8a2 <__d2b+0x8e>
 800a872:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800a876:	4404      	add	r4, r0
 800a878:	6034      	str	r4, [r6, #0]
 800a87a:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800a87e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a880:	6018      	str	r0, [r3, #0]
 800a882:	4628      	mov	r0, r5
 800a884:	b003      	add	sp, #12
 800a886:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a888:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a88c:	e7d7      	b.n	800a83e <__d2b+0x2a>
 800a88e:	6169      	str	r1, [r5, #20]
 800a890:	e7e7      	b.n	800a862 <__d2b+0x4e>
 800a892:	a801      	add	r0, sp, #4
 800a894:	f7ff fd64 	bl	800a360 <__lo0bits>
 800a898:	9b01      	ldr	r3, [sp, #4]
 800a89a:	2101      	movs	r1, #1
 800a89c:	616b      	str	r3, [r5, #20]
 800a89e:	3020      	adds	r0, #32
 800a8a0:	e7e5      	b.n	800a86e <__d2b+0x5a>
 800a8a2:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800a8a6:	eb05 0381 	add.w	r3, r5, r1, lsl #2
 800a8aa:	6030      	str	r0, [r6, #0]
 800a8ac:	6918      	ldr	r0, [r3, #16]
 800a8ae:	f7ff fd37 	bl	800a320 <__hi0bits>
 800a8b2:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800a8b6:	e7e2      	b.n	800a87e <__d2b+0x6a>
 800a8b8:	0800b516 	.word	0x0800b516
 800a8bc:	0800b527 	.word	0x0800b527

0800a8c0 <__ssputs_r>:
 800a8c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a8c4:	461f      	mov	r7, r3
 800a8c6:	688e      	ldr	r6, [r1, #8]
 800a8c8:	4682      	mov	sl, r0
 800a8ca:	42be      	cmp	r6, r7
 800a8cc:	460c      	mov	r4, r1
 800a8ce:	4690      	mov	r8, r2
 800a8d0:	680b      	ldr	r3, [r1, #0]
 800a8d2:	d82c      	bhi.n	800a92e <__ssputs_r+0x6e>
 800a8d4:	898a      	ldrh	r2, [r1, #12]
 800a8d6:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a8da:	d026      	beq.n	800a92a <__ssputs_r+0x6a>
 800a8dc:	6965      	ldr	r5, [r4, #20]
 800a8de:	6909      	ldr	r1, [r1, #16]
 800a8e0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a8e4:	eba3 0901 	sub.w	r9, r3, r1
 800a8e8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a8ec:	1c7b      	adds	r3, r7, #1
 800a8ee:	444b      	add	r3, r9
 800a8f0:	106d      	asrs	r5, r5, #1
 800a8f2:	429d      	cmp	r5, r3
 800a8f4:	bf38      	it	cc
 800a8f6:	461d      	movcc	r5, r3
 800a8f8:	0553      	lsls	r3, r2, #21
 800a8fa:	d527      	bpl.n	800a94c <__ssputs_r+0x8c>
 800a8fc:	4629      	mov	r1, r5
 800a8fe:	f7ff fbdb 	bl	800a0b8 <_malloc_r>
 800a902:	4606      	mov	r6, r0
 800a904:	b360      	cbz	r0, 800a960 <__ssputs_r+0xa0>
 800a906:	464a      	mov	r2, r9
 800a908:	6921      	ldr	r1, [r4, #16]
 800a90a:	f7fe fce8 	bl	80092de <memcpy>
 800a90e:	89a3      	ldrh	r3, [r4, #12]
 800a910:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a914:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a918:	81a3      	strh	r3, [r4, #12]
 800a91a:	6126      	str	r6, [r4, #16]
 800a91c:	444e      	add	r6, r9
 800a91e:	6026      	str	r6, [r4, #0]
 800a920:	463e      	mov	r6, r7
 800a922:	6165      	str	r5, [r4, #20]
 800a924:	eba5 0509 	sub.w	r5, r5, r9
 800a928:	60a5      	str	r5, [r4, #8]
 800a92a:	42be      	cmp	r6, r7
 800a92c:	d900      	bls.n	800a930 <__ssputs_r+0x70>
 800a92e:	463e      	mov	r6, r7
 800a930:	4632      	mov	r2, r6
 800a932:	4641      	mov	r1, r8
 800a934:	6820      	ldr	r0, [r4, #0]
 800a936:	f000 fa26 	bl	800ad86 <memmove>
 800a93a:	2000      	movs	r0, #0
 800a93c:	68a3      	ldr	r3, [r4, #8]
 800a93e:	1b9b      	subs	r3, r3, r6
 800a940:	60a3      	str	r3, [r4, #8]
 800a942:	6823      	ldr	r3, [r4, #0]
 800a944:	4433      	add	r3, r6
 800a946:	6023      	str	r3, [r4, #0]
 800a948:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a94c:	462a      	mov	r2, r5
 800a94e:	f000 faab 	bl	800aea8 <_realloc_r>
 800a952:	4606      	mov	r6, r0
 800a954:	2800      	cmp	r0, #0
 800a956:	d1e0      	bne.n	800a91a <__ssputs_r+0x5a>
 800a958:	4650      	mov	r0, sl
 800a95a:	6921      	ldr	r1, [r4, #16]
 800a95c:	f7ff fb3c 	bl	8009fd8 <_free_r>
 800a960:	230c      	movs	r3, #12
 800a962:	f8ca 3000 	str.w	r3, [sl]
 800a966:	89a3      	ldrh	r3, [r4, #12]
 800a968:	f04f 30ff 	mov.w	r0, #4294967295
 800a96c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a970:	81a3      	strh	r3, [r4, #12]
 800a972:	e7e9      	b.n	800a948 <__ssputs_r+0x88>

0800a974 <_svfiprintf_r>:
 800a974:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a978:	4698      	mov	r8, r3
 800a97a:	898b      	ldrh	r3, [r1, #12]
 800a97c:	4607      	mov	r7, r0
 800a97e:	061b      	lsls	r3, r3, #24
 800a980:	460d      	mov	r5, r1
 800a982:	4614      	mov	r4, r2
 800a984:	b09d      	sub	sp, #116	; 0x74
 800a986:	d50e      	bpl.n	800a9a6 <_svfiprintf_r+0x32>
 800a988:	690b      	ldr	r3, [r1, #16]
 800a98a:	b963      	cbnz	r3, 800a9a6 <_svfiprintf_r+0x32>
 800a98c:	2140      	movs	r1, #64	; 0x40
 800a98e:	f7ff fb93 	bl	800a0b8 <_malloc_r>
 800a992:	6028      	str	r0, [r5, #0]
 800a994:	6128      	str	r0, [r5, #16]
 800a996:	b920      	cbnz	r0, 800a9a2 <_svfiprintf_r+0x2e>
 800a998:	230c      	movs	r3, #12
 800a99a:	603b      	str	r3, [r7, #0]
 800a99c:	f04f 30ff 	mov.w	r0, #4294967295
 800a9a0:	e0d0      	b.n	800ab44 <_svfiprintf_r+0x1d0>
 800a9a2:	2340      	movs	r3, #64	; 0x40
 800a9a4:	616b      	str	r3, [r5, #20]
 800a9a6:	2300      	movs	r3, #0
 800a9a8:	9309      	str	r3, [sp, #36]	; 0x24
 800a9aa:	2320      	movs	r3, #32
 800a9ac:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a9b0:	2330      	movs	r3, #48	; 0x30
 800a9b2:	f04f 0901 	mov.w	r9, #1
 800a9b6:	f8cd 800c 	str.w	r8, [sp, #12]
 800a9ba:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 800ab5c <_svfiprintf_r+0x1e8>
 800a9be:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a9c2:	4623      	mov	r3, r4
 800a9c4:	469a      	mov	sl, r3
 800a9c6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a9ca:	b10a      	cbz	r2, 800a9d0 <_svfiprintf_r+0x5c>
 800a9cc:	2a25      	cmp	r2, #37	; 0x25
 800a9ce:	d1f9      	bne.n	800a9c4 <_svfiprintf_r+0x50>
 800a9d0:	ebba 0b04 	subs.w	fp, sl, r4
 800a9d4:	d00b      	beq.n	800a9ee <_svfiprintf_r+0x7a>
 800a9d6:	465b      	mov	r3, fp
 800a9d8:	4622      	mov	r2, r4
 800a9da:	4629      	mov	r1, r5
 800a9dc:	4638      	mov	r0, r7
 800a9de:	f7ff ff6f 	bl	800a8c0 <__ssputs_r>
 800a9e2:	3001      	adds	r0, #1
 800a9e4:	f000 80a9 	beq.w	800ab3a <_svfiprintf_r+0x1c6>
 800a9e8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a9ea:	445a      	add	r2, fp
 800a9ec:	9209      	str	r2, [sp, #36]	; 0x24
 800a9ee:	f89a 3000 	ldrb.w	r3, [sl]
 800a9f2:	2b00      	cmp	r3, #0
 800a9f4:	f000 80a1 	beq.w	800ab3a <_svfiprintf_r+0x1c6>
 800a9f8:	2300      	movs	r3, #0
 800a9fa:	f04f 32ff 	mov.w	r2, #4294967295
 800a9fe:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800aa02:	f10a 0a01 	add.w	sl, sl, #1
 800aa06:	9304      	str	r3, [sp, #16]
 800aa08:	9307      	str	r3, [sp, #28]
 800aa0a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800aa0e:	931a      	str	r3, [sp, #104]	; 0x68
 800aa10:	4654      	mov	r4, sl
 800aa12:	2205      	movs	r2, #5
 800aa14:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aa18:	4850      	ldr	r0, [pc, #320]	; (800ab5c <_svfiprintf_r+0x1e8>)
 800aa1a:	f7fe fc52 	bl	80092c2 <memchr>
 800aa1e:	9a04      	ldr	r2, [sp, #16]
 800aa20:	b9d8      	cbnz	r0, 800aa5a <_svfiprintf_r+0xe6>
 800aa22:	06d0      	lsls	r0, r2, #27
 800aa24:	bf44      	itt	mi
 800aa26:	2320      	movmi	r3, #32
 800aa28:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800aa2c:	0711      	lsls	r1, r2, #28
 800aa2e:	bf44      	itt	mi
 800aa30:	232b      	movmi	r3, #43	; 0x2b
 800aa32:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800aa36:	f89a 3000 	ldrb.w	r3, [sl]
 800aa3a:	2b2a      	cmp	r3, #42	; 0x2a
 800aa3c:	d015      	beq.n	800aa6a <_svfiprintf_r+0xf6>
 800aa3e:	4654      	mov	r4, sl
 800aa40:	2000      	movs	r0, #0
 800aa42:	f04f 0c0a 	mov.w	ip, #10
 800aa46:	9a07      	ldr	r2, [sp, #28]
 800aa48:	4621      	mov	r1, r4
 800aa4a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800aa4e:	3b30      	subs	r3, #48	; 0x30
 800aa50:	2b09      	cmp	r3, #9
 800aa52:	d94d      	bls.n	800aaf0 <_svfiprintf_r+0x17c>
 800aa54:	b1b0      	cbz	r0, 800aa84 <_svfiprintf_r+0x110>
 800aa56:	9207      	str	r2, [sp, #28]
 800aa58:	e014      	b.n	800aa84 <_svfiprintf_r+0x110>
 800aa5a:	eba0 0308 	sub.w	r3, r0, r8
 800aa5e:	fa09 f303 	lsl.w	r3, r9, r3
 800aa62:	4313      	orrs	r3, r2
 800aa64:	46a2      	mov	sl, r4
 800aa66:	9304      	str	r3, [sp, #16]
 800aa68:	e7d2      	b.n	800aa10 <_svfiprintf_r+0x9c>
 800aa6a:	9b03      	ldr	r3, [sp, #12]
 800aa6c:	1d19      	adds	r1, r3, #4
 800aa6e:	681b      	ldr	r3, [r3, #0]
 800aa70:	9103      	str	r1, [sp, #12]
 800aa72:	2b00      	cmp	r3, #0
 800aa74:	bfbb      	ittet	lt
 800aa76:	425b      	neglt	r3, r3
 800aa78:	f042 0202 	orrlt.w	r2, r2, #2
 800aa7c:	9307      	strge	r3, [sp, #28]
 800aa7e:	9307      	strlt	r3, [sp, #28]
 800aa80:	bfb8      	it	lt
 800aa82:	9204      	strlt	r2, [sp, #16]
 800aa84:	7823      	ldrb	r3, [r4, #0]
 800aa86:	2b2e      	cmp	r3, #46	; 0x2e
 800aa88:	d10c      	bne.n	800aaa4 <_svfiprintf_r+0x130>
 800aa8a:	7863      	ldrb	r3, [r4, #1]
 800aa8c:	2b2a      	cmp	r3, #42	; 0x2a
 800aa8e:	d134      	bne.n	800aafa <_svfiprintf_r+0x186>
 800aa90:	9b03      	ldr	r3, [sp, #12]
 800aa92:	3402      	adds	r4, #2
 800aa94:	1d1a      	adds	r2, r3, #4
 800aa96:	681b      	ldr	r3, [r3, #0]
 800aa98:	9203      	str	r2, [sp, #12]
 800aa9a:	2b00      	cmp	r3, #0
 800aa9c:	bfb8      	it	lt
 800aa9e:	f04f 33ff 	movlt.w	r3, #4294967295
 800aaa2:	9305      	str	r3, [sp, #20]
 800aaa4:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 800ab60 <_svfiprintf_r+0x1ec>
 800aaa8:	2203      	movs	r2, #3
 800aaaa:	4650      	mov	r0, sl
 800aaac:	7821      	ldrb	r1, [r4, #0]
 800aaae:	f7fe fc08 	bl	80092c2 <memchr>
 800aab2:	b138      	cbz	r0, 800aac4 <_svfiprintf_r+0x150>
 800aab4:	2240      	movs	r2, #64	; 0x40
 800aab6:	9b04      	ldr	r3, [sp, #16]
 800aab8:	eba0 000a 	sub.w	r0, r0, sl
 800aabc:	4082      	lsls	r2, r0
 800aabe:	4313      	orrs	r3, r2
 800aac0:	3401      	adds	r4, #1
 800aac2:	9304      	str	r3, [sp, #16]
 800aac4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aac8:	2206      	movs	r2, #6
 800aaca:	4826      	ldr	r0, [pc, #152]	; (800ab64 <_svfiprintf_r+0x1f0>)
 800aacc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800aad0:	f7fe fbf7 	bl	80092c2 <memchr>
 800aad4:	2800      	cmp	r0, #0
 800aad6:	d038      	beq.n	800ab4a <_svfiprintf_r+0x1d6>
 800aad8:	4b23      	ldr	r3, [pc, #140]	; (800ab68 <_svfiprintf_r+0x1f4>)
 800aada:	bb1b      	cbnz	r3, 800ab24 <_svfiprintf_r+0x1b0>
 800aadc:	9b03      	ldr	r3, [sp, #12]
 800aade:	3307      	adds	r3, #7
 800aae0:	f023 0307 	bic.w	r3, r3, #7
 800aae4:	3308      	adds	r3, #8
 800aae6:	9303      	str	r3, [sp, #12]
 800aae8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aaea:	4433      	add	r3, r6
 800aaec:	9309      	str	r3, [sp, #36]	; 0x24
 800aaee:	e768      	b.n	800a9c2 <_svfiprintf_r+0x4e>
 800aaf0:	460c      	mov	r4, r1
 800aaf2:	2001      	movs	r0, #1
 800aaf4:	fb0c 3202 	mla	r2, ip, r2, r3
 800aaf8:	e7a6      	b.n	800aa48 <_svfiprintf_r+0xd4>
 800aafa:	2300      	movs	r3, #0
 800aafc:	f04f 0c0a 	mov.w	ip, #10
 800ab00:	4619      	mov	r1, r3
 800ab02:	3401      	adds	r4, #1
 800ab04:	9305      	str	r3, [sp, #20]
 800ab06:	4620      	mov	r0, r4
 800ab08:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ab0c:	3a30      	subs	r2, #48	; 0x30
 800ab0e:	2a09      	cmp	r2, #9
 800ab10:	d903      	bls.n	800ab1a <_svfiprintf_r+0x1a6>
 800ab12:	2b00      	cmp	r3, #0
 800ab14:	d0c6      	beq.n	800aaa4 <_svfiprintf_r+0x130>
 800ab16:	9105      	str	r1, [sp, #20]
 800ab18:	e7c4      	b.n	800aaa4 <_svfiprintf_r+0x130>
 800ab1a:	4604      	mov	r4, r0
 800ab1c:	2301      	movs	r3, #1
 800ab1e:	fb0c 2101 	mla	r1, ip, r1, r2
 800ab22:	e7f0      	b.n	800ab06 <_svfiprintf_r+0x192>
 800ab24:	ab03      	add	r3, sp, #12
 800ab26:	9300      	str	r3, [sp, #0]
 800ab28:	462a      	mov	r2, r5
 800ab2a:	4638      	mov	r0, r7
 800ab2c:	4b0f      	ldr	r3, [pc, #60]	; (800ab6c <_svfiprintf_r+0x1f8>)
 800ab2e:	a904      	add	r1, sp, #16
 800ab30:	f7fd fd70 	bl	8008614 <_printf_float>
 800ab34:	1c42      	adds	r2, r0, #1
 800ab36:	4606      	mov	r6, r0
 800ab38:	d1d6      	bne.n	800aae8 <_svfiprintf_r+0x174>
 800ab3a:	89ab      	ldrh	r3, [r5, #12]
 800ab3c:	065b      	lsls	r3, r3, #25
 800ab3e:	f53f af2d 	bmi.w	800a99c <_svfiprintf_r+0x28>
 800ab42:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ab44:	b01d      	add	sp, #116	; 0x74
 800ab46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ab4a:	ab03      	add	r3, sp, #12
 800ab4c:	9300      	str	r3, [sp, #0]
 800ab4e:	462a      	mov	r2, r5
 800ab50:	4638      	mov	r0, r7
 800ab52:	4b06      	ldr	r3, [pc, #24]	; (800ab6c <_svfiprintf_r+0x1f8>)
 800ab54:	a904      	add	r1, sp, #16
 800ab56:	f7fd fffd 	bl	8008b54 <_printf_i>
 800ab5a:	e7eb      	b.n	800ab34 <_svfiprintf_r+0x1c0>
 800ab5c:	0800b67c 	.word	0x0800b67c
 800ab60:	0800b682 	.word	0x0800b682
 800ab64:	0800b686 	.word	0x0800b686
 800ab68:	08008615 	.word	0x08008615
 800ab6c:	0800a8c1 	.word	0x0800a8c1

0800ab70 <__sflush_r>:
 800ab70:	898a      	ldrh	r2, [r1, #12]
 800ab72:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ab74:	4605      	mov	r5, r0
 800ab76:	0710      	lsls	r0, r2, #28
 800ab78:	460c      	mov	r4, r1
 800ab7a:	d457      	bmi.n	800ac2c <__sflush_r+0xbc>
 800ab7c:	684b      	ldr	r3, [r1, #4]
 800ab7e:	2b00      	cmp	r3, #0
 800ab80:	dc04      	bgt.n	800ab8c <__sflush_r+0x1c>
 800ab82:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800ab84:	2b00      	cmp	r3, #0
 800ab86:	dc01      	bgt.n	800ab8c <__sflush_r+0x1c>
 800ab88:	2000      	movs	r0, #0
 800ab8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ab8c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ab8e:	2e00      	cmp	r6, #0
 800ab90:	d0fa      	beq.n	800ab88 <__sflush_r+0x18>
 800ab92:	2300      	movs	r3, #0
 800ab94:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800ab98:	682f      	ldr	r7, [r5, #0]
 800ab9a:	6a21      	ldr	r1, [r4, #32]
 800ab9c:	602b      	str	r3, [r5, #0]
 800ab9e:	d032      	beq.n	800ac06 <__sflush_r+0x96>
 800aba0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800aba2:	89a3      	ldrh	r3, [r4, #12]
 800aba4:	075a      	lsls	r2, r3, #29
 800aba6:	d505      	bpl.n	800abb4 <__sflush_r+0x44>
 800aba8:	6863      	ldr	r3, [r4, #4]
 800abaa:	1ac0      	subs	r0, r0, r3
 800abac:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800abae:	b10b      	cbz	r3, 800abb4 <__sflush_r+0x44>
 800abb0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800abb2:	1ac0      	subs	r0, r0, r3
 800abb4:	2300      	movs	r3, #0
 800abb6:	4602      	mov	r2, r0
 800abb8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800abba:	4628      	mov	r0, r5
 800abbc:	6a21      	ldr	r1, [r4, #32]
 800abbe:	47b0      	blx	r6
 800abc0:	1c43      	adds	r3, r0, #1
 800abc2:	89a3      	ldrh	r3, [r4, #12]
 800abc4:	d106      	bne.n	800abd4 <__sflush_r+0x64>
 800abc6:	6829      	ldr	r1, [r5, #0]
 800abc8:	291d      	cmp	r1, #29
 800abca:	d82b      	bhi.n	800ac24 <__sflush_r+0xb4>
 800abcc:	4a28      	ldr	r2, [pc, #160]	; (800ac70 <__sflush_r+0x100>)
 800abce:	410a      	asrs	r2, r1
 800abd0:	07d6      	lsls	r6, r2, #31
 800abd2:	d427      	bmi.n	800ac24 <__sflush_r+0xb4>
 800abd4:	2200      	movs	r2, #0
 800abd6:	6062      	str	r2, [r4, #4]
 800abd8:	6922      	ldr	r2, [r4, #16]
 800abda:	04d9      	lsls	r1, r3, #19
 800abdc:	6022      	str	r2, [r4, #0]
 800abde:	d504      	bpl.n	800abea <__sflush_r+0x7a>
 800abe0:	1c42      	adds	r2, r0, #1
 800abe2:	d101      	bne.n	800abe8 <__sflush_r+0x78>
 800abe4:	682b      	ldr	r3, [r5, #0]
 800abe6:	b903      	cbnz	r3, 800abea <__sflush_r+0x7a>
 800abe8:	6560      	str	r0, [r4, #84]	; 0x54
 800abea:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800abec:	602f      	str	r7, [r5, #0]
 800abee:	2900      	cmp	r1, #0
 800abf0:	d0ca      	beq.n	800ab88 <__sflush_r+0x18>
 800abf2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800abf6:	4299      	cmp	r1, r3
 800abf8:	d002      	beq.n	800ac00 <__sflush_r+0x90>
 800abfa:	4628      	mov	r0, r5
 800abfc:	f7ff f9ec 	bl	8009fd8 <_free_r>
 800ac00:	2000      	movs	r0, #0
 800ac02:	6360      	str	r0, [r4, #52]	; 0x34
 800ac04:	e7c1      	b.n	800ab8a <__sflush_r+0x1a>
 800ac06:	2301      	movs	r3, #1
 800ac08:	4628      	mov	r0, r5
 800ac0a:	47b0      	blx	r6
 800ac0c:	1c41      	adds	r1, r0, #1
 800ac0e:	d1c8      	bne.n	800aba2 <__sflush_r+0x32>
 800ac10:	682b      	ldr	r3, [r5, #0]
 800ac12:	2b00      	cmp	r3, #0
 800ac14:	d0c5      	beq.n	800aba2 <__sflush_r+0x32>
 800ac16:	2b1d      	cmp	r3, #29
 800ac18:	d001      	beq.n	800ac1e <__sflush_r+0xae>
 800ac1a:	2b16      	cmp	r3, #22
 800ac1c:	d101      	bne.n	800ac22 <__sflush_r+0xb2>
 800ac1e:	602f      	str	r7, [r5, #0]
 800ac20:	e7b2      	b.n	800ab88 <__sflush_r+0x18>
 800ac22:	89a3      	ldrh	r3, [r4, #12]
 800ac24:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ac28:	81a3      	strh	r3, [r4, #12]
 800ac2a:	e7ae      	b.n	800ab8a <__sflush_r+0x1a>
 800ac2c:	690f      	ldr	r7, [r1, #16]
 800ac2e:	2f00      	cmp	r7, #0
 800ac30:	d0aa      	beq.n	800ab88 <__sflush_r+0x18>
 800ac32:	0793      	lsls	r3, r2, #30
 800ac34:	bf18      	it	ne
 800ac36:	2300      	movne	r3, #0
 800ac38:	680e      	ldr	r6, [r1, #0]
 800ac3a:	bf08      	it	eq
 800ac3c:	694b      	ldreq	r3, [r1, #20]
 800ac3e:	1bf6      	subs	r6, r6, r7
 800ac40:	600f      	str	r7, [r1, #0]
 800ac42:	608b      	str	r3, [r1, #8]
 800ac44:	2e00      	cmp	r6, #0
 800ac46:	dd9f      	ble.n	800ab88 <__sflush_r+0x18>
 800ac48:	4633      	mov	r3, r6
 800ac4a:	463a      	mov	r2, r7
 800ac4c:	4628      	mov	r0, r5
 800ac4e:	6a21      	ldr	r1, [r4, #32]
 800ac50:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800ac54:	47e0      	blx	ip
 800ac56:	2800      	cmp	r0, #0
 800ac58:	dc06      	bgt.n	800ac68 <__sflush_r+0xf8>
 800ac5a:	89a3      	ldrh	r3, [r4, #12]
 800ac5c:	f04f 30ff 	mov.w	r0, #4294967295
 800ac60:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ac64:	81a3      	strh	r3, [r4, #12]
 800ac66:	e790      	b.n	800ab8a <__sflush_r+0x1a>
 800ac68:	4407      	add	r7, r0
 800ac6a:	1a36      	subs	r6, r6, r0
 800ac6c:	e7ea      	b.n	800ac44 <__sflush_r+0xd4>
 800ac6e:	bf00      	nop
 800ac70:	dfbffffe 	.word	0xdfbffffe

0800ac74 <_fflush_r>:
 800ac74:	b538      	push	{r3, r4, r5, lr}
 800ac76:	690b      	ldr	r3, [r1, #16]
 800ac78:	4605      	mov	r5, r0
 800ac7a:	460c      	mov	r4, r1
 800ac7c:	b913      	cbnz	r3, 800ac84 <_fflush_r+0x10>
 800ac7e:	2500      	movs	r5, #0
 800ac80:	4628      	mov	r0, r5
 800ac82:	bd38      	pop	{r3, r4, r5, pc}
 800ac84:	b118      	cbz	r0, 800ac8e <_fflush_r+0x1a>
 800ac86:	6a03      	ldr	r3, [r0, #32]
 800ac88:	b90b      	cbnz	r3, 800ac8e <_fflush_r+0x1a>
 800ac8a:	f7fe f911 	bl	8008eb0 <__sinit>
 800ac8e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ac92:	2b00      	cmp	r3, #0
 800ac94:	d0f3      	beq.n	800ac7e <_fflush_r+0xa>
 800ac96:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800ac98:	07d0      	lsls	r0, r2, #31
 800ac9a:	d404      	bmi.n	800aca6 <_fflush_r+0x32>
 800ac9c:	0599      	lsls	r1, r3, #22
 800ac9e:	d402      	bmi.n	800aca6 <_fflush_r+0x32>
 800aca0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800aca2:	f7fe fb0c 	bl	80092be <__retarget_lock_acquire_recursive>
 800aca6:	4628      	mov	r0, r5
 800aca8:	4621      	mov	r1, r4
 800acaa:	f7ff ff61 	bl	800ab70 <__sflush_r>
 800acae:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800acb0:	4605      	mov	r5, r0
 800acb2:	07da      	lsls	r2, r3, #31
 800acb4:	d4e4      	bmi.n	800ac80 <_fflush_r+0xc>
 800acb6:	89a3      	ldrh	r3, [r4, #12]
 800acb8:	059b      	lsls	r3, r3, #22
 800acba:	d4e1      	bmi.n	800ac80 <_fflush_r+0xc>
 800acbc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800acbe:	f7fe faff 	bl	80092c0 <__retarget_lock_release_recursive>
 800acc2:	e7dd      	b.n	800ac80 <_fflush_r+0xc>

0800acc4 <__swhatbuf_r>:
 800acc4:	b570      	push	{r4, r5, r6, lr}
 800acc6:	460c      	mov	r4, r1
 800acc8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800accc:	4615      	mov	r5, r2
 800acce:	2900      	cmp	r1, #0
 800acd0:	461e      	mov	r6, r3
 800acd2:	b096      	sub	sp, #88	; 0x58
 800acd4:	da0c      	bge.n	800acf0 <__swhatbuf_r+0x2c>
 800acd6:	89a3      	ldrh	r3, [r4, #12]
 800acd8:	2100      	movs	r1, #0
 800acda:	f013 0f80 	tst.w	r3, #128	; 0x80
 800acde:	bf0c      	ite	eq
 800ace0:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800ace4:	2340      	movne	r3, #64	; 0x40
 800ace6:	2000      	movs	r0, #0
 800ace8:	6031      	str	r1, [r6, #0]
 800acea:	602b      	str	r3, [r5, #0]
 800acec:	b016      	add	sp, #88	; 0x58
 800acee:	bd70      	pop	{r4, r5, r6, pc}
 800acf0:	466a      	mov	r2, sp
 800acf2:	f000 f863 	bl	800adbc <_fstat_r>
 800acf6:	2800      	cmp	r0, #0
 800acf8:	dbed      	blt.n	800acd6 <__swhatbuf_r+0x12>
 800acfa:	9901      	ldr	r1, [sp, #4]
 800acfc:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800ad00:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800ad04:	4259      	negs	r1, r3
 800ad06:	4159      	adcs	r1, r3
 800ad08:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ad0c:	e7eb      	b.n	800ace6 <__swhatbuf_r+0x22>

0800ad0e <__smakebuf_r>:
 800ad0e:	898b      	ldrh	r3, [r1, #12]
 800ad10:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ad12:	079d      	lsls	r5, r3, #30
 800ad14:	4606      	mov	r6, r0
 800ad16:	460c      	mov	r4, r1
 800ad18:	d507      	bpl.n	800ad2a <__smakebuf_r+0x1c>
 800ad1a:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800ad1e:	6023      	str	r3, [r4, #0]
 800ad20:	6123      	str	r3, [r4, #16]
 800ad22:	2301      	movs	r3, #1
 800ad24:	6163      	str	r3, [r4, #20]
 800ad26:	b002      	add	sp, #8
 800ad28:	bd70      	pop	{r4, r5, r6, pc}
 800ad2a:	466a      	mov	r2, sp
 800ad2c:	ab01      	add	r3, sp, #4
 800ad2e:	f7ff ffc9 	bl	800acc4 <__swhatbuf_r>
 800ad32:	9900      	ldr	r1, [sp, #0]
 800ad34:	4605      	mov	r5, r0
 800ad36:	4630      	mov	r0, r6
 800ad38:	f7ff f9be 	bl	800a0b8 <_malloc_r>
 800ad3c:	b948      	cbnz	r0, 800ad52 <__smakebuf_r+0x44>
 800ad3e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ad42:	059a      	lsls	r2, r3, #22
 800ad44:	d4ef      	bmi.n	800ad26 <__smakebuf_r+0x18>
 800ad46:	f023 0303 	bic.w	r3, r3, #3
 800ad4a:	f043 0302 	orr.w	r3, r3, #2
 800ad4e:	81a3      	strh	r3, [r4, #12]
 800ad50:	e7e3      	b.n	800ad1a <__smakebuf_r+0xc>
 800ad52:	89a3      	ldrh	r3, [r4, #12]
 800ad54:	6020      	str	r0, [r4, #0]
 800ad56:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ad5a:	81a3      	strh	r3, [r4, #12]
 800ad5c:	9b00      	ldr	r3, [sp, #0]
 800ad5e:	6120      	str	r0, [r4, #16]
 800ad60:	6163      	str	r3, [r4, #20]
 800ad62:	9b01      	ldr	r3, [sp, #4]
 800ad64:	b15b      	cbz	r3, 800ad7e <__smakebuf_r+0x70>
 800ad66:	4630      	mov	r0, r6
 800ad68:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ad6c:	f000 f838 	bl	800ade0 <_isatty_r>
 800ad70:	b128      	cbz	r0, 800ad7e <__smakebuf_r+0x70>
 800ad72:	89a3      	ldrh	r3, [r4, #12]
 800ad74:	f023 0303 	bic.w	r3, r3, #3
 800ad78:	f043 0301 	orr.w	r3, r3, #1
 800ad7c:	81a3      	strh	r3, [r4, #12]
 800ad7e:	89a3      	ldrh	r3, [r4, #12]
 800ad80:	431d      	orrs	r5, r3
 800ad82:	81a5      	strh	r5, [r4, #12]
 800ad84:	e7cf      	b.n	800ad26 <__smakebuf_r+0x18>

0800ad86 <memmove>:
 800ad86:	4288      	cmp	r0, r1
 800ad88:	b510      	push	{r4, lr}
 800ad8a:	eb01 0402 	add.w	r4, r1, r2
 800ad8e:	d902      	bls.n	800ad96 <memmove+0x10>
 800ad90:	4284      	cmp	r4, r0
 800ad92:	4623      	mov	r3, r4
 800ad94:	d807      	bhi.n	800ada6 <memmove+0x20>
 800ad96:	1e43      	subs	r3, r0, #1
 800ad98:	42a1      	cmp	r1, r4
 800ad9a:	d008      	beq.n	800adae <memmove+0x28>
 800ad9c:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ada0:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ada4:	e7f8      	b.n	800ad98 <memmove+0x12>
 800ada6:	4601      	mov	r1, r0
 800ada8:	4402      	add	r2, r0
 800adaa:	428a      	cmp	r2, r1
 800adac:	d100      	bne.n	800adb0 <memmove+0x2a>
 800adae:	bd10      	pop	{r4, pc}
 800adb0:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800adb4:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800adb8:	e7f7      	b.n	800adaa <memmove+0x24>
	...

0800adbc <_fstat_r>:
 800adbc:	b538      	push	{r3, r4, r5, lr}
 800adbe:	2300      	movs	r3, #0
 800adc0:	4d06      	ldr	r5, [pc, #24]	; (800addc <_fstat_r+0x20>)
 800adc2:	4604      	mov	r4, r0
 800adc4:	4608      	mov	r0, r1
 800adc6:	4611      	mov	r1, r2
 800adc8:	602b      	str	r3, [r5, #0]
 800adca:	f7f6 ffae 	bl	8001d2a <_fstat>
 800adce:	1c43      	adds	r3, r0, #1
 800add0:	d102      	bne.n	800add8 <_fstat_r+0x1c>
 800add2:	682b      	ldr	r3, [r5, #0]
 800add4:	b103      	cbz	r3, 800add8 <_fstat_r+0x1c>
 800add6:	6023      	str	r3, [r4, #0]
 800add8:	bd38      	pop	{r3, r4, r5, pc}
 800adda:	bf00      	nop
 800addc:	20001e34 	.word	0x20001e34

0800ade0 <_isatty_r>:
 800ade0:	b538      	push	{r3, r4, r5, lr}
 800ade2:	2300      	movs	r3, #0
 800ade4:	4d05      	ldr	r5, [pc, #20]	; (800adfc <_isatty_r+0x1c>)
 800ade6:	4604      	mov	r4, r0
 800ade8:	4608      	mov	r0, r1
 800adea:	602b      	str	r3, [r5, #0]
 800adec:	f7f6 ffac 	bl	8001d48 <_isatty>
 800adf0:	1c43      	adds	r3, r0, #1
 800adf2:	d102      	bne.n	800adfa <_isatty_r+0x1a>
 800adf4:	682b      	ldr	r3, [r5, #0]
 800adf6:	b103      	cbz	r3, 800adfa <_isatty_r+0x1a>
 800adf8:	6023      	str	r3, [r4, #0]
 800adfa:	bd38      	pop	{r3, r4, r5, pc}
 800adfc:	20001e34 	.word	0x20001e34

0800ae00 <_sbrk_r>:
 800ae00:	b538      	push	{r3, r4, r5, lr}
 800ae02:	2300      	movs	r3, #0
 800ae04:	4d05      	ldr	r5, [pc, #20]	; (800ae1c <_sbrk_r+0x1c>)
 800ae06:	4604      	mov	r4, r0
 800ae08:	4608      	mov	r0, r1
 800ae0a:	602b      	str	r3, [r5, #0]
 800ae0c:	f7f6 ffb2 	bl	8001d74 <_sbrk>
 800ae10:	1c43      	adds	r3, r0, #1
 800ae12:	d102      	bne.n	800ae1a <_sbrk_r+0x1a>
 800ae14:	682b      	ldr	r3, [r5, #0]
 800ae16:	b103      	cbz	r3, 800ae1a <_sbrk_r+0x1a>
 800ae18:	6023      	str	r3, [r4, #0]
 800ae1a:	bd38      	pop	{r3, r4, r5, pc}
 800ae1c:	20001e34 	.word	0x20001e34

0800ae20 <__assert_func>:
 800ae20:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ae22:	4614      	mov	r4, r2
 800ae24:	461a      	mov	r2, r3
 800ae26:	4b09      	ldr	r3, [pc, #36]	; (800ae4c <__assert_func+0x2c>)
 800ae28:	4605      	mov	r5, r0
 800ae2a:	681b      	ldr	r3, [r3, #0]
 800ae2c:	68d8      	ldr	r0, [r3, #12]
 800ae2e:	b14c      	cbz	r4, 800ae44 <__assert_func+0x24>
 800ae30:	4b07      	ldr	r3, [pc, #28]	; (800ae50 <__assert_func+0x30>)
 800ae32:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ae36:	9100      	str	r1, [sp, #0]
 800ae38:	462b      	mov	r3, r5
 800ae3a:	4906      	ldr	r1, [pc, #24]	; (800ae54 <__assert_func+0x34>)
 800ae3c:	f000 f870 	bl	800af20 <fiprintf>
 800ae40:	f000 f880 	bl	800af44 <abort>
 800ae44:	4b04      	ldr	r3, [pc, #16]	; (800ae58 <__assert_func+0x38>)
 800ae46:	461c      	mov	r4, r3
 800ae48:	e7f3      	b.n	800ae32 <__assert_func+0x12>
 800ae4a:	bf00      	nop
 800ae4c:	20000078 	.word	0x20000078
 800ae50:	0800b697 	.word	0x0800b697
 800ae54:	0800b6a4 	.word	0x0800b6a4
 800ae58:	0800b6d2 	.word	0x0800b6d2

0800ae5c <_calloc_r>:
 800ae5c:	b570      	push	{r4, r5, r6, lr}
 800ae5e:	fba1 5402 	umull	r5, r4, r1, r2
 800ae62:	b934      	cbnz	r4, 800ae72 <_calloc_r+0x16>
 800ae64:	4629      	mov	r1, r5
 800ae66:	f7ff f927 	bl	800a0b8 <_malloc_r>
 800ae6a:	4606      	mov	r6, r0
 800ae6c:	b928      	cbnz	r0, 800ae7a <_calloc_r+0x1e>
 800ae6e:	4630      	mov	r0, r6
 800ae70:	bd70      	pop	{r4, r5, r6, pc}
 800ae72:	220c      	movs	r2, #12
 800ae74:	2600      	movs	r6, #0
 800ae76:	6002      	str	r2, [r0, #0]
 800ae78:	e7f9      	b.n	800ae6e <_calloc_r+0x12>
 800ae7a:	462a      	mov	r2, r5
 800ae7c:	4621      	mov	r1, r4
 800ae7e:	f7fe f9a1 	bl	80091c4 <memset>
 800ae82:	e7f4      	b.n	800ae6e <_calloc_r+0x12>

0800ae84 <__ascii_mbtowc>:
 800ae84:	b082      	sub	sp, #8
 800ae86:	b901      	cbnz	r1, 800ae8a <__ascii_mbtowc+0x6>
 800ae88:	a901      	add	r1, sp, #4
 800ae8a:	b142      	cbz	r2, 800ae9e <__ascii_mbtowc+0x1a>
 800ae8c:	b14b      	cbz	r3, 800aea2 <__ascii_mbtowc+0x1e>
 800ae8e:	7813      	ldrb	r3, [r2, #0]
 800ae90:	600b      	str	r3, [r1, #0]
 800ae92:	7812      	ldrb	r2, [r2, #0]
 800ae94:	1e10      	subs	r0, r2, #0
 800ae96:	bf18      	it	ne
 800ae98:	2001      	movne	r0, #1
 800ae9a:	b002      	add	sp, #8
 800ae9c:	4770      	bx	lr
 800ae9e:	4610      	mov	r0, r2
 800aea0:	e7fb      	b.n	800ae9a <__ascii_mbtowc+0x16>
 800aea2:	f06f 0001 	mvn.w	r0, #1
 800aea6:	e7f8      	b.n	800ae9a <__ascii_mbtowc+0x16>

0800aea8 <_realloc_r>:
 800aea8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aeac:	4680      	mov	r8, r0
 800aeae:	4614      	mov	r4, r2
 800aeb0:	460e      	mov	r6, r1
 800aeb2:	b921      	cbnz	r1, 800aebe <_realloc_r+0x16>
 800aeb4:	4611      	mov	r1, r2
 800aeb6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800aeba:	f7ff b8fd 	b.w	800a0b8 <_malloc_r>
 800aebe:	b92a      	cbnz	r2, 800aecc <_realloc_r+0x24>
 800aec0:	f7ff f88a 	bl	8009fd8 <_free_r>
 800aec4:	4625      	mov	r5, r4
 800aec6:	4628      	mov	r0, r5
 800aec8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aecc:	f000 f841 	bl	800af52 <_malloc_usable_size_r>
 800aed0:	4284      	cmp	r4, r0
 800aed2:	4607      	mov	r7, r0
 800aed4:	d802      	bhi.n	800aedc <_realloc_r+0x34>
 800aed6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800aeda:	d812      	bhi.n	800af02 <_realloc_r+0x5a>
 800aedc:	4621      	mov	r1, r4
 800aede:	4640      	mov	r0, r8
 800aee0:	f7ff f8ea 	bl	800a0b8 <_malloc_r>
 800aee4:	4605      	mov	r5, r0
 800aee6:	2800      	cmp	r0, #0
 800aee8:	d0ed      	beq.n	800aec6 <_realloc_r+0x1e>
 800aeea:	42bc      	cmp	r4, r7
 800aeec:	4622      	mov	r2, r4
 800aeee:	4631      	mov	r1, r6
 800aef0:	bf28      	it	cs
 800aef2:	463a      	movcs	r2, r7
 800aef4:	f7fe f9f3 	bl	80092de <memcpy>
 800aef8:	4631      	mov	r1, r6
 800aefa:	4640      	mov	r0, r8
 800aefc:	f7ff f86c 	bl	8009fd8 <_free_r>
 800af00:	e7e1      	b.n	800aec6 <_realloc_r+0x1e>
 800af02:	4635      	mov	r5, r6
 800af04:	e7df      	b.n	800aec6 <_realloc_r+0x1e>

0800af06 <__ascii_wctomb>:
 800af06:	4603      	mov	r3, r0
 800af08:	4608      	mov	r0, r1
 800af0a:	b141      	cbz	r1, 800af1e <__ascii_wctomb+0x18>
 800af0c:	2aff      	cmp	r2, #255	; 0xff
 800af0e:	d904      	bls.n	800af1a <__ascii_wctomb+0x14>
 800af10:	228a      	movs	r2, #138	; 0x8a
 800af12:	f04f 30ff 	mov.w	r0, #4294967295
 800af16:	601a      	str	r2, [r3, #0]
 800af18:	4770      	bx	lr
 800af1a:	2001      	movs	r0, #1
 800af1c:	700a      	strb	r2, [r1, #0]
 800af1e:	4770      	bx	lr

0800af20 <fiprintf>:
 800af20:	b40e      	push	{r1, r2, r3}
 800af22:	b503      	push	{r0, r1, lr}
 800af24:	4601      	mov	r1, r0
 800af26:	ab03      	add	r3, sp, #12
 800af28:	4805      	ldr	r0, [pc, #20]	; (800af40 <fiprintf+0x20>)
 800af2a:	f853 2b04 	ldr.w	r2, [r3], #4
 800af2e:	6800      	ldr	r0, [r0, #0]
 800af30:	9301      	str	r3, [sp, #4]
 800af32:	f000 f83d 	bl	800afb0 <_vfiprintf_r>
 800af36:	b002      	add	sp, #8
 800af38:	f85d eb04 	ldr.w	lr, [sp], #4
 800af3c:	b003      	add	sp, #12
 800af3e:	4770      	bx	lr
 800af40:	20000078 	.word	0x20000078

0800af44 <abort>:
 800af44:	2006      	movs	r0, #6
 800af46:	b508      	push	{r3, lr}
 800af48:	f000 f974 	bl	800b234 <raise>
 800af4c:	2001      	movs	r0, #1
 800af4e:	f7f6 fe9e 	bl	8001c8e <_exit>

0800af52 <_malloc_usable_size_r>:
 800af52:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800af56:	1f18      	subs	r0, r3, #4
 800af58:	2b00      	cmp	r3, #0
 800af5a:	bfbc      	itt	lt
 800af5c:	580b      	ldrlt	r3, [r1, r0]
 800af5e:	18c0      	addlt	r0, r0, r3
 800af60:	4770      	bx	lr

0800af62 <__sfputc_r>:
 800af62:	6893      	ldr	r3, [r2, #8]
 800af64:	b410      	push	{r4}
 800af66:	3b01      	subs	r3, #1
 800af68:	2b00      	cmp	r3, #0
 800af6a:	6093      	str	r3, [r2, #8]
 800af6c:	da07      	bge.n	800af7e <__sfputc_r+0x1c>
 800af6e:	6994      	ldr	r4, [r2, #24]
 800af70:	42a3      	cmp	r3, r4
 800af72:	db01      	blt.n	800af78 <__sfputc_r+0x16>
 800af74:	290a      	cmp	r1, #10
 800af76:	d102      	bne.n	800af7e <__sfputc_r+0x1c>
 800af78:	bc10      	pop	{r4}
 800af7a:	f7fe b88e 	b.w	800909a <__swbuf_r>
 800af7e:	6813      	ldr	r3, [r2, #0]
 800af80:	1c58      	adds	r0, r3, #1
 800af82:	6010      	str	r0, [r2, #0]
 800af84:	7019      	strb	r1, [r3, #0]
 800af86:	4608      	mov	r0, r1
 800af88:	bc10      	pop	{r4}
 800af8a:	4770      	bx	lr

0800af8c <__sfputs_r>:
 800af8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800af8e:	4606      	mov	r6, r0
 800af90:	460f      	mov	r7, r1
 800af92:	4614      	mov	r4, r2
 800af94:	18d5      	adds	r5, r2, r3
 800af96:	42ac      	cmp	r4, r5
 800af98:	d101      	bne.n	800af9e <__sfputs_r+0x12>
 800af9a:	2000      	movs	r0, #0
 800af9c:	e007      	b.n	800afae <__sfputs_r+0x22>
 800af9e:	463a      	mov	r2, r7
 800afa0:	4630      	mov	r0, r6
 800afa2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800afa6:	f7ff ffdc 	bl	800af62 <__sfputc_r>
 800afaa:	1c43      	adds	r3, r0, #1
 800afac:	d1f3      	bne.n	800af96 <__sfputs_r+0xa>
 800afae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800afb0 <_vfiprintf_r>:
 800afb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800afb4:	460d      	mov	r5, r1
 800afb6:	4614      	mov	r4, r2
 800afb8:	4698      	mov	r8, r3
 800afba:	4606      	mov	r6, r0
 800afbc:	b09d      	sub	sp, #116	; 0x74
 800afbe:	b118      	cbz	r0, 800afc8 <_vfiprintf_r+0x18>
 800afc0:	6a03      	ldr	r3, [r0, #32]
 800afc2:	b90b      	cbnz	r3, 800afc8 <_vfiprintf_r+0x18>
 800afc4:	f7fd ff74 	bl	8008eb0 <__sinit>
 800afc8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800afca:	07d9      	lsls	r1, r3, #31
 800afcc:	d405      	bmi.n	800afda <_vfiprintf_r+0x2a>
 800afce:	89ab      	ldrh	r3, [r5, #12]
 800afd0:	059a      	lsls	r2, r3, #22
 800afd2:	d402      	bmi.n	800afda <_vfiprintf_r+0x2a>
 800afd4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800afd6:	f7fe f972 	bl	80092be <__retarget_lock_acquire_recursive>
 800afda:	89ab      	ldrh	r3, [r5, #12]
 800afdc:	071b      	lsls	r3, r3, #28
 800afde:	d501      	bpl.n	800afe4 <_vfiprintf_r+0x34>
 800afe0:	692b      	ldr	r3, [r5, #16]
 800afe2:	b99b      	cbnz	r3, 800b00c <_vfiprintf_r+0x5c>
 800afe4:	4629      	mov	r1, r5
 800afe6:	4630      	mov	r0, r6
 800afe8:	f7fe f894 	bl	8009114 <__swsetup_r>
 800afec:	b170      	cbz	r0, 800b00c <_vfiprintf_r+0x5c>
 800afee:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800aff0:	07dc      	lsls	r4, r3, #31
 800aff2:	d504      	bpl.n	800affe <_vfiprintf_r+0x4e>
 800aff4:	f04f 30ff 	mov.w	r0, #4294967295
 800aff8:	b01d      	add	sp, #116	; 0x74
 800affa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800affe:	89ab      	ldrh	r3, [r5, #12]
 800b000:	0598      	lsls	r0, r3, #22
 800b002:	d4f7      	bmi.n	800aff4 <_vfiprintf_r+0x44>
 800b004:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b006:	f7fe f95b 	bl	80092c0 <__retarget_lock_release_recursive>
 800b00a:	e7f3      	b.n	800aff4 <_vfiprintf_r+0x44>
 800b00c:	2300      	movs	r3, #0
 800b00e:	9309      	str	r3, [sp, #36]	; 0x24
 800b010:	2320      	movs	r3, #32
 800b012:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b016:	2330      	movs	r3, #48	; 0x30
 800b018:	f04f 0901 	mov.w	r9, #1
 800b01c:	f8cd 800c 	str.w	r8, [sp, #12]
 800b020:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 800b1d0 <_vfiprintf_r+0x220>
 800b024:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b028:	4623      	mov	r3, r4
 800b02a:	469a      	mov	sl, r3
 800b02c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b030:	b10a      	cbz	r2, 800b036 <_vfiprintf_r+0x86>
 800b032:	2a25      	cmp	r2, #37	; 0x25
 800b034:	d1f9      	bne.n	800b02a <_vfiprintf_r+0x7a>
 800b036:	ebba 0b04 	subs.w	fp, sl, r4
 800b03a:	d00b      	beq.n	800b054 <_vfiprintf_r+0xa4>
 800b03c:	465b      	mov	r3, fp
 800b03e:	4622      	mov	r2, r4
 800b040:	4629      	mov	r1, r5
 800b042:	4630      	mov	r0, r6
 800b044:	f7ff ffa2 	bl	800af8c <__sfputs_r>
 800b048:	3001      	adds	r0, #1
 800b04a:	f000 80a9 	beq.w	800b1a0 <_vfiprintf_r+0x1f0>
 800b04e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b050:	445a      	add	r2, fp
 800b052:	9209      	str	r2, [sp, #36]	; 0x24
 800b054:	f89a 3000 	ldrb.w	r3, [sl]
 800b058:	2b00      	cmp	r3, #0
 800b05a:	f000 80a1 	beq.w	800b1a0 <_vfiprintf_r+0x1f0>
 800b05e:	2300      	movs	r3, #0
 800b060:	f04f 32ff 	mov.w	r2, #4294967295
 800b064:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b068:	f10a 0a01 	add.w	sl, sl, #1
 800b06c:	9304      	str	r3, [sp, #16]
 800b06e:	9307      	str	r3, [sp, #28]
 800b070:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b074:	931a      	str	r3, [sp, #104]	; 0x68
 800b076:	4654      	mov	r4, sl
 800b078:	2205      	movs	r2, #5
 800b07a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b07e:	4854      	ldr	r0, [pc, #336]	; (800b1d0 <_vfiprintf_r+0x220>)
 800b080:	f7fe f91f 	bl	80092c2 <memchr>
 800b084:	9a04      	ldr	r2, [sp, #16]
 800b086:	b9d8      	cbnz	r0, 800b0c0 <_vfiprintf_r+0x110>
 800b088:	06d1      	lsls	r1, r2, #27
 800b08a:	bf44      	itt	mi
 800b08c:	2320      	movmi	r3, #32
 800b08e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b092:	0713      	lsls	r3, r2, #28
 800b094:	bf44      	itt	mi
 800b096:	232b      	movmi	r3, #43	; 0x2b
 800b098:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b09c:	f89a 3000 	ldrb.w	r3, [sl]
 800b0a0:	2b2a      	cmp	r3, #42	; 0x2a
 800b0a2:	d015      	beq.n	800b0d0 <_vfiprintf_r+0x120>
 800b0a4:	4654      	mov	r4, sl
 800b0a6:	2000      	movs	r0, #0
 800b0a8:	f04f 0c0a 	mov.w	ip, #10
 800b0ac:	9a07      	ldr	r2, [sp, #28]
 800b0ae:	4621      	mov	r1, r4
 800b0b0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b0b4:	3b30      	subs	r3, #48	; 0x30
 800b0b6:	2b09      	cmp	r3, #9
 800b0b8:	d94d      	bls.n	800b156 <_vfiprintf_r+0x1a6>
 800b0ba:	b1b0      	cbz	r0, 800b0ea <_vfiprintf_r+0x13a>
 800b0bc:	9207      	str	r2, [sp, #28]
 800b0be:	e014      	b.n	800b0ea <_vfiprintf_r+0x13a>
 800b0c0:	eba0 0308 	sub.w	r3, r0, r8
 800b0c4:	fa09 f303 	lsl.w	r3, r9, r3
 800b0c8:	4313      	orrs	r3, r2
 800b0ca:	46a2      	mov	sl, r4
 800b0cc:	9304      	str	r3, [sp, #16]
 800b0ce:	e7d2      	b.n	800b076 <_vfiprintf_r+0xc6>
 800b0d0:	9b03      	ldr	r3, [sp, #12]
 800b0d2:	1d19      	adds	r1, r3, #4
 800b0d4:	681b      	ldr	r3, [r3, #0]
 800b0d6:	9103      	str	r1, [sp, #12]
 800b0d8:	2b00      	cmp	r3, #0
 800b0da:	bfbb      	ittet	lt
 800b0dc:	425b      	neglt	r3, r3
 800b0de:	f042 0202 	orrlt.w	r2, r2, #2
 800b0e2:	9307      	strge	r3, [sp, #28]
 800b0e4:	9307      	strlt	r3, [sp, #28]
 800b0e6:	bfb8      	it	lt
 800b0e8:	9204      	strlt	r2, [sp, #16]
 800b0ea:	7823      	ldrb	r3, [r4, #0]
 800b0ec:	2b2e      	cmp	r3, #46	; 0x2e
 800b0ee:	d10c      	bne.n	800b10a <_vfiprintf_r+0x15a>
 800b0f0:	7863      	ldrb	r3, [r4, #1]
 800b0f2:	2b2a      	cmp	r3, #42	; 0x2a
 800b0f4:	d134      	bne.n	800b160 <_vfiprintf_r+0x1b0>
 800b0f6:	9b03      	ldr	r3, [sp, #12]
 800b0f8:	3402      	adds	r4, #2
 800b0fa:	1d1a      	adds	r2, r3, #4
 800b0fc:	681b      	ldr	r3, [r3, #0]
 800b0fe:	9203      	str	r2, [sp, #12]
 800b100:	2b00      	cmp	r3, #0
 800b102:	bfb8      	it	lt
 800b104:	f04f 33ff 	movlt.w	r3, #4294967295
 800b108:	9305      	str	r3, [sp, #20]
 800b10a:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800b1d4 <_vfiprintf_r+0x224>
 800b10e:	2203      	movs	r2, #3
 800b110:	4650      	mov	r0, sl
 800b112:	7821      	ldrb	r1, [r4, #0]
 800b114:	f7fe f8d5 	bl	80092c2 <memchr>
 800b118:	b138      	cbz	r0, 800b12a <_vfiprintf_r+0x17a>
 800b11a:	2240      	movs	r2, #64	; 0x40
 800b11c:	9b04      	ldr	r3, [sp, #16]
 800b11e:	eba0 000a 	sub.w	r0, r0, sl
 800b122:	4082      	lsls	r2, r0
 800b124:	4313      	orrs	r3, r2
 800b126:	3401      	adds	r4, #1
 800b128:	9304      	str	r3, [sp, #16]
 800b12a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b12e:	2206      	movs	r2, #6
 800b130:	4829      	ldr	r0, [pc, #164]	; (800b1d8 <_vfiprintf_r+0x228>)
 800b132:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b136:	f7fe f8c4 	bl	80092c2 <memchr>
 800b13a:	2800      	cmp	r0, #0
 800b13c:	d03f      	beq.n	800b1be <_vfiprintf_r+0x20e>
 800b13e:	4b27      	ldr	r3, [pc, #156]	; (800b1dc <_vfiprintf_r+0x22c>)
 800b140:	bb1b      	cbnz	r3, 800b18a <_vfiprintf_r+0x1da>
 800b142:	9b03      	ldr	r3, [sp, #12]
 800b144:	3307      	adds	r3, #7
 800b146:	f023 0307 	bic.w	r3, r3, #7
 800b14a:	3308      	adds	r3, #8
 800b14c:	9303      	str	r3, [sp, #12]
 800b14e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b150:	443b      	add	r3, r7
 800b152:	9309      	str	r3, [sp, #36]	; 0x24
 800b154:	e768      	b.n	800b028 <_vfiprintf_r+0x78>
 800b156:	460c      	mov	r4, r1
 800b158:	2001      	movs	r0, #1
 800b15a:	fb0c 3202 	mla	r2, ip, r2, r3
 800b15e:	e7a6      	b.n	800b0ae <_vfiprintf_r+0xfe>
 800b160:	2300      	movs	r3, #0
 800b162:	f04f 0c0a 	mov.w	ip, #10
 800b166:	4619      	mov	r1, r3
 800b168:	3401      	adds	r4, #1
 800b16a:	9305      	str	r3, [sp, #20]
 800b16c:	4620      	mov	r0, r4
 800b16e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b172:	3a30      	subs	r2, #48	; 0x30
 800b174:	2a09      	cmp	r2, #9
 800b176:	d903      	bls.n	800b180 <_vfiprintf_r+0x1d0>
 800b178:	2b00      	cmp	r3, #0
 800b17a:	d0c6      	beq.n	800b10a <_vfiprintf_r+0x15a>
 800b17c:	9105      	str	r1, [sp, #20]
 800b17e:	e7c4      	b.n	800b10a <_vfiprintf_r+0x15a>
 800b180:	4604      	mov	r4, r0
 800b182:	2301      	movs	r3, #1
 800b184:	fb0c 2101 	mla	r1, ip, r1, r2
 800b188:	e7f0      	b.n	800b16c <_vfiprintf_r+0x1bc>
 800b18a:	ab03      	add	r3, sp, #12
 800b18c:	9300      	str	r3, [sp, #0]
 800b18e:	462a      	mov	r2, r5
 800b190:	4630      	mov	r0, r6
 800b192:	4b13      	ldr	r3, [pc, #76]	; (800b1e0 <_vfiprintf_r+0x230>)
 800b194:	a904      	add	r1, sp, #16
 800b196:	f7fd fa3d 	bl	8008614 <_printf_float>
 800b19a:	4607      	mov	r7, r0
 800b19c:	1c78      	adds	r0, r7, #1
 800b19e:	d1d6      	bne.n	800b14e <_vfiprintf_r+0x19e>
 800b1a0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b1a2:	07d9      	lsls	r1, r3, #31
 800b1a4:	d405      	bmi.n	800b1b2 <_vfiprintf_r+0x202>
 800b1a6:	89ab      	ldrh	r3, [r5, #12]
 800b1a8:	059a      	lsls	r2, r3, #22
 800b1aa:	d402      	bmi.n	800b1b2 <_vfiprintf_r+0x202>
 800b1ac:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b1ae:	f7fe f887 	bl	80092c0 <__retarget_lock_release_recursive>
 800b1b2:	89ab      	ldrh	r3, [r5, #12]
 800b1b4:	065b      	lsls	r3, r3, #25
 800b1b6:	f53f af1d 	bmi.w	800aff4 <_vfiprintf_r+0x44>
 800b1ba:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b1bc:	e71c      	b.n	800aff8 <_vfiprintf_r+0x48>
 800b1be:	ab03      	add	r3, sp, #12
 800b1c0:	9300      	str	r3, [sp, #0]
 800b1c2:	462a      	mov	r2, r5
 800b1c4:	4630      	mov	r0, r6
 800b1c6:	4b06      	ldr	r3, [pc, #24]	; (800b1e0 <_vfiprintf_r+0x230>)
 800b1c8:	a904      	add	r1, sp, #16
 800b1ca:	f7fd fcc3 	bl	8008b54 <_printf_i>
 800b1ce:	e7e4      	b.n	800b19a <_vfiprintf_r+0x1ea>
 800b1d0:	0800b67c 	.word	0x0800b67c
 800b1d4:	0800b682 	.word	0x0800b682
 800b1d8:	0800b686 	.word	0x0800b686
 800b1dc:	08008615 	.word	0x08008615
 800b1e0:	0800af8d 	.word	0x0800af8d

0800b1e4 <_raise_r>:
 800b1e4:	291f      	cmp	r1, #31
 800b1e6:	b538      	push	{r3, r4, r5, lr}
 800b1e8:	4604      	mov	r4, r0
 800b1ea:	460d      	mov	r5, r1
 800b1ec:	d904      	bls.n	800b1f8 <_raise_r+0x14>
 800b1ee:	2316      	movs	r3, #22
 800b1f0:	6003      	str	r3, [r0, #0]
 800b1f2:	f04f 30ff 	mov.w	r0, #4294967295
 800b1f6:	bd38      	pop	{r3, r4, r5, pc}
 800b1f8:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800b1fa:	b112      	cbz	r2, 800b202 <_raise_r+0x1e>
 800b1fc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b200:	b94b      	cbnz	r3, 800b216 <_raise_r+0x32>
 800b202:	4620      	mov	r0, r4
 800b204:	f000 f830 	bl	800b268 <_getpid_r>
 800b208:	462a      	mov	r2, r5
 800b20a:	4601      	mov	r1, r0
 800b20c:	4620      	mov	r0, r4
 800b20e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b212:	f000 b817 	b.w	800b244 <_kill_r>
 800b216:	2b01      	cmp	r3, #1
 800b218:	d00a      	beq.n	800b230 <_raise_r+0x4c>
 800b21a:	1c59      	adds	r1, r3, #1
 800b21c:	d103      	bne.n	800b226 <_raise_r+0x42>
 800b21e:	2316      	movs	r3, #22
 800b220:	6003      	str	r3, [r0, #0]
 800b222:	2001      	movs	r0, #1
 800b224:	e7e7      	b.n	800b1f6 <_raise_r+0x12>
 800b226:	2400      	movs	r4, #0
 800b228:	4628      	mov	r0, r5
 800b22a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800b22e:	4798      	blx	r3
 800b230:	2000      	movs	r0, #0
 800b232:	e7e0      	b.n	800b1f6 <_raise_r+0x12>

0800b234 <raise>:
 800b234:	4b02      	ldr	r3, [pc, #8]	; (800b240 <raise+0xc>)
 800b236:	4601      	mov	r1, r0
 800b238:	6818      	ldr	r0, [r3, #0]
 800b23a:	f7ff bfd3 	b.w	800b1e4 <_raise_r>
 800b23e:	bf00      	nop
 800b240:	20000078 	.word	0x20000078

0800b244 <_kill_r>:
 800b244:	b538      	push	{r3, r4, r5, lr}
 800b246:	2300      	movs	r3, #0
 800b248:	4d06      	ldr	r5, [pc, #24]	; (800b264 <_kill_r+0x20>)
 800b24a:	4604      	mov	r4, r0
 800b24c:	4608      	mov	r0, r1
 800b24e:	4611      	mov	r1, r2
 800b250:	602b      	str	r3, [r5, #0]
 800b252:	f7f6 fd0c 	bl	8001c6e <_kill>
 800b256:	1c43      	adds	r3, r0, #1
 800b258:	d102      	bne.n	800b260 <_kill_r+0x1c>
 800b25a:	682b      	ldr	r3, [r5, #0]
 800b25c:	b103      	cbz	r3, 800b260 <_kill_r+0x1c>
 800b25e:	6023      	str	r3, [r4, #0]
 800b260:	bd38      	pop	{r3, r4, r5, pc}
 800b262:	bf00      	nop
 800b264:	20001e34 	.word	0x20001e34

0800b268 <_getpid_r>:
 800b268:	f7f6 bcfa 	b.w	8001c60 <_getpid>

0800b26c <_init>:
 800b26c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b26e:	bf00      	nop
 800b270:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b272:	bc08      	pop	{r3}
 800b274:	469e      	mov	lr, r3
 800b276:	4770      	bx	lr

0800b278 <_fini>:
 800b278:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b27a:	bf00      	nop
 800b27c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b27e:	bc08      	pop	{r3}
 800b280:	469e      	mov	lr, r3
 800b282:	4770      	bx	lr
