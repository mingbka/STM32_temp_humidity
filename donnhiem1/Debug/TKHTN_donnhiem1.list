
TKHTN_donnhiem1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000075a0  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000494  080076b0  080076b0  000176b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007b44  08007b44  000201e8  2**0
                  CONTENTS
  4 .ARM          00000000  08007b44  08007b44  000201e8  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007b44  08007b44  000201e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007b44  08007b44  00017b44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007b48  08007b48  00017b48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001e8  20000000  08007b4c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002a8  200001e8  08007d34  000201e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000490  08007d34  00020490  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e8  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020211  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000af7b  00000000  00000000  00020254  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001ce5  00000000  00000000  0002b1cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000aa0  00000000  00000000  0002ceb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000845  00000000  00000000  0002d958  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00018203  00000000  00000000  0002e19d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000d93d  00000000  00000000  000463a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00086a43  00000000  00000000  00053cdd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003d78  00000000  00000000  000da720  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000083  00000000  00000000  000de498  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001e8 	.word	0x200001e8
 800012c:	00000000 	.word	0x00000000
 8000130:	08007698 	.word	0x08007698

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001ec 	.word	0x200001ec
 800014c:	08007698 	.word	0x08007698

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_frsub>:
 8000a88:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000a8c:	e002      	b.n	8000a94 <__addsf3>
 8000a8e:	bf00      	nop

08000a90 <__aeabi_fsub>:
 8000a90:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000a94 <__addsf3>:
 8000a94:	0042      	lsls	r2, r0, #1
 8000a96:	bf1f      	itttt	ne
 8000a98:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000a9c:	ea92 0f03 	teqne	r2, r3
 8000aa0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000aa4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000aa8:	d06a      	beq.n	8000b80 <__addsf3+0xec>
 8000aaa:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000aae:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000ab2:	bfc1      	itttt	gt
 8000ab4:	18d2      	addgt	r2, r2, r3
 8000ab6:	4041      	eorgt	r1, r0
 8000ab8:	4048      	eorgt	r0, r1
 8000aba:	4041      	eorgt	r1, r0
 8000abc:	bfb8      	it	lt
 8000abe:	425b      	neglt	r3, r3
 8000ac0:	2b19      	cmp	r3, #25
 8000ac2:	bf88      	it	hi
 8000ac4:	4770      	bxhi	lr
 8000ac6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000aca:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ace:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000ad2:	bf18      	it	ne
 8000ad4:	4240      	negne	r0, r0
 8000ad6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ada:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000ade:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000ae2:	bf18      	it	ne
 8000ae4:	4249      	negne	r1, r1
 8000ae6:	ea92 0f03 	teq	r2, r3
 8000aea:	d03f      	beq.n	8000b6c <__addsf3+0xd8>
 8000aec:	f1a2 0201 	sub.w	r2, r2, #1
 8000af0:	fa41 fc03 	asr.w	ip, r1, r3
 8000af4:	eb10 000c 	adds.w	r0, r0, ip
 8000af8:	f1c3 0320 	rsb	r3, r3, #32
 8000afc:	fa01 f103 	lsl.w	r1, r1, r3
 8000b00:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b04:	d502      	bpl.n	8000b0c <__addsf3+0x78>
 8000b06:	4249      	negs	r1, r1
 8000b08:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b0c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000b10:	d313      	bcc.n	8000b3a <__addsf3+0xa6>
 8000b12:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b16:	d306      	bcc.n	8000b26 <__addsf3+0x92>
 8000b18:	0840      	lsrs	r0, r0, #1
 8000b1a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b1e:	f102 0201 	add.w	r2, r2, #1
 8000b22:	2afe      	cmp	r2, #254	; 0xfe
 8000b24:	d251      	bcs.n	8000bca <__addsf3+0x136>
 8000b26:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000b2a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b2e:	bf08      	it	eq
 8000b30:	f020 0001 	biceq.w	r0, r0, #1
 8000b34:	ea40 0003 	orr.w	r0, r0, r3
 8000b38:	4770      	bx	lr
 8000b3a:	0049      	lsls	r1, r1, #1
 8000b3c:	eb40 0000 	adc.w	r0, r0, r0
 8000b40:	3a01      	subs	r2, #1
 8000b42:	bf28      	it	cs
 8000b44:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000b48:	d2ed      	bcs.n	8000b26 <__addsf3+0x92>
 8000b4a:	fab0 fc80 	clz	ip, r0
 8000b4e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b52:	ebb2 020c 	subs.w	r2, r2, ip
 8000b56:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b5a:	bfaa      	itet	ge
 8000b5c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000b60:	4252      	neglt	r2, r2
 8000b62:	4318      	orrge	r0, r3
 8000b64:	bfbc      	itt	lt
 8000b66:	40d0      	lsrlt	r0, r2
 8000b68:	4318      	orrlt	r0, r3
 8000b6a:	4770      	bx	lr
 8000b6c:	f092 0f00 	teq	r2, #0
 8000b70:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000b74:	bf06      	itte	eq
 8000b76:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000b7a:	3201      	addeq	r2, #1
 8000b7c:	3b01      	subne	r3, #1
 8000b7e:	e7b5      	b.n	8000aec <__addsf3+0x58>
 8000b80:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b84:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b88:	bf18      	it	ne
 8000b8a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b8e:	d021      	beq.n	8000bd4 <__addsf3+0x140>
 8000b90:	ea92 0f03 	teq	r2, r3
 8000b94:	d004      	beq.n	8000ba0 <__addsf3+0x10c>
 8000b96:	f092 0f00 	teq	r2, #0
 8000b9a:	bf08      	it	eq
 8000b9c:	4608      	moveq	r0, r1
 8000b9e:	4770      	bx	lr
 8000ba0:	ea90 0f01 	teq	r0, r1
 8000ba4:	bf1c      	itt	ne
 8000ba6:	2000      	movne	r0, #0
 8000ba8:	4770      	bxne	lr
 8000baa:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000bae:	d104      	bne.n	8000bba <__addsf3+0x126>
 8000bb0:	0040      	lsls	r0, r0, #1
 8000bb2:	bf28      	it	cs
 8000bb4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000bb8:	4770      	bx	lr
 8000bba:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000bbe:	bf3c      	itt	cc
 8000bc0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000bc4:	4770      	bxcc	lr
 8000bc6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000bca:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000bce:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bd2:	4770      	bx	lr
 8000bd4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000bd8:	bf16      	itet	ne
 8000bda:	4608      	movne	r0, r1
 8000bdc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000be0:	4601      	movne	r1, r0
 8000be2:	0242      	lsls	r2, r0, #9
 8000be4:	bf06      	itte	eq
 8000be6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000bea:	ea90 0f01 	teqeq	r0, r1
 8000bee:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000bf2:	4770      	bx	lr

08000bf4 <__aeabi_ui2f>:
 8000bf4:	f04f 0300 	mov.w	r3, #0
 8000bf8:	e004      	b.n	8000c04 <__aeabi_i2f+0x8>
 8000bfa:	bf00      	nop

08000bfc <__aeabi_i2f>:
 8000bfc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c00:	bf48      	it	mi
 8000c02:	4240      	negmi	r0, r0
 8000c04:	ea5f 0c00 	movs.w	ip, r0
 8000c08:	bf08      	it	eq
 8000c0a:	4770      	bxeq	lr
 8000c0c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000c10:	4601      	mov	r1, r0
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	e01c      	b.n	8000c52 <__aeabi_l2f+0x2a>

08000c18 <__aeabi_ul2f>:
 8000c18:	ea50 0201 	orrs.w	r2, r0, r1
 8000c1c:	bf08      	it	eq
 8000c1e:	4770      	bxeq	lr
 8000c20:	f04f 0300 	mov.w	r3, #0
 8000c24:	e00a      	b.n	8000c3c <__aeabi_l2f+0x14>
 8000c26:	bf00      	nop

08000c28 <__aeabi_l2f>:
 8000c28:	ea50 0201 	orrs.w	r2, r0, r1
 8000c2c:	bf08      	it	eq
 8000c2e:	4770      	bxeq	lr
 8000c30:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000c34:	d502      	bpl.n	8000c3c <__aeabi_l2f+0x14>
 8000c36:	4240      	negs	r0, r0
 8000c38:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c3c:	ea5f 0c01 	movs.w	ip, r1
 8000c40:	bf02      	ittt	eq
 8000c42:	4684      	moveq	ip, r0
 8000c44:	4601      	moveq	r1, r0
 8000c46:	2000      	moveq	r0, #0
 8000c48:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000c4c:	bf08      	it	eq
 8000c4e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000c52:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000c56:	fabc f28c 	clz	r2, ip
 8000c5a:	3a08      	subs	r2, #8
 8000c5c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000c60:	db10      	blt.n	8000c84 <__aeabi_l2f+0x5c>
 8000c62:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c66:	4463      	add	r3, ip
 8000c68:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c6c:	f1c2 0220 	rsb	r2, r2, #32
 8000c70:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000c74:	fa20 f202 	lsr.w	r2, r0, r2
 8000c78:	eb43 0002 	adc.w	r0, r3, r2
 8000c7c:	bf08      	it	eq
 8000c7e:	f020 0001 	biceq.w	r0, r0, #1
 8000c82:	4770      	bx	lr
 8000c84:	f102 0220 	add.w	r2, r2, #32
 8000c88:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c8c:	f1c2 0220 	rsb	r2, r2, #32
 8000c90:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000c94:	fa21 f202 	lsr.w	r2, r1, r2
 8000c98:	eb43 0002 	adc.w	r0, r3, r2
 8000c9c:	bf08      	it	eq
 8000c9e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ca2:	4770      	bx	lr

08000ca4 <__aeabi_fmul>:
 8000ca4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ca8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000cac:	bf1e      	ittt	ne
 8000cae:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000cb2:	ea92 0f0c 	teqne	r2, ip
 8000cb6:	ea93 0f0c 	teqne	r3, ip
 8000cba:	d06f      	beq.n	8000d9c <__aeabi_fmul+0xf8>
 8000cbc:	441a      	add	r2, r3
 8000cbe:	ea80 0c01 	eor.w	ip, r0, r1
 8000cc2:	0240      	lsls	r0, r0, #9
 8000cc4:	bf18      	it	ne
 8000cc6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000cca:	d01e      	beq.n	8000d0a <__aeabi_fmul+0x66>
 8000ccc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000cd0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000cd4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000cd8:	fba0 3101 	umull	r3, r1, r0, r1
 8000cdc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ce0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000ce4:	bf3e      	ittt	cc
 8000ce6:	0049      	lslcc	r1, r1, #1
 8000ce8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000cec:	005b      	lslcc	r3, r3, #1
 8000cee:	ea40 0001 	orr.w	r0, r0, r1
 8000cf2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000cf6:	2afd      	cmp	r2, #253	; 0xfd
 8000cf8:	d81d      	bhi.n	8000d36 <__aeabi_fmul+0x92>
 8000cfa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000cfe:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d02:	bf08      	it	eq
 8000d04:	f020 0001 	biceq.w	r0, r0, #1
 8000d08:	4770      	bx	lr
 8000d0a:	f090 0f00 	teq	r0, #0
 8000d0e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000d12:	bf08      	it	eq
 8000d14:	0249      	lsleq	r1, r1, #9
 8000d16:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d1a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d1e:	3a7f      	subs	r2, #127	; 0x7f
 8000d20:	bfc2      	ittt	gt
 8000d22:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000d26:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d2a:	4770      	bxgt	lr
 8000d2c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d30:	f04f 0300 	mov.w	r3, #0
 8000d34:	3a01      	subs	r2, #1
 8000d36:	dc5d      	bgt.n	8000df4 <__aeabi_fmul+0x150>
 8000d38:	f112 0f19 	cmn.w	r2, #25
 8000d3c:	bfdc      	itt	le
 8000d3e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000d42:	4770      	bxle	lr
 8000d44:	f1c2 0200 	rsb	r2, r2, #0
 8000d48:	0041      	lsls	r1, r0, #1
 8000d4a:	fa21 f102 	lsr.w	r1, r1, r2
 8000d4e:	f1c2 0220 	rsb	r2, r2, #32
 8000d52:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d56:	ea5f 0031 	movs.w	r0, r1, rrx
 8000d5a:	f140 0000 	adc.w	r0, r0, #0
 8000d5e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000d62:	bf08      	it	eq
 8000d64:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d68:	4770      	bx	lr
 8000d6a:	f092 0f00 	teq	r2, #0
 8000d6e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000d72:	bf02      	ittt	eq
 8000d74:	0040      	lsleq	r0, r0, #1
 8000d76:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000d7a:	3a01      	subeq	r2, #1
 8000d7c:	d0f9      	beq.n	8000d72 <__aeabi_fmul+0xce>
 8000d7e:	ea40 000c 	orr.w	r0, r0, ip
 8000d82:	f093 0f00 	teq	r3, #0
 8000d86:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000d8a:	bf02      	ittt	eq
 8000d8c:	0049      	lsleq	r1, r1, #1
 8000d8e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000d92:	3b01      	subeq	r3, #1
 8000d94:	d0f9      	beq.n	8000d8a <__aeabi_fmul+0xe6>
 8000d96:	ea41 010c 	orr.w	r1, r1, ip
 8000d9a:	e78f      	b.n	8000cbc <__aeabi_fmul+0x18>
 8000d9c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000da0:	ea92 0f0c 	teq	r2, ip
 8000da4:	bf18      	it	ne
 8000da6:	ea93 0f0c 	teqne	r3, ip
 8000daa:	d00a      	beq.n	8000dc2 <__aeabi_fmul+0x11e>
 8000dac:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000db0:	bf18      	it	ne
 8000db2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000db6:	d1d8      	bne.n	8000d6a <__aeabi_fmul+0xc6>
 8000db8:	ea80 0001 	eor.w	r0, r0, r1
 8000dbc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000dc0:	4770      	bx	lr
 8000dc2:	f090 0f00 	teq	r0, #0
 8000dc6:	bf17      	itett	ne
 8000dc8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000dcc:	4608      	moveq	r0, r1
 8000dce:	f091 0f00 	teqne	r1, #0
 8000dd2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000dd6:	d014      	beq.n	8000e02 <__aeabi_fmul+0x15e>
 8000dd8:	ea92 0f0c 	teq	r2, ip
 8000ddc:	d101      	bne.n	8000de2 <__aeabi_fmul+0x13e>
 8000dde:	0242      	lsls	r2, r0, #9
 8000de0:	d10f      	bne.n	8000e02 <__aeabi_fmul+0x15e>
 8000de2:	ea93 0f0c 	teq	r3, ip
 8000de6:	d103      	bne.n	8000df0 <__aeabi_fmul+0x14c>
 8000de8:	024b      	lsls	r3, r1, #9
 8000dea:	bf18      	it	ne
 8000dec:	4608      	movne	r0, r1
 8000dee:	d108      	bne.n	8000e02 <__aeabi_fmul+0x15e>
 8000df0:	ea80 0001 	eor.w	r0, r0, r1
 8000df4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000df8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000dfc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e00:	4770      	bx	lr
 8000e02:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e06:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000e0a:	4770      	bx	lr

08000e0c <__aeabi_fdiv>:
 8000e0c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e10:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e14:	bf1e      	ittt	ne
 8000e16:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e1a:	ea92 0f0c 	teqne	r2, ip
 8000e1e:	ea93 0f0c 	teqne	r3, ip
 8000e22:	d069      	beq.n	8000ef8 <__aeabi_fdiv+0xec>
 8000e24:	eba2 0203 	sub.w	r2, r2, r3
 8000e28:	ea80 0c01 	eor.w	ip, r0, r1
 8000e2c:	0249      	lsls	r1, r1, #9
 8000e2e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e32:	d037      	beq.n	8000ea4 <__aeabi_fdiv+0x98>
 8000e34:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000e38:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000e3c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000e40:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000e44:	428b      	cmp	r3, r1
 8000e46:	bf38      	it	cc
 8000e48:	005b      	lslcc	r3, r3, #1
 8000e4a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000e4e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000e52:	428b      	cmp	r3, r1
 8000e54:	bf24      	itt	cs
 8000e56:	1a5b      	subcs	r3, r3, r1
 8000e58:	ea40 000c 	orrcs.w	r0, r0, ip
 8000e5c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000e60:	bf24      	itt	cs
 8000e62:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000e66:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000e6a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000e6e:	bf24      	itt	cs
 8000e70:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000e74:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000e78:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000e7c:	bf24      	itt	cs
 8000e7e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000e82:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000e86:	011b      	lsls	r3, r3, #4
 8000e88:	bf18      	it	ne
 8000e8a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000e8e:	d1e0      	bne.n	8000e52 <__aeabi_fdiv+0x46>
 8000e90:	2afd      	cmp	r2, #253	; 0xfd
 8000e92:	f63f af50 	bhi.w	8000d36 <__aeabi_fmul+0x92>
 8000e96:	428b      	cmp	r3, r1
 8000e98:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e9c:	bf08      	it	eq
 8000e9e:	f020 0001 	biceq.w	r0, r0, #1
 8000ea2:	4770      	bx	lr
 8000ea4:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000ea8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000eac:	327f      	adds	r2, #127	; 0x7f
 8000eae:	bfc2      	ittt	gt
 8000eb0:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000eb4:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000eb8:	4770      	bxgt	lr
 8000eba:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ebe:	f04f 0300 	mov.w	r3, #0
 8000ec2:	3a01      	subs	r2, #1
 8000ec4:	e737      	b.n	8000d36 <__aeabi_fmul+0x92>
 8000ec6:	f092 0f00 	teq	r2, #0
 8000eca:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000ece:	bf02      	ittt	eq
 8000ed0:	0040      	lsleq	r0, r0, #1
 8000ed2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000ed6:	3a01      	subeq	r2, #1
 8000ed8:	d0f9      	beq.n	8000ece <__aeabi_fdiv+0xc2>
 8000eda:	ea40 000c 	orr.w	r0, r0, ip
 8000ede:	f093 0f00 	teq	r3, #0
 8000ee2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ee6:	bf02      	ittt	eq
 8000ee8:	0049      	lsleq	r1, r1, #1
 8000eea:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000eee:	3b01      	subeq	r3, #1
 8000ef0:	d0f9      	beq.n	8000ee6 <__aeabi_fdiv+0xda>
 8000ef2:	ea41 010c 	orr.w	r1, r1, ip
 8000ef6:	e795      	b.n	8000e24 <__aeabi_fdiv+0x18>
 8000ef8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000efc:	ea92 0f0c 	teq	r2, ip
 8000f00:	d108      	bne.n	8000f14 <__aeabi_fdiv+0x108>
 8000f02:	0242      	lsls	r2, r0, #9
 8000f04:	f47f af7d 	bne.w	8000e02 <__aeabi_fmul+0x15e>
 8000f08:	ea93 0f0c 	teq	r3, ip
 8000f0c:	f47f af70 	bne.w	8000df0 <__aeabi_fmul+0x14c>
 8000f10:	4608      	mov	r0, r1
 8000f12:	e776      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f14:	ea93 0f0c 	teq	r3, ip
 8000f18:	d104      	bne.n	8000f24 <__aeabi_fdiv+0x118>
 8000f1a:	024b      	lsls	r3, r1, #9
 8000f1c:	f43f af4c 	beq.w	8000db8 <__aeabi_fmul+0x114>
 8000f20:	4608      	mov	r0, r1
 8000f22:	e76e      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f24:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f28:	bf18      	it	ne
 8000f2a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000f2e:	d1ca      	bne.n	8000ec6 <__aeabi_fdiv+0xba>
 8000f30:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000f34:	f47f af5c 	bne.w	8000df0 <__aeabi_fmul+0x14c>
 8000f38:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000f3c:	f47f af3c 	bne.w	8000db8 <__aeabi_fmul+0x114>
 8000f40:	e75f      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f42:	bf00      	nop

08000f44 <CLCD_Delay>:
******************************************************************************************************************/
#include "CLCD_I2C.h"

//************************** Low Level Function ****************************************************************//
static void CLCD_Delay(uint16_t Time)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b082      	sub	sp, #8
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	80fb      	strh	r3, [r7, #6]
	HAL_Delay(Time);
 8000f4e:	88fb      	ldrh	r3, [r7, #6]
 8000f50:	4618      	mov	r0, r3
 8000f52:	f000 fec5 	bl	8001ce0 <HAL_Delay>
}
 8000f56:	bf00      	nop
 8000f58:	3708      	adds	r7, #8
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	bd80      	pop	{r7, pc}

08000f5e <CLCD_WriteI2C>:
static void CLCD_WriteI2C(CLCD_I2C_Name* LCD, uint8_t Data, uint8_t Mode)
{
 8000f5e:	b580      	push	{r7, lr}
 8000f60:	b086      	sub	sp, #24
 8000f62:	af02      	add	r7, sp, #8
 8000f64:	6078      	str	r0, [r7, #4]
 8000f66:	460b      	mov	r3, r1
 8000f68:	70fb      	strb	r3, [r7, #3]
 8000f6a:	4613      	mov	r3, r2
 8000f6c:	70bb      	strb	r3, [r7, #2]
	char Data_H;
	char Data_L;
	uint8_t Data_I2C[4];
	Data_H = Data&0xF0;
 8000f6e:	78fb      	ldrb	r3, [r7, #3]
 8000f70:	f023 030f 	bic.w	r3, r3, #15
 8000f74:	73fb      	strb	r3, [r7, #15]
	Data_L = (Data<<4)&0xF0;
 8000f76:	78fb      	ldrb	r3, [r7, #3]
 8000f78:	011b      	lsls	r3, r3, #4
 8000f7a:	73bb      	strb	r3, [r7, #14]
	if(LCD->BACKLIGHT)
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	7adb      	ldrb	r3, [r3, #11]
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d007      	beq.n	8000f94 <CLCD_WriteI2C+0x36>
	{
		Data_H |= LCD_BACKLIGHT; 
 8000f84:	7bfb      	ldrb	r3, [r7, #15]
 8000f86:	f043 0308 	orr.w	r3, r3, #8
 8000f8a:	73fb      	strb	r3, [r7, #15]
		Data_L |= LCD_BACKLIGHT; 
 8000f8c:	7bbb      	ldrb	r3, [r7, #14]
 8000f8e:	f043 0308 	orr.w	r3, r3, #8
 8000f92:	73bb      	strb	r3, [r7, #14]
	}
	if(Mode == CLCD_DATA)
 8000f94:	78bb      	ldrb	r3, [r7, #2]
 8000f96:	2b01      	cmp	r3, #1
 8000f98:	d108      	bne.n	8000fac <CLCD_WriteI2C+0x4e>
	{
		Data_H |= LCD_RS;
 8000f9a:	7bfb      	ldrb	r3, [r7, #15]
 8000f9c:	f043 0301 	orr.w	r3, r3, #1
 8000fa0:	73fb      	strb	r3, [r7, #15]
		Data_L |= LCD_RS;
 8000fa2:	7bbb      	ldrb	r3, [r7, #14]
 8000fa4:	f043 0301 	orr.w	r3, r3, #1
 8000fa8:	73bb      	strb	r3, [r7, #14]
 8000faa:	e00a      	b.n	8000fc2 <CLCD_WriteI2C+0x64>
	}
	else if(Mode == CLCD_COMMAND)
 8000fac:	78bb      	ldrb	r3, [r7, #2]
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d107      	bne.n	8000fc2 <CLCD_WriteI2C+0x64>
	{
		Data_H &= ~LCD_RS;
 8000fb2:	7bfb      	ldrb	r3, [r7, #15]
 8000fb4:	f023 0301 	bic.w	r3, r3, #1
 8000fb8:	73fb      	strb	r3, [r7, #15]
		Data_L &= ~LCD_RS;
 8000fba:	7bbb      	ldrb	r3, [r7, #14]
 8000fbc:	f023 0301 	bic.w	r3, r3, #1
 8000fc0:	73bb      	strb	r3, [r7, #14]
	}
	Data_I2C[0] = Data_H|LCD_EN;
 8000fc2:	7bfb      	ldrb	r3, [r7, #15]
 8000fc4:	f043 0304 	orr.w	r3, r3, #4
 8000fc8:	b2db      	uxtb	r3, r3
 8000fca:	723b      	strb	r3, [r7, #8]
	CLCD_Delay(1);
 8000fcc:	2001      	movs	r0, #1
 8000fce:	f7ff ffb9 	bl	8000f44 <CLCD_Delay>
	Data_I2C[1] = Data_H;
 8000fd2:	7bfb      	ldrb	r3, [r7, #15]
 8000fd4:	727b      	strb	r3, [r7, #9]
	Data_I2C[2] = Data_L|LCD_EN;
 8000fd6:	7bbb      	ldrb	r3, [r7, #14]
 8000fd8:	f043 0304 	orr.w	r3, r3, #4
 8000fdc:	b2db      	uxtb	r3, r3
 8000fde:	72bb      	strb	r3, [r7, #10]
	CLCD_Delay(1);
 8000fe0:	2001      	movs	r0, #1
 8000fe2:	f7ff ffaf 	bl	8000f44 <CLCD_Delay>
	Data_I2C[3] = Data_L;
 8000fe6:	7bbb      	ldrb	r3, [r7, #14]
 8000fe8:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit(LCD->I2C, LCD->ADDRESS, (uint8_t *)Data_I2C, sizeof(Data_I2C), 1000);
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	6818      	ldr	r0, [r3, #0]
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	791b      	ldrb	r3, [r3, #4]
 8000ff2:	b299      	uxth	r1, r3
 8000ff4:	f107 0208 	add.w	r2, r7, #8
 8000ff8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ffc:	9300      	str	r3, [sp, #0]
 8000ffe:	2304      	movs	r3, #4
 8001000:	f001 fb1a 	bl	8002638 <HAL_I2C_Master_Transmit>
}
 8001004:	bf00      	nop
 8001006:	3710      	adds	r7, #16
 8001008:	46bd      	mov	sp, r7
 800100a:	bd80      	pop	{r7, pc}

0800100c <CLCD_I2C_Init>:


//************************** High Level Function ****************************************************************//
void CLCD_I2C_Init(CLCD_I2C_Name* LCD, I2C_HandleTypeDef* hi2c_CLCD, uint8_t Address, uint8_t Colums, uint8_t Rows)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b084      	sub	sp, #16
 8001010:	af00      	add	r7, sp, #0
 8001012:	60f8      	str	r0, [r7, #12]
 8001014:	60b9      	str	r1, [r7, #8]
 8001016:	4611      	mov	r1, r2
 8001018:	461a      	mov	r2, r3
 800101a:	460b      	mov	r3, r1
 800101c:	71fb      	strb	r3, [r7, #7]
 800101e:	4613      	mov	r3, r2
 8001020:	71bb      	strb	r3, [r7, #6]
	LCD->I2C = hi2c_CLCD;
 8001022:	68fb      	ldr	r3, [r7, #12]
 8001024:	68ba      	ldr	r2, [r7, #8]
 8001026:	601a      	str	r2, [r3, #0]
	LCD->ADDRESS = Address;
 8001028:	68fb      	ldr	r3, [r7, #12]
 800102a:	79fa      	ldrb	r2, [r7, #7]
 800102c:	711a      	strb	r2, [r3, #4]
	LCD->COLUMS = Colums;
 800102e:	68fb      	ldr	r3, [r7, #12]
 8001030:	79ba      	ldrb	r2, [r7, #6]
 8001032:	715a      	strb	r2, [r3, #5]
	LCD->ROWS = Rows;
 8001034:	68fb      	ldr	r3, [r7, #12]
 8001036:	7e3a      	ldrb	r2, [r7, #24]
 8001038:	719a      	strb	r2, [r3, #6]
	
	LCD->FUNCTIONSET = LCD_FUNCTIONSET|LCD_4BITMODE|LCD_2LINE|LCD_5x8DOTS;
 800103a:	68fb      	ldr	r3, [r7, #12]
 800103c:	2228      	movs	r2, #40	; 0x28
 800103e:	729a      	strb	r2, [r3, #10]
	LCD->ENTRYMODE = LCD_ENTRYMODESET|LCD_ENTRYLEFT|LCD_ENTRYSHIFTDECREMENT;
 8001040:	68fb      	ldr	r3, [r7, #12]
 8001042:	2206      	movs	r2, #6
 8001044:	71da      	strb	r2, [r3, #7]
	LCD->DISPLAYCTRL = LCD_DISPLAYCONTROL|LCD_DISPLAYON|LCD_CURSOROFF|LCD_BLINKOFF;
 8001046:	68fb      	ldr	r3, [r7, #12]
 8001048:	220c      	movs	r2, #12
 800104a:	721a      	strb	r2, [r3, #8]
	LCD->CURSORSHIFT = LCD_CURSORSHIFT|LCD_CURSORMOVE|LCD_MOVERIGHT;
 800104c:	68fb      	ldr	r3, [r7, #12]
 800104e:	2214      	movs	r2, #20
 8001050:	725a      	strb	r2, [r3, #9]
	LCD->BACKLIGHT = LCD_BACKLIGHT;
 8001052:	68fb      	ldr	r3, [r7, #12]
 8001054:	2208      	movs	r2, #8
 8001056:	72da      	strb	r2, [r3, #11]

	CLCD_Delay(50);
 8001058:	2032      	movs	r0, #50	; 0x32
 800105a:	f7ff ff73 	bl	8000f44 <CLCD_Delay>
	CLCD_WriteI2C(LCD, 0x33, CLCD_COMMAND);
 800105e:	2200      	movs	r2, #0
 8001060:	2133      	movs	r1, #51	; 0x33
 8001062:	68f8      	ldr	r0, [r7, #12]
 8001064:	f7ff ff7b 	bl	8000f5e <CLCD_WriteI2C>
//	CLCD_Delay(5);
	CLCD_WriteI2C(LCD, 0x33, CLCD_COMMAND);
 8001068:	2200      	movs	r2, #0
 800106a:	2133      	movs	r1, #51	; 0x33
 800106c:	68f8      	ldr	r0, [r7, #12]
 800106e:	f7ff ff76 	bl	8000f5e <CLCD_WriteI2C>
	CLCD_Delay(5);
 8001072:	2005      	movs	r0, #5
 8001074:	f7ff ff66 	bl	8000f44 <CLCD_Delay>
	CLCD_WriteI2C(LCD, 0x32, CLCD_COMMAND);
 8001078:	2200      	movs	r2, #0
 800107a:	2132      	movs	r1, #50	; 0x32
 800107c:	68f8      	ldr	r0, [r7, #12]
 800107e:	f7ff ff6e 	bl	8000f5e <CLCD_WriteI2C>
	CLCD_Delay(5);
 8001082:	2005      	movs	r0, #5
 8001084:	f7ff ff5e 	bl	8000f44 <CLCD_Delay>
	CLCD_WriteI2C(LCD, 0x20, CLCD_COMMAND);
 8001088:	2200      	movs	r2, #0
 800108a:	2120      	movs	r1, #32
 800108c:	68f8      	ldr	r0, [r7, #12]
 800108e:	f7ff ff66 	bl	8000f5e <CLCD_WriteI2C>
	CLCD_Delay(5);
 8001092:	2005      	movs	r0, #5
 8001094:	f7ff ff56 	bl	8000f44 <CLCD_Delay>
	
	CLCD_WriteI2C(LCD, LCD->ENTRYMODE,CLCD_COMMAND);
 8001098:	68fb      	ldr	r3, [r7, #12]
 800109a:	79db      	ldrb	r3, [r3, #7]
 800109c:	2200      	movs	r2, #0
 800109e:	4619      	mov	r1, r3
 80010a0:	68f8      	ldr	r0, [r7, #12]
 80010a2:	f7ff ff5c 	bl	8000f5e <CLCD_WriteI2C>
	CLCD_WriteI2C(LCD, LCD->DISPLAYCTRL,CLCD_COMMAND);
 80010a6:	68fb      	ldr	r3, [r7, #12]
 80010a8:	7a1b      	ldrb	r3, [r3, #8]
 80010aa:	2200      	movs	r2, #0
 80010ac:	4619      	mov	r1, r3
 80010ae:	68f8      	ldr	r0, [r7, #12]
 80010b0:	f7ff ff55 	bl	8000f5e <CLCD_WriteI2C>
	CLCD_WriteI2C(LCD, LCD->CURSORSHIFT,CLCD_COMMAND);
 80010b4:	68fb      	ldr	r3, [r7, #12]
 80010b6:	7a5b      	ldrb	r3, [r3, #9]
 80010b8:	2200      	movs	r2, #0
 80010ba:	4619      	mov	r1, r3
 80010bc:	68f8      	ldr	r0, [r7, #12]
 80010be:	f7ff ff4e 	bl	8000f5e <CLCD_WriteI2C>
	CLCD_WriteI2C(LCD, LCD->FUNCTIONSET,CLCD_COMMAND);
 80010c2:	68fb      	ldr	r3, [r7, #12]
 80010c4:	7a9b      	ldrb	r3, [r3, #10]
 80010c6:	2200      	movs	r2, #0
 80010c8:	4619      	mov	r1, r3
 80010ca:	68f8      	ldr	r0, [r7, #12]
 80010cc:	f7ff ff47 	bl	8000f5e <CLCD_WriteI2C>
	
	CLCD_WriteI2C(LCD, LCD_CLEARDISPLAY,CLCD_COMMAND);
 80010d0:	2200      	movs	r2, #0
 80010d2:	2101      	movs	r1, #1
 80010d4:	68f8      	ldr	r0, [r7, #12]
 80010d6:	f7ff ff42 	bl	8000f5e <CLCD_WriteI2C>
	CLCD_WriteI2C(LCD, LCD_RETURNHOME,CLCD_COMMAND);
 80010da:	2200      	movs	r2, #0
 80010dc:	2102      	movs	r1, #2
 80010de:	68f8      	ldr	r0, [r7, #12]
 80010e0:	f7ff ff3d 	bl	8000f5e <CLCD_WriteI2C>
}
 80010e4:	bf00      	nop
 80010e6:	3710      	adds	r7, #16
 80010e8:	46bd      	mov	sp, r7
 80010ea:	bd80      	pop	{r7, pc}

080010ec <CLCD_I2C_SetCursor>:
void CLCD_I2C_SetCursor(CLCD_I2C_Name* LCD, uint8_t Xpos, uint8_t Ypos)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b084      	sub	sp, #16
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	6078      	str	r0, [r7, #4]
 80010f4:	460b      	mov	r3, r1
 80010f6:	70fb      	strb	r3, [r7, #3]
 80010f8:	4613      	mov	r3, r2
 80010fa:	70bb      	strb	r3, [r7, #2]
	uint8_t DRAM_ADDRESS = 0x00;
 80010fc:	2300      	movs	r3, #0
 80010fe:	73fb      	strb	r3, [r7, #15]
	if(Xpos >= LCD->COLUMS)
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	795b      	ldrb	r3, [r3, #5]
 8001104:	78fa      	ldrb	r2, [r7, #3]
 8001106:	429a      	cmp	r2, r3
 8001108:	d303      	bcc.n	8001112 <CLCD_I2C_SetCursor+0x26>
	{
		Xpos = LCD->COLUMS - 1;
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	795b      	ldrb	r3, [r3, #5]
 800110e:	3b01      	subs	r3, #1
 8001110:	70fb      	strb	r3, [r7, #3]
	}
	if(Ypos >= LCD->ROWS)
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	799b      	ldrb	r3, [r3, #6]
 8001116:	78ba      	ldrb	r2, [r7, #2]
 8001118:	429a      	cmp	r2, r3
 800111a:	d303      	bcc.n	8001124 <CLCD_I2C_SetCursor+0x38>
	{
		Ypos = LCD->ROWS -1;
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	799b      	ldrb	r3, [r3, #6]
 8001120:	3b01      	subs	r3, #1
 8001122:	70bb      	strb	r3, [r7, #2]
	}
	if(Ypos == 0)
 8001124:	78bb      	ldrb	r3, [r7, #2]
 8001126:	2b00      	cmp	r3, #0
 8001128:	d102      	bne.n	8001130 <CLCD_I2C_SetCursor+0x44>
	{
		DRAM_ADDRESS = 0x00 + Xpos;
 800112a:	78fb      	ldrb	r3, [r7, #3]
 800112c:	73fb      	strb	r3, [r7, #15]
 800112e:	e013      	b.n	8001158 <CLCD_I2C_SetCursor+0x6c>
	}
	else if(Ypos == 1)
 8001130:	78bb      	ldrb	r3, [r7, #2]
 8001132:	2b01      	cmp	r3, #1
 8001134:	d103      	bne.n	800113e <CLCD_I2C_SetCursor+0x52>
	{
		DRAM_ADDRESS = 0x40 + Xpos;
 8001136:	78fb      	ldrb	r3, [r7, #3]
 8001138:	3340      	adds	r3, #64	; 0x40
 800113a:	73fb      	strb	r3, [r7, #15]
 800113c:	e00c      	b.n	8001158 <CLCD_I2C_SetCursor+0x6c>
	}
	else if(Ypos == 2)
 800113e:	78bb      	ldrb	r3, [r7, #2]
 8001140:	2b02      	cmp	r3, #2
 8001142:	d103      	bne.n	800114c <CLCD_I2C_SetCursor+0x60>
	{
		DRAM_ADDRESS = 0x14 + Xpos;
 8001144:	78fb      	ldrb	r3, [r7, #3]
 8001146:	3314      	adds	r3, #20
 8001148:	73fb      	strb	r3, [r7, #15]
 800114a:	e005      	b.n	8001158 <CLCD_I2C_SetCursor+0x6c>
	}
	else if(Ypos == 3)
 800114c:	78bb      	ldrb	r3, [r7, #2]
 800114e:	2b03      	cmp	r3, #3
 8001150:	d102      	bne.n	8001158 <CLCD_I2C_SetCursor+0x6c>
	{
		DRAM_ADDRESS = 0x54 + Xpos;
 8001152:	78fb      	ldrb	r3, [r7, #3]
 8001154:	3354      	adds	r3, #84	; 0x54
 8001156:	73fb      	strb	r3, [r7, #15]
	}
	CLCD_WriteI2C(LCD, LCD_SETDDRAMADDR|DRAM_ADDRESS, CLCD_COMMAND);
 8001158:	7bfb      	ldrb	r3, [r7, #15]
 800115a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800115e:	b2db      	uxtb	r3, r3
 8001160:	2200      	movs	r2, #0
 8001162:	4619      	mov	r1, r3
 8001164:	6878      	ldr	r0, [r7, #4]
 8001166:	f7ff fefa 	bl	8000f5e <CLCD_WriteI2C>
}
 800116a:	bf00      	nop
 800116c:	3710      	adds	r7, #16
 800116e:	46bd      	mov	sp, r7
 8001170:	bd80      	pop	{r7, pc}

08001172 <CLCD_I2C_WriteChar>:
void CLCD_I2C_WriteChar(CLCD_I2C_Name* LCD, char character)
{
 8001172:	b580      	push	{r7, lr}
 8001174:	b082      	sub	sp, #8
 8001176:	af00      	add	r7, sp, #0
 8001178:	6078      	str	r0, [r7, #4]
 800117a:	460b      	mov	r3, r1
 800117c:	70fb      	strb	r3, [r7, #3]
	CLCD_WriteI2C(LCD, character, CLCD_DATA);
 800117e:	78fb      	ldrb	r3, [r7, #3]
 8001180:	2201      	movs	r2, #1
 8001182:	4619      	mov	r1, r3
 8001184:	6878      	ldr	r0, [r7, #4]
 8001186:	f7ff feea 	bl	8000f5e <CLCD_WriteI2C>
}
 800118a:	bf00      	nop
 800118c:	3708      	adds	r7, #8
 800118e:	46bd      	mov	sp, r7
 8001190:	bd80      	pop	{r7, pc}

08001192 <CLCD_I2C_WriteString>:
void CLCD_I2C_WriteString(CLCD_I2C_Name* LCD, char *String)
{
 8001192:	b580      	push	{r7, lr}
 8001194:	b082      	sub	sp, #8
 8001196:	af00      	add	r7, sp, #0
 8001198:	6078      	str	r0, [r7, #4]
 800119a:	6039      	str	r1, [r7, #0]
	while(*String)CLCD_I2C_WriteChar(LCD, *String++);
 800119c:	e007      	b.n	80011ae <CLCD_I2C_WriteString+0x1c>
 800119e:	683b      	ldr	r3, [r7, #0]
 80011a0:	1c5a      	adds	r2, r3, #1
 80011a2:	603a      	str	r2, [r7, #0]
 80011a4:	781b      	ldrb	r3, [r3, #0]
 80011a6:	4619      	mov	r1, r3
 80011a8:	6878      	ldr	r0, [r7, #4]
 80011aa:	f7ff ffe2 	bl	8001172 <CLCD_I2C_WriteChar>
 80011ae:	683b      	ldr	r3, [r7, #0]
 80011b0:	781b      	ldrb	r3, [r3, #0]
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d1f3      	bne.n	800119e <CLCD_I2C_WriteString+0xc>
}
 80011b6:	bf00      	nop
 80011b8:	bf00      	nop
 80011ba:	3708      	adds	r7, #8
 80011bc:	46bd      	mov	sp, r7
 80011be:	bd80      	pop	{r7, pc}

080011c0 <HAL_UART_RxCpltCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b082      	sub	sp, #8
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  if(huart->Instance == USART1){
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	4a29      	ldr	r2, [pc, #164]	; (8001274 <HAL_UART_RxCpltCallback+0xb4>)
 80011ce:	4293      	cmp	r3, r2
 80011d0:	d14c      	bne.n	800126c <HAL_UART_RxCpltCallback+0xac>
	 // rxData[sizeof(rxData) - 1] = '\0';
	if ((rxData[0] == 't') && (rxData[1] == 'e') && (rxData[2] == 'm') && (rxData[3] == 'p'))
 80011d2:	4b29      	ldr	r3, [pc, #164]	; (8001278 <HAL_UART_RxCpltCallback+0xb8>)
 80011d4:	781b      	ldrb	r3, [r3, #0]
 80011d6:	2b74      	cmp	r3, #116	; 0x74
 80011d8:	d112      	bne.n	8001200 <HAL_UART_RxCpltCallback+0x40>
 80011da:	4b27      	ldr	r3, [pc, #156]	; (8001278 <HAL_UART_RxCpltCallback+0xb8>)
 80011dc:	785b      	ldrb	r3, [r3, #1]
 80011de:	2b65      	cmp	r3, #101	; 0x65
 80011e0:	d10e      	bne.n	8001200 <HAL_UART_RxCpltCallback+0x40>
 80011e2:	4b25      	ldr	r3, [pc, #148]	; (8001278 <HAL_UART_RxCpltCallback+0xb8>)
 80011e4:	789b      	ldrb	r3, [r3, #2]
 80011e6:	2b6d      	cmp	r3, #109	; 0x6d
 80011e8:	d10a      	bne.n	8001200 <HAL_UART_RxCpltCallback+0x40>
 80011ea:	4b23      	ldr	r3, [pc, #140]	; (8001278 <HAL_UART_RxCpltCallback+0xb8>)
 80011ec:	78db      	ldrb	r3, [r3, #3]
 80011ee:	2b70      	cmp	r3, #112	; 0x70
 80011f0:	d106      	bne.n	8001200 <HAL_UART_RxCpltCallback+0x40>
	{
		DisplayMode = DISPLAY_TEMP;
 80011f2:	4b22      	ldr	r3, [pc, #136]	; (800127c <HAL_UART_RxCpltCallback+0xbc>)
 80011f4:	2200      	movs	r2, #0
 80011f6:	701a      	strb	r2, [r3, #0]
		printf("Change Display Mode to DISPLAY_TEMP\r\n\n");
 80011f8:	4821      	ldr	r0, [pc, #132]	; (8001280 <HAL_UART_RxCpltCallback+0xc0>)
 80011fa:	f004 f8fb 	bl	80053f4 <puts>
 80011fe:	e030      	b.n	8001262 <HAL_UART_RxCpltCallback+0xa2>
		//memset(rxData, 0, sizeof(rxData));
	}
	else if ((rxData[0] == 'h') && (rxData[1] == 'u') && (rxData[2] == 'm') && (rxData[3] == 'i'))
 8001200:	4b1d      	ldr	r3, [pc, #116]	; (8001278 <HAL_UART_RxCpltCallback+0xb8>)
 8001202:	781b      	ldrb	r3, [r3, #0]
 8001204:	2b68      	cmp	r3, #104	; 0x68
 8001206:	d112      	bne.n	800122e <HAL_UART_RxCpltCallback+0x6e>
 8001208:	4b1b      	ldr	r3, [pc, #108]	; (8001278 <HAL_UART_RxCpltCallback+0xb8>)
 800120a:	785b      	ldrb	r3, [r3, #1]
 800120c:	2b75      	cmp	r3, #117	; 0x75
 800120e:	d10e      	bne.n	800122e <HAL_UART_RxCpltCallback+0x6e>
 8001210:	4b19      	ldr	r3, [pc, #100]	; (8001278 <HAL_UART_RxCpltCallback+0xb8>)
 8001212:	789b      	ldrb	r3, [r3, #2]
 8001214:	2b6d      	cmp	r3, #109	; 0x6d
 8001216:	d10a      	bne.n	800122e <HAL_UART_RxCpltCallback+0x6e>
 8001218:	4b17      	ldr	r3, [pc, #92]	; (8001278 <HAL_UART_RxCpltCallback+0xb8>)
 800121a:	78db      	ldrb	r3, [r3, #3]
 800121c:	2b69      	cmp	r3, #105	; 0x69
 800121e:	d106      	bne.n	800122e <HAL_UART_RxCpltCallback+0x6e>
	{
		DisplayMode = DISPLAY_HUMID;
 8001220:	4b16      	ldr	r3, [pc, #88]	; (800127c <HAL_UART_RxCpltCallback+0xbc>)
 8001222:	2201      	movs	r2, #1
 8001224:	701a      	strb	r2, [r3, #0]
		printf("Change Display Mode to DISPLAY_HUMI\r\n\n");
 8001226:	4817      	ldr	r0, [pc, #92]	; (8001284 <HAL_UART_RxCpltCallback+0xc4>)
 8001228:	f004 f8e4 	bl	80053f4 <puts>
 800122c:	e019      	b.n	8001262 <HAL_UART_RxCpltCallback+0xa2>
		//memset(rxData, 0, sizeof(rxData));
	}
	else if ((rxData[0] == 'b') && (rxData[1] == 'o') && (rxData[2] == 't') && (rxData[3] == 'h'))
 800122e:	4b12      	ldr	r3, [pc, #72]	; (8001278 <HAL_UART_RxCpltCallback+0xb8>)
 8001230:	781b      	ldrb	r3, [r3, #0]
 8001232:	2b62      	cmp	r3, #98	; 0x62
 8001234:	d112      	bne.n	800125c <HAL_UART_RxCpltCallback+0x9c>
 8001236:	4b10      	ldr	r3, [pc, #64]	; (8001278 <HAL_UART_RxCpltCallback+0xb8>)
 8001238:	785b      	ldrb	r3, [r3, #1]
 800123a:	2b6f      	cmp	r3, #111	; 0x6f
 800123c:	d10e      	bne.n	800125c <HAL_UART_RxCpltCallback+0x9c>
 800123e:	4b0e      	ldr	r3, [pc, #56]	; (8001278 <HAL_UART_RxCpltCallback+0xb8>)
 8001240:	789b      	ldrb	r3, [r3, #2]
 8001242:	2b74      	cmp	r3, #116	; 0x74
 8001244:	d10a      	bne.n	800125c <HAL_UART_RxCpltCallback+0x9c>
 8001246:	4b0c      	ldr	r3, [pc, #48]	; (8001278 <HAL_UART_RxCpltCallback+0xb8>)
 8001248:	78db      	ldrb	r3, [r3, #3]
 800124a:	2b68      	cmp	r3, #104	; 0x68
 800124c:	d106      	bne.n	800125c <HAL_UART_RxCpltCallback+0x9c>
	{
		DisplayMode = DISPLAY_ALL;
 800124e:	4b0b      	ldr	r3, [pc, #44]	; (800127c <HAL_UART_RxCpltCallback+0xbc>)
 8001250:	2202      	movs	r2, #2
 8001252:	701a      	strb	r2, [r3, #0]
		printf("Change Display Mode to DISPLAY_ALL\r\n\n");
 8001254:	480c      	ldr	r0, [pc, #48]	; (8001288 <HAL_UART_RxCpltCallback+0xc8>)
 8001256:	f004 f8cd 	bl	80053f4 <puts>
 800125a:	e002      	b.n	8001262 <HAL_UART_RxCpltCallback+0xa2>
		//memset(rxData, 0, sizeof(rxData));
	}
	else
	{
		printf("Error Command Syntax\r\n\n");
 800125c:	480b      	ldr	r0, [pc, #44]	; (800128c <HAL_UART_RxCpltCallback+0xcc>)
 800125e:	f004 f8c9 	bl	80053f4 <puts>
	}
	HAL_UART_Receive_IT(&huart1, rxData, sizeof(rxData) - 1);
 8001262:	2204      	movs	r2, #4
 8001264:	4904      	ldr	r1, [pc, #16]	; (8001278 <HAL_UART_RxCpltCallback+0xb8>)
 8001266:	480a      	ldr	r0, [pc, #40]	; (8001290 <HAL_UART_RxCpltCallback+0xd0>)
 8001268:	f002 fdc1 	bl	8003dee <HAL_UART_Receive_IT>
  }

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800126c:	bf00      	nop
 800126e:	3708      	adds	r7, #8
 8001270:	46bd      	mov	sp, r7
 8001272:	bd80      	pop	{r7, pc}
 8001274:	40013800 	.word	0x40013800
 8001278:	20000310 	.word	0x20000310
 800127c:	20000004 	.word	0x20000004
 8001280:	080076b0 	.word	0x080076b0
 8001284:	080076d8 	.word	0x080076d8
 8001288:	08007700 	.word	0x08007700
 800128c:	08007728 	.word	0x08007728
 8001290:	200002ac 	.word	0x200002ac

08001294 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	b082      	sub	sp, #8
 8001298:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800129a:	f000 fcbf 	bl	8001c1c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800129e:	f000 f883 	bl	80013a8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80012a2:	f000 f943 	bl	800152c <MX_GPIO_Init>
  MX_I2C1_Init();
 80012a6:	f000 f8bb 	bl	8001420 <MX_I2C1_Init>
  MX_I2C2_Init();
 80012aa:	f000 f8e7 	bl	800147c <MX_I2C2_Init>
  MX_USART1_UART_Init();
 80012ae:	f000 f913 	bl	80014d8 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  CLCD_I2C_Init(&LCD1, &hi2c2, 0X4e, 20, 4);
 80012b2:	2304      	movs	r3, #4
 80012b4:	9300      	str	r3, [sp, #0]
 80012b6:	2314      	movs	r3, #20
 80012b8:	224e      	movs	r2, #78	; 0x4e
 80012ba:	492b      	ldr	r1, [pc, #172]	; (8001368 <main+0xd4>)
 80012bc:	482b      	ldr	r0, [pc, #172]	; (800136c <main+0xd8>)
 80012be:	f7ff fea5 	bl	800100c <CLCD_I2C_Init>
  CLCD_I2C_SetCursor(&LCD1,0,0);
 80012c2:	2200      	movs	r2, #0
 80012c4:	2100      	movs	r1, #0
 80012c6:	4829      	ldr	r0, [pc, #164]	; (800136c <main+0xd8>)
 80012c8:	f7ff ff10 	bl	80010ec <CLCD_I2C_SetCursor>
  CLCD_I2C_WriteString(&LCD1,"Start");
 80012cc:	4928      	ldr	r1, [pc, #160]	; (8001370 <main+0xdc>)
 80012ce:	4827      	ldr	r0, [pc, #156]	; (800136c <main+0xd8>)
 80012d0:	f7ff ff5f 	bl	8001192 <CLCD_I2C_WriteString>
  HAL_UART_Receive_IT(&huart1, rxData, sizeof(rxData) - 1);
 80012d4:	2204      	movs	r2, #4
 80012d6:	4927      	ldr	r1, [pc, #156]	; (8001374 <main+0xe0>)
 80012d8:	4827      	ldr	r0, [pc, #156]	; (8001378 <main+0xe4>)
 80012da:	f002 fd88 	bl	8003dee <HAL_UART_Receive_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
  if(uwTick%p == 0){
 80012de:	4b27      	ldr	r3, [pc, #156]	; (800137c <main+0xe8>)
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	4a27      	ldr	r2, [pc, #156]	; (8001380 <main+0xec>)
 80012e4:	6812      	ldr	r2, [r2, #0]
 80012e6:	fbb3 f1f2 	udiv	r1, r3, r2
 80012ea:	fb01 f202 	mul.w	r2, r1, r2
 80012ee:	1a9b      	subs	r3, r3, r2
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d1f4      	bne.n	80012de <main+0x4a>
	  start_time_SHTC3 = HAL_GetTick();
 80012f4:	f000 fcea 	bl	8001ccc <HAL_GetTick>
 80012f8:	4603      	mov	r3, r0
 80012fa:	4a22      	ldr	r2, [pc, #136]	; (8001384 <main+0xf0>)
 80012fc:	6013      	str	r3, [r2, #0]
	  measure();
 80012fe:	f000 f937 	bl	8001570 <measure>
	  end_time_SHTC3 = HAL_GetTick();
 8001302:	f000 fce3 	bl	8001ccc <HAL_GetTick>
 8001306:	4603      	mov	r3, r0
 8001308:	4a1f      	ldr	r2, [pc, #124]	; (8001388 <main+0xf4>)
 800130a:	6013      	str	r3, [r2, #0]
	  elapsed_time_SHTC3 = -(start_time_SHTC3 - end_time_SHTC3);
 800130c:	4b1e      	ldr	r3, [pc, #120]	; (8001388 <main+0xf4>)
 800130e:	681a      	ldr	r2, [r3, #0]
 8001310:	4b1c      	ldr	r3, [pc, #112]	; (8001384 <main+0xf0>)
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	1ad3      	subs	r3, r2, r3
 8001316:	4a1d      	ldr	r2, [pc, #116]	; (800138c <main+0xf8>)
 8001318:	6013      	str	r3, [r2, #0]

	  start_time_CLCD = HAL_GetTick();
 800131a:	f000 fcd7 	bl	8001ccc <HAL_GetTick>
 800131e:	4603      	mov	r3, r0
 8001320:	4a1b      	ldr	r2, [pc, #108]	; (8001390 <main+0xfc>)
 8001322:	6013      	str	r3, [r2, #0]
	  write_clcd();
 8001324:	f000 f9a8 	bl	8001678 <write_clcd>
	  end_time_CLCD = HAL_GetTick();
 8001328:	f000 fcd0 	bl	8001ccc <HAL_GetTick>
 800132c:	4603      	mov	r3, r0
 800132e:	4a19      	ldr	r2, [pc, #100]	; (8001394 <main+0x100>)
 8001330:	6013      	str	r3, [r2, #0]
	  elapsed_time_CLCD = -(start_time_CLCD - end_time_CLCD);
 8001332:	4b18      	ldr	r3, [pc, #96]	; (8001394 <main+0x100>)
 8001334:	681a      	ldr	r2, [r3, #0]
 8001336:	4b16      	ldr	r3, [pc, #88]	; (8001390 <main+0xfc>)
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	1ad3      	subs	r3, r2, r3
 800133c:	4a16      	ldr	r2, [pc, #88]	; (8001398 <main+0x104>)
 800133e:	6013      	str	r3, [r2, #0]

	  start_time_UART = HAL_GetTick();
 8001340:	f000 fcc4 	bl	8001ccc <HAL_GetTick>
 8001344:	4603      	mov	r3, r0
 8001346:	4a15      	ldr	r2, [pc, #84]	; (800139c <main+0x108>)
 8001348:	6013      	str	r3, [r2, #0]
	  send_uart();
 800134a:	f000 fa1f 	bl	800178c <send_uart>
	  end_time_UART = HAL_GetTick();
 800134e:	f000 fcbd 	bl	8001ccc <HAL_GetTick>
 8001352:	4603      	mov	r3, r0
 8001354:	4a12      	ldr	r2, [pc, #72]	; (80013a0 <main+0x10c>)
 8001356:	6013      	str	r3, [r2, #0]
	  elapsed_time_UART = -(start_time_UART - end_time_UART);
 8001358:	4b11      	ldr	r3, [pc, #68]	; (80013a0 <main+0x10c>)
 800135a:	681a      	ldr	r2, [r3, #0]
 800135c:	4b0f      	ldr	r3, [pc, #60]	; (800139c <main+0x108>)
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	1ad3      	subs	r3, r2, r3
 8001362:	4a10      	ldr	r2, [pc, #64]	; (80013a4 <main+0x110>)
 8001364:	6013      	str	r3, [r2, #0]
  if(uwTick%p == 0){
 8001366:	e7ba      	b.n	80012de <main+0x4a>
 8001368:	20000258 	.word	0x20000258
 800136c:	200002f4 	.word	0x200002f4
 8001370:	08007740 	.word	0x08007740
 8001374:	20000310 	.word	0x20000310
 8001378:	200002ac 	.word	0x200002ac
 800137c:	20000340 	.word	0x20000340
 8001380:	20000000 	.word	0x20000000
 8001384:	20000318 	.word	0x20000318
 8001388:	2000031c 	.word	0x2000031c
 800138c:	20000320 	.word	0x20000320
 8001390:	20000324 	.word	0x20000324
 8001394:	20000328 	.word	0x20000328
 8001398:	2000032c 	.word	0x2000032c
 800139c:	20000330 	.word	0x20000330
 80013a0:	20000334 	.word	0x20000334
 80013a4:	20000338 	.word	0x20000338

080013a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b090      	sub	sp, #64	; 0x40
 80013ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80013ae:	f107 0318 	add.w	r3, r7, #24
 80013b2:	2228      	movs	r2, #40	; 0x28
 80013b4:	2100      	movs	r1, #0
 80013b6:	4618      	mov	r0, r3
 80013b8:	f004 f91c 	bl	80055f4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80013bc:	1d3b      	adds	r3, r7, #4
 80013be:	2200      	movs	r2, #0
 80013c0:	601a      	str	r2, [r3, #0]
 80013c2:	605a      	str	r2, [r3, #4]
 80013c4:	609a      	str	r2, [r3, #8]
 80013c6:	60da      	str	r2, [r3, #12]
 80013c8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80013ca:	2302      	movs	r3, #2
 80013cc:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80013ce:	2301      	movs	r3, #1
 80013d0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80013d2:	2310      	movs	r3, #16
 80013d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80013d6:	2300      	movs	r3, #0
 80013d8:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80013da:	f107 0318 	add.w	r3, r7, #24
 80013de:	4618      	mov	r0, r3
 80013e0:	f002 f81a 	bl	8003418 <HAL_RCC_OscConfig>
 80013e4:	4603      	mov	r3, r0
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d001      	beq.n	80013ee <SystemClock_Config+0x46>
  {
    Error_Handler();
 80013ea:	f000 fa01 	bl	80017f0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80013ee:	230f      	movs	r3, #15
 80013f0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80013f2:	2300      	movs	r3, #0
 80013f4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80013f6:	2300      	movs	r3, #0
 80013f8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80013fa:	2300      	movs	r3, #0
 80013fc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80013fe:	2300      	movs	r3, #0
 8001400:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001402:	1d3b      	adds	r3, r7, #4
 8001404:	2100      	movs	r1, #0
 8001406:	4618      	mov	r0, r3
 8001408:	f002 fa88 	bl	800391c <HAL_RCC_ClockConfig>
 800140c:	4603      	mov	r3, r0
 800140e:	2b00      	cmp	r3, #0
 8001410:	d001      	beq.n	8001416 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8001412:	f000 f9ed 	bl	80017f0 <Error_Handler>
  }
}
 8001416:	bf00      	nop
 8001418:	3740      	adds	r7, #64	; 0x40
 800141a:	46bd      	mov	sp, r7
 800141c:	bd80      	pop	{r7, pc}
	...

08001420 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001424:	4b12      	ldr	r3, [pc, #72]	; (8001470 <MX_I2C1_Init+0x50>)
 8001426:	4a13      	ldr	r2, [pc, #76]	; (8001474 <MX_I2C1_Init+0x54>)
 8001428:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800142a:	4b11      	ldr	r3, [pc, #68]	; (8001470 <MX_I2C1_Init+0x50>)
 800142c:	4a12      	ldr	r2, [pc, #72]	; (8001478 <MX_I2C1_Init+0x58>)
 800142e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001430:	4b0f      	ldr	r3, [pc, #60]	; (8001470 <MX_I2C1_Init+0x50>)
 8001432:	2200      	movs	r2, #0
 8001434:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001436:	4b0e      	ldr	r3, [pc, #56]	; (8001470 <MX_I2C1_Init+0x50>)
 8001438:	2200      	movs	r2, #0
 800143a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800143c:	4b0c      	ldr	r3, [pc, #48]	; (8001470 <MX_I2C1_Init+0x50>)
 800143e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001442:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001444:	4b0a      	ldr	r3, [pc, #40]	; (8001470 <MX_I2C1_Init+0x50>)
 8001446:	2200      	movs	r2, #0
 8001448:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800144a:	4b09      	ldr	r3, [pc, #36]	; (8001470 <MX_I2C1_Init+0x50>)
 800144c:	2200      	movs	r2, #0
 800144e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001450:	4b07      	ldr	r3, [pc, #28]	; (8001470 <MX_I2C1_Init+0x50>)
 8001452:	2200      	movs	r2, #0
 8001454:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001456:	4b06      	ldr	r3, [pc, #24]	; (8001470 <MX_I2C1_Init+0x50>)
 8001458:	2200      	movs	r2, #0
 800145a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800145c:	4804      	ldr	r0, [pc, #16]	; (8001470 <MX_I2C1_Init+0x50>)
 800145e:	f000 ffa7 	bl	80023b0 <HAL_I2C_Init>
 8001462:	4603      	mov	r3, r0
 8001464:	2b00      	cmp	r3, #0
 8001466:	d001      	beq.n	800146c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001468:	f000 f9c2 	bl	80017f0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800146c:	bf00      	nop
 800146e:	bd80      	pop	{r7, pc}
 8001470:	20000204 	.word	0x20000204
 8001474:	40005400 	.word	0x40005400
 8001478:	000186a0 	.word	0x000186a0

0800147c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001480:	4b12      	ldr	r3, [pc, #72]	; (80014cc <MX_I2C2_Init+0x50>)
 8001482:	4a13      	ldr	r2, [pc, #76]	; (80014d0 <MX_I2C2_Init+0x54>)
 8001484:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8001486:	4b11      	ldr	r3, [pc, #68]	; (80014cc <MX_I2C2_Init+0x50>)
 8001488:	4a12      	ldr	r2, [pc, #72]	; (80014d4 <MX_I2C2_Init+0x58>)
 800148a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800148c:	4b0f      	ldr	r3, [pc, #60]	; (80014cc <MX_I2C2_Init+0x50>)
 800148e:	2200      	movs	r2, #0
 8001490:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8001492:	4b0e      	ldr	r3, [pc, #56]	; (80014cc <MX_I2C2_Init+0x50>)
 8001494:	2200      	movs	r2, #0
 8001496:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001498:	4b0c      	ldr	r3, [pc, #48]	; (80014cc <MX_I2C2_Init+0x50>)
 800149a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800149e:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80014a0:	4b0a      	ldr	r3, [pc, #40]	; (80014cc <MX_I2C2_Init+0x50>)
 80014a2:	2200      	movs	r2, #0
 80014a4:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80014a6:	4b09      	ldr	r3, [pc, #36]	; (80014cc <MX_I2C2_Init+0x50>)
 80014a8:	2200      	movs	r2, #0
 80014aa:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80014ac:	4b07      	ldr	r3, [pc, #28]	; (80014cc <MX_I2C2_Init+0x50>)
 80014ae:	2200      	movs	r2, #0
 80014b0:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80014b2:	4b06      	ldr	r3, [pc, #24]	; (80014cc <MX_I2C2_Init+0x50>)
 80014b4:	2200      	movs	r2, #0
 80014b6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80014b8:	4804      	ldr	r0, [pc, #16]	; (80014cc <MX_I2C2_Init+0x50>)
 80014ba:	f000 ff79 	bl	80023b0 <HAL_I2C_Init>
 80014be:	4603      	mov	r3, r0
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d001      	beq.n	80014c8 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80014c4:	f000 f994 	bl	80017f0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80014c8:	bf00      	nop
 80014ca:	bd80      	pop	{r7, pc}
 80014cc:	20000258 	.word	0x20000258
 80014d0:	40005800 	.word	0x40005800
 80014d4:	000186a0 	.word	0x000186a0

080014d8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80014dc:	4b11      	ldr	r3, [pc, #68]	; (8001524 <MX_USART1_UART_Init+0x4c>)
 80014de:	4a12      	ldr	r2, [pc, #72]	; (8001528 <MX_USART1_UART_Init+0x50>)
 80014e0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80014e2:	4b10      	ldr	r3, [pc, #64]	; (8001524 <MX_USART1_UART_Init+0x4c>)
 80014e4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80014e8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80014ea:	4b0e      	ldr	r3, [pc, #56]	; (8001524 <MX_USART1_UART_Init+0x4c>)
 80014ec:	2200      	movs	r2, #0
 80014ee:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80014f0:	4b0c      	ldr	r3, [pc, #48]	; (8001524 <MX_USART1_UART_Init+0x4c>)
 80014f2:	2200      	movs	r2, #0
 80014f4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80014f6:	4b0b      	ldr	r3, [pc, #44]	; (8001524 <MX_USART1_UART_Init+0x4c>)
 80014f8:	2200      	movs	r2, #0
 80014fa:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80014fc:	4b09      	ldr	r3, [pc, #36]	; (8001524 <MX_USART1_UART_Init+0x4c>)
 80014fe:	220c      	movs	r2, #12
 8001500:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001502:	4b08      	ldr	r3, [pc, #32]	; (8001524 <MX_USART1_UART_Init+0x4c>)
 8001504:	2200      	movs	r2, #0
 8001506:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001508:	4b06      	ldr	r3, [pc, #24]	; (8001524 <MX_USART1_UART_Init+0x4c>)
 800150a:	2200      	movs	r2, #0
 800150c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800150e:	4805      	ldr	r0, [pc, #20]	; (8001524 <MX_USART1_UART_Init+0x4c>)
 8001510:	f002 fb92 	bl	8003c38 <HAL_UART_Init>
 8001514:	4603      	mov	r3, r0
 8001516:	2b00      	cmp	r3, #0
 8001518:	d001      	beq.n	800151e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800151a:	f000 f969 	bl	80017f0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800151e:	bf00      	nop
 8001520:	bd80      	pop	{r7, pc}
 8001522:	bf00      	nop
 8001524:	200002ac 	.word	0x200002ac
 8001528:	40013800 	.word	0x40013800

0800152c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800152c:	b480      	push	{r7}
 800152e:	b083      	sub	sp, #12
 8001530:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001532:	4b0e      	ldr	r3, [pc, #56]	; (800156c <MX_GPIO_Init+0x40>)
 8001534:	699b      	ldr	r3, [r3, #24]
 8001536:	4a0d      	ldr	r2, [pc, #52]	; (800156c <MX_GPIO_Init+0x40>)
 8001538:	f043 0308 	orr.w	r3, r3, #8
 800153c:	6193      	str	r3, [r2, #24]
 800153e:	4b0b      	ldr	r3, [pc, #44]	; (800156c <MX_GPIO_Init+0x40>)
 8001540:	699b      	ldr	r3, [r3, #24]
 8001542:	f003 0308 	and.w	r3, r3, #8
 8001546:	607b      	str	r3, [r7, #4]
 8001548:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800154a:	4b08      	ldr	r3, [pc, #32]	; (800156c <MX_GPIO_Init+0x40>)
 800154c:	699b      	ldr	r3, [r3, #24]
 800154e:	4a07      	ldr	r2, [pc, #28]	; (800156c <MX_GPIO_Init+0x40>)
 8001550:	f043 0304 	orr.w	r3, r3, #4
 8001554:	6193      	str	r3, [r2, #24]
 8001556:	4b05      	ldr	r3, [pc, #20]	; (800156c <MX_GPIO_Init+0x40>)
 8001558:	699b      	ldr	r3, [r3, #24]
 800155a:	f003 0304 	and.w	r3, r3, #4
 800155e:	603b      	str	r3, [r7, #0]
 8001560:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001562:	bf00      	nop
 8001564:	370c      	adds	r7, #12
 8001566:	46bd      	mov	sp, r7
 8001568:	bc80      	pop	{r7}
 800156a:	4770      	bx	lr
 800156c:	40021000 	.word	0x40021000

08001570 <measure>:

/* USER CODE BEGIN 4 */
void measure(){
 8001570:	b580      	push	{r7, lr}
 8001572:	b084      	sub	sp, #16
 8001574:	af02      	add	r7, sp, #8
	uint16_t hex_ther;
	uint16_t hex_moisture;
	HAL_I2C_Master_Transmit(&hi2c1,SHTC3_ADDRESS, wakeup_cmd ,2, 500);
 8001576:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800157a:	9300      	str	r3, [sp, #0]
 800157c:	2302      	movs	r3, #2
 800157e:	4a33      	ldr	r2, [pc, #204]	; (800164c <measure+0xdc>)
 8001580:	21e0      	movs	r1, #224	; 0xe0
 8001582:	4833      	ldr	r0, [pc, #204]	; (8001650 <measure+0xe0>)
 8001584:	f001 f858 	bl	8002638 <HAL_I2C_Master_Transmit>
	HAL_Delay(1);
 8001588:	2001      	movs	r0, #1
 800158a:	f000 fba9 	bl	8001ce0 <HAL_Delay>
	HAL_I2C_Master_Transmit(&hi2c1,SHTC3_ADDRESS, measure_cmd ,2, 500);
 800158e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001592:	9300      	str	r3, [sp, #0]
 8001594:	2302      	movs	r3, #2
 8001596:	4a2f      	ldr	r2, [pc, #188]	; (8001654 <measure+0xe4>)
 8001598:	21e0      	movs	r1, #224	; 0xe0
 800159a:	482d      	ldr	r0, [pc, #180]	; (8001650 <measure+0xe0>)
 800159c:	f001 f84c 	bl	8002638 <HAL_I2C_Master_Transmit>
	HAL_Delay(15);
 80015a0:	200f      	movs	r0, #15
 80015a2:	f000 fb9d 	bl	8001ce0 <HAL_Delay>
	HAL_I2C_Master_Receive(&hi2c1,SHTC3_ADDRESS, rev_buffer ,6,500);
 80015a6:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80015aa:	9300      	str	r3, [sp, #0]
 80015ac:	2306      	movs	r3, #6
 80015ae:	4a2a      	ldr	r2, [pc, #168]	; (8001658 <measure+0xe8>)
 80015b0:	21e0      	movs	r1, #224	; 0xe0
 80015b2:	4827      	ldr	r0, [pc, #156]	; (8001650 <measure+0xe0>)
 80015b4:	f001 f93e 	bl	8002834 <HAL_I2C_Master_Receive>
	HAL_I2C_Master_Transmit(&hi2c1,SHTC3_ADDRESS, sleep_cmd ,2, 500);
 80015b8:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80015bc:	9300      	str	r3, [sp, #0]
 80015be:	2302      	movs	r3, #2
 80015c0:	4a26      	ldr	r2, [pc, #152]	; (800165c <measure+0xec>)
 80015c2:	21e0      	movs	r1, #224	; 0xe0
 80015c4:	4822      	ldr	r0, [pc, #136]	; (8001650 <measure+0xe0>)
 80015c6:	f001 f837 	bl	8002638 <HAL_I2C_Master_Transmit>
	hex_ther = (rev_buffer[0]<<8)|rev_buffer[1];
 80015ca:	4b23      	ldr	r3, [pc, #140]	; (8001658 <measure+0xe8>)
 80015cc:	781b      	ldrb	r3, [r3, #0]
 80015ce:	021b      	lsls	r3, r3, #8
 80015d0:	b21a      	sxth	r2, r3
 80015d2:	4b21      	ldr	r3, [pc, #132]	; (8001658 <measure+0xe8>)
 80015d4:	785b      	ldrb	r3, [r3, #1]
 80015d6:	b21b      	sxth	r3, r3
 80015d8:	4313      	orrs	r3, r2
 80015da:	b21b      	sxth	r3, r3
 80015dc:	80fb      	strh	r3, [r7, #6]
	hex_moisture = (rev_buffer[3]<<8)|rev_buffer[4];
 80015de:	4b1e      	ldr	r3, [pc, #120]	; (8001658 <measure+0xe8>)
 80015e0:	78db      	ldrb	r3, [r3, #3]
 80015e2:	021b      	lsls	r3, r3, #8
 80015e4:	b21a      	sxth	r2, r3
 80015e6:	4b1c      	ldr	r3, [pc, #112]	; (8001658 <measure+0xe8>)
 80015e8:	791b      	ldrb	r3, [r3, #4]
 80015ea:	b21b      	sxth	r3, r3
 80015ec:	4313      	orrs	r3, r2
 80015ee:	b21b      	sxth	r3, r3
 80015f0:	80bb      	strh	r3, [r7, #4]
	temperature = -45.0f + 175.0f * (float)hex_ther / 65535.0f;
 80015f2:	88fb      	ldrh	r3, [r7, #6]
 80015f4:	4618      	mov	r0, r3
 80015f6:	f7ff fafd 	bl	8000bf4 <__aeabi_ui2f>
 80015fa:	4603      	mov	r3, r0
 80015fc:	4918      	ldr	r1, [pc, #96]	; (8001660 <measure+0xf0>)
 80015fe:	4618      	mov	r0, r3
 8001600:	f7ff fb50 	bl	8000ca4 <__aeabi_fmul>
 8001604:	4603      	mov	r3, r0
 8001606:	4917      	ldr	r1, [pc, #92]	; (8001664 <measure+0xf4>)
 8001608:	4618      	mov	r0, r3
 800160a:	f7ff fbff 	bl	8000e0c <__aeabi_fdiv>
 800160e:	4603      	mov	r3, r0
 8001610:	4915      	ldr	r1, [pc, #84]	; (8001668 <measure+0xf8>)
 8001612:	4618      	mov	r0, r3
 8001614:	f7ff fa3c 	bl	8000a90 <__aeabi_fsub>
 8001618:	4603      	mov	r3, r0
 800161a:	461a      	mov	r2, r3
 800161c:	4b13      	ldr	r3, [pc, #76]	; (800166c <measure+0xfc>)
 800161e:	601a      	str	r2, [r3, #0]
	humidity = 100.0f * (float)hex_moisture / 65535.0f;
 8001620:	88bb      	ldrh	r3, [r7, #4]
 8001622:	4618      	mov	r0, r3
 8001624:	f7ff fae6 	bl	8000bf4 <__aeabi_ui2f>
 8001628:	4603      	mov	r3, r0
 800162a:	4911      	ldr	r1, [pc, #68]	; (8001670 <measure+0x100>)
 800162c:	4618      	mov	r0, r3
 800162e:	f7ff fb39 	bl	8000ca4 <__aeabi_fmul>
 8001632:	4603      	mov	r3, r0
 8001634:	490b      	ldr	r1, [pc, #44]	; (8001664 <measure+0xf4>)
 8001636:	4618      	mov	r0, r3
 8001638:	f7ff fbe8 	bl	8000e0c <__aeabi_fdiv>
 800163c:	4603      	mov	r3, r0
 800163e:	461a      	mov	r2, r3
 8001640:	4b0c      	ldr	r3, [pc, #48]	; (8001674 <measure+0x104>)
 8001642:	601a      	str	r2, [r3, #0]
}
 8001644:	bf00      	nop
 8001646:	3708      	adds	r7, #8
 8001648:	46bd      	mov	sp, r7
 800164a:	bd80      	pop	{r7, pc}
 800164c:	20000008 	.word	0x20000008
 8001650:	20000204 	.word	0x20000204
 8001654:	2000000c 	.word	0x2000000c
 8001658:	20000300 	.word	0x20000300
 800165c:	20000010 	.word	0x20000010
 8001660:	432f0000 	.word	0x432f0000
 8001664:	477fff00 	.word	0x477fff00
 8001668:	42340000 	.word	0x42340000
 800166c:	20000308 	.word	0x20000308
 8001670:	42c80000 	.word	0x42c80000
 8001674:	2000030c 	.word	0x2000030c

08001678 <write_clcd>:

void write_clcd(){
 8001678:	b580      	push	{r7, lr}
 800167a:	b084      	sub	sp, #16
 800167c:	af00      	add	r7, sp, #0
// char temp_str[16];
  char lcd_str[16];
  switch(DisplayMode){
 800167e:	4b3c      	ldr	r3, [pc, #240]	; (8001770 <write_clcd+0xf8>)
 8001680:	781b      	ldrb	r3, [r3, #0]
 8001682:	b2db      	uxtb	r3, r3
 8001684:	2b02      	cmp	r3, #2
 8001686:	d006      	beq.n	8001696 <write_clcd+0x1e>
 8001688:	2b02      	cmp	r3, #2
 800168a:	dc6d      	bgt.n	8001768 <write_clcd+0xf0>
 800168c:	2b00      	cmp	r3, #0
 800168e:	d04c      	beq.n	800172a <write_clcd+0xb2>
 8001690:	2b01      	cmp	r3, #1
 8001692:	d02b      	beq.n	80016ec <write_clcd+0x74>
	CLCD_I2C_WriteString(&LCD1,lcd_str);
	CLCD_I2C_SetCursor(&LCD1,0,1);
	CLCD_I2C_WriteString(&LCD1,"                ");
	break;
  }
}
 8001694:	e068      	b.n	8001768 <write_clcd+0xf0>
	sprintf(lcd_str, "Humidity: %.2f%%", humidity);
 8001696:	4b37      	ldr	r3, [pc, #220]	; (8001774 <write_clcd+0xfc>)
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	4618      	mov	r0, r3
 800169c:	f7fe fec4 	bl	8000428 <__aeabi_f2d>
 80016a0:	4602      	mov	r2, r0
 80016a2:	460b      	mov	r3, r1
 80016a4:	4638      	mov	r0, r7
 80016a6:	4934      	ldr	r1, [pc, #208]	; (8001778 <write_clcd+0x100>)
 80016a8:	f003 feac 	bl	8005404 <siprintf>
	CLCD_I2C_SetCursor(&LCD1,0,1);
 80016ac:	2201      	movs	r2, #1
 80016ae:	2100      	movs	r1, #0
 80016b0:	4832      	ldr	r0, [pc, #200]	; (800177c <write_clcd+0x104>)
 80016b2:	f7ff fd1b 	bl	80010ec <CLCD_I2C_SetCursor>
	CLCD_I2C_WriteString(&LCD1,lcd_str);
 80016b6:	463b      	mov	r3, r7
 80016b8:	4619      	mov	r1, r3
 80016ba:	4830      	ldr	r0, [pc, #192]	; (800177c <write_clcd+0x104>)
 80016bc:	f7ff fd69 	bl	8001192 <CLCD_I2C_WriteString>
	sprintf(lcd_str, "Temp: %.2f C   ",temperature);
 80016c0:	4b2f      	ldr	r3, [pc, #188]	; (8001780 <write_clcd+0x108>)
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	4618      	mov	r0, r3
 80016c6:	f7fe feaf 	bl	8000428 <__aeabi_f2d>
 80016ca:	4602      	mov	r2, r0
 80016cc:	460b      	mov	r3, r1
 80016ce:	4638      	mov	r0, r7
 80016d0:	492c      	ldr	r1, [pc, #176]	; (8001784 <write_clcd+0x10c>)
 80016d2:	f003 fe97 	bl	8005404 <siprintf>
	CLCD_I2C_SetCursor(&LCD1,0,0);
 80016d6:	2200      	movs	r2, #0
 80016d8:	2100      	movs	r1, #0
 80016da:	4828      	ldr	r0, [pc, #160]	; (800177c <write_clcd+0x104>)
 80016dc:	f7ff fd06 	bl	80010ec <CLCD_I2C_SetCursor>
	CLCD_I2C_WriteString(&LCD1,lcd_str);
 80016e0:	463b      	mov	r3, r7
 80016e2:	4619      	mov	r1, r3
 80016e4:	4825      	ldr	r0, [pc, #148]	; (800177c <write_clcd+0x104>)
 80016e6:	f7ff fd54 	bl	8001192 <CLCD_I2C_WriteString>
	break;
 80016ea:	e03d      	b.n	8001768 <write_clcd+0xf0>
	sprintf(lcd_str, "Humidity: %.2f%%", humidity);
 80016ec:	4b21      	ldr	r3, [pc, #132]	; (8001774 <write_clcd+0xfc>)
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	4618      	mov	r0, r3
 80016f2:	f7fe fe99 	bl	8000428 <__aeabi_f2d>
 80016f6:	4602      	mov	r2, r0
 80016f8:	460b      	mov	r3, r1
 80016fa:	4638      	mov	r0, r7
 80016fc:	491e      	ldr	r1, [pc, #120]	; (8001778 <write_clcd+0x100>)
 80016fe:	f003 fe81 	bl	8005404 <siprintf>
	CLCD_I2C_SetCursor(&LCD1,0,0);
 8001702:	2200      	movs	r2, #0
 8001704:	2100      	movs	r1, #0
 8001706:	481d      	ldr	r0, [pc, #116]	; (800177c <write_clcd+0x104>)
 8001708:	f7ff fcf0 	bl	80010ec <CLCD_I2C_SetCursor>
	CLCD_I2C_WriteString(&LCD1,lcd_str);
 800170c:	463b      	mov	r3, r7
 800170e:	4619      	mov	r1, r3
 8001710:	481a      	ldr	r0, [pc, #104]	; (800177c <write_clcd+0x104>)
 8001712:	f7ff fd3e 	bl	8001192 <CLCD_I2C_WriteString>
	CLCD_I2C_SetCursor(&LCD1,0,1);
 8001716:	2201      	movs	r2, #1
 8001718:	2100      	movs	r1, #0
 800171a:	4818      	ldr	r0, [pc, #96]	; (800177c <write_clcd+0x104>)
 800171c:	f7ff fce6 	bl	80010ec <CLCD_I2C_SetCursor>
	CLCD_I2C_WriteString(&LCD1,"                ");
 8001720:	4919      	ldr	r1, [pc, #100]	; (8001788 <write_clcd+0x110>)
 8001722:	4816      	ldr	r0, [pc, #88]	; (800177c <write_clcd+0x104>)
 8001724:	f7ff fd35 	bl	8001192 <CLCD_I2C_WriteString>
	break;
 8001728:	e01e      	b.n	8001768 <write_clcd+0xf0>
	sprintf(lcd_str, "Temp: %.2f C   ",temperature);
 800172a:	4b15      	ldr	r3, [pc, #84]	; (8001780 <write_clcd+0x108>)
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	4618      	mov	r0, r3
 8001730:	f7fe fe7a 	bl	8000428 <__aeabi_f2d>
 8001734:	4602      	mov	r2, r0
 8001736:	460b      	mov	r3, r1
 8001738:	4638      	mov	r0, r7
 800173a:	4912      	ldr	r1, [pc, #72]	; (8001784 <write_clcd+0x10c>)
 800173c:	f003 fe62 	bl	8005404 <siprintf>
	CLCD_I2C_SetCursor(&LCD1,0,0);
 8001740:	2200      	movs	r2, #0
 8001742:	2100      	movs	r1, #0
 8001744:	480d      	ldr	r0, [pc, #52]	; (800177c <write_clcd+0x104>)
 8001746:	f7ff fcd1 	bl	80010ec <CLCD_I2C_SetCursor>
	CLCD_I2C_WriteString(&LCD1,lcd_str);
 800174a:	463b      	mov	r3, r7
 800174c:	4619      	mov	r1, r3
 800174e:	480b      	ldr	r0, [pc, #44]	; (800177c <write_clcd+0x104>)
 8001750:	f7ff fd1f 	bl	8001192 <CLCD_I2C_WriteString>
	CLCD_I2C_SetCursor(&LCD1,0,1);
 8001754:	2201      	movs	r2, #1
 8001756:	2100      	movs	r1, #0
 8001758:	4808      	ldr	r0, [pc, #32]	; (800177c <write_clcd+0x104>)
 800175a:	f7ff fcc7 	bl	80010ec <CLCD_I2C_SetCursor>
	CLCD_I2C_WriteString(&LCD1,"                ");
 800175e:	490a      	ldr	r1, [pc, #40]	; (8001788 <write_clcd+0x110>)
 8001760:	4806      	ldr	r0, [pc, #24]	; (800177c <write_clcd+0x104>)
 8001762:	f7ff fd16 	bl	8001192 <CLCD_I2C_WriteString>
	break;
 8001766:	bf00      	nop
}
 8001768:	bf00      	nop
 800176a:	3710      	adds	r7, #16
 800176c:	46bd      	mov	sp, r7
 800176e:	bd80      	pop	{r7, pc}
 8001770:	20000004 	.word	0x20000004
 8001774:	2000030c 	.word	0x2000030c
 8001778:	08007748 	.word	0x08007748
 800177c:	200002f4 	.word	0x200002f4
 8001780:	20000308 	.word	0x20000308
 8001784:	0800775c 	.word	0x0800775c
 8001788:	0800776c 	.word	0x0800776c

0800178c <send_uart>:
void send_uart(){
 800178c:	b5b0      	push	{r4, r5, r7, lr}
 800178e:	b092      	sub	sp, #72	; 0x48
 8001790:	af02      	add	r7, sp, #8
  char data[64];
  sprintf(data, "Temperature: %.2f C, Humidity: %.2f%%\r\n", temperature, humidity);
 8001792:	4b13      	ldr	r3, [pc, #76]	; (80017e0 <send_uart+0x54>)
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	4618      	mov	r0, r3
 8001798:	f7fe fe46 	bl	8000428 <__aeabi_f2d>
 800179c:	4604      	mov	r4, r0
 800179e:	460d      	mov	r5, r1
 80017a0:	4b10      	ldr	r3, [pc, #64]	; (80017e4 <send_uart+0x58>)
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	4618      	mov	r0, r3
 80017a6:	f7fe fe3f 	bl	8000428 <__aeabi_f2d>
 80017aa:	4602      	mov	r2, r0
 80017ac:	460b      	mov	r3, r1
 80017ae:	4638      	mov	r0, r7
 80017b0:	e9cd 2300 	strd	r2, r3, [sp]
 80017b4:	4622      	mov	r2, r4
 80017b6:	462b      	mov	r3, r5
 80017b8:	490b      	ldr	r1, [pc, #44]	; (80017e8 <send_uart+0x5c>)
 80017ba:	f003 fe23 	bl	8005404 <siprintf>
  HAL_UART_Transmit(&huart1, (uint8_t*)data, strlen(data), 1000);
 80017be:	463b      	mov	r3, r7
 80017c0:	4618      	mov	r0, r3
 80017c2:	f7fe fcc5 	bl	8000150 <strlen>
 80017c6:	4603      	mov	r3, r0
 80017c8:	b29a      	uxth	r2, r3
 80017ca:	4639      	mov	r1, r7
 80017cc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80017d0:	4806      	ldr	r0, [pc, #24]	; (80017ec <send_uart+0x60>)
 80017d2:	f002 fa81 	bl	8003cd8 <HAL_UART_Transmit>
}
 80017d6:	bf00      	nop
 80017d8:	3740      	adds	r7, #64	; 0x40
 80017da:	46bd      	mov	sp, r7
 80017dc:	bdb0      	pop	{r4, r5, r7, pc}
 80017de:	bf00      	nop
 80017e0:	20000308 	.word	0x20000308
 80017e4:	2000030c 	.word	0x2000030c
 80017e8:	08007780 	.word	0x08007780
 80017ec:	200002ac 	.word	0x200002ac

080017f0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80017f0:	b480      	push	{r7}
 80017f2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80017f4:	b672      	cpsid	i
}
 80017f6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80017f8:	e7fe      	b.n	80017f8 <Error_Handler+0x8>
	...

080017fc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80017fc:	b480      	push	{r7}
 80017fe:	b085      	sub	sp, #20
 8001800:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001802:	4b15      	ldr	r3, [pc, #84]	; (8001858 <HAL_MspInit+0x5c>)
 8001804:	699b      	ldr	r3, [r3, #24]
 8001806:	4a14      	ldr	r2, [pc, #80]	; (8001858 <HAL_MspInit+0x5c>)
 8001808:	f043 0301 	orr.w	r3, r3, #1
 800180c:	6193      	str	r3, [r2, #24]
 800180e:	4b12      	ldr	r3, [pc, #72]	; (8001858 <HAL_MspInit+0x5c>)
 8001810:	699b      	ldr	r3, [r3, #24]
 8001812:	f003 0301 	and.w	r3, r3, #1
 8001816:	60bb      	str	r3, [r7, #8]
 8001818:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800181a:	4b0f      	ldr	r3, [pc, #60]	; (8001858 <HAL_MspInit+0x5c>)
 800181c:	69db      	ldr	r3, [r3, #28]
 800181e:	4a0e      	ldr	r2, [pc, #56]	; (8001858 <HAL_MspInit+0x5c>)
 8001820:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001824:	61d3      	str	r3, [r2, #28]
 8001826:	4b0c      	ldr	r3, [pc, #48]	; (8001858 <HAL_MspInit+0x5c>)
 8001828:	69db      	ldr	r3, [r3, #28]
 800182a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800182e:	607b      	str	r3, [r7, #4]
 8001830:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001832:	4b0a      	ldr	r3, [pc, #40]	; (800185c <HAL_MspInit+0x60>)
 8001834:	685b      	ldr	r3, [r3, #4]
 8001836:	60fb      	str	r3, [r7, #12]
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800183e:	60fb      	str	r3, [r7, #12]
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001846:	60fb      	str	r3, [r7, #12]
 8001848:	4a04      	ldr	r2, [pc, #16]	; (800185c <HAL_MspInit+0x60>)
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800184e:	bf00      	nop
 8001850:	3714      	adds	r7, #20
 8001852:	46bd      	mov	sp, r7
 8001854:	bc80      	pop	{r7}
 8001856:	4770      	bx	lr
 8001858:	40021000 	.word	0x40021000
 800185c:	40010000 	.word	0x40010000

08001860 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	b08a      	sub	sp, #40	; 0x28
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001868:	f107 0318 	add.w	r3, r7, #24
 800186c:	2200      	movs	r2, #0
 800186e:	601a      	str	r2, [r3, #0]
 8001870:	605a      	str	r2, [r3, #4]
 8001872:	609a      	str	r2, [r3, #8]
 8001874:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	4a2b      	ldr	r2, [pc, #172]	; (8001928 <HAL_I2C_MspInit+0xc8>)
 800187c:	4293      	cmp	r3, r2
 800187e:	d124      	bne.n	80018ca <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001880:	4b2a      	ldr	r3, [pc, #168]	; (800192c <HAL_I2C_MspInit+0xcc>)
 8001882:	699b      	ldr	r3, [r3, #24]
 8001884:	4a29      	ldr	r2, [pc, #164]	; (800192c <HAL_I2C_MspInit+0xcc>)
 8001886:	f043 0308 	orr.w	r3, r3, #8
 800188a:	6193      	str	r3, [r2, #24]
 800188c:	4b27      	ldr	r3, [pc, #156]	; (800192c <HAL_I2C_MspInit+0xcc>)
 800188e:	699b      	ldr	r3, [r3, #24]
 8001890:	f003 0308 	and.w	r3, r3, #8
 8001894:	617b      	str	r3, [r7, #20]
 8001896:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = SHTC3_SCL_Pin|SHTC3_SDA_Pin;
 8001898:	23c0      	movs	r3, #192	; 0xc0
 800189a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800189c:	2312      	movs	r3, #18
 800189e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80018a0:	2303      	movs	r3, #3
 80018a2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018a4:	f107 0318 	add.w	r3, r7, #24
 80018a8:	4619      	mov	r1, r3
 80018aa:	4821      	ldr	r0, [pc, #132]	; (8001930 <HAL_I2C_MspInit+0xd0>)
 80018ac:	f000 fbfc 	bl	80020a8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80018b0:	4b1e      	ldr	r3, [pc, #120]	; (800192c <HAL_I2C_MspInit+0xcc>)
 80018b2:	69db      	ldr	r3, [r3, #28]
 80018b4:	4a1d      	ldr	r2, [pc, #116]	; (800192c <HAL_I2C_MspInit+0xcc>)
 80018b6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80018ba:	61d3      	str	r3, [r2, #28]
 80018bc:	4b1b      	ldr	r3, [pc, #108]	; (800192c <HAL_I2C_MspInit+0xcc>)
 80018be:	69db      	ldr	r3, [r3, #28]
 80018c0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80018c4:	613b      	str	r3, [r7, #16]
 80018c6:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80018c8:	e029      	b.n	800191e <HAL_I2C_MspInit+0xbe>
  else if(hi2c->Instance==I2C2)
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	4a19      	ldr	r2, [pc, #100]	; (8001934 <HAL_I2C_MspInit+0xd4>)
 80018d0:	4293      	cmp	r3, r2
 80018d2:	d124      	bne.n	800191e <HAL_I2C_MspInit+0xbe>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018d4:	4b15      	ldr	r3, [pc, #84]	; (800192c <HAL_I2C_MspInit+0xcc>)
 80018d6:	699b      	ldr	r3, [r3, #24]
 80018d8:	4a14      	ldr	r2, [pc, #80]	; (800192c <HAL_I2C_MspInit+0xcc>)
 80018da:	f043 0308 	orr.w	r3, r3, #8
 80018de:	6193      	str	r3, [r2, #24]
 80018e0:	4b12      	ldr	r3, [pc, #72]	; (800192c <HAL_I2C_MspInit+0xcc>)
 80018e2:	699b      	ldr	r3, [r3, #24]
 80018e4:	f003 0308 	and.w	r3, r3, #8
 80018e8:	60fb      	str	r3, [r7, #12]
 80018ea:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 80018ec:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80018f0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80018f2:	2312      	movs	r3, #18
 80018f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80018f6:	2303      	movs	r3, #3
 80018f8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018fa:	f107 0318 	add.w	r3, r7, #24
 80018fe:	4619      	mov	r1, r3
 8001900:	480b      	ldr	r0, [pc, #44]	; (8001930 <HAL_I2C_MspInit+0xd0>)
 8001902:	f000 fbd1 	bl	80020a8 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001906:	4b09      	ldr	r3, [pc, #36]	; (800192c <HAL_I2C_MspInit+0xcc>)
 8001908:	69db      	ldr	r3, [r3, #28]
 800190a:	4a08      	ldr	r2, [pc, #32]	; (800192c <HAL_I2C_MspInit+0xcc>)
 800190c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001910:	61d3      	str	r3, [r2, #28]
 8001912:	4b06      	ldr	r3, [pc, #24]	; (800192c <HAL_I2C_MspInit+0xcc>)
 8001914:	69db      	ldr	r3, [r3, #28]
 8001916:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800191a:	60bb      	str	r3, [r7, #8]
 800191c:	68bb      	ldr	r3, [r7, #8]
}
 800191e:	bf00      	nop
 8001920:	3728      	adds	r7, #40	; 0x28
 8001922:	46bd      	mov	sp, r7
 8001924:	bd80      	pop	{r7, pc}
 8001926:	bf00      	nop
 8001928:	40005400 	.word	0x40005400
 800192c:	40021000 	.word	0x40021000
 8001930:	40010c00 	.word	0x40010c00
 8001934:	40005800 	.word	0x40005800

08001938 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	b088      	sub	sp, #32
 800193c:	af00      	add	r7, sp, #0
 800193e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001940:	f107 0310 	add.w	r3, r7, #16
 8001944:	2200      	movs	r2, #0
 8001946:	601a      	str	r2, [r3, #0]
 8001948:	605a      	str	r2, [r3, #4]
 800194a:	609a      	str	r2, [r3, #8]
 800194c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	4a20      	ldr	r2, [pc, #128]	; (80019d4 <HAL_UART_MspInit+0x9c>)
 8001954:	4293      	cmp	r3, r2
 8001956:	d139      	bne.n	80019cc <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001958:	4b1f      	ldr	r3, [pc, #124]	; (80019d8 <HAL_UART_MspInit+0xa0>)
 800195a:	699b      	ldr	r3, [r3, #24]
 800195c:	4a1e      	ldr	r2, [pc, #120]	; (80019d8 <HAL_UART_MspInit+0xa0>)
 800195e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001962:	6193      	str	r3, [r2, #24]
 8001964:	4b1c      	ldr	r3, [pc, #112]	; (80019d8 <HAL_UART_MspInit+0xa0>)
 8001966:	699b      	ldr	r3, [r3, #24]
 8001968:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800196c:	60fb      	str	r3, [r7, #12]
 800196e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001970:	4b19      	ldr	r3, [pc, #100]	; (80019d8 <HAL_UART_MspInit+0xa0>)
 8001972:	699b      	ldr	r3, [r3, #24]
 8001974:	4a18      	ldr	r2, [pc, #96]	; (80019d8 <HAL_UART_MspInit+0xa0>)
 8001976:	f043 0304 	orr.w	r3, r3, #4
 800197a:	6193      	str	r3, [r2, #24]
 800197c:	4b16      	ldr	r3, [pc, #88]	; (80019d8 <HAL_UART_MspInit+0xa0>)
 800197e:	699b      	ldr	r3, [r3, #24]
 8001980:	f003 0304 	and.w	r3, r3, #4
 8001984:	60bb      	str	r3, [r7, #8]
 8001986:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001988:	f44f 7300 	mov.w	r3, #512	; 0x200
 800198c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800198e:	2302      	movs	r3, #2
 8001990:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001992:	2303      	movs	r3, #3
 8001994:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001996:	f107 0310 	add.w	r3, r7, #16
 800199a:	4619      	mov	r1, r3
 800199c:	480f      	ldr	r0, [pc, #60]	; (80019dc <HAL_UART_MspInit+0xa4>)
 800199e:	f000 fb83 	bl	80020a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80019a2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80019a6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80019a8:	2300      	movs	r3, #0
 80019aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ac:	2300      	movs	r3, #0
 80019ae:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019b0:	f107 0310 	add.w	r3, r7, #16
 80019b4:	4619      	mov	r1, r3
 80019b6:	4809      	ldr	r0, [pc, #36]	; (80019dc <HAL_UART_MspInit+0xa4>)
 80019b8:	f000 fb76 	bl	80020a8 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80019bc:	2200      	movs	r2, #0
 80019be:	2100      	movs	r1, #0
 80019c0:	2025      	movs	r0, #37	; 0x25
 80019c2:	f000 fa88 	bl	8001ed6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80019c6:	2025      	movs	r0, #37	; 0x25
 80019c8:	f000 faa1 	bl	8001f0e <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 80019cc:	bf00      	nop
 80019ce:	3720      	adds	r7, #32
 80019d0:	46bd      	mov	sp, r7
 80019d2:	bd80      	pop	{r7, pc}
 80019d4:	40013800 	.word	0x40013800
 80019d8:	40021000 	.word	0x40021000
 80019dc:	40010800 	.word	0x40010800

080019e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80019e0:	b480      	push	{r7}
 80019e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80019e4:	e7fe      	b.n	80019e4 <NMI_Handler+0x4>

080019e6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80019e6:	b480      	push	{r7}
 80019e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80019ea:	e7fe      	b.n	80019ea <HardFault_Handler+0x4>

080019ec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80019ec:	b480      	push	{r7}
 80019ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80019f0:	e7fe      	b.n	80019f0 <MemManage_Handler+0x4>

080019f2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80019f2:	b480      	push	{r7}
 80019f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80019f6:	e7fe      	b.n	80019f6 <BusFault_Handler+0x4>

080019f8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80019f8:	b480      	push	{r7}
 80019fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80019fc:	e7fe      	b.n	80019fc <UsageFault_Handler+0x4>

080019fe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80019fe:	b480      	push	{r7}
 8001a00:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a02:	bf00      	nop
 8001a04:	46bd      	mov	sp, r7
 8001a06:	bc80      	pop	{r7}
 8001a08:	4770      	bx	lr

08001a0a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a0a:	b480      	push	{r7}
 8001a0c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a0e:	bf00      	nop
 8001a10:	46bd      	mov	sp, r7
 8001a12:	bc80      	pop	{r7}
 8001a14:	4770      	bx	lr

08001a16 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a16:	b480      	push	{r7}
 8001a18:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a1a:	bf00      	nop
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	bc80      	pop	{r7}
 8001a20:	4770      	bx	lr

08001a22 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a22:	b580      	push	{r7, lr}
 8001a24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a26:	f000 f93f 	bl	8001ca8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a2a:	bf00      	nop
 8001a2c:	bd80      	pop	{r7, pc}
	...

08001a30 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001a34:	4802      	ldr	r0, [pc, #8]	; (8001a40 <USART1_IRQHandler+0x10>)
 8001a36:	f002 f9ff 	bl	8003e38 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001a3a:	bf00      	nop
 8001a3c:	bd80      	pop	{r7, pc}
 8001a3e:	bf00      	nop
 8001a40:	200002ac 	.word	0x200002ac

08001a44 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001a44:	b480      	push	{r7}
 8001a46:	af00      	add	r7, sp, #0
  return 1;
 8001a48:	2301      	movs	r3, #1
}
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	bc80      	pop	{r7}
 8001a50:	4770      	bx	lr

08001a52 <_kill>:

int _kill(int pid, int sig)
{
 8001a52:	b580      	push	{r7, lr}
 8001a54:	b082      	sub	sp, #8
 8001a56:	af00      	add	r7, sp, #0
 8001a58:	6078      	str	r0, [r7, #4]
 8001a5a:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001a5c:	f003 fe1c 	bl	8005698 <__errno>
 8001a60:	4603      	mov	r3, r0
 8001a62:	2216      	movs	r2, #22
 8001a64:	601a      	str	r2, [r3, #0]
  return -1;
 8001a66:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	3708      	adds	r7, #8
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	bd80      	pop	{r7, pc}

08001a72 <_exit>:

void _exit (int status)
{
 8001a72:	b580      	push	{r7, lr}
 8001a74:	b082      	sub	sp, #8
 8001a76:	af00      	add	r7, sp, #0
 8001a78:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001a7a:	f04f 31ff 	mov.w	r1, #4294967295
 8001a7e:	6878      	ldr	r0, [r7, #4]
 8001a80:	f7ff ffe7 	bl	8001a52 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001a84:	e7fe      	b.n	8001a84 <_exit+0x12>

08001a86 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001a86:	b580      	push	{r7, lr}
 8001a88:	b086      	sub	sp, #24
 8001a8a:	af00      	add	r7, sp, #0
 8001a8c:	60f8      	str	r0, [r7, #12]
 8001a8e:	60b9      	str	r1, [r7, #8]
 8001a90:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a92:	2300      	movs	r3, #0
 8001a94:	617b      	str	r3, [r7, #20]
 8001a96:	e00a      	b.n	8001aae <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001a98:	f3af 8000 	nop.w
 8001a9c:	4601      	mov	r1, r0
 8001a9e:	68bb      	ldr	r3, [r7, #8]
 8001aa0:	1c5a      	adds	r2, r3, #1
 8001aa2:	60ba      	str	r2, [r7, #8]
 8001aa4:	b2ca      	uxtb	r2, r1
 8001aa6:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001aa8:	697b      	ldr	r3, [r7, #20]
 8001aaa:	3301      	adds	r3, #1
 8001aac:	617b      	str	r3, [r7, #20]
 8001aae:	697a      	ldr	r2, [r7, #20]
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	429a      	cmp	r2, r3
 8001ab4:	dbf0      	blt.n	8001a98 <_read+0x12>
  }

  return len;
 8001ab6:	687b      	ldr	r3, [r7, #4]
}
 8001ab8:	4618      	mov	r0, r3
 8001aba:	3718      	adds	r7, #24
 8001abc:	46bd      	mov	sp, r7
 8001abe:	bd80      	pop	{r7, pc}

08001ac0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b086      	sub	sp, #24
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	60f8      	str	r0, [r7, #12]
 8001ac8:	60b9      	str	r1, [r7, #8]
 8001aca:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001acc:	2300      	movs	r3, #0
 8001ace:	617b      	str	r3, [r7, #20]
 8001ad0:	e009      	b.n	8001ae6 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001ad2:	68bb      	ldr	r3, [r7, #8]
 8001ad4:	1c5a      	adds	r2, r3, #1
 8001ad6:	60ba      	str	r2, [r7, #8]
 8001ad8:	781b      	ldrb	r3, [r3, #0]
 8001ada:	4618      	mov	r0, r3
 8001adc:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ae0:	697b      	ldr	r3, [r7, #20]
 8001ae2:	3301      	adds	r3, #1
 8001ae4:	617b      	str	r3, [r7, #20]
 8001ae6:	697a      	ldr	r2, [r7, #20]
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	429a      	cmp	r2, r3
 8001aec:	dbf1      	blt.n	8001ad2 <_write+0x12>
  }
  return len;
 8001aee:	687b      	ldr	r3, [r7, #4]
}
 8001af0:	4618      	mov	r0, r3
 8001af2:	3718      	adds	r7, #24
 8001af4:	46bd      	mov	sp, r7
 8001af6:	bd80      	pop	{r7, pc}

08001af8 <_close>:

int _close(int file)
{
 8001af8:	b480      	push	{r7}
 8001afa:	b083      	sub	sp, #12
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001b00:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001b04:	4618      	mov	r0, r3
 8001b06:	370c      	adds	r7, #12
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	bc80      	pop	{r7}
 8001b0c:	4770      	bx	lr

08001b0e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001b0e:	b480      	push	{r7}
 8001b10:	b083      	sub	sp, #12
 8001b12:	af00      	add	r7, sp, #0
 8001b14:	6078      	str	r0, [r7, #4]
 8001b16:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001b18:	683b      	ldr	r3, [r7, #0]
 8001b1a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001b1e:	605a      	str	r2, [r3, #4]
  return 0;
 8001b20:	2300      	movs	r3, #0
}
 8001b22:	4618      	mov	r0, r3
 8001b24:	370c      	adds	r7, #12
 8001b26:	46bd      	mov	sp, r7
 8001b28:	bc80      	pop	{r7}
 8001b2a:	4770      	bx	lr

08001b2c <_isatty>:

int _isatty(int file)
{
 8001b2c:	b480      	push	{r7}
 8001b2e:	b083      	sub	sp, #12
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001b34:	2301      	movs	r3, #1
}
 8001b36:	4618      	mov	r0, r3
 8001b38:	370c      	adds	r7, #12
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	bc80      	pop	{r7}
 8001b3e:	4770      	bx	lr

08001b40 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001b40:	b480      	push	{r7}
 8001b42:	b085      	sub	sp, #20
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	60f8      	str	r0, [r7, #12]
 8001b48:	60b9      	str	r1, [r7, #8]
 8001b4a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001b4c:	2300      	movs	r3, #0
}
 8001b4e:	4618      	mov	r0, r3
 8001b50:	3714      	adds	r7, #20
 8001b52:	46bd      	mov	sp, r7
 8001b54:	bc80      	pop	{r7}
 8001b56:	4770      	bx	lr

08001b58 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b086      	sub	sp, #24
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001b60:	4a14      	ldr	r2, [pc, #80]	; (8001bb4 <_sbrk+0x5c>)
 8001b62:	4b15      	ldr	r3, [pc, #84]	; (8001bb8 <_sbrk+0x60>)
 8001b64:	1ad3      	subs	r3, r2, r3
 8001b66:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001b68:	697b      	ldr	r3, [r7, #20]
 8001b6a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001b6c:	4b13      	ldr	r3, [pc, #76]	; (8001bbc <_sbrk+0x64>)
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d102      	bne.n	8001b7a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001b74:	4b11      	ldr	r3, [pc, #68]	; (8001bbc <_sbrk+0x64>)
 8001b76:	4a12      	ldr	r2, [pc, #72]	; (8001bc0 <_sbrk+0x68>)
 8001b78:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001b7a:	4b10      	ldr	r3, [pc, #64]	; (8001bbc <_sbrk+0x64>)
 8001b7c:	681a      	ldr	r2, [r3, #0]
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	4413      	add	r3, r2
 8001b82:	693a      	ldr	r2, [r7, #16]
 8001b84:	429a      	cmp	r2, r3
 8001b86:	d207      	bcs.n	8001b98 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001b88:	f003 fd86 	bl	8005698 <__errno>
 8001b8c:	4603      	mov	r3, r0
 8001b8e:	220c      	movs	r2, #12
 8001b90:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001b92:	f04f 33ff 	mov.w	r3, #4294967295
 8001b96:	e009      	b.n	8001bac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001b98:	4b08      	ldr	r3, [pc, #32]	; (8001bbc <_sbrk+0x64>)
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001b9e:	4b07      	ldr	r3, [pc, #28]	; (8001bbc <_sbrk+0x64>)
 8001ba0:	681a      	ldr	r2, [r3, #0]
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	4413      	add	r3, r2
 8001ba6:	4a05      	ldr	r2, [pc, #20]	; (8001bbc <_sbrk+0x64>)
 8001ba8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001baa:	68fb      	ldr	r3, [r7, #12]
}
 8001bac:	4618      	mov	r0, r3
 8001bae:	3718      	adds	r7, #24
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	bd80      	pop	{r7, pc}
 8001bb4:	20005000 	.word	0x20005000
 8001bb8:	00000400 	.word	0x00000400
 8001bbc:	2000033c 	.word	0x2000033c
 8001bc0:	20000490 	.word	0x20000490

08001bc4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001bc4:	b480      	push	{r7}
 8001bc6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001bc8:	bf00      	nop
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	bc80      	pop	{r7}
 8001bce:	4770      	bx	lr

08001bd0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001bd0:	f7ff fff8 	bl	8001bc4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001bd4:	480b      	ldr	r0, [pc, #44]	; (8001c04 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001bd6:	490c      	ldr	r1, [pc, #48]	; (8001c08 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001bd8:	4a0c      	ldr	r2, [pc, #48]	; (8001c0c <LoopFillZerobss+0x16>)
  movs r3, #0
 8001bda:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001bdc:	e002      	b.n	8001be4 <LoopCopyDataInit>

08001bde <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001bde:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001be0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001be2:	3304      	adds	r3, #4

08001be4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001be4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001be6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001be8:	d3f9      	bcc.n	8001bde <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001bea:	4a09      	ldr	r2, [pc, #36]	; (8001c10 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001bec:	4c09      	ldr	r4, [pc, #36]	; (8001c14 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001bee:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001bf0:	e001      	b.n	8001bf6 <LoopFillZerobss>

08001bf2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001bf2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001bf4:	3204      	adds	r2, #4

08001bf6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001bf6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001bf8:	d3fb      	bcc.n	8001bf2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001bfa:	f003 fd53 	bl	80056a4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001bfe:	f7ff fb49 	bl	8001294 <main>
  bx lr
 8001c02:	4770      	bx	lr
  ldr r0, =_sdata
 8001c04:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001c08:	200001e8 	.word	0x200001e8
  ldr r2, =_sidata
 8001c0c:	08007b4c 	.word	0x08007b4c
  ldr r2, =_sbss
 8001c10:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 8001c14:	20000490 	.word	0x20000490

08001c18 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001c18:	e7fe      	b.n	8001c18 <ADC1_2_IRQHandler>
	...

08001c1c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001c20:	4b08      	ldr	r3, [pc, #32]	; (8001c44 <HAL_Init+0x28>)
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	4a07      	ldr	r2, [pc, #28]	; (8001c44 <HAL_Init+0x28>)
 8001c26:	f043 0310 	orr.w	r3, r3, #16
 8001c2a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c2c:	2003      	movs	r0, #3
 8001c2e:	f000 f947 	bl	8001ec0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001c32:	200f      	movs	r0, #15
 8001c34:	f000 f808 	bl	8001c48 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001c38:	f7ff fde0 	bl	80017fc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001c3c:	2300      	movs	r3, #0
}
 8001c3e:	4618      	mov	r0, r3
 8001c40:	bd80      	pop	{r7, pc}
 8001c42:	bf00      	nop
 8001c44:	40022000 	.word	0x40022000

08001c48 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b082      	sub	sp, #8
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001c50:	4b12      	ldr	r3, [pc, #72]	; (8001c9c <HAL_InitTick+0x54>)
 8001c52:	681a      	ldr	r2, [r3, #0]
 8001c54:	4b12      	ldr	r3, [pc, #72]	; (8001ca0 <HAL_InitTick+0x58>)
 8001c56:	781b      	ldrb	r3, [r3, #0]
 8001c58:	4619      	mov	r1, r3
 8001c5a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c5e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c62:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c66:	4618      	mov	r0, r3
 8001c68:	f000 f95f 	bl	8001f2a <HAL_SYSTICK_Config>
 8001c6c:	4603      	mov	r3, r0
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d001      	beq.n	8001c76 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001c72:	2301      	movs	r3, #1
 8001c74:	e00e      	b.n	8001c94 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	2b0f      	cmp	r3, #15
 8001c7a:	d80a      	bhi.n	8001c92 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	6879      	ldr	r1, [r7, #4]
 8001c80:	f04f 30ff 	mov.w	r0, #4294967295
 8001c84:	f000 f927 	bl	8001ed6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c88:	4a06      	ldr	r2, [pc, #24]	; (8001ca4 <HAL_InitTick+0x5c>)
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001c8e:	2300      	movs	r3, #0
 8001c90:	e000      	b.n	8001c94 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001c92:	2301      	movs	r3, #1
}
 8001c94:	4618      	mov	r0, r3
 8001c96:	3708      	adds	r7, #8
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	bd80      	pop	{r7, pc}
 8001c9c:	20000014 	.word	0x20000014
 8001ca0:	2000001c 	.word	0x2000001c
 8001ca4:	20000018 	.word	0x20000018

08001ca8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ca8:	b480      	push	{r7}
 8001caa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001cac:	4b05      	ldr	r3, [pc, #20]	; (8001cc4 <HAL_IncTick+0x1c>)
 8001cae:	781b      	ldrb	r3, [r3, #0]
 8001cb0:	461a      	mov	r2, r3
 8001cb2:	4b05      	ldr	r3, [pc, #20]	; (8001cc8 <HAL_IncTick+0x20>)
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	4413      	add	r3, r2
 8001cb8:	4a03      	ldr	r2, [pc, #12]	; (8001cc8 <HAL_IncTick+0x20>)
 8001cba:	6013      	str	r3, [r2, #0]
}
 8001cbc:	bf00      	nop
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	bc80      	pop	{r7}
 8001cc2:	4770      	bx	lr
 8001cc4:	2000001c 	.word	0x2000001c
 8001cc8:	20000340 	.word	0x20000340

08001ccc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ccc:	b480      	push	{r7}
 8001cce:	af00      	add	r7, sp, #0
  return uwTick;
 8001cd0:	4b02      	ldr	r3, [pc, #8]	; (8001cdc <HAL_GetTick+0x10>)
 8001cd2:	681b      	ldr	r3, [r3, #0]
}
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	bc80      	pop	{r7}
 8001cda:	4770      	bx	lr
 8001cdc:	20000340 	.word	0x20000340

08001ce0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b084      	sub	sp, #16
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ce8:	f7ff fff0 	bl	8001ccc <HAL_GetTick>
 8001cec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001cf8:	d005      	beq.n	8001d06 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001cfa:	4b0a      	ldr	r3, [pc, #40]	; (8001d24 <HAL_Delay+0x44>)
 8001cfc:	781b      	ldrb	r3, [r3, #0]
 8001cfe:	461a      	mov	r2, r3
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	4413      	add	r3, r2
 8001d04:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001d06:	bf00      	nop
 8001d08:	f7ff ffe0 	bl	8001ccc <HAL_GetTick>
 8001d0c:	4602      	mov	r2, r0
 8001d0e:	68bb      	ldr	r3, [r7, #8]
 8001d10:	1ad3      	subs	r3, r2, r3
 8001d12:	68fa      	ldr	r2, [r7, #12]
 8001d14:	429a      	cmp	r2, r3
 8001d16:	d8f7      	bhi.n	8001d08 <HAL_Delay+0x28>
  {
  }
}
 8001d18:	bf00      	nop
 8001d1a:	bf00      	nop
 8001d1c:	3710      	adds	r7, #16
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	bd80      	pop	{r7, pc}
 8001d22:	bf00      	nop
 8001d24:	2000001c 	.word	0x2000001c

08001d28 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d28:	b480      	push	{r7}
 8001d2a:	b085      	sub	sp, #20
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	f003 0307 	and.w	r3, r3, #7
 8001d36:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d38:	4b0c      	ldr	r3, [pc, #48]	; (8001d6c <__NVIC_SetPriorityGrouping+0x44>)
 8001d3a:	68db      	ldr	r3, [r3, #12]
 8001d3c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d3e:	68ba      	ldr	r2, [r7, #8]
 8001d40:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001d44:	4013      	ands	r3, r2
 8001d46:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d4c:	68bb      	ldr	r3, [r7, #8]
 8001d4e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001d50:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001d54:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d58:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d5a:	4a04      	ldr	r2, [pc, #16]	; (8001d6c <__NVIC_SetPriorityGrouping+0x44>)
 8001d5c:	68bb      	ldr	r3, [r7, #8]
 8001d5e:	60d3      	str	r3, [r2, #12]
}
 8001d60:	bf00      	nop
 8001d62:	3714      	adds	r7, #20
 8001d64:	46bd      	mov	sp, r7
 8001d66:	bc80      	pop	{r7}
 8001d68:	4770      	bx	lr
 8001d6a:	bf00      	nop
 8001d6c:	e000ed00 	.word	0xe000ed00

08001d70 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d70:	b480      	push	{r7}
 8001d72:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d74:	4b04      	ldr	r3, [pc, #16]	; (8001d88 <__NVIC_GetPriorityGrouping+0x18>)
 8001d76:	68db      	ldr	r3, [r3, #12]
 8001d78:	0a1b      	lsrs	r3, r3, #8
 8001d7a:	f003 0307 	and.w	r3, r3, #7
}
 8001d7e:	4618      	mov	r0, r3
 8001d80:	46bd      	mov	sp, r7
 8001d82:	bc80      	pop	{r7}
 8001d84:	4770      	bx	lr
 8001d86:	bf00      	nop
 8001d88:	e000ed00 	.word	0xe000ed00

08001d8c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d8c:	b480      	push	{r7}
 8001d8e:	b083      	sub	sp, #12
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	4603      	mov	r3, r0
 8001d94:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	db0b      	blt.n	8001db6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d9e:	79fb      	ldrb	r3, [r7, #7]
 8001da0:	f003 021f 	and.w	r2, r3, #31
 8001da4:	4906      	ldr	r1, [pc, #24]	; (8001dc0 <__NVIC_EnableIRQ+0x34>)
 8001da6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001daa:	095b      	lsrs	r3, r3, #5
 8001dac:	2001      	movs	r0, #1
 8001dae:	fa00 f202 	lsl.w	r2, r0, r2
 8001db2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001db6:	bf00      	nop
 8001db8:	370c      	adds	r7, #12
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	bc80      	pop	{r7}
 8001dbe:	4770      	bx	lr
 8001dc0:	e000e100 	.word	0xe000e100

08001dc4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001dc4:	b480      	push	{r7}
 8001dc6:	b083      	sub	sp, #12
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	4603      	mov	r3, r0
 8001dcc:	6039      	str	r1, [r7, #0]
 8001dce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001dd0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	db0a      	blt.n	8001dee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001dd8:	683b      	ldr	r3, [r7, #0]
 8001dda:	b2da      	uxtb	r2, r3
 8001ddc:	490c      	ldr	r1, [pc, #48]	; (8001e10 <__NVIC_SetPriority+0x4c>)
 8001dde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001de2:	0112      	lsls	r2, r2, #4
 8001de4:	b2d2      	uxtb	r2, r2
 8001de6:	440b      	add	r3, r1
 8001de8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001dec:	e00a      	b.n	8001e04 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001dee:	683b      	ldr	r3, [r7, #0]
 8001df0:	b2da      	uxtb	r2, r3
 8001df2:	4908      	ldr	r1, [pc, #32]	; (8001e14 <__NVIC_SetPriority+0x50>)
 8001df4:	79fb      	ldrb	r3, [r7, #7]
 8001df6:	f003 030f 	and.w	r3, r3, #15
 8001dfa:	3b04      	subs	r3, #4
 8001dfc:	0112      	lsls	r2, r2, #4
 8001dfe:	b2d2      	uxtb	r2, r2
 8001e00:	440b      	add	r3, r1
 8001e02:	761a      	strb	r2, [r3, #24]
}
 8001e04:	bf00      	nop
 8001e06:	370c      	adds	r7, #12
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	bc80      	pop	{r7}
 8001e0c:	4770      	bx	lr
 8001e0e:	bf00      	nop
 8001e10:	e000e100 	.word	0xe000e100
 8001e14:	e000ed00 	.word	0xe000ed00

08001e18 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e18:	b480      	push	{r7}
 8001e1a:	b089      	sub	sp, #36	; 0x24
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	60f8      	str	r0, [r7, #12]
 8001e20:	60b9      	str	r1, [r7, #8]
 8001e22:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	f003 0307 	and.w	r3, r3, #7
 8001e2a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e2c:	69fb      	ldr	r3, [r7, #28]
 8001e2e:	f1c3 0307 	rsb	r3, r3, #7
 8001e32:	2b04      	cmp	r3, #4
 8001e34:	bf28      	it	cs
 8001e36:	2304      	movcs	r3, #4
 8001e38:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e3a:	69fb      	ldr	r3, [r7, #28]
 8001e3c:	3304      	adds	r3, #4
 8001e3e:	2b06      	cmp	r3, #6
 8001e40:	d902      	bls.n	8001e48 <NVIC_EncodePriority+0x30>
 8001e42:	69fb      	ldr	r3, [r7, #28]
 8001e44:	3b03      	subs	r3, #3
 8001e46:	e000      	b.n	8001e4a <NVIC_EncodePriority+0x32>
 8001e48:	2300      	movs	r3, #0
 8001e4a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e4c:	f04f 32ff 	mov.w	r2, #4294967295
 8001e50:	69bb      	ldr	r3, [r7, #24]
 8001e52:	fa02 f303 	lsl.w	r3, r2, r3
 8001e56:	43da      	mvns	r2, r3
 8001e58:	68bb      	ldr	r3, [r7, #8]
 8001e5a:	401a      	ands	r2, r3
 8001e5c:	697b      	ldr	r3, [r7, #20]
 8001e5e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e60:	f04f 31ff 	mov.w	r1, #4294967295
 8001e64:	697b      	ldr	r3, [r7, #20]
 8001e66:	fa01 f303 	lsl.w	r3, r1, r3
 8001e6a:	43d9      	mvns	r1, r3
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e70:	4313      	orrs	r3, r2
         );
}
 8001e72:	4618      	mov	r0, r3
 8001e74:	3724      	adds	r7, #36	; 0x24
 8001e76:	46bd      	mov	sp, r7
 8001e78:	bc80      	pop	{r7}
 8001e7a:	4770      	bx	lr

08001e7c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	b082      	sub	sp, #8
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	3b01      	subs	r3, #1
 8001e88:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001e8c:	d301      	bcc.n	8001e92 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e8e:	2301      	movs	r3, #1
 8001e90:	e00f      	b.n	8001eb2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e92:	4a0a      	ldr	r2, [pc, #40]	; (8001ebc <SysTick_Config+0x40>)
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	3b01      	subs	r3, #1
 8001e98:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e9a:	210f      	movs	r1, #15
 8001e9c:	f04f 30ff 	mov.w	r0, #4294967295
 8001ea0:	f7ff ff90 	bl	8001dc4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ea4:	4b05      	ldr	r3, [pc, #20]	; (8001ebc <SysTick_Config+0x40>)
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001eaa:	4b04      	ldr	r3, [pc, #16]	; (8001ebc <SysTick_Config+0x40>)
 8001eac:	2207      	movs	r2, #7
 8001eae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001eb0:	2300      	movs	r3, #0
}
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	3708      	adds	r7, #8
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	bd80      	pop	{r7, pc}
 8001eba:	bf00      	nop
 8001ebc:	e000e010 	.word	0xe000e010

08001ec0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	b082      	sub	sp, #8
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ec8:	6878      	ldr	r0, [r7, #4]
 8001eca:	f7ff ff2d 	bl	8001d28 <__NVIC_SetPriorityGrouping>
}
 8001ece:	bf00      	nop
 8001ed0:	3708      	adds	r7, #8
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	bd80      	pop	{r7, pc}

08001ed6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001ed6:	b580      	push	{r7, lr}
 8001ed8:	b086      	sub	sp, #24
 8001eda:	af00      	add	r7, sp, #0
 8001edc:	4603      	mov	r3, r0
 8001ede:	60b9      	str	r1, [r7, #8]
 8001ee0:	607a      	str	r2, [r7, #4]
 8001ee2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001ee4:	2300      	movs	r3, #0
 8001ee6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001ee8:	f7ff ff42 	bl	8001d70 <__NVIC_GetPriorityGrouping>
 8001eec:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001eee:	687a      	ldr	r2, [r7, #4]
 8001ef0:	68b9      	ldr	r1, [r7, #8]
 8001ef2:	6978      	ldr	r0, [r7, #20]
 8001ef4:	f7ff ff90 	bl	8001e18 <NVIC_EncodePriority>
 8001ef8:	4602      	mov	r2, r0
 8001efa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001efe:	4611      	mov	r1, r2
 8001f00:	4618      	mov	r0, r3
 8001f02:	f7ff ff5f 	bl	8001dc4 <__NVIC_SetPriority>
}
 8001f06:	bf00      	nop
 8001f08:	3718      	adds	r7, #24
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	bd80      	pop	{r7, pc}

08001f0e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f0e:	b580      	push	{r7, lr}
 8001f10:	b082      	sub	sp, #8
 8001f12:	af00      	add	r7, sp, #0
 8001f14:	4603      	mov	r3, r0
 8001f16:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001f18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	f7ff ff35 	bl	8001d8c <__NVIC_EnableIRQ>
}
 8001f22:	bf00      	nop
 8001f24:	3708      	adds	r7, #8
 8001f26:	46bd      	mov	sp, r7
 8001f28:	bd80      	pop	{r7, pc}

08001f2a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f2a:	b580      	push	{r7, lr}
 8001f2c:	b082      	sub	sp, #8
 8001f2e:	af00      	add	r7, sp, #0
 8001f30:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001f32:	6878      	ldr	r0, [r7, #4]
 8001f34:	f7ff ffa2 	bl	8001e7c <SysTick_Config>
 8001f38:	4603      	mov	r3, r0
}
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	3708      	adds	r7, #8
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	bd80      	pop	{r7, pc}

08001f42 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001f42:	b480      	push	{r7}
 8001f44:	b085      	sub	sp, #20
 8001f46:	af00      	add	r7, sp, #0
 8001f48:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001f54:	b2db      	uxtb	r3, r3
 8001f56:	2b02      	cmp	r3, #2
 8001f58:	d008      	beq.n	8001f6c <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	2204      	movs	r2, #4
 8001f5e:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	2200      	movs	r2, #0
 8001f64:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001f68:	2301      	movs	r3, #1
 8001f6a:	e020      	b.n	8001fae <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	681a      	ldr	r2, [r3, #0]
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	f022 020e 	bic.w	r2, r2, #14
 8001f7a:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	681a      	ldr	r2, [r3, #0]
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f022 0201 	bic.w	r2, r2, #1
 8001f8a:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f94:	2101      	movs	r1, #1
 8001f96:	fa01 f202 	lsl.w	r2, r1, r2
 8001f9a:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	2201      	movs	r2, #1
 8001fa0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001fac:	7bfb      	ldrb	r3, [r7, #15]
}
 8001fae:	4618      	mov	r0, r3
 8001fb0:	3714      	adds	r7, #20
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	bc80      	pop	{r7}
 8001fb6:	4770      	bx	lr

08001fb8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	b084      	sub	sp, #16
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001fc0:	2300      	movs	r3, #0
 8001fc2:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001fca:	b2db      	uxtb	r3, r3
 8001fcc:	2b02      	cmp	r3, #2
 8001fce:	d005      	beq.n	8001fdc <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	2204      	movs	r2, #4
 8001fd4:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001fd6:	2301      	movs	r3, #1
 8001fd8:	73fb      	strb	r3, [r7, #15]
 8001fda:	e051      	b.n	8002080 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	681a      	ldr	r2, [r3, #0]
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f022 020e 	bic.w	r2, r2, #14
 8001fea:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	681a      	ldr	r2, [r3, #0]
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	f022 0201 	bic.w	r2, r2, #1
 8001ffa:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	4a22      	ldr	r2, [pc, #136]	; (800208c <HAL_DMA_Abort_IT+0xd4>)
 8002002:	4293      	cmp	r3, r2
 8002004:	d029      	beq.n	800205a <HAL_DMA_Abort_IT+0xa2>
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	4a21      	ldr	r2, [pc, #132]	; (8002090 <HAL_DMA_Abort_IT+0xd8>)
 800200c:	4293      	cmp	r3, r2
 800200e:	d022      	beq.n	8002056 <HAL_DMA_Abort_IT+0x9e>
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	4a1f      	ldr	r2, [pc, #124]	; (8002094 <HAL_DMA_Abort_IT+0xdc>)
 8002016:	4293      	cmp	r3, r2
 8002018:	d01a      	beq.n	8002050 <HAL_DMA_Abort_IT+0x98>
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	4a1e      	ldr	r2, [pc, #120]	; (8002098 <HAL_DMA_Abort_IT+0xe0>)
 8002020:	4293      	cmp	r3, r2
 8002022:	d012      	beq.n	800204a <HAL_DMA_Abort_IT+0x92>
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	4a1c      	ldr	r2, [pc, #112]	; (800209c <HAL_DMA_Abort_IT+0xe4>)
 800202a:	4293      	cmp	r3, r2
 800202c:	d00a      	beq.n	8002044 <HAL_DMA_Abort_IT+0x8c>
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	4a1b      	ldr	r2, [pc, #108]	; (80020a0 <HAL_DMA_Abort_IT+0xe8>)
 8002034:	4293      	cmp	r3, r2
 8002036:	d102      	bne.n	800203e <HAL_DMA_Abort_IT+0x86>
 8002038:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800203c:	e00e      	b.n	800205c <HAL_DMA_Abort_IT+0xa4>
 800203e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002042:	e00b      	b.n	800205c <HAL_DMA_Abort_IT+0xa4>
 8002044:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002048:	e008      	b.n	800205c <HAL_DMA_Abort_IT+0xa4>
 800204a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800204e:	e005      	b.n	800205c <HAL_DMA_Abort_IT+0xa4>
 8002050:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002054:	e002      	b.n	800205c <HAL_DMA_Abort_IT+0xa4>
 8002056:	2310      	movs	r3, #16
 8002058:	e000      	b.n	800205c <HAL_DMA_Abort_IT+0xa4>
 800205a:	2301      	movs	r3, #1
 800205c:	4a11      	ldr	r2, [pc, #68]	; (80020a4 <HAL_DMA_Abort_IT+0xec>)
 800205e:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	2201      	movs	r2, #1
 8002064:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	2200      	movs	r2, #0
 800206c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002074:	2b00      	cmp	r3, #0
 8002076:	d003      	beq.n	8002080 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800207c:	6878      	ldr	r0, [r7, #4]
 800207e:	4798      	blx	r3
    } 
  }
  return status;
 8002080:	7bfb      	ldrb	r3, [r7, #15]
}
 8002082:	4618      	mov	r0, r3
 8002084:	3710      	adds	r7, #16
 8002086:	46bd      	mov	sp, r7
 8002088:	bd80      	pop	{r7, pc}
 800208a:	bf00      	nop
 800208c:	40020008 	.word	0x40020008
 8002090:	4002001c 	.word	0x4002001c
 8002094:	40020030 	.word	0x40020030
 8002098:	40020044 	.word	0x40020044
 800209c:	40020058 	.word	0x40020058
 80020a0:	4002006c 	.word	0x4002006c
 80020a4:	40020000 	.word	0x40020000

080020a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80020a8:	b480      	push	{r7}
 80020aa:	b08b      	sub	sp, #44	; 0x2c
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]
 80020b0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80020b2:	2300      	movs	r3, #0
 80020b4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80020b6:	2300      	movs	r3, #0
 80020b8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80020ba:	e169      	b.n	8002390 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80020bc:	2201      	movs	r2, #1
 80020be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020c0:	fa02 f303 	lsl.w	r3, r2, r3
 80020c4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80020c6:	683b      	ldr	r3, [r7, #0]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	69fa      	ldr	r2, [r7, #28]
 80020cc:	4013      	ands	r3, r2
 80020ce:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80020d0:	69ba      	ldr	r2, [r7, #24]
 80020d2:	69fb      	ldr	r3, [r7, #28]
 80020d4:	429a      	cmp	r2, r3
 80020d6:	f040 8158 	bne.w	800238a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80020da:	683b      	ldr	r3, [r7, #0]
 80020dc:	685b      	ldr	r3, [r3, #4]
 80020de:	4a9a      	ldr	r2, [pc, #616]	; (8002348 <HAL_GPIO_Init+0x2a0>)
 80020e0:	4293      	cmp	r3, r2
 80020e2:	d05e      	beq.n	80021a2 <HAL_GPIO_Init+0xfa>
 80020e4:	4a98      	ldr	r2, [pc, #608]	; (8002348 <HAL_GPIO_Init+0x2a0>)
 80020e6:	4293      	cmp	r3, r2
 80020e8:	d875      	bhi.n	80021d6 <HAL_GPIO_Init+0x12e>
 80020ea:	4a98      	ldr	r2, [pc, #608]	; (800234c <HAL_GPIO_Init+0x2a4>)
 80020ec:	4293      	cmp	r3, r2
 80020ee:	d058      	beq.n	80021a2 <HAL_GPIO_Init+0xfa>
 80020f0:	4a96      	ldr	r2, [pc, #600]	; (800234c <HAL_GPIO_Init+0x2a4>)
 80020f2:	4293      	cmp	r3, r2
 80020f4:	d86f      	bhi.n	80021d6 <HAL_GPIO_Init+0x12e>
 80020f6:	4a96      	ldr	r2, [pc, #600]	; (8002350 <HAL_GPIO_Init+0x2a8>)
 80020f8:	4293      	cmp	r3, r2
 80020fa:	d052      	beq.n	80021a2 <HAL_GPIO_Init+0xfa>
 80020fc:	4a94      	ldr	r2, [pc, #592]	; (8002350 <HAL_GPIO_Init+0x2a8>)
 80020fe:	4293      	cmp	r3, r2
 8002100:	d869      	bhi.n	80021d6 <HAL_GPIO_Init+0x12e>
 8002102:	4a94      	ldr	r2, [pc, #592]	; (8002354 <HAL_GPIO_Init+0x2ac>)
 8002104:	4293      	cmp	r3, r2
 8002106:	d04c      	beq.n	80021a2 <HAL_GPIO_Init+0xfa>
 8002108:	4a92      	ldr	r2, [pc, #584]	; (8002354 <HAL_GPIO_Init+0x2ac>)
 800210a:	4293      	cmp	r3, r2
 800210c:	d863      	bhi.n	80021d6 <HAL_GPIO_Init+0x12e>
 800210e:	4a92      	ldr	r2, [pc, #584]	; (8002358 <HAL_GPIO_Init+0x2b0>)
 8002110:	4293      	cmp	r3, r2
 8002112:	d046      	beq.n	80021a2 <HAL_GPIO_Init+0xfa>
 8002114:	4a90      	ldr	r2, [pc, #576]	; (8002358 <HAL_GPIO_Init+0x2b0>)
 8002116:	4293      	cmp	r3, r2
 8002118:	d85d      	bhi.n	80021d6 <HAL_GPIO_Init+0x12e>
 800211a:	2b12      	cmp	r3, #18
 800211c:	d82a      	bhi.n	8002174 <HAL_GPIO_Init+0xcc>
 800211e:	2b12      	cmp	r3, #18
 8002120:	d859      	bhi.n	80021d6 <HAL_GPIO_Init+0x12e>
 8002122:	a201      	add	r2, pc, #4	; (adr r2, 8002128 <HAL_GPIO_Init+0x80>)
 8002124:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002128:	080021a3 	.word	0x080021a3
 800212c:	0800217d 	.word	0x0800217d
 8002130:	0800218f 	.word	0x0800218f
 8002134:	080021d1 	.word	0x080021d1
 8002138:	080021d7 	.word	0x080021d7
 800213c:	080021d7 	.word	0x080021d7
 8002140:	080021d7 	.word	0x080021d7
 8002144:	080021d7 	.word	0x080021d7
 8002148:	080021d7 	.word	0x080021d7
 800214c:	080021d7 	.word	0x080021d7
 8002150:	080021d7 	.word	0x080021d7
 8002154:	080021d7 	.word	0x080021d7
 8002158:	080021d7 	.word	0x080021d7
 800215c:	080021d7 	.word	0x080021d7
 8002160:	080021d7 	.word	0x080021d7
 8002164:	080021d7 	.word	0x080021d7
 8002168:	080021d7 	.word	0x080021d7
 800216c:	08002185 	.word	0x08002185
 8002170:	08002199 	.word	0x08002199
 8002174:	4a79      	ldr	r2, [pc, #484]	; (800235c <HAL_GPIO_Init+0x2b4>)
 8002176:	4293      	cmp	r3, r2
 8002178:	d013      	beq.n	80021a2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800217a:	e02c      	b.n	80021d6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800217c:	683b      	ldr	r3, [r7, #0]
 800217e:	68db      	ldr	r3, [r3, #12]
 8002180:	623b      	str	r3, [r7, #32]
          break;
 8002182:	e029      	b.n	80021d8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002184:	683b      	ldr	r3, [r7, #0]
 8002186:	68db      	ldr	r3, [r3, #12]
 8002188:	3304      	adds	r3, #4
 800218a:	623b      	str	r3, [r7, #32]
          break;
 800218c:	e024      	b.n	80021d8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800218e:	683b      	ldr	r3, [r7, #0]
 8002190:	68db      	ldr	r3, [r3, #12]
 8002192:	3308      	adds	r3, #8
 8002194:	623b      	str	r3, [r7, #32]
          break;
 8002196:	e01f      	b.n	80021d8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002198:	683b      	ldr	r3, [r7, #0]
 800219a:	68db      	ldr	r3, [r3, #12]
 800219c:	330c      	adds	r3, #12
 800219e:	623b      	str	r3, [r7, #32]
          break;
 80021a0:	e01a      	b.n	80021d8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80021a2:	683b      	ldr	r3, [r7, #0]
 80021a4:	689b      	ldr	r3, [r3, #8]
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d102      	bne.n	80021b0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80021aa:	2304      	movs	r3, #4
 80021ac:	623b      	str	r3, [r7, #32]
          break;
 80021ae:	e013      	b.n	80021d8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80021b0:	683b      	ldr	r3, [r7, #0]
 80021b2:	689b      	ldr	r3, [r3, #8]
 80021b4:	2b01      	cmp	r3, #1
 80021b6:	d105      	bne.n	80021c4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80021b8:	2308      	movs	r3, #8
 80021ba:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	69fa      	ldr	r2, [r7, #28]
 80021c0:	611a      	str	r2, [r3, #16]
          break;
 80021c2:	e009      	b.n	80021d8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80021c4:	2308      	movs	r3, #8
 80021c6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	69fa      	ldr	r2, [r7, #28]
 80021cc:	615a      	str	r2, [r3, #20]
          break;
 80021ce:	e003      	b.n	80021d8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80021d0:	2300      	movs	r3, #0
 80021d2:	623b      	str	r3, [r7, #32]
          break;
 80021d4:	e000      	b.n	80021d8 <HAL_GPIO_Init+0x130>
          break;
 80021d6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80021d8:	69bb      	ldr	r3, [r7, #24]
 80021da:	2bff      	cmp	r3, #255	; 0xff
 80021dc:	d801      	bhi.n	80021e2 <HAL_GPIO_Init+0x13a>
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	e001      	b.n	80021e6 <HAL_GPIO_Init+0x13e>
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	3304      	adds	r3, #4
 80021e6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80021e8:	69bb      	ldr	r3, [r7, #24]
 80021ea:	2bff      	cmp	r3, #255	; 0xff
 80021ec:	d802      	bhi.n	80021f4 <HAL_GPIO_Init+0x14c>
 80021ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021f0:	009b      	lsls	r3, r3, #2
 80021f2:	e002      	b.n	80021fa <HAL_GPIO_Init+0x152>
 80021f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021f6:	3b08      	subs	r3, #8
 80021f8:	009b      	lsls	r3, r3, #2
 80021fa:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80021fc:	697b      	ldr	r3, [r7, #20]
 80021fe:	681a      	ldr	r2, [r3, #0]
 8002200:	210f      	movs	r1, #15
 8002202:	693b      	ldr	r3, [r7, #16]
 8002204:	fa01 f303 	lsl.w	r3, r1, r3
 8002208:	43db      	mvns	r3, r3
 800220a:	401a      	ands	r2, r3
 800220c:	6a39      	ldr	r1, [r7, #32]
 800220e:	693b      	ldr	r3, [r7, #16]
 8002210:	fa01 f303 	lsl.w	r3, r1, r3
 8002214:	431a      	orrs	r2, r3
 8002216:	697b      	ldr	r3, [r7, #20]
 8002218:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800221a:	683b      	ldr	r3, [r7, #0]
 800221c:	685b      	ldr	r3, [r3, #4]
 800221e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002222:	2b00      	cmp	r3, #0
 8002224:	f000 80b1 	beq.w	800238a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002228:	4b4d      	ldr	r3, [pc, #308]	; (8002360 <HAL_GPIO_Init+0x2b8>)
 800222a:	699b      	ldr	r3, [r3, #24]
 800222c:	4a4c      	ldr	r2, [pc, #304]	; (8002360 <HAL_GPIO_Init+0x2b8>)
 800222e:	f043 0301 	orr.w	r3, r3, #1
 8002232:	6193      	str	r3, [r2, #24]
 8002234:	4b4a      	ldr	r3, [pc, #296]	; (8002360 <HAL_GPIO_Init+0x2b8>)
 8002236:	699b      	ldr	r3, [r3, #24]
 8002238:	f003 0301 	and.w	r3, r3, #1
 800223c:	60bb      	str	r3, [r7, #8]
 800223e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002240:	4a48      	ldr	r2, [pc, #288]	; (8002364 <HAL_GPIO_Init+0x2bc>)
 8002242:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002244:	089b      	lsrs	r3, r3, #2
 8002246:	3302      	adds	r3, #2
 8002248:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800224c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800224e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002250:	f003 0303 	and.w	r3, r3, #3
 8002254:	009b      	lsls	r3, r3, #2
 8002256:	220f      	movs	r2, #15
 8002258:	fa02 f303 	lsl.w	r3, r2, r3
 800225c:	43db      	mvns	r3, r3
 800225e:	68fa      	ldr	r2, [r7, #12]
 8002260:	4013      	ands	r3, r2
 8002262:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	4a40      	ldr	r2, [pc, #256]	; (8002368 <HAL_GPIO_Init+0x2c0>)
 8002268:	4293      	cmp	r3, r2
 800226a:	d013      	beq.n	8002294 <HAL_GPIO_Init+0x1ec>
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	4a3f      	ldr	r2, [pc, #252]	; (800236c <HAL_GPIO_Init+0x2c4>)
 8002270:	4293      	cmp	r3, r2
 8002272:	d00d      	beq.n	8002290 <HAL_GPIO_Init+0x1e8>
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	4a3e      	ldr	r2, [pc, #248]	; (8002370 <HAL_GPIO_Init+0x2c8>)
 8002278:	4293      	cmp	r3, r2
 800227a:	d007      	beq.n	800228c <HAL_GPIO_Init+0x1e4>
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	4a3d      	ldr	r2, [pc, #244]	; (8002374 <HAL_GPIO_Init+0x2cc>)
 8002280:	4293      	cmp	r3, r2
 8002282:	d101      	bne.n	8002288 <HAL_GPIO_Init+0x1e0>
 8002284:	2303      	movs	r3, #3
 8002286:	e006      	b.n	8002296 <HAL_GPIO_Init+0x1ee>
 8002288:	2304      	movs	r3, #4
 800228a:	e004      	b.n	8002296 <HAL_GPIO_Init+0x1ee>
 800228c:	2302      	movs	r3, #2
 800228e:	e002      	b.n	8002296 <HAL_GPIO_Init+0x1ee>
 8002290:	2301      	movs	r3, #1
 8002292:	e000      	b.n	8002296 <HAL_GPIO_Init+0x1ee>
 8002294:	2300      	movs	r3, #0
 8002296:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002298:	f002 0203 	and.w	r2, r2, #3
 800229c:	0092      	lsls	r2, r2, #2
 800229e:	4093      	lsls	r3, r2
 80022a0:	68fa      	ldr	r2, [r7, #12]
 80022a2:	4313      	orrs	r3, r2
 80022a4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80022a6:	492f      	ldr	r1, [pc, #188]	; (8002364 <HAL_GPIO_Init+0x2bc>)
 80022a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022aa:	089b      	lsrs	r3, r3, #2
 80022ac:	3302      	adds	r3, #2
 80022ae:	68fa      	ldr	r2, [r7, #12]
 80022b0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80022b4:	683b      	ldr	r3, [r7, #0]
 80022b6:	685b      	ldr	r3, [r3, #4]
 80022b8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d006      	beq.n	80022ce <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80022c0:	4b2d      	ldr	r3, [pc, #180]	; (8002378 <HAL_GPIO_Init+0x2d0>)
 80022c2:	689a      	ldr	r2, [r3, #8]
 80022c4:	492c      	ldr	r1, [pc, #176]	; (8002378 <HAL_GPIO_Init+0x2d0>)
 80022c6:	69bb      	ldr	r3, [r7, #24]
 80022c8:	4313      	orrs	r3, r2
 80022ca:	608b      	str	r3, [r1, #8]
 80022cc:	e006      	b.n	80022dc <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80022ce:	4b2a      	ldr	r3, [pc, #168]	; (8002378 <HAL_GPIO_Init+0x2d0>)
 80022d0:	689a      	ldr	r2, [r3, #8]
 80022d2:	69bb      	ldr	r3, [r7, #24]
 80022d4:	43db      	mvns	r3, r3
 80022d6:	4928      	ldr	r1, [pc, #160]	; (8002378 <HAL_GPIO_Init+0x2d0>)
 80022d8:	4013      	ands	r3, r2
 80022da:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80022dc:	683b      	ldr	r3, [r7, #0]
 80022de:	685b      	ldr	r3, [r3, #4]
 80022e0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d006      	beq.n	80022f6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80022e8:	4b23      	ldr	r3, [pc, #140]	; (8002378 <HAL_GPIO_Init+0x2d0>)
 80022ea:	68da      	ldr	r2, [r3, #12]
 80022ec:	4922      	ldr	r1, [pc, #136]	; (8002378 <HAL_GPIO_Init+0x2d0>)
 80022ee:	69bb      	ldr	r3, [r7, #24]
 80022f0:	4313      	orrs	r3, r2
 80022f2:	60cb      	str	r3, [r1, #12]
 80022f4:	e006      	b.n	8002304 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80022f6:	4b20      	ldr	r3, [pc, #128]	; (8002378 <HAL_GPIO_Init+0x2d0>)
 80022f8:	68da      	ldr	r2, [r3, #12]
 80022fa:	69bb      	ldr	r3, [r7, #24]
 80022fc:	43db      	mvns	r3, r3
 80022fe:	491e      	ldr	r1, [pc, #120]	; (8002378 <HAL_GPIO_Init+0x2d0>)
 8002300:	4013      	ands	r3, r2
 8002302:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002304:	683b      	ldr	r3, [r7, #0]
 8002306:	685b      	ldr	r3, [r3, #4]
 8002308:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800230c:	2b00      	cmp	r3, #0
 800230e:	d006      	beq.n	800231e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002310:	4b19      	ldr	r3, [pc, #100]	; (8002378 <HAL_GPIO_Init+0x2d0>)
 8002312:	685a      	ldr	r2, [r3, #4]
 8002314:	4918      	ldr	r1, [pc, #96]	; (8002378 <HAL_GPIO_Init+0x2d0>)
 8002316:	69bb      	ldr	r3, [r7, #24]
 8002318:	4313      	orrs	r3, r2
 800231a:	604b      	str	r3, [r1, #4]
 800231c:	e006      	b.n	800232c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800231e:	4b16      	ldr	r3, [pc, #88]	; (8002378 <HAL_GPIO_Init+0x2d0>)
 8002320:	685a      	ldr	r2, [r3, #4]
 8002322:	69bb      	ldr	r3, [r7, #24]
 8002324:	43db      	mvns	r3, r3
 8002326:	4914      	ldr	r1, [pc, #80]	; (8002378 <HAL_GPIO_Init+0x2d0>)
 8002328:	4013      	ands	r3, r2
 800232a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800232c:	683b      	ldr	r3, [r7, #0]
 800232e:	685b      	ldr	r3, [r3, #4]
 8002330:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002334:	2b00      	cmp	r3, #0
 8002336:	d021      	beq.n	800237c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002338:	4b0f      	ldr	r3, [pc, #60]	; (8002378 <HAL_GPIO_Init+0x2d0>)
 800233a:	681a      	ldr	r2, [r3, #0]
 800233c:	490e      	ldr	r1, [pc, #56]	; (8002378 <HAL_GPIO_Init+0x2d0>)
 800233e:	69bb      	ldr	r3, [r7, #24]
 8002340:	4313      	orrs	r3, r2
 8002342:	600b      	str	r3, [r1, #0]
 8002344:	e021      	b.n	800238a <HAL_GPIO_Init+0x2e2>
 8002346:	bf00      	nop
 8002348:	10320000 	.word	0x10320000
 800234c:	10310000 	.word	0x10310000
 8002350:	10220000 	.word	0x10220000
 8002354:	10210000 	.word	0x10210000
 8002358:	10120000 	.word	0x10120000
 800235c:	10110000 	.word	0x10110000
 8002360:	40021000 	.word	0x40021000
 8002364:	40010000 	.word	0x40010000
 8002368:	40010800 	.word	0x40010800
 800236c:	40010c00 	.word	0x40010c00
 8002370:	40011000 	.word	0x40011000
 8002374:	40011400 	.word	0x40011400
 8002378:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800237c:	4b0b      	ldr	r3, [pc, #44]	; (80023ac <HAL_GPIO_Init+0x304>)
 800237e:	681a      	ldr	r2, [r3, #0]
 8002380:	69bb      	ldr	r3, [r7, #24]
 8002382:	43db      	mvns	r3, r3
 8002384:	4909      	ldr	r1, [pc, #36]	; (80023ac <HAL_GPIO_Init+0x304>)
 8002386:	4013      	ands	r3, r2
 8002388:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800238a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800238c:	3301      	adds	r3, #1
 800238e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002390:	683b      	ldr	r3, [r7, #0]
 8002392:	681a      	ldr	r2, [r3, #0]
 8002394:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002396:	fa22 f303 	lsr.w	r3, r2, r3
 800239a:	2b00      	cmp	r3, #0
 800239c:	f47f ae8e 	bne.w	80020bc <HAL_GPIO_Init+0x14>
  }
}
 80023a0:	bf00      	nop
 80023a2:	bf00      	nop
 80023a4:	372c      	adds	r7, #44	; 0x2c
 80023a6:	46bd      	mov	sp, r7
 80023a8:	bc80      	pop	{r7}
 80023aa:	4770      	bx	lr
 80023ac:	40010400 	.word	0x40010400

080023b0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80023b0:	b580      	push	{r7, lr}
 80023b2:	b084      	sub	sp, #16
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d101      	bne.n	80023c2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80023be:	2301      	movs	r3, #1
 80023c0:	e12b      	b.n	800261a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80023c8:	b2db      	uxtb	r3, r3
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d106      	bne.n	80023dc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	2200      	movs	r2, #0
 80023d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80023d6:	6878      	ldr	r0, [r7, #4]
 80023d8:	f7ff fa42 	bl	8001860 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	2224      	movs	r2, #36	; 0x24
 80023e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	681a      	ldr	r2, [r3, #0]
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f022 0201 	bic.w	r2, r2, #1
 80023f2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	681a      	ldr	r2, [r3, #0]
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002402:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	681a      	ldr	r2, [r3, #0]
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002412:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002414:	f001 fbca 	bl	8003bac <HAL_RCC_GetPCLK1Freq>
 8002418:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	685b      	ldr	r3, [r3, #4]
 800241e:	4a81      	ldr	r2, [pc, #516]	; (8002624 <HAL_I2C_Init+0x274>)
 8002420:	4293      	cmp	r3, r2
 8002422:	d807      	bhi.n	8002434 <HAL_I2C_Init+0x84>
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	4a80      	ldr	r2, [pc, #512]	; (8002628 <HAL_I2C_Init+0x278>)
 8002428:	4293      	cmp	r3, r2
 800242a:	bf94      	ite	ls
 800242c:	2301      	movls	r3, #1
 800242e:	2300      	movhi	r3, #0
 8002430:	b2db      	uxtb	r3, r3
 8002432:	e006      	b.n	8002442 <HAL_I2C_Init+0x92>
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	4a7d      	ldr	r2, [pc, #500]	; (800262c <HAL_I2C_Init+0x27c>)
 8002438:	4293      	cmp	r3, r2
 800243a:	bf94      	ite	ls
 800243c:	2301      	movls	r3, #1
 800243e:	2300      	movhi	r3, #0
 8002440:	b2db      	uxtb	r3, r3
 8002442:	2b00      	cmp	r3, #0
 8002444:	d001      	beq.n	800244a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002446:	2301      	movs	r3, #1
 8002448:	e0e7      	b.n	800261a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	4a78      	ldr	r2, [pc, #480]	; (8002630 <HAL_I2C_Init+0x280>)
 800244e:	fba2 2303 	umull	r2, r3, r2, r3
 8002452:	0c9b      	lsrs	r3, r3, #18
 8002454:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	685b      	ldr	r3, [r3, #4]
 800245c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	68ba      	ldr	r2, [r7, #8]
 8002466:	430a      	orrs	r2, r1
 8002468:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	6a1b      	ldr	r3, [r3, #32]
 8002470:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	685b      	ldr	r3, [r3, #4]
 8002478:	4a6a      	ldr	r2, [pc, #424]	; (8002624 <HAL_I2C_Init+0x274>)
 800247a:	4293      	cmp	r3, r2
 800247c:	d802      	bhi.n	8002484 <HAL_I2C_Init+0xd4>
 800247e:	68bb      	ldr	r3, [r7, #8]
 8002480:	3301      	adds	r3, #1
 8002482:	e009      	b.n	8002498 <HAL_I2C_Init+0xe8>
 8002484:	68bb      	ldr	r3, [r7, #8]
 8002486:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800248a:	fb02 f303 	mul.w	r3, r2, r3
 800248e:	4a69      	ldr	r2, [pc, #420]	; (8002634 <HAL_I2C_Init+0x284>)
 8002490:	fba2 2303 	umull	r2, r3, r2, r3
 8002494:	099b      	lsrs	r3, r3, #6
 8002496:	3301      	adds	r3, #1
 8002498:	687a      	ldr	r2, [r7, #4]
 800249a:	6812      	ldr	r2, [r2, #0]
 800249c:	430b      	orrs	r3, r1
 800249e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	69db      	ldr	r3, [r3, #28]
 80024a6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80024aa:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	685b      	ldr	r3, [r3, #4]
 80024b2:	495c      	ldr	r1, [pc, #368]	; (8002624 <HAL_I2C_Init+0x274>)
 80024b4:	428b      	cmp	r3, r1
 80024b6:	d819      	bhi.n	80024ec <HAL_I2C_Init+0x13c>
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	1e59      	subs	r1, r3, #1
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	685b      	ldr	r3, [r3, #4]
 80024c0:	005b      	lsls	r3, r3, #1
 80024c2:	fbb1 f3f3 	udiv	r3, r1, r3
 80024c6:	1c59      	adds	r1, r3, #1
 80024c8:	f640 73fc 	movw	r3, #4092	; 0xffc
 80024cc:	400b      	ands	r3, r1
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d00a      	beq.n	80024e8 <HAL_I2C_Init+0x138>
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	1e59      	subs	r1, r3, #1
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	685b      	ldr	r3, [r3, #4]
 80024da:	005b      	lsls	r3, r3, #1
 80024dc:	fbb1 f3f3 	udiv	r3, r1, r3
 80024e0:	3301      	adds	r3, #1
 80024e2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80024e6:	e051      	b.n	800258c <HAL_I2C_Init+0x1dc>
 80024e8:	2304      	movs	r3, #4
 80024ea:	e04f      	b.n	800258c <HAL_I2C_Init+0x1dc>
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	689b      	ldr	r3, [r3, #8]
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d111      	bne.n	8002518 <HAL_I2C_Init+0x168>
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	1e58      	subs	r0, r3, #1
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	6859      	ldr	r1, [r3, #4]
 80024fc:	460b      	mov	r3, r1
 80024fe:	005b      	lsls	r3, r3, #1
 8002500:	440b      	add	r3, r1
 8002502:	fbb0 f3f3 	udiv	r3, r0, r3
 8002506:	3301      	adds	r3, #1
 8002508:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800250c:	2b00      	cmp	r3, #0
 800250e:	bf0c      	ite	eq
 8002510:	2301      	moveq	r3, #1
 8002512:	2300      	movne	r3, #0
 8002514:	b2db      	uxtb	r3, r3
 8002516:	e012      	b.n	800253e <HAL_I2C_Init+0x18e>
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	1e58      	subs	r0, r3, #1
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	6859      	ldr	r1, [r3, #4]
 8002520:	460b      	mov	r3, r1
 8002522:	009b      	lsls	r3, r3, #2
 8002524:	440b      	add	r3, r1
 8002526:	0099      	lsls	r1, r3, #2
 8002528:	440b      	add	r3, r1
 800252a:	fbb0 f3f3 	udiv	r3, r0, r3
 800252e:	3301      	adds	r3, #1
 8002530:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002534:	2b00      	cmp	r3, #0
 8002536:	bf0c      	ite	eq
 8002538:	2301      	moveq	r3, #1
 800253a:	2300      	movne	r3, #0
 800253c:	b2db      	uxtb	r3, r3
 800253e:	2b00      	cmp	r3, #0
 8002540:	d001      	beq.n	8002546 <HAL_I2C_Init+0x196>
 8002542:	2301      	movs	r3, #1
 8002544:	e022      	b.n	800258c <HAL_I2C_Init+0x1dc>
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	689b      	ldr	r3, [r3, #8]
 800254a:	2b00      	cmp	r3, #0
 800254c:	d10e      	bne.n	800256c <HAL_I2C_Init+0x1bc>
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	1e58      	subs	r0, r3, #1
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	6859      	ldr	r1, [r3, #4]
 8002556:	460b      	mov	r3, r1
 8002558:	005b      	lsls	r3, r3, #1
 800255a:	440b      	add	r3, r1
 800255c:	fbb0 f3f3 	udiv	r3, r0, r3
 8002560:	3301      	adds	r3, #1
 8002562:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002566:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800256a:	e00f      	b.n	800258c <HAL_I2C_Init+0x1dc>
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	1e58      	subs	r0, r3, #1
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	6859      	ldr	r1, [r3, #4]
 8002574:	460b      	mov	r3, r1
 8002576:	009b      	lsls	r3, r3, #2
 8002578:	440b      	add	r3, r1
 800257a:	0099      	lsls	r1, r3, #2
 800257c:	440b      	add	r3, r1
 800257e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002582:	3301      	adds	r3, #1
 8002584:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002588:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800258c:	6879      	ldr	r1, [r7, #4]
 800258e:	6809      	ldr	r1, [r1, #0]
 8002590:	4313      	orrs	r3, r2
 8002592:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	69da      	ldr	r2, [r3, #28]
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	6a1b      	ldr	r3, [r3, #32]
 80025a6:	431a      	orrs	r2, r3
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	430a      	orrs	r2, r1
 80025ae:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	689b      	ldr	r3, [r3, #8]
 80025b6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80025ba:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80025be:	687a      	ldr	r2, [r7, #4]
 80025c0:	6911      	ldr	r1, [r2, #16]
 80025c2:	687a      	ldr	r2, [r7, #4]
 80025c4:	68d2      	ldr	r2, [r2, #12]
 80025c6:	4311      	orrs	r1, r2
 80025c8:	687a      	ldr	r2, [r7, #4]
 80025ca:	6812      	ldr	r2, [r2, #0]
 80025cc:	430b      	orrs	r3, r1
 80025ce:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	68db      	ldr	r3, [r3, #12]
 80025d6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	695a      	ldr	r2, [r3, #20]
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	699b      	ldr	r3, [r3, #24]
 80025e2:	431a      	orrs	r2, r3
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	430a      	orrs	r2, r1
 80025ea:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	681a      	ldr	r2, [r3, #0]
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f042 0201 	orr.w	r2, r2, #1
 80025fa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	2200      	movs	r2, #0
 8002600:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	2220      	movs	r2, #32
 8002606:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	2200      	movs	r2, #0
 800260e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	2200      	movs	r2, #0
 8002614:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002618:	2300      	movs	r3, #0
}
 800261a:	4618      	mov	r0, r3
 800261c:	3710      	adds	r7, #16
 800261e:	46bd      	mov	sp, r7
 8002620:	bd80      	pop	{r7, pc}
 8002622:	bf00      	nop
 8002624:	000186a0 	.word	0x000186a0
 8002628:	001e847f 	.word	0x001e847f
 800262c:	003d08ff 	.word	0x003d08ff
 8002630:	431bde83 	.word	0x431bde83
 8002634:	10624dd3 	.word	0x10624dd3

08002638 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002638:	b580      	push	{r7, lr}
 800263a:	b088      	sub	sp, #32
 800263c:	af02      	add	r7, sp, #8
 800263e:	60f8      	str	r0, [r7, #12]
 8002640:	607a      	str	r2, [r7, #4]
 8002642:	461a      	mov	r2, r3
 8002644:	460b      	mov	r3, r1
 8002646:	817b      	strh	r3, [r7, #10]
 8002648:	4613      	mov	r3, r2
 800264a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800264c:	f7ff fb3e 	bl	8001ccc <HAL_GetTick>
 8002650:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002658:	b2db      	uxtb	r3, r3
 800265a:	2b20      	cmp	r3, #32
 800265c:	f040 80e0 	bne.w	8002820 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002660:	697b      	ldr	r3, [r7, #20]
 8002662:	9300      	str	r3, [sp, #0]
 8002664:	2319      	movs	r3, #25
 8002666:	2201      	movs	r2, #1
 8002668:	4970      	ldr	r1, [pc, #448]	; (800282c <HAL_I2C_Master_Transmit+0x1f4>)
 800266a:	68f8      	ldr	r0, [r7, #12]
 800266c:	f000 fc9e 	bl	8002fac <I2C_WaitOnFlagUntilTimeout>
 8002670:	4603      	mov	r3, r0
 8002672:	2b00      	cmp	r3, #0
 8002674:	d001      	beq.n	800267a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002676:	2302      	movs	r3, #2
 8002678:	e0d3      	b.n	8002822 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002680:	2b01      	cmp	r3, #1
 8002682:	d101      	bne.n	8002688 <HAL_I2C_Master_Transmit+0x50>
 8002684:	2302      	movs	r3, #2
 8002686:	e0cc      	b.n	8002822 <HAL_I2C_Master_Transmit+0x1ea>
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	2201      	movs	r2, #1
 800268c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f003 0301 	and.w	r3, r3, #1
 800269a:	2b01      	cmp	r3, #1
 800269c:	d007      	beq.n	80026ae <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	681a      	ldr	r2, [r3, #0]
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f042 0201 	orr.w	r2, r2, #1
 80026ac:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	681a      	ldr	r2, [r3, #0]
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80026bc:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	2221      	movs	r2, #33	; 0x21
 80026c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	2210      	movs	r2, #16
 80026ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	2200      	movs	r2, #0
 80026d2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	687a      	ldr	r2, [r7, #4]
 80026d8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	893a      	ldrh	r2, [r7, #8]
 80026de:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026e4:	b29a      	uxth	r2, r3
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	4a50      	ldr	r2, [pc, #320]	; (8002830 <HAL_I2C_Master_Transmit+0x1f8>)
 80026ee:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80026f0:	8979      	ldrh	r1, [r7, #10]
 80026f2:	697b      	ldr	r3, [r7, #20]
 80026f4:	6a3a      	ldr	r2, [r7, #32]
 80026f6:	68f8      	ldr	r0, [r7, #12]
 80026f8:	f000 fb08 	bl	8002d0c <I2C_MasterRequestWrite>
 80026fc:	4603      	mov	r3, r0
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d001      	beq.n	8002706 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002702:	2301      	movs	r3, #1
 8002704:	e08d      	b.n	8002822 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002706:	2300      	movs	r3, #0
 8002708:	613b      	str	r3, [r7, #16]
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	695b      	ldr	r3, [r3, #20]
 8002710:	613b      	str	r3, [r7, #16]
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	699b      	ldr	r3, [r3, #24]
 8002718:	613b      	str	r3, [r7, #16]
 800271a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800271c:	e066      	b.n	80027ec <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800271e:	697a      	ldr	r2, [r7, #20]
 8002720:	6a39      	ldr	r1, [r7, #32]
 8002722:	68f8      	ldr	r0, [r7, #12]
 8002724:	f000 fd5c 	bl	80031e0 <I2C_WaitOnTXEFlagUntilTimeout>
 8002728:	4603      	mov	r3, r0
 800272a:	2b00      	cmp	r3, #0
 800272c:	d00d      	beq.n	800274a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002732:	2b04      	cmp	r3, #4
 8002734:	d107      	bne.n	8002746 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	681a      	ldr	r2, [r3, #0]
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002744:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002746:	2301      	movs	r3, #1
 8002748:	e06b      	b.n	8002822 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800274e:	781a      	ldrb	r2, [r3, #0]
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800275a:	1c5a      	adds	r2, r3, #1
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002764:	b29b      	uxth	r3, r3
 8002766:	3b01      	subs	r3, #1
 8002768:	b29a      	uxth	r2, r3
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002772:	3b01      	subs	r3, #1
 8002774:	b29a      	uxth	r2, r3
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	695b      	ldr	r3, [r3, #20]
 8002780:	f003 0304 	and.w	r3, r3, #4
 8002784:	2b04      	cmp	r3, #4
 8002786:	d11b      	bne.n	80027c0 <HAL_I2C_Master_Transmit+0x188>
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800278c:	2b00      	cmp	r3, #0
 800278e:	d017      	beq.n	80027c0 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002794:	781a      	ldrb	r2, [r3, #0]
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027a0:	1c5a      	adds	r2, r3, #1
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027aa:	b29b      	uxth	r3, r3
 80027ac:	3b01      	subs	r3, #1
 80027ae:	b29a      	uxth	r2, r3
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027b8:	3b01      	subs	r3, #1
 80027ba:	b29a      	uxth	r2, r3
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80027c0:	697a      	ldr	r2, [r7, #20]
 80027c2:	6a39      	ldr	r1, [r7, #32]
 80027c4:	68f8      	ldr	r0, [r7, #12]
 80027c6:	f000 fd53 	bl	8003270 <I2C_WaitOnBTFFlagUntilTimeout>
 80027ca:	4603      	mov	r3, r0
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d00d      	beq.n	80027ec <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027d4:	2b04      	cmp	r3, #4
 80027d6:	d107      	bne.n	80027e8 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	681a      	ldr	r2, [r3, #0]
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80027e6:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80027e8:	2301      	movs	r3, #1
 80027ea:	e01a      	b.n	8002822 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d194      	bne.n	800271e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	681a      	ldr	r2, [r3, #0]
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002802:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	2220      	movs	r2, #32
 8002808:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	2200      	movs	r2, #0
 8002810:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	2200      	movs	r2, #0
 8002818:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800281c:	2300      	movs	r3, #0
 800281e:	e000      	b.n	8002822 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002820:	2302      	movs	r3, #2
  }
}
 8002822:	4618      	mov	r0, r3
 8002824:	3718      	adds	r7, #24
 8002826:	46bd      	mov	sp, r7
 8002828:	bd80      	pop	{r7, pc}
 800282a:	bf00      	nop
 800282c:	00100002 	.word	0x00100002
 8002830:	ffff0000 	.word	0xffff0000

08002834 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002834:	b580      	push	{r7, lr}
 8002836:	b08c      	sub	sp, #48	; 0x30
 8002838:	af02      	add	r7, sp, #8
 800283a:	60f8      	str	r0, [r7, #12]
 800283c:	607a      	str	r2, [r7, #4]
 800283e:	461a      	mov	r2, r3
 8002840:	460b      	mov	r3, r1
 8002842:	817b      	strh	r3, [r7, #10]
 8002844:	4613      	mov	r3, r2
 8002846:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8002848:	2300      	movs	r3, #0
 800284a:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800284c:	f7ff fa3e 	bl	8001ccc <HAL_GetTick>
 8002850:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002858:	b2db      	uxtb	r3, r3
 800285a:	2b20      	cmp	r3, #32
 800285c:	f040 824b 	bne.w	8002cf6 <HAL_I2C_Master_Receive+0x4c2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002862:	9300      	str	r3, [sp, #0]
 8002864:	2319      	movs	r3, #25
 8002866:	2201      	movs	r2, #1
 8002868:	497f      	ldr	r1, [pc, #508]	; (8002a68 <HAL_I2C_Master_Receive+0x234>)
 800286a:	68f8      	ldr	r0, [r7, #12]
 800286c:	f000 fb9e 	bl	8002fac <I2C_WaitOnFlagUntilTimeout>
 8002870:	4603      	mov	r3, r0
 8002872:	2b00      	cmp	r3, #0
 8002874:	d001      	beq.n	800287a <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 8002876:	2302      	movs	r3, #2
 8002878:	e23e      	b.n	8002cf8 <HAL_I2C_Master_Receive+0x4c4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002880:	2b01      	cmp	r3, #1
 8002882:	d101      	bne.n	8002888 <HAL_I2C_Master_Receive+0x54>
 8002884:	2302      	movs	r3, #2
 8002886:	e237      	b.n	8002cf8 <HAL_I2C_Master_Receive+0x4c4>
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	2201      	movs	r2, #1
 800288c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f003 0301 	and.w	r3, r3, #1
 800289a:	2b01      	cmp	r3, #1
 800289c:	d007      	beq.n	80028ae <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	681a      	ldr	r2, [r3, #0]
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	f042 0201 	orr.w	r2, r2, #1
 80028ac:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	681a      	ldr	r2, [r3, #0]
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80028bc:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	2222      	movs	r2, #34	; 0x22
 80028c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	2210      	movs	r2, #16
 80028ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	2200      	movs	r2, #0
 80028d2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	687a      	ldr	r2, [r7, #4]
 80028d8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	893a      	ldrh	r2, [r7, #8]
 80028de:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028e4:	b29a      	uxth	r2, r3
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	4a5f      	ldr	r2, [pc, #380]	; (8002a6c <HAL_I2C_Master_Receive+0x238>)
 80028ee:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80028f0:	8979      	ldrh	r1, [r7, #10]
 80028f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80028f6:	68f8      	ldr	r0, [r7, #12]
 80028f8:	f000 fa8a 	bl	8002e10 <I2C_MasterRequestRead>
 80028fc:	4603      	mov	r3, r0
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d001      	beq.n	8002906 <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 8002902:	2301      	movs	r3, #1
 8002904:	e1f8      	b.n	8002cf8 <HAL_I2C_Master_Receive+0x4c4>
    }

    if (hi2c->XferSize == 0U)
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800290a:	2b00      	cmp	r3, #0
 800290c:	d113      	bne.n	8002936 <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800290e:	2300      	movs	r3, #0
 8002910:	61fb      	str	r3, [r7, #28]
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	695b      	ldr	r3, [r3, #20]
 8002918:	61fb      	str	r3, [r7, #28]
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	699b      	ldr	r3, [r3, #24]
 8002920:	61fb      	str	r3, [r7, #28]
 8002922:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	681a      	ldr	r2, [r3, #0]
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002932:	601a      	str	r2, [r3, #0]
 8002934:	e1cc      	b.n	8002cd0 <HAL_I2C_Master_Receive+0x49c>
    }
    else if (hi2c->XferSize == 1U)
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800293a:	2b01      	cmp	r3, #1
 800293c:	d11e      	bne.n	800297c <HAL_I2C_Master_Receive+0x148>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	681a      	ldr	r2, [r3, #0]
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800294c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800294e:	b672      	cpsid	i
}
 8002950:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002952:	2300      	movs	r3, #0
 8002954:	61bb      	str	r3, [r7, #24]
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	695b      	ldr	r3, [r3, #20]
 800295c:	61bb      	str	r3, [r7, #24]
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	699b      	ldr	r3, [r3, #24]
 8002964:	61bb      	str	r3, [r7, #24]
 8002966:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	681a      	ldr	r2, [r3, #0]
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002976:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002978:	b662      	cpsie	i
}
 800297a:	e035      	b.n	80029e8 <HAL_I2C_Master_Receive+0x1b4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002980:	2b02      	cmp	r3, #2
 8002982:	d11e      	bne.n	80029c2 <HAL_I2C_Master_Receive+0x18e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	681a      	ldr	r2, [r3, #0]
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002992:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002994:	b672      	cpsid	i
}
 8002996:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002998:	2300      	movs	r3, #0
 800299a:	617b      	str	r3, [r7, #20]
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	695b      	ldr	r3, [r3, #20]
 80029a2:	617b      	str	r3, [r7, #20]
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	699b      	ldr	r3, [r3, #24]
 80029aa:	617b      	str	r3, [r7, #20]
 80029ac:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	681a      	ldr	r2, [r3, #0]
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80029bc:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80029be:	b662      	cpsie	i
}
 80029c0:	e012      	b.n	80029e8 <HAL_I2C_Master_Receive+0x1b4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	681a      	ldr	r2, [r3, #0]
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80029d0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80029d2:	2300      	movs	r3, #0
 80029d4:	613b      	str	r3, [r7, #16]
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	695b      	ldr	r3, [r3, #20]
 80029dc:	613b      	str	r3, [r7, #16]
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	699b      	ldr	r3, [r3, #24]
 80029e4:	613b      	str	r3, [r7, #16]
 80029e6:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 80029e8:	e172      	b.n	8002cd0 <HAL_I2C_Master_Receive+0x49c>
    {
      if (hi2c->XferSize <= 3U)
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029ee:	2b03      	cmp	r3, #3
 80029f0:	f200 811f 	bhi.w	8002c32 <HAL_I2C_Master_Receive+0x3fe>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029f8:	2b01      	cmp	r3, #1
 80029fa:	d123      	bne.n	8002a44 <HAL_I2C_Master_Receive+0x210>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80029fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80029fe:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002a00:	68f8      	ldr	r0, [r7, #12]
 8002a02:	f000 fc7d 	bl	8003300 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002a06:	4603      	mov	r3, r0
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d001      	beq.n	8002a10 <HAL_I2C_Master_Receive+0x1dc>
          {
            return HAL_ERROR;
 8002a0c:	2301      	movs	r3, #1
 8002a0e:	e173      	b.n	8002cf8 <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	691a      	ldr	r2, [r3, #16]
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a1a:	b2d2      	uxtb	r2, r2
 8002a1c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a22:	1c5a      	adds	r2, r3, #1
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a2c:	3b01      	subs	r3, #1
 8002a2e:	b29a      	uxth	r2, r3
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a38:	b29b      	uxth	r3, r3
 8002a3a:	3b01      	subs	r3, #1
 8002a3c:	b29a      	uxth	r2, r3
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002a42:	e145      	b.n	8002cd0 <HAL_I2C_Master_Receive+0x49c>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a48:	2b02      	cmp	r3, #2
 8002a4a:	d152      	bne.n	8002af2 <HAL_I2C_Master_Receive+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002a4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a4e:	9300      	str	r3, [sp, #0]
 8002a50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a52:	2200      	movs	r2, #0
 8002a54:	4906      	ldr	r1, [pc, #24]	; (8002a70 <HAL_I2C_Master_Receive+0x23c>)
 8002a56:	68f8      	ldr	r0, [r7, #12]
 8002a58:	f000 faa8 	bl	8002fac <I2C_WaitOnFlagUntilTimeout>
 8002a5c:	4603      	mov	r3, r0
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d008      	beq.n	8002a74 <HAL_I2C_Master_Receive+0x240>
          {
            return HAL_ERROR;
 8002a62:	2301      	movs	r3, #1
 8002a64:	e148      	b.n	8002cf8 <HAL_I2C_Master_Receive+0x4c4>
 8002a66:	bf00      	nop
 8002a68:	00100002 	.word	0x00100002
 8002a6c:	ffff0000 	.word	0xffff0000
 8002a70:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8002a74:	b672      	cpsid	i
}
 8002a76:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	681a      	ldr	r2, [r3, #0]
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a86:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	691a      	ldr	r2, [r3, #16]
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a92:	b2d2      	uxtb	r2, r2
 8002a94:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a9a:	1c5a      	adds	r2, r3, #1
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002aa4:	3b01      	subs	r3, #1
 8002aa6:	b29a      	uxth	r2, r3
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ab0:	b29b      	uxth	r3, r3
 8002ab2:	3b01      	subs	r3, #1
 8002ab4:	b29a      	uxth	r2, r3
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8002aba:	b662      	cpsie	i
}
 8002abc:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	691a      	ldr	r2, [r3, #16]
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ac8:	b2d2      	uxtb	r2, r2
 8002aca:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ad0:	1c5a      	adds	r2, r3, #1
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ada:	3b01      	subs	r3, #1
 8002adc:	b29a      	uxth	r2, r3
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ae6:	b29b      	uxth	r3, r3
 8002ae8:	3b01      	subs	r3, #1
 8002aea:	b29a      	uxth	r2, r3
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002af0:	e0ee      	b.n	8002cd0 <HAL_I2C_Master_Receive+0x49c>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002af2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002af4:	9300      	str	r3, [sp, #0]
 8002af6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002af8:	2200      	movs	r2, #0
 8002afa:	4981      	ldr	r1, [pc, #516]	; (8002d00 <HAL_I2C_Master_Receive+0x4cc>)
 8002afc:	68f8      	ldr	r0, [r7, #12]
 8002afe:	f000 fa55 	bl	8002fac <I2C_WaitOnFlagUntilTimeout>
 8002b02:	4603      	mov	r3, r0
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d001      	beq.n	8002b0c <HAL_I2C_Master_Receive+0x2d8>
          {
            return HAL_ERROR;
 8002b08:	2301      	movs	r3, #1
 8002b0a:	e0f5      	b.n	8002cf8 <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	681a      	ldr	r2, [r3, #0]
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002b1a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002b1c:	b672      	cpsid	i
}
 8002b1e:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	691a      	ldr	r2, [r3, #16]
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b2a:	b2d2      	uxtb	r2, r2
 8002b2c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b32:	1c5a      	adds	r2, r3, #1
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b3c:	3b01      	subs	r3, #1
 8002b3e:	b29a      	uxth	r2, r3
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b48:	b29b      	uxth	r3, r3
 8002b4a:	3b01      	subs	r3, #1
 8002b4c:	b29a      	uxth	r2, r3
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8002b52:	4b6c      	ldr	r3, [pc, #432]	; (8002d04 <HAL_I2C_Master_Receive+0x4d0>)
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	08db      	lsrs	r3, r3, #3
 8002b58:	4a6b      	ldr	r2, [pc, #428]	; (8002d08 <HAL_I2C_Master_Receive+0x4d4>)
 8002b5a:	fba2 2303 	umull	r2, r3, r2, r3
 8002b5e:	0a1a      	lsrs	r2, r3, #8
 8002b60:	4613      	mov	r3, r2
 8002b62:	009b      	lsls	r3, r3, #2
 8002b64:	4413      	add	r3, r2
 8002b66:	00da      	lsls	r2, r3, #3
 8002b68:	1ad3      	subs	r3, r2, r3
 8002b6a:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8002b6c:	6a3b      	ldr	r3, [r7, #32]
 8002b6e:	3b01      	subs	r3, #1
 8002b70:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8002b72:	6a3b      	ldr	r3, [r7, #32]
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d118      	bne.n	8002baa <HAL_I2C_Master_Receive+0x376>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	2200      	movs	r2, #0
 8002b7c:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	2220      	movs	r2, #32
 8002b82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	2200      	movs	r2, #0
 8002b8a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b92:	f043 0220 	orr.w	r2, r3, #32
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8002b9a:	b662      	cpsie	i
}
 8002b9c:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	2200      	movs	r2, #0
 8002ba2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8002ba6:	2301      	movs	r3, #1
 8002ba8:	e0a6      	b.n	8002cf8 <HAL_I2C_Master_Receive+0x4c4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	695b      	ldr	r3, [r3, #20]
 8002bb0:	f003 0304 	and.w	r3, r3, #4
 8002bb4:	2b04      	cmp	r3, #4
 8002bb6:	d1d9      	bne.n	8002b6c <HAL_I2C_Master_Receive+0x338>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	681a      	ldr	r2, [r3, #0]
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002bc6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	691a      	ldr	r2, [r3, #16]
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bd2:	b2d2      	uxtb	r2, r2
 8002bd4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bda:	1c5a      	adds	r2, r3, #1
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002be4:	3b01      	subs	r3, #1
 8002be6:	b29a      	uxth	r2, r3
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bf0:	b29b      	uxth	r3, r3
 8002bf2:	3b01      	subs	r3, #1
 8002bf4:	b29a      	uxth	r2, r3
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8002bfa:	b662      	cpsie	i
}
 8002bfc:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	691a      	ldr	r2, [r3, #16]
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c08:	b2d2      	uxtb	r2, r2
 8002c0a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c10:	1c5a      	adds	r2, r3, #1
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c1a:	3b01      	subs	r3, #1
 8002c1c:	b29a      	uxth	r2, r3
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c26:	b29b      	uxth	r3, r3
 8002c28:	3b01      	subs	r3, #1
 8002c2a:	b29a      	uxth	r2, r3
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002c30:	e04e      	b.n	8002cd0 <HAL_I2C_Master_Receive+0x49c>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002c32:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c34:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002c36:	68f8      	ldr	r0, [r7, #12]
 8002c38:	f000 fb62 	bl	8003300 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002c3c:	4603      	mov	r3, r0
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d001      	beq.n	8002c46 <HAL_I2C_Master_Receive+0x412>
        {
          return HAL_ERROR;
 8002c42:	2301      	movs	r3, #1
 8002c44:	e058      	b.n	8002cf8 <HAL_I2C_Master_Receive+0x4c4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	691a      	ldr	r2, [r3, #16]
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c50:	b2d2      	uxtb	r2, r2
 8002c52:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c58:	1c5a      	adds	r2, r3, #1
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c62:	3b01      	subs	r3, #1
 8002c64:	b29a      	uxth	r2, r3
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c6e:	b29b      	uxth	r3, r3
 8002c70:	3b01      	subs	r3, #1
 8002c72:	b29a      	uxth	r2, r3
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	695b      	ldr	r3, [r3, #20]
 8002c7e:	f003 0304 	and.w	r3, r3, #4
 8002c82:	2b04      	cmp	r3, #4
 8002c84:	d124      	bne.n	8002cd0 <HAL_I2C_Master_Receive+0x49c>
        {

          if (hi2c->XferSize == 3U)
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c8a:	2b03      	cmp	r3, #3
 8002c8c:	d107      	bne.n	8002c9e <HAL_I2C_Master_Receive+0x46a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	681a      	ldr	r2, [r3, #0]
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002c9c:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	691a      	ldr	r2, [r3, #16]
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ca8:	b2d2      	uxtb	r2, r2
 8002caa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cb0:	1c5a      	adds	r2, r3, #1
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cba:	3b01      	subs	r3, #1
 8002cbc:	b29a      	uxth	r2, r3
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cc6:	b29b      	uxth	r3, r3
 8002cc8:	3b01      	subs	r3, #1
 8002cca:	b29a      	uxth	r2, r3
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	f47f ae88 	bne.w	80029ea <HAL_I2C_Master_Receive+0x1b6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	2220      	movs	r2, #32
 8002cde:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	2200      	movs	r2, #0
 8002ce6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	2200      	movs	r2, #0
 8002cee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002cf2:	2300      	movs	r3, #0
 8002cf4:	e000      	b.n	8002cf8 <HAL_I2C_Master_Receive+0x4c4>
  }
  else
  {
    return HAL_BUSY;
 8002cf6:	2302      	movs	r3, #2
  }
}
 8002cf8:	4618      	mov	r0, r3
 8002cfa:	3728      	adds	r7, #40	; 0x28
 8002cfc:	46bd      	mov	sp, r7
 8002cfe:	bd80      	pop	{r7, pc}
 8002d00:	00010004 	.word	0x00010004
 8002d04:	20000014 	.word	0x20000014
 8002d08:	14f8b589 	.word	0x14f8b589

08002d0c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002d0c:	b580      	push	{r7, lr}
 8002d0e:	b088      	sub	sp, #32
 8002d10:	af02      	add	r7, sp, #8
 8002d12:	60f8      	str	r0, [r7, #12]
 8002d14:	607a      	str	r2, [r7, #4]
 8002d16:	603b      	str	r3, [r7, #0]
 8002d18:	460b      	mov	r3, r1
 8002d1a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d20:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002d22:	697b      	ldr	r3, [r7, #20]
 8002d24:	2b08      	cmp	r3, #8
 8002d26:	d006      	beq.n	8002d36 <I2C_MasterRequestWrite+0x2a>
 8002d28:	697b      	ldr	r3, [r7, #20]
 8002d2a:	2b01      	cmp	r3, #1
 8002d2c:	d003      	beq.n	8002d36 <I2C_MasterRequestWrite+0x2a>
 8002d2e:	697b      	ldr	r3, [r7, #20]
 8002d30:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002d34:	d108      	bne.n	8002d48 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	681a      	ldr	r2, [r3, #0]
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002d44:	601a      	str	r2, [r3, #0]
 8002d46:	e00b      	b.n	8002d60 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d4c:	2b12      	cmp	r3, #18
 8002d4e:	d107      	bne.n	8002d60 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	681a      	ldr	r2, [r3, #0]
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002d5e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002d60:	683b      	ldr	r3, [r7, #0]
 8002d62:	9300      	str	r3, [sp, #0]
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	2200      	movs	r2, #0
 8002d68:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002d6c:	68f8      	ldr	r0, [r7, #12]
 8002d6e:	f000 f91d 	bl	8002fac <I2C_WaitOnFlagUntilTimeout>
 8002d72:	4603      	mov	r3, r0
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d00d      	beq.n	8002d94 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d82:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002d86:	d103      	bne.n	8002d90 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002d8e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002d90:	2303      	movs	r3, #3
 8002d92:	e035      	b.n	8002e00 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	691b      	ldr	r3, [r3, #16]
 8002d98:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002d9c:	d108      	bne.n	8002db0 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002d9e:	897b      	ldrh	r3, [r7, #10]
 8002da0:	b2db      	uxtb	r3, r3
 8002da2:	461a      	mov	r2, r3
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002dac:	611a      	str	r2, [r3, #16]
 8002dae:	e01b      	b.n	8002de8 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002db0:	897b      	ldrh	r3, [r7, #10]
 8002db2:	11db      	asrs	r3, r3, #7
 8002db4:	b2db      	uxtb	r3, r3
 8002db6:	f003 0306 	and.w	r3, r3, #6
 8002dba:	b2db      	uxtb	r3, r3
 8002dbc:	f063 030f 	orn	r3, r3, #15
 8002dc0:	b2da      	uxtb	r2, r3
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002dc8:	683b      	ldr	r3, [r7, #0]
 8002dca:	687a      	ldr	r2, [r7, #4]
 8002dcc:	490e      	ldr	r1, [pc, #56]	; (8002e08 <I2C_MasterRequestWrite+0xfc>)
 8002dce:	68f8      	ldr	r0, [r7, #12]
 8002dd0:	f000 f966 	bl	80030a0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002dd4:	4603      	mov	r3, r0
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d001      	beq.n	8002dde <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002dda:	2301      	movs	r3, #1
 8002ddc:	e010      	b.n	8002e00 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002dde:	897b      	ldrh	r3, [r7, #10]
 8002de0:	b2da      	uxtb	r2, r3
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002de8:	683b      	ldr	r3, [r7, #0]
 8002dea:	687a      	ldr	r2, [r7, #4]
 8002dec:	4907      	ldr	r1, [pc, #28]	; (8002e0c <I2C_MasterRequestWrite+0x100>)
 8002dee:	68f8      	ldr	r0, [r7, #12]
 8002df0:	f000 f956 	bl	80030a0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002df4:	4603      	mov	r3, r0
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d001      	beq.n	8002dfe <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002dfa:	2301      	movs	r3, #1
 8002dfc:	e000      	b.n	8002e00 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002dfe:	2300      	movs	r3, #0
}
 8002e00:	4618      	mov	r0, r3
 8002e02:	3718      	adds	r7, #24
 8002e04:	46bd      	mov	sp, r7
 8002e06:	bd80      	pop	{r7, pc}
 8002e08:	00010008 	.word	0x00010008
 8002e0c:	00010002 	.word	0x00010002

08002e10 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002e10:	b580      	push	{r7, lr}
 8002e12:	b088      	sub	sp, #32
 8002e14:	af02      	add	r7, sp, #8
 8002e16:	60f8      	str	r0, [r7, #12]
 8002e18:	607a      	str	r2, [r7, #4]
 8002e1a:	603b      	str	r3, [r7, #0]
 8002e1c:	460b      	mov	r3, r1
 8002e1e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e24:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	681a      	ldr	r2, [r3, #0]
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002e34:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002e36:	697b      	ldr	r3, [r7, #20]
 8002e38:	2b08      	cmp	r3, #8
 8002e3a:	d006      	beq.n	8002e4a <I2C_MasterRequestRead+0x3a>
 8002e3c:	697b      	ldr	r3, [r7, #20]
 8002e3e:	2b01      	cmp	r3, #1
 8002e40:	d003      	beq.n	8002e4a <I2C_MasterRequestRead+0x3a>
 8002e42:	697b      	ldr	r3, [r7, #20]
 8002e44:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002e48:	d108      	bne.n	8002e5c <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	681a      	ldr	r2, [r3, #0]
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002e58:	601a      	str	r2, [r3, #0]
 8002e5a:	e00b      	b.n	8002e74 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e60:	2b11      	cmp	r3, #17
 8002e62:	d107      	bne.n	8002e74 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	681a      	ldr	r2, [r3, #0]
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002e72:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002e74:	683b      	ldr	r3, [r7, #0]
 8002e76:	9300      	str	r3, [sp, #0]
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	2200      	movs	r2, #0
 8002e7c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002e80:	68f8      	ldr	r0, [r7, #12]
 8002e82:	f000 f893 	bl	8002fac <I2C_WaitOnFlagUntilTimeout>
 8002e86:	4603      	mov	r3, r0
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d00d      	beq.n	8002ea8 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e96:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002e9a:	d103      	bne.n	8002ea4 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002ea2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002ea4:	2303      	movs	r3, #3
 8002ea6:	e079      	b.n	8002f9c <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	691b      	ldr	r3, [r3, #16]
 8002eac:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002eb0:	d108      	bne.n	8002ec4 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002eb2:	897b      	ldrh	r3, [r7, #10]
 8002eb4:	b2db      	uxtb	r3, r3
 8002eb6:	f043 0301 	orr.w	r3, r3, #1
 8002eba:	b2da      	uxtb	r2, r3
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	611a      	str	r2, [r3, #16]
 8002ec2:	e05f      	b.n	8002f84 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002ec4:	897b      	ldrh	r3, [r7, #10]
 8002ec6:	11db      	asrs	r3, r3, #7
 8002ec8:	b2db      	uxtb	r3, r3
 8002eca:	f003 0306 	and.w	r3, r3, #6
 8002ece:	b2db      	uxtb	r3, r3
 8002ed0:	f063 030f 	orn	r3, r3, #15
 8002ed4:	b2da      	uxtb	r2, r3
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002edc:	683b      	ldr	r3, [r7, #0]
 8002ede:	687a      	ldr	r2, [r7, #4]
 8002ee0:	4930      	ldr	r1, [pc, #192]	; (8002fa4 <I2C_MasterRequestRead+0x194>)
 8002ee2:	68f8      	ldr	r0, [r7, #12]
 8002ee4:	f000 f8dc 	bl	80030a0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002ee8:	4603      	mov	r3, r0
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d001      	beq.n	8002ef2 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8002eee:	2301      	movs	r3, #1
 8002ef0:	e054      	b.n	8002f9c <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002ef2:	897b      	ldrh	r3, [r7, #10]
 8002ef4:	b2da      	uxtb	r2, r3
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002efc:	683b      	ldr	r3, [r7, #0]
 8002efe:	687a      	ldr	r2, [r7, #4]
 8002f00:	4929      	ldr	r1, [pc, #164]	; (8002fa8 <I2C_MasterRequestRead+0x198>)
 8002f02:	68f8      	ldr	r0, [r7, #12]
 8002f04:	f000 f8cc 	bl	80030a0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002f08:	4603      	mov	r3, r0
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d001      	beq.n	8002f12 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8002f0e:	2301      	movs	r3, #1
 8002f10:	e044      	b.n	8002f9c <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f12:	2300      	movs	r3, #0
 8002f14:	613b      	str	r3, [r7, #16]
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	695b      	ldr	r3, [r3, #20]
 8002f1c:	613b      	str	r3, [r7, #16]
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	699b      	ldr	r3, [r3, #24]
 8002f24:	613b      	str	r3, [r7, #16]
 8002f26:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	681a      	ldr	r2, [r3, #0]
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002f36:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002f38:	683b      	ldr	r3, [r7, #0]
 8002f3a:	9300      	str	r3, [sp, #0]
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	2200      	movs	r2, #0
 8002f40:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002f44:	68f8      	ldr	r0, [r7, #12]
 8002f46:	f000 f831 	bl	8002fac <I2C_WaitOnFlagUntilTimeout>
 8002f4a:	4603      	mov	r3, r0
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d00d      	beq.n	8002f6c <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f5a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002f5e:	d103      	bne.n	8002f68 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002f66:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8002f68:	2303      	movs	r3, #3
 8002f6a:	e017      	b.n	8002f9c <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8002f6c:	897b      	ldrh	r3, [r7, #10]
 8002f6e:	11db      	asrs	r3, r3, #7
 8002f70:	b2db      	uxtb	r3, r3
 8002f72:	f003 0306 	and.w	r3, r3, #6
 8002f76:	b2db      	uxtb	r3, r3
 8002f78:	f063 030e 	orn	r3, r3, #14
 8002f7c:	b2da      	uxtb	r2, r3
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002f84:	683b      	ldr	r3, [r7, #0]
 8002f86:	687a      	ldr	r2, [r7, #4]
 8002f88:	4907      	ldr	r1, [pc, #28]	; (8002fa8 <I2C_MasterRequestRead+0x198>)
 8002f8a:	68f8      	ldr	r0, [r7, #12]
 8002f8c:	f000 f888 	bl	80030a0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002f90:	4603      	mov	r3, r0
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d001      	beq.n	8002f9a <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8002f96:	2301      	movs	r3, #1
 8002f98:	e000      	b.n	8002f9c <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8002f9a:	2300      	movs	r3, #0
}
 8002f9c:	4618      	mov	r0, r3
 8002f9e:	3718      	adds	r7, #24
 8002fa0:	46bd      	mov	sp, r7
 8002fa2:	bd80      	pop	{r7, pc}
 8002fa4:	00010008 	.word	0x00010008
 8002fa8:	00010002 	.word	0x00010002

08002fac <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002fac:	b580      	push	{r7, lr}
 8002fae:	b084      	sub	sp, #16
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	60f8      	str	r0, [r7, #12]
 8002fb4:	60b9      	str	r1, [r7, #8]
 8002fb6:	603b      	str	r3, [r7, #0]
 8002fb8:	4613      	mov	r3, r2
 8002fba:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002fbc:	e048      	b.n	8003050 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002fbe:	683b      	ldr	r3, [r7, #0]
 8002fc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fc4:	d044      	beq.n	8003050 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002fc6:	f7fe fe81 	bl	8001ccc <HAL_GetTick>
 8002fca:	4602      	mov	r2, r0
 8002fcc:	69bb      	ldr	r3, [r7, #24]
 8002fce:	1ad3      	subs	r3, r2, r3
 8002fd0:	683a      	ldr	r2, [r7, #0]
 8002fd2:	429a      	cmp	r2, r3
 8002fd4:	d302      	bcc.n	8002fdc <I2C_WaitOnFlagUntilTimeout+0x30>
 8002fd6:	683b      	ldr	r3, [r7, #0]
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d139      	bne.n	8003050 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002fdc:	68bb      	ldr	r3, [r7, #8]
 8002fde:	0c1b      	lsrs	r3, r3, #16
 8002fe0:	b2db      	uxtb	r3, r3
 8002fe2:	2b01      	cmp	r3, #1
 8002fe4:	d10d      	bne.n	8003002 <I2C_WaitOnFlagUntilTimeout+0x56>
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	695b      	ldr	r3, [r3, #20]
 8002fec:	43da      	mvns	r2, r3
 8002fee:	68bb      	ldr	r3, [r7, #8]
 8002ff0:	4013      	ands	r3, r2
 8002ff2:	b29b      	uxth	r3, r3
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	bf0c      	ite	eq
 8002ff8:	2301      	moveq	r3, #1
 8002ffa:	2300      	movne	r3, #0
 8002ffc:	b2db      	uxtb	r3, r3
 8002ffe:	461a      	mov	r2, r3
 8003000:	e00c      	b.n	800301c <I2C_WaitOnFlagUntilTimeout+0x70>
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	699b      	ldr	r3, [r3, #24]
 8003008:	43da      	mvns	r2, r3
 800300a:	68bb      	ldr	r3, [r7, #8]
 800300c:	4013      	ands	r3, r2
 800300e:	b29b      	uxth	r3, r3
 8003010:	2b00      	cmp	r3, #0
 8003012:	bf0c      	ite	eq
 8003014:	2301      	moveq	r3, #1
 8003016:	2300      	movne	r3, #0
 8003018:	b2db      	uxtb	r3, r3
 800301a:	461a      	mov	r2, r3
 800301c:	79fb      	ldrb	r3, [r7, #7]
 800301e:	429a      	cmp	r2, r3
 8003020:	d116      	bne.n	8003050 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	2200      	movs	r2, #0
 8003026:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	2220      	movs	r2, #32
 800302c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	2200      	movs	r2, #0
 8003034:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800303c:	f043 0220 	orr.w	r2, r3, #32
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	2200      	movs	r2, #0
 8003048:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800304c:	2301      	movs	r3, #1
 800304e:	e023      	b.n	8003098 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003050:	68bb      	ldr	r3, [r7, #8]
 8003052:	0c1b      	lsrs	r3, r3, #16
 8003054:	b2db      	uxtb	r3, r3
 8003056:	2b01      	cmp	r3, #1
 8003058:	d10d      	bne.n	8003076 <I2C_WaitOnFlagUntilTimeout+0xca>
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	695b      	ldr	r3, [r3, #20]
 8003060:	43da      	mvns	r2, r3
 8003062:	68bb      	ldr	r3, [r7, #8]
 8003064:	4013      	ands	r3, r2
 8003066:	b29b      	uxth	r3, r3
 8003068:	2b00      	cmp	r3, #0
 800306a:	bf0c      	ite	eq
 800306c:	2301      	moveq	r3, #1
 800306e:	2300      	movne	r3, #0
 8003070:	b2db      	uxtb	r3, r3
 8003072:	461a      	mov	r2, r3
 8003074:	e00c      	b.n	8003090 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	699b      	ldr	r3, [r3, #24]
 800307c:	43da      	mvns	r2, r3
 800307e:	68bb      	ldr	r3, [r7, #8]
 8003080:	4013      	ands	r3, r2
 8003082:	b29b      	uxth	r3, r3
 8003084:	2b00      	cmp	r3, #0
 8003086:	bf0c      	ite	eq
 8003088:	2301      	moveq	r3, #1
 800308a:	2300      	movne	r3, #0
 800308c:	b2db      	uxtb	r3, r3
 800308e:	461a      	mov	r2, r3
 8003090:	79fb      	ldrb	r3, [r7, #7]
 8003092:	429a      	cmp	r2, r3
 8003094:	d093      	beq.n	8002fbe <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003096:	2300      	movs	r3, #0
}
 8003098:	4618      	mov	r0, r3
 800309a:	3710      	adds	r7, #16
 800309c:	46bd      	mov	sp, r7
 800309e:	bd80      	pop	{r7, pc}

080030a0 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80030a0:	b580      	push	{r7, lr}
 80030a2:	b084      	sub	sp, #16
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	60f8      	str	r0, [r7, #12]
 80030a8:	60b9      	str	r1, [r7, #8]
 80030aa:	607a      	str	r2, [r7, #4]
 80030ac:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80030ae:	e071      	b.n	8003194 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	695b      	ldr	r3, [r3, #20]
 80030b6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80030ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80030be:	d123      	bne.n	8003108 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	681a      	ldr	r2, [r3, #0]
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80030ce:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80030d8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	2200      	movs	r2, #0
 80030de:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	2220      	movs	r2, #32
 80030e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	2200      	movs	r2, #0
 80030ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030f4:	f043 0204 	orr.w	r2, r3, #4
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	2200      	movs	r2, #0
 8003100:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003104:	2301      	movs	r3, #1
 8003106:	e067      	b.n	80031d8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800310e:	d041      	beq.n	8003194 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003110:	f7fe fddc 	bl	8001ccc <HAL_GetTick>
 8003114:	4602      	mov	r2, r0
 8003116:	683b      	ldr	r3, [r7, #0]
 8003118:	1ad3      	subs	r3, r2, r3
 800311a:	687a      	ldr	r2, [r7, #4]
 800311c:	429a      	cmp	r2, r3
 800311e:	d302      	bcc.n	8003126 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	2b00      	cmp	r3, #0
 8003124:	d136      	bne.n	8003194 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8003126:	68bb      	ldr	r3, [r7, #8]
 8003128:	0c1b      	lsrs	r3, r3, #16
 800312a:	b2db      	uxtb	r3, r3
 800312c:	2b01      	cmp	r3, #1
 800312e:	d10c      	bne.n	800314a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	695b      	ldr	r3, [r3, #20]
 8003136:	43da      	mvns	r2, r3
 8003138:	68bb      	ldr	r3, [r7, #8]
 800313a:	4013      	ands	r3, r2
 800313c:	b29b      	uxth	r3, r3
 800313e:	2b00      	cmp	r3, #0
 8003140:	bf14      	ite	ne
 8003142:	2301      	movne	r3, #1
 8003144:	2300      	moveq	r3, #0
 8003146:	b2db      	uxtb	r3, r3
 8003148:	e00b      	b.n	8003162 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	699b      	ldr	r3, [r3, #24]
 8003150:	43da      	mvns	r2, r3
 8003152:	68bb      	ldr	r3, [r7, #8]
 8003154:	4013      	ands	r3, r2
 8003156:	b29b      	uxth	r3, r3
 8003158:	2b00      	cmp	r3, #0
 800315a:	bf14      	ite	ne
 800315c:	2301      	movne	r3, #1
 800315e:	2300      	moveq	r3, #0
 8003160:	b2db      	uxtb	r3, r3
 8003162:	2b00      	cmp	r3, #0
 8003164:	d016      	beq.n	8003194 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	2200      	movs	r2, #0
 800316a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	2220      	movs	r2, #32
 8003170:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	2200      	movs	r2, #0
 8003178:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003180:	f043 0220 	orr.w	r2, r3, #32
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	2200      	movs	r2, #0
 800318c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003190:	2301      	movs	r3, #1
 8003192:	e021      	b.n	80031d8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003194:	68bb      	ldr	r3, [r7, #8]
 8003196:	0c1b      	lsrs	r3, r3, #16
 8003198:	b2db      	uxtb	r3, r3
 800319a:	2b01      	cmp	r3, #1
 800319c:	d10c      	bne.n	80031b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	695b      	ldr	r3, [r3, #20]
 80031a4:	43da      	mvns	r2, r3
 80031a6:	68bb      	ldr	r3, [r7, #8]
 80031a8:	4013      	ands	r3, r2
 80031aa:	b29b      	uxth	r3, r3
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	bf14      	ite	ne
 80031b0:	2301      	movne	r3, #1
 80031b2:	2300      	moveq	r3, #0
 80031b4:	b2db      	uxtb	r3, r3
 80031b6:	e00b      	b.n	80031d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	699b      	ldr	r3, [r3, #24]
 80031be:	43da      	mvns	r2, r3
 80031c0:	68bb      	ldr	r3, [r7, #8]
 80031c2:	4013      	ands	r3, r2
 80031c4:	b29b      	uxth	r3, r3
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	bf14      	ite	ne
 80031ca:	2301      	movne	r3, #1
 80031cc:	2300      	moveq	r3, #0
 80031ce:	b2db      	uxtb	r3, r3
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	f47f af6d 	bne.w	80030b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80031d6:	2300      	movs	r3, #0
}
 80031d8:	4618      	mov	r0, r3
 80031da:	3710      	adds	r7, #16
 80031dc:	46bd      	mov	sp, r7
 80031de:	bd80      	pop	{r7, pc}

080031e0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80031e0:	b580      	push	{r7, lr}
 80031e2:	b084      	sub	sp, #16
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	60f8      	str	r0, [r7, #12]
 80031e8:	60b9      	str	r1, [r7, #8]
 80031ea:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80031ec:	e034      	b.n	8003258 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80031ee:	68f8      	ldr	r0, [r7, #12]
 80031f0:	f000 f8e3 	bl	80033ba <I2C_IsAcknowledgeFailed>
 80031f4:	4603      	mov	r3, r0
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d001      	beq.n	80031fe <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80031fa:	2301      	movs	r3, #1
 80031fc:	e034      	b.n	8003268 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80031fe:	68bb      	ldr	r3, [r7, #8]
 8003200:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003204:	d028      	beq.n	8003258 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003206:	f7fe fd61 	bl	8001ccc <HAL_GetTick>
 800320a:	4602      	mov	r2, r0
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	1ad3      	subs	r3, r2, r3
 8003210:	68ba      	ldr	r2, [r7, #8]
 8003212:	429a      	cmp	r2, r3
 8003214:	d302      	bcc.n	800321c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003216:	68bb      	ldr	r3, [r7, #8]
 8003218:	2b00      	cmp	r3, #0
 800321a:	d11d      	bne.n	8003258 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	695b      	ldr	r3, [r3, #20]
 8003222:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003226:	2b80      	cmp	r3, #128	; 0x80
 8003228:	d016      	beq.n	8003258 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	2200      	movs	r2, #0
 800322e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	2220      	movs	r2, #32
 8003234:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	2200      	movs	r2, #0
 800323c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003244:	f043 0220 	orr.w	r2, r3, #32
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	2200      	movs	r2, #0
 8003250:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003254:	2301      	movs	r3, #1
 8003256:	e007      	b.n	8003268 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	695b      	ldr	r3, [r3, #20]
 800325e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003262:	2b80      	cmp	r3, #128	; 0x80
 8003264:	d1c3      	bne.n	80031ee <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003266:	2300      	movs	r3, #0
}
 8003268:	4618      	mov	r0, r3
 800326a:	3710      	adds	r7, #16
 800326c:	46bd      	mov	sp, r7
 800326e:	bd80      	pop	{r7, pc}

08003270 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003270:	b580      	push	{r7, lr}
 8003272:	b084      	sub	sp, #16
 8003274:	af00      	add	r7, sp, #0
 8003276:	60f8      	str	r0, [r7, #12]
 8003278:	60b9      	str	r1, [r7, #8]
 800327a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800327c:	e034      	b.n	80032e8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800327e:	68f8      	ldr	r0, [r7, #12]
 8003280:	f000 f89b 	bl	80033ba <I2C_IsAcknowledgeFailed>
 8003284:	4603      	mov	r3, r0
 8003286:	2b00      	cmp	r3, #0
 8003288:	d001      	beq.n	800328e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800328a:	2301      	movs	r3, #1
 800328c:	e034      	b.n	80032f8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800328e:	68bb      	ldr	r3, [r7, #8]
 8003290:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003294:	d028      	beq.n	80032e8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003296:	f7fe fd19 	bl	8001ccc <HAL_GetTick>
 800329a:	4602      	mov	r2, r0
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	1ad3      	subs	r3, r2, r3
 80032a0:	68ba      	ldr	r2, [r7, #8]
 80032a2:	429a      	cmp	r2, r3
 80032a4:	d302      	bcc.n	80032ac <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80032a6:	68bb      	ldr	r3, [r7, #8]
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d11d      	bne.n	80032e8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	695b      	ldr	r3, [r3, #20]
 80032b2:	f003 0304 	and.w	r3, r3, #4
 80032b6:	2b04      	cmp	r3, #4
 80032b8:	d016      	beq.n	80032e8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	2200      	movs	r2, #0
 80032be:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	2220      	movs	r2, #32
 80032c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	2200      	movs	r2, #0
 80032cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032d4:	f043 0220 	orr.w	r2, r3, #32
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	2200      	movs	r2, #0
 80032e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80032e4:	2301      	movs	r3, #1
 80032e6:	e007      	b.n	80032f8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	695b      	ldr	r3, [r3, #20]
 80032ee:	f003 0304 	and.w	r3, r3, #4
 80032f2:	2b04      	cmp	r3, #4
 80032f4:	d1c3      	bne.n	800327e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80032f6:	2300      	movs	r3, #0
}
 80032f8:	4618      	mov	r0, r3
 80032fa:	3710      	adds	r7, #16
 80032fc:	46bd      	mov	sp, r7
 80032fe:	bd80      	pop	{r7, pc}

08003300 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003300:	b580      	push	{r7, lr}
 8003302:	b084      	sub	sp, #16
 8003304:	af00      	add	r7, sp, #0
 8003306:	60f8      	str	r0, [r7, #12]
 8003308:	60b9      	str	r1, [r7, #8]
 800330a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800330c:	e049      	b.n	80033a2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	695b      	ldr	r3, [r3, #20]
 8003314:	f003 0310 	and.w	r3, r3, #16
 8003318:	2b10      	cmp	r3, #16
 800331a:	d119      	bne.n	8003350 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	f06f 0210 	mvn.w	r2, #16
 8003324:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	2200      	movs	r2, #0
 800332a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	2220      	movs	r2, #32
 8003330:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	2200      	movs	r2, #0
 8003338:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	2200      	movs	r2, #0
 8003348:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800334c:	2301      	movs	r3, #1
 800334e:	e030      	b.n	80033b2 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003350:	f7fe fcbc 	bl	8001ccc <HAL_GetTick>
 8003354:	4602      	mov	r2, r0
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	1ad3      	subs	r3, r2, r3
 800335a:	68ba      	ldr	r2, [r7, #8]
 800335c:	429a      	cmp	r2, r3
 800335e:	d302      	bcc.n	8003366 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003360:	68bb      	ldr	r3, [r7, #8]
 8003362:	2b00      	cmp	r3, #0
 8003364:	d11d      	bne.n	80033a2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	695b      	ldr	r3, [r3, #20]
 800336c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003370:	2b40      	cmp	r3, #64	; 0x40
 8003372:	d016      	beq.n	80033a2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	2200      	movs	r2, #0
 8003378:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	2220      	movs	r2, #32
 800337e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	2200      	movs	r2, #0
 8003386:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800338e:	f043 0220 	orr.w	r2, r3, #32
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	2200      	movs	r2, #0
 800339a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800339e:	2301      	movs	r3, #1
 80033a0:	e007      	b.n	80033b2 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	695b      	ldr	r3, [r3, #20]
 80033a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033ac:	2b40      	cmp	r3, #64	; 0x40
 80033ae:	d1ae      	bne.n	800330e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80033b0:	2300      	movs	r3, #0
}
 80033b2:	4618      	mov	r0, r3
 80033b4:	3710      	adds	r7, #16
 80033b6:	46bd      	mov	sp, r7
 80033b8:	bd80      	pop	{r7, pc}

080033ba <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80033ba:	b480      	push	{r7}
 80033bc:	b083      	sub	sp, #12
 80033be:	af00      	add	r7, sp, #0
 80033c0:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	695b      	ldr	r3, [r3, #20]
 80033c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80033cc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80033d0:	d11b      	bne.n	800340a <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80033da:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	2200      	movs	r2, #0
 80033e0:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	2220      	movs	r2, #32
 80033e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	2200      	movs	r2, #0
 80033ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033f6:	f043 0204 	orr.w	r2, r3, #4
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	2200      	movs	r2, #0
 8003402:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003406:	2301      	movs	r3, #1
 8003408:	e000      	b.n	800340c <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800340a:	2300      	movs	r3, #0
}
 800340c:	4618      	mov	r0, r3
 800340e:	370c      	adds	r7, #12
 8003410:	46bd      	mov	sp, r7
 8003412:	bc80      	pop	{r7}
 8003414:	4770      	bx	lr
	...

08003418 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003418:	b580      	push	{r7, lr}
 800341a:	b086      	sub	sp, #24
 800341c:	af00      	add	r7, sp, #0
 800341e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	2b00      	cmp	r3, #0
 8003424:	d101      	bne.n	800342a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003426:	2301      	movs	r3, #1
 8003428:	e272      	b.n	8003910 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f003 0301 	and.w	r3, r3, #1
 8003432:	2b00      	cmp	r3, #0
 8003434:	f000 8087 	beq.w	8003546 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003438:	4b92      	ldr	r3, [pc, #584]	; (8003684 <HAL_RCC_OscConfig+0x26c>)
 800343a:	685b      	ldr	r3, [r3, #4]
 800343c:	f003 030c 	and.w	r3, r3, #12
 8003440:	2b04      	cmp	r3, #4
 8003442:	d00c      	beq.n	800345e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003444:	4b8f      	ldr	r3, [pc, #572]	; (8003684 <HAL_RCC_OscConfig+0x26c>)
 8003446:	685b      	ldr	r3, [r3, #4]
 8003448:	f003 030c 	and.w	r3, r3, #12
 800344c:	2b08      	cmp	r3, #8
 800344e:	d112      	bne.n	8003476 <HAL_RCC_OscConfig+0x5e>
 8003450:	4b8c      	ldr	r3, [pc, #560]	; (8003684 <HAL_RCC_OscConfig+0x26c>)
 8003452:	685b      	ldr	r3, [r3, #4]
 8003454:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003458:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800345c:	d10b      	bne.n	8003476 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800345e:	4b89      	ldr	r3, [pc, #548]	; (8003684 <HAL_RCC_OscConfig+0x26c>)
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003466:	2b00      	cmp	r3, #0
 8003468:	d06c      	beq.n	8003544 <HAL_RCC_OscConfig+0x12c>
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	685b      	ldr	r3, [r3, #4]
 800346e:	2b00      	cmp	r3, #0
 8003470:	d168      	bne.n	8003544 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003472:	2301      	movs	r3, #1
 8003474:	e24c      	b.n	8003910 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	685b      	ldr	r3, [r3, #4]
 800347a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800347e:	d106      	bne.n	800348e <HAL_RCC_OscConfig+0x76>
 8003480:	4b80      	ldr	r3, [pc, #512]	; (8003684 <HAL_RCC_OscConfig+0x26c>)
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	4a7f      	ldr	r2, [pc, #508]	; (8003684 <HAL_RCC_OscConfig+0x26c>)
 8003486:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800348a:	6013      	str	r3, [r2, #0]
 800348c:	e02e      	b.n	80034ec <HAL_RCC_OscConfig+0xd4>
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	685b      	ldr	r3, [r3, #4]
 8003492:	2b00      	cmp	r3, #0
 8003494:	d10c      	bne.n	80034b0 <HAL_RCC_OscConfig+0x98>
 8003496:	4b7b      	ldr	r3, [pc, #492]	; (8003684 <HAL_RCC_OscConfig+0x26c>)
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	4a7a      	ldr	r2, [pc, #488]	; (8003684 <HAL_RCC_OscConfig+0x26c>)
 800349c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80034a0:	6013      	str	r3, [r2, #0]
 80034a2:	4b78      	ldr	r3, [pc, #480]	; (8003684 <HAL_RCC_OscConfig+0x26c>)
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	4a77      	ldr	r2, [pc, #476]	; (8003684 <HAL_RCC_OscConfig+0x26c>)
 80034a8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80034ac:	6013      	str	r3, [r2, #0]
 80034ae:	e01d      	b.n	80034ec <HAL_RCC_OscConfig+0xd4>
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	685b      	ldr	r3, [r3, #4]
 80034b4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80034b8:	d10c      	bne.n	80034d4 <HAL_RCC_OscConfig+0xbc>
 80034ba:	4b72      	ldr	r3, [pc, #456]	; (8003684 <HAL_RCC_OscConfig+0x26c>)
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	4a71      	ldr	r2, [pc, #452]	; (8003684 <HAL_RCC_OscConfig+0x26c>)
 80034c0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80034c4:	6013      	str	r3, [r2, #0]
 80034c6:	4b6f      	ldr	r3, [pc, #444]	; (8003684 <HAL_RCC_OscConfig+0x26c>)
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	4a6e      	ldr	r2, [pc, #440]	; (8003684 <HAL_RCC_OscConfig+0x26c>)
 80034cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80034d0:	6013      	str	r3, [r2, #0]
 80034d2:	e00b      	b.n	80034ec <HAL_RCC_OscConfig+0xd4>
 80034d4:	4b6b      	ldr	r3, [pc, #428]	; (8003684 <HAL_RCC_OscConfig+0x26c>)
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	4a6a      	ldr	r2, [pc, #424]	; (8003684 <HAL_RCC_OscConfig+0x26c>)
 80034da:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80034de:	6013      	str	r3, [r2, #0]
 80034e0:	4b68      	ldr	r3, [pc, #416]	; (8003684 <HAL_RCC_OscConfig+0x26c>)
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	4a67      	ldr	r2, [pc, #412]	; (8003684 <HAL_RCC_OscConfig+0x26c>)
 80034e6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80034ea:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	685b      	ldr	r3, [r3, #4]
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d013      	beq.n	800351c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034f4:	f7fe fbea 	bl	8001ccc <HAL_GetTick>
 80034f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80034fa:	e008      	b.n	800350e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80034fc:	f7fe fbe6 	bl	8001ccc <HAL_GetTick>
 8003500:	4602      	mov	r2, r0
 8003502:	693b      	ldr	r3, [r7, #16]
 8003504:	1ad3      	subs	r3, r2, r3
 8003506:	2b64      	cmp	r3, #100	; 0x64
 8003508:	d901      	bls.n	800350e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800350a:	2303      	movs	r3, #3
 800350c:	e200      	b.n	8003910 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800350e:	4b5d      	ldr	r3, [pc, #372]	; (8003684 <HAL_RCC_OscConfig+0x26c>)
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003516:	2b00      	cmp	r3, #0
 8003518:	d0f0      	beq.n	80034fc <HAL_RCC_OscConfig+0xe4>
 800351a:	e014      	b.n	8003546 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800351c:	f7fe fbd6 	bl	8001ccc <HAL_GetTick>
 8003520:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003522:	e008      	b.n	8003536 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003524:	f7fe fbd2 	bl	8001ccc <HAL_GetTick>
 8003528:	4602      	mov	r2, r0
 800352a:	693b      	ldr	r3, [r7, #16]
 800352c:	1ad3      	subs	r3, r2, r3
 800352e:	2b64      	cmp	r3, #100	; 0x64
 8003530:	d901      	bls.n	8003536 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003532:	2303      	movs	r3, #3
 8003534:	e1ec      	b.n	8003910 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003536:	4b53      	ldr	r3, [pc, #332]	; (8003684 <HAL_RCC_OscConfig+0x26c>)
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800353e:	2b00      	cmp	r3, #0
 8003540:	d1f0      	bne.n	8003524 <HAL_RCC_OscConfig+0x10c>
 8003542:	e000      	b.n	8003546 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003544:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f003 0302 	and.w	r3, r3, #2
 800354e:	2b00      	cmp	r3, #0
 8003550:	d063      	beq.n	800361a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003552:	4b4c      	ldr	r3, [pc, #304]	; (8003684 <HAL_RCC_OscConfig+0x26c>)
 8003554:	685b      	ldr	r3, [r3, #4]
 8003556:	f003 030c 	and.w	r3, r3, #12
 800355a:	2b00      	cmp	r3, #0
 800355c:	d00b      	beq.n	8003576 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800355e:	4b49      	ldr	r3, [pc, #292]	; (8003684 <HAL_RCC_OscConfig+0x26c>)
 8003560:	685b      	ldr	r3, [r3, #4]
 8003562:	f003 030c 	and.w	r3, r3, #12
 8003566:	2b08      	cmp	r3, #8
 8003568:	d11c      	bne.n	80035a4 <HAL_RCC_OscConfig+0x18c>
 800356a:	4b46      	ldr	r3, [pc, #280]	; (8003684 <HAL_RCC_OscConfig+0x26c>)
 800356c:	685b      	ldr	r3, [r3, #4]
 800356e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003572:	2b00      	cmp	r3, #0
 8003574:	d116      	bne.n	80035a4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003576:	4b43      	ldr	r3, [pc, #268]	; (8003684 <HAL_RCC_OscConfig+0x26c>)
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	f003 0302 	and.w	r3, r3, #2
 800357e:	2b00      	cmp	r3, #0
 8003580:	d005      	beq.n	800358e <HAL_RCC_OscConfig+0x176>
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	691b      	ldr	r3, [r3, #16]
 8003586:	2b01      	cmp	r3, #1
 8003588:	d001      	beq.n	800358e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800358a:	2301      	movs	r3, #1
 800358c:	e1c0      	b.n	8003910 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800358e:	4b3d      	ldr	r3, [pc, #244]	; (8003684 <HAL_RCC_OscConfig+0x26c>)
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	695b      	ldr	r3, [r3, #20]
 800359a:	00db      	lsls	r3, r3, #3
 800359c:	4939      	ldr	r1, [pc, #228]	; (8003684 <HAL_RCC_OscConfig+0x26c>)
 800359e:	4313      	orrs	r3, r2
 80035a0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80035a2:	e03a      	b.n	800361a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	691b      	ldr	r3, [r3, #16]
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d020      	beq.n	80035ee <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80035ac:	4b36      	ldr	r3, [pc, #216]	; (8003688 <HAL_RCC_OscConfig+0x270>)
 80035ae:	2201      	movs	r2, #1
 80035b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035b2:	f7fe fb8b 	bl	8001ccc <HAL_GetTick>
 80035b6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80035b8:	e008      	b.n	80035cc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80035ba:	f7fe fb87 	bl	8001ccc <HAL_GetTick>
 80035be:	4602      	mov	r2, r0
 80035c0:	693b      	ldr	r3, [r7, #16]
 80035c2:	1ad3      	subs	r3, r2, r3
 80035c4:	2b02      	cmp	r3, #2
 80035c6:	d901      	bls.n	80035cc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80035c8:	2303      	movs	r3, #3
 80035ca:	e1a1      	b.n	8003910 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80035cc:	4b2d      	ldr	r3, [pc, #180]	; (8003684 <HAL_RCC_OscConfig+0x26c>)
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f003 0302 	and.w	r3, r3, #2
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d0f0      	beq.n	80035ba <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80035d8:	4b2a      	ldr	r3, [pc, #168]	; (8003684 <HAL_RCC_OscConfig+0x26c>)
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	695b      	ldr	r3, [r3, #20]
 80035e4:	00db      	lsls	r3, r3, #3
 80035e6:	4927      	ldr	r1, [pc, #156]	; (8003684 <HAL_RCC_OscConfig+0x26c>)
 80035e8:	4313      	orrs	r3, r2
 80035ea:	600b      	str	r3, [r1, #0]
 80035ec:	e015      	b.n	800361a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80035ee:	4b26      	ldr	r3, [pc, #152]	; (8003688 <HAL_RCC_OscConfig+0x270>)
 80035f0:	2200      	movs	r2, #0
 80035f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035f4:	f7fe fb6a 	bl	8001ccc <HAL_GetTick>
 80035f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80035fa:	e008      	b.n	800360e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80035fc:	f7fe fb66 	bl	8001ccc <HAL_GetTick>
 8003600:	4602      	mov	r2, r0
 8003602:	693b      	ldr	r3, [r7, #16]
 8003604:	1ad3      	subs	r3, r2, r3
 8003606:	2b02      	cmp	r3, #2
 8003608:	d901      	bls.n	800360e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800360a:	2303      	movs	r3, #3
 800360c:	e180      	b.n	8003910 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800360e:	4b1d      	ldr	r3, [pc, #116]	; (8003684 <HAL_RCC_OscConfig+0x26c>)
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f003 0302 	and.w	r3, r3, #2
 8003616:	2b00      	cmp	r3, #0
 8003618:	d1f0      	bne.n	80035fc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f003 0308 	and.w	r3, r3, #8
 8003622:	2b00      	cmp	r3, #0
 8003624:	d03a      	beq.n	800369c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	699b      	ldr	r3, [r3, #24]
 800362a:	2b00      	cmp	r3, #0
 800362c:	d019      	beq.n	8003662 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800362e:	4b17      	ldr	r3, [pc, #92]	; (800368c <HAL_RCC_OscConfig+0x274>)
 8003630:	2201      	movs	r2, #1
 8003632:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003634:	f7fe fb4a 	bl	8001ccc <HAL_GetTick>
 8003638:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800363a:	e008      	b.n	800364e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800363c:	f7fe fb46 	bl	8001ccc <HAL_GetTick>
 8003640:	4602      	mov	r2, r0
 8003642:	693b      	ldr	r3, [r7, #16]
 8003644:	1ad3      	subs	r3, r2, r3
 8003646:	2b02      	cmp	r3, #2
 8003648:	d901      	bls.n	800364e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800364a:	2303      	movs	r3, #3
 800364c:	e160      	b.n	8003910 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800364e:	4b0d      	ldr	r3, [pc, #52]	; (8003684 <HAL_RCC_OscConfig+0x26c>)
 8003650:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003652:	f003 0302 	and.w	r3, r3, #2
 8003656:	2b00      	cmp	r3, #0
 8003658:	d0f0      	beq.n	800363c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800365a:	2001      	movs	r0, #1
 800365c:	f000 face 	bl	8003bfc <RCC_Delay>
 8003660:	e01c      	b.n	800369c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003662:	4b0a      	ldr	r3, [pc, #40]	; (800368c <HAL_RCC_OscConfig+0x274>)
 8003664:	2200      	movs	r2, #0
 8003666:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003668:	f7fe fb30 	bl	8001ccc <HAL_GetTick>
 800366c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800366e:	e00f      	b.n	8003690 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003670:	f7fe fb2c 	bl	8001ccc <HAL_GetTick>
 8003674:	4602      	mov	r2, r0
 8003676:	693b      	ldr	r3, [r7, #16]
 8003678:	1ad3      	subs	r3, r2, r3
 800367a:	2b02      	cmp	r3, #2
 800367c:	d908      	bls.n	8003690 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800367e:	2303      	movs	r3, #3
 8003680:	e146      	b.n	8003910 <HAL_RCC_OscConfig+0x4f8>
 8003682:	bf00      	nop
 8003684:	40021000 	.word	0x40021000
 8003688:	42420000 	.word	0x42420000
 800368c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003690:	4b92      	ldr	r3, [pc, #584]	; (80038dc <HAL_RCC_OscConfig+0x4c4>)
 8003692:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003694:	f003 0302 	and.w	r3, r3, #2
 8003698:	2b00      	cmp	r3, #0
 800369a:	d1e9      	bne.n	8003670 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	f003 0304 	and.w	r3, r3, #4
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	f000 80a6 	beq.w	80037f6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80036aa:	2300      	movs	r3, #0
 80036ac:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80036ae:	4b8b      	ldr	r3, [pc, #556]	; (80038dc <HAL_RCC_OscConfig+0x4c4>)
 80036b0:	69db      	ldr	r3, [r3, #28]
 80036b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d10d      	bne.n	80036d6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80036ba:	4b88      	ldr	r3, [pc, #544]	; (80038dc <HAL_RCC_OscConfig+0x4c4>)
 80036bc:	69db      	ldr	r3, [r3, #28]
 80036be:	4a87      	ldr	r2, [pc, #540]	; (80038dc <HAL_RCC_OscConfig+0x4c4>)
 80036c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80036c4:	61d3      	str	r3, [r2, #28]
 80036c6:	4b85      	ldr	r3, [pc, #532]	; (80038dc <HAL_RCC_OscConfig+0x4c4>)
 80036c8:	69db      	ldr	r3, [r3, #28]
 80036ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036ce:	60bb      	str	r3, [r7, #8]
 80036d0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80036d2:	2301      	movs	r3, #1
 80036d4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036d6:	4b82      	ldr	r3, [pc, #520]	; (80038e0 <HAL_RCC_OscConfig+0x4c8>)
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d118      	bne.n	8003714 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80036e2:	4b7f      	ldr	r3, [pc, #508]	; (80038e0 <HAL_RCC_OscConfig+0x4c8>)
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	4a7e      	ldr	r2, [pc, #504]	; (80038e0 <HAL_RCC_OscConfig+0x4c8>)
 80036e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80036ec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80036ee:	f7fe faed 	bl	8001ccc <HAL_GetTick>
 80036f2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036f4:	e008      	b.n	8003708 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80036f6:	f7fe fae9 	bl	8001ccc <HAL_GetTick>
 80036fa:	4602      	mov	r2, r0
 80036fc:	693b      	ldr	r3, [r7, #16]
 80036fe:	1ad3      	subs	r3, r2, r3
 8003700:	2b64      	cmp	r3, #100	; 0x64
 8003702:	d901      	bls.n	8003708 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003704:	2303      	movs	r3, #3
 8003706:	e103      	b.n	8003910 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003708:	4b75      	ldr	r3, [pc, #468]	; (80038e0 <HAL_RCC_OscConfig+0x4c8>)
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003710:	2b00      	cmp	r3, #0
 8003712:	d0f0      	beq.n	80036f6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	68db      	ldr	r3, [r3, #12]
 8003718:	2b01      	cmp	r3, #1
 800371a:	d106      	bne.n	800372a <HAL_RCC_OscConfig+0x312>
 800371c:	4b6f      	ldr	r3, [pc, #444]	; (80038dc <HAL_RCC_OscConfig+0x4c4>)
 800371e:	6a1b      	ldr	r3, [r3, #32]
 8003720:	4a6e      	ldr	r2, [pc, #440]	; (80038dc <HAL_RCC_OscConfig+0x4c4>)
 8003722:	f043 0301 	orr.w	r3, r3, #1
 8003726:	6213      	str	r3, [r2, #32]
 8003728:	e02d      	b.n	8003786 <HAL_RCC_OscConfig+0x36e>
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	68db      	ldr	r3, [r3, #12]
 800372e:	2b00      	cmp	r3, #0
 8003730:	d10c      	bne.n	800374c <HAL_RCC_OscConfig+0x334>
 8003732:	4b6a      	ldr	r3, [pc, #424]	; (80038dc <HAL_RCC_OscConfig+0x4c4>)
 8003734:	6a1b      	ldr	r3, [r3, #32]
 8003736:	4a69      	ldr	r2, [pc, #420]	; (80038dc <HAL_RCC_OscConfig+0x4c4>)
 8003738:	f023 0301 	bic.w	r3, r3, #1
 800373c:	6213      	str	r3, [r2, #32]
 800373e:	4b67      	ldr	r3, [pc, #412]	; (80038dc <HAL_RCC_OscConfig+0x4c4>)
 8003740:	6a1b      	ldr	r3, [r3, #32]
 8003742:	4a66      	ldr	r2, [pc, #408]	; (80038dc <HAL_RCC_OscConfig+0x4c4>)
 8003744:	f023 0304 	bic.w	r3, r3, #4
 8003748:	6213      	str	r3, [r2, #32]
 800374a:	e01c      	b.n	8003786 <HAL_RCC_OscConfig+0x36e>
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	68db      	ldr	r3, [r3, #12]
 8003750:	2b05      	cmp	r3, #5
 8003752:	d10c      	bne.n	800376e <HAL_RCC_OscConfig+0x356>
 8003754:	4b61      	ldr	r3, [pc, #388]	; (80038dc <HAL_RCC_OscConfig+0x4c4>)
 8003756:	6a1b      	ldr	r3, [r3, #32]
 8003758:	4a60      	ldr	r2, [pc, #384]	; (80038dc <HAL_RCC_OscConfig+0x4c4>)
 800375a:	f043 0304 	orr.w	r3, r3, #4
 800375e:	6213      	str	r3, [r2, #32]
 8003760:	4b5e      	ldr	r3, [pc, #376]	; (80038dc <HAL_RCC_OscConfig+0x4c4>)
 8003762:	6a1b      	ldr	r3, [r3, #32]
 8003764:	4a5d      	ldr	r2, [pc, #372]	; (80038dc <HAL_RCC_OscConfig+0x4c4>)
 8003766:	f043 0301 	orr.w	r3, r3, #1
 800376a:	6213      	str	r3, [r2, #32]
 800376c:	e00b      	b.n	8003786 <HAL_RCC_OscConfig+0x36e>
 800376e:	4b5b      	ldr	r3, [pc, #364]	; (80038dc <HAL_RCC_OscConfig+0x4c4>)
 8003770:	6a1b      	ldr	r3, [r3, #32]
 8003772:	4a5a      	ldr	r2, [pc, #360]	; (80038dc <HAL_RCC_OscConfig+0x4c4>)
 8003774:	f023 0301 	bic.w	r3, r3, #1
 8003778:	6213      	str	r3, [r2, #32]
 800377a:	4b58      	ldr	r3, [pc, #352]	; (80038dc <HAL_RCC_OscConfig+0x4c4>)
 800377c:	6a1b      	ldr	r3, [r3, #32]
 800377e:	4a57      	ldr	r2, [pc, #348]	; (80038dc <HAL_RCC_OscConfig+0x4c4>)
 8003780:	f023 0304 	bic.w	r3, r3, #4
 8003784:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	68db      	ldr	r3, [r3, #12]
 800378a:	2b00      	cmp	r3, #0
 800378c:	d015      	beq.n	80037ba <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800378e:	f7fe fa9d 	bl	8001ccc <HAL_GetTick>
 8003792:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003794:	e00a      	b.n	80037ac <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003796:	f7fe fa99 	bl	8001ccc <HAL_GetTick>
 800379a:	4602      	mov	r2, r0
 800379c:	693b      	ldr	r3, [r7, #16]
 800379e:	1ad3      	subs	r3, r2, r3
 80037a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80037a4:	4293      	cmp	r3, r2
 80037a6:	d901      	bls.n	80037ac <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80037a8:	2303      	movs	r3, #3
 80037aa:	e0b1      	b.n	8003910 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80037ac:	4b4b      	ldr	r3, [pc, #300]	; (80038dc <HAL_RCC_OscConfig+0x4c4>)
 80037ae:	6a1b      	ldr	r3, [r3, #32]
 80037b0:	f003 0302 	and.w	r3, r3, #2
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d0ee      	beq.n	8003796 <HAL_RCC_OscConfig+0x37e>
 80037b8:	e014      	b.n	80037e4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80037ba:	f7fe fa87 	bl	8001ccc <HAL_GetTick>
 80037be:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80037c0:	e00a      	b.n	80037d8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80037c2:	f7fe fa83 	bl	8001ccc <HAL_GetTick>
 80037c6:	4602      	mov	r2, r0
 80037c8:	693b      	ldr	r3, [r7, #16]
 80037ca:	1ad3      	subs	r3, r2, r3
 80037cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80037d0:	4293      	cmp	r3, r2
 80037d2:	d901      	bls.n	80037d8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80037d4:	2303      	movs	r3, #3
 80037d6:	e09b      	b.n	8003910 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80037d8:	4b40      	ldr	r3, [pc, #256]	; (80038dc <HAL_RCC_OscConfig+0x4c4>)
 80037da:	6a1b      	ldr	r3, [r3, #32]
 80037dc:	f003 0302 	and.w	r3, r3, #2
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d1ee      	bne.n	80037c2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80037e4:	7dfb      	ldrb	r3, [r7, #23]
 80037e6:	2b01      	cmp	r3, #1
 80037e8:	d105      	bne.n	80037f6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80037ea:	4b3c      	ldr	r3, [pc, #240]	; (80038dc <HAL_RCC_OscConfig+0x4c4>)
 80037ec:	69db      	ldr	r3, [r3, #28]
 80037ee:	4a3b      	ldr	r2, [pc, #236]	; (80038dc <HAL_RCC_OscConfig+0x4c4>)
 80037f0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80037f4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	69db      	ldr	r3, [r3, #28]
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	f000 8087 	beq.w	800390e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003800:	4b36      	ldr	r3, [pc, #216]	; (80038dc <HAL_RCC_OscConfig+0x4c4>)
 8003802:	685b      	ldr	r3, [r3, #4]
 8003804:	f003 030c 	and.w	r3, r3, #12
 8003808:	2b08      	cmp	r3, #8
 800380a:	d061      	beq.n	80038d0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	69db      	ldr	r3, [r3, #28]
 8003810:	2b02      	cmp	r3, #2
 8003812:	d146      	bne.n	80038a2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003814:	4b33      	ldr	r3, [pc, #204]	; (80038e4 <HAL_RCC_OscConfig+0x4cc>)
 8003816:	2200      	movs	r2, #0
 8003818:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800381a:	f7fe fa57 	bl	8001ccc <HAL_GetTick>
 800381e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003820:	e008      	b.n	8003834 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003822:	f7fe fa53 	bl	8001ccc <HAL_GetTick>
 8003826:	4602      	mov	r2, r0
 8003828:	693b      	ldr	r3, [r7, #16]
 800382a:	1ad3      	subs	r3, r2, r3
 800382c:	2b02      	cmp	r3, #2
 800382e:	d901      	bls.n	8003834 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003830:	2303      	movs	r3, #3
 8003832:	e06d      	b.n	8003910 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003834:	4b29      	ldr	r3, [pc, #164]	; (80038dc <HAL_RCC_OscConfig+0x4c4>)
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800383c:	2b00      	cmp	r3, #0
 800383e:	d1f0      	bne.n	8003822 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	6a1b      	ldr	r3, [r3, #32]
 8003844:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003848:	d108      	bne.n	800385c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800384a:	4b24      	ldr	r3, [pc, #144]	; (80038dc <HAL_RCC_OscConfig+0x4c4>)
 800384c:	685b      	ldr	r3, [r3, #4]
 800384e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	689b      	ldr	r3, [r3, #8]
 8003856:	4921      	ldr	r1, [pc, #132]	; (80038dc <HAL_RCC_OscConfig+0x4c4>)
 8003858:	4313      	orrs	r3, r2
 800385a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800385c:	4b1f      	ldr	r3, [pc, #124]	; (80038dc <HAL_RCC_OscConfig+0x4c4>)
 800385e:	685b      	ldr	r3, [r3, #4]
 8003860:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	6a19      	ldr	r1, [r3, #32]
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800386c:	430b      	orrs	r3, r1
 800386e:	491b      	ldr	r1, [pc, #108]	; (80038dc <HAL_RCC_OscConfig+0x4c4>)
 8003870:	4313      	orrs	r3, r2
 8003872:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003874:	4b1b      	ldr	r3, [pc, #108]	; (80038e4 <HAL_RCC_OscConfig+0x4cc>)
 8003876:	2201      	movs	r2, #1
 8003878:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800387a:	f7fe fa27 	bl	8001ccc <HAL_GetTick>
 800387e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003880:	e008      	b.n	8003894 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003882:	f7fe fa23 	bl	8001ccc <HAL_GetTick>
 8003886:	4602      	mov	r2, r0
 8003888:	693b      	ldr	r3, [r7, #16]
 800388a:	1ad3      	subs	r3, r2, r3
 800388c:	2b02      	cmp	r3, #2
 800388e:	d901      	bls.n	8003894 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003890:	2303      	movs	r3, #3
 8003892:	e03d      	b.n	8003910 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003894:	4b11      	ldr	r3, [pc, #68]	; (80038dc <HAL_RCC_OscConfig+0x4c4>)
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800389c:	2b00      	cmp	r3, #0
 800389e:	d0f0      	beq.n	8003882 <HAL_RCC_OscConfig+0x46a>
 80038a0:	e035      	b.n	800390e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80038a2:	4b10      	ldr	r3, [pc, #64]	; (80038e4 <HAL_RCC_OscConfig+0x4cc>)
 80038a4:	2200      	movs	r2, #0
 80038a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038a8:	f7fe fa10 	bl	8001ccc <HAL_GetTick>
 80038ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80038ae:	e008      	b.n	80038c2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80038b0:	f7fe fa0c 	bl	8001ccc <HAL_GetTick>
 80038b4:	4602      	mov	r2, r0
 80038b6:	693b      	ldr	r3, [r7, #16]
 80038b8:	1ad3      	subs	r3, r2, r3
 80038ba:	2b02      	cmp	r3, #2
 80038bc:	d901      	bls.n	80038c2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80038be:	2303      	movs	r3, #3
 80038c0:	e026      	b.n	8003910 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80038c2:	4b06      	ldr	r3, [pc, #24]	; (80038dc <HAL_RCC_OscConfig+0x4c4>)
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d1f0      	bne.n	80038b0 <HAL_RCC_OscConfig+0x498>
 80038ce:	e01e      	b.n	800390e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	69db      	ldr	r3, [r3, #28]
 80038d4:	2b01      	cmp	r3, #1
 80038d6:	d107      	bne.n	80038e8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80038d8:	2301      	movs	r3, #1
 80038da:	e019      	b.n	8003910 <HAL_RCC_OscConfig+0x4f8>
 80038dc:	40021000 	.word	0x40021000
 80038e0:	40007000 	.word	0x40007000
 80038e4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80038e8:	4b0b      	ldr	r3, [pc, #44]	; (8003918 <HAL_RCC_OscConfig+0x500>)
 80038ea:	685b      	ldr	r3, [r3, #4]
 80038ec:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	6a1b      	ldr	r3, [r3, #32]
 80038f8:	429a      	cmp	r2, r3
 80038fa:	d106      	bne.n	800390a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003906:	429a      	cmp	r2, r3
 8003908:	d001      	beq.n	800390e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800390a:	2301      	movs	r3, #1
 800390c:	e000      	b.n	8003910 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800390e:	2300      	movs	r3, #0
}
 8003910:	4618      	mov	r0, r3
 8003912:	3718      	adds	r7, #24
 8003914:	46bd      	mov	sp, r7
 8003916:	bd80      	pop	{r7, pc}
 8003918:	40021000 	.word	0x40021000

0800391c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800391c:	b580      	push	{r7, lr}
 800391e:	b084      	sub	sp, #16
 8003920:	af00      	add	r7, sp, #0
 8003922:	6078      	str	r0, [r7, #4]
 8003924:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	2b00      	cmp	r3, #0
 800392a:	d101      	bne.n	8003930 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800392c:	2301      	movs	r3, #1
 800392e:	e0d0      	b.n	8003ad2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003930:	4b6a      	ldr	r3, [pc, #424]	; (8003adc <HAL_RCC_ClockConfig+0x1c0>)
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	f003 0307 	and.w	r3, r3, #7
 8003938:	683a      	ldr	r2, [r7, #0]
 800393a:	429a      	cmp	r2, r3
 800393c:	d910      	bls.n	8003960 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800393e:	4b67      	ldr	r3, [pc, #412]	; (8003adc <HAL_RCC_ClockConfig+0x1c0>)
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f023 0207 	bic.w	r2, r3, #7
 8003946:	4965      	ldr	r1, [pc, #404]	; (8003adc <HAL_RCC_ClockConfig+0x1c0>)
 8003948:	683b      	ldr	r3, [r7, #0]
 800394a:	4313      	orrs	r3, r2
 800394c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800394e:	4b63      	ldr	r3, [pc, #396]	; (8003adc <HAL_RCC_ClockConfig+0x1c0>)
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f003 0307 	and.w	r3, r3, #7
 8003956:	683a      	ldr	r2, [r7, #0]
 8003958:	429a      	cmp	r2, r3
 800395a:	d001      	beq.n	8003960 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800395c:	2301      	movs	r3, #1
 800395e:	e0b8      	b.n	8003ad2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	f003 0302 	and.w	r3, r3, #2
 8003968:	2b00      	cmp	r3, #0
 800396a:	d020      	beq.n	80039ae <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	f003 0304 	and.w	r3, r3, #4
 8003974:	2b00      	cmp	r3, #0
 8003976:	d005      	beq.n	8003984 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003978:	4b59      	ldr	r3, [pc, #356]	; (8003ae0 <HAL_RCC_ClockConfig+0x1c4>)
 800397a:	685b      	ldr	r3, [r3, #4]
 800397c:	4a58      	ldr	r2, [pc, #352]	; (8003ae0 <HAL_RCC_ClockConfig+0x1c4>)
 800397e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003982:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	f003 0308 	and.w	r3, r3, #8
 800398c:	2b00      	cmp	r3, #0
 800398e:	d005      	beq.n	800399c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003990:	4b53      	ldr	r3, [pc, #332]	; (8003ae0 <HAL_RCC_ClockConfig+0x1c4>)
 8003992:	685b      	ldr	r3, [r3, #4]
 8003994:	4a52      	ldr	r2, [pc, #328]	; (8003ae0 <HAL_RCC_ClockConfig+0x1c4>)
 8003996:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800399a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800399c:	4b50      	ldr	r3, [pc, #320]	; (8003ae0 <HAL_RCC_ClockConfig+0x1c4>)
 800399e:	685b      	ldr	r3, [r3, #4]
 80039a0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	689b      	ldr	r3, [r3, #8]
 80039a8:	494d      	ldr	r1, [pc, #308]	; (8003ae0 <HAL_RCC_ClockConfig+0x1c4>)
 80039aa:	4313      	orrs	r3, r2
 80039ac:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	f003 0301 	and.w	r3, r3, #1
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d040      	beq.n	8003a3c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	685b      	ldr	r3, [r3, #4]
 80039be:	2b01      	cmp	r3, #1
 80039c0:	d107      	bne.n	80039d2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80039c2:	4b47      	ldr	r3, [pc, #284]	; (8003ae0 <HAL_RCC_ClockConfig+0x1c4>)
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d115      	bne.n	80039fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80039ce:	2301      	movs	r3, #1
 80039d0:	e07f      	b.n	8003ad2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	685b      	ldr	r3, [r3, #4]
 80039d6:	2b02      	cmp	r3, #2
 80039d8:	d107      	bne.n	80039ea <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80039da:	4b41      	ldr	r3, [pc, #260]	; (8003ae0 <HAL_RCC_ClockConfig+0x1c4>)
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d109      	bne.n	80039fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80039e6:	2301      	movs	r3, #1
 80039e8:	e073      	b.n	8003ad2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039ea:	4b3d      	ldr	r3, [pc, #244]	; (8003ae0 <HAL_RCC_ClockConfig+0x1c4>)
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f003 0302 	and.w	r3, r3, #2
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d101      	bne.n	80039fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80039f6:	2301      	movs	r3, #1
 80039f8:	e06b      	b.n	8003ad2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80039fa:	4b39      	ldr	r3, [pc, #228]	; (8003ae0 <HAL_RCC_ClockConfig+0x1c4>)
 80039fc:	685b      	ldr	r3, [r3, #4]
 80039fe:	f023 0203 	bic.w	r2, r3, #3
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	685b      	ldr	r3, [r3, #4]
 8003a06:	4936      	ldr	r1, [pc, #216]	; (8003ae0 <HAL_RCC_ClockConfig+0x1c4>)
 8003a08:	4313      	orrs	r3, r2
 8003a0a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003a0c:	f7fe f95e 	bl	8001ccc <HAL_GetTick>
 8003a10:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a12:	e00a      	b.n	8003a2a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003a14:	f7fe f95a 	bl	8001ccc <HAL_GetTick>
 8003a18:	4602      	mov	r2, r0
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	1ad3      	subs	r3, r2, r3
 8003a1e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a22:	4293      	cmp	r3, r2
 8003a24:	d901      	bls.n	8003a2a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003a26:	2303      	movs	r3, #3
 8003a28:	e053      	b.n	8003ad2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a2a:	4b2d      	ldr	r3, [pc, #180]	; (8003ae0 <HAL_RCC_ClockConfig+0x1c4>)
 8003a2c:	685b      	ldr	r3, [r3, #4]
 8003a2e:	f003 020c 	and.w	r2, r3, #12
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	685b      	ldr	r3, [r3, #4]
 8003a36:	009b      	lsls	r3, r3, #2
 8003a38:	429a      	cmp	r2, r3
 8003a3a:	d1eb      	bne.n	8003a14 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003a3c:	4b27      	ldr	r3, [pc, #156]	; (8003adc <HAL_RCC_ClockConfig+0x1c0>)
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	f003 0307 	and.w	r3, r3, #7
 8003a44:	683a      	ldr	r2, [r7, #0]
 8003a46:	429a      	cmp	r2, r3
 8003a48:	d210      	bcs.n	8003a6c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a4a:	4b24      	ldr	r3, [pc, #144]	; (8003adc <HAL_RCC_ClockConfig+0x1c0>)
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	f023 0207 	bic.w	r2, r3, #7
 8003a52:	4922      	ldr	r1, [pc, #136]	; (8003adc <HAL_RCC_ClockConfig+0x1c0>)
 8003a54:	683b      	ldr	r3, [r7, #0]
 8003a56:	4313      	orrs	r3, r2
 8003a58:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a5a:	4b20      	ldr	r3, [pc, #128]	; (8003adc <HAL_RCC_ClockConfig+0x1c0>)
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f003 0307 	and.w	r3, r3, #7
 8003a62:	683a      	ldr	r2, [r7, #0]
 8003a64:	429a      	cmp	r2, r3
 8003a66:	d001      	beq.n	8003a6c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003a68:	2301      	movs	r3, #1
 8003a6a:	e032      	b.n	8003ad2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	f003 0304 	and.w	r3, r3, #4
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d008      	beq.n	8003a8a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003a78:	4b19      	ldr	r3, [pc, #100]	; (8003ae0 <HAL_RCC_ClockConfig+0x1c4>)
 8003a7a:	685b      	ldr	r3, [r3, #4]
 8003a7c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	68db      	ldr	r3, [r3, #12]
 8003a84:	4916      	ldr	r1, [pc, #88]	; (8003ae0 <HAL_RCC_ClockConfig+0x1c4>)
 8003a86:	4313      	orrs	r3, r2
 8003a88:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	f003 0308 	and.w	r3, r3, #8
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d009      	beq.n	8003aaa <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003a96:	4b12      	ldr	r3, [pc, #72]	; (8003ae0 <HAL_RCC_ClockConfig+0x1c4>)
 8003a98:	685b      	ldr	r3, [r3, #4]
 8003a9a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	691b      	ldr	r3, [r3, #16]
 8003aa2:	00db      	lsls	r3, r3, #3
 8003aa4:	490e      	ldr	r1, [pc, #56]	; (8003ae0 <HAL_RCC_ClockConfig+0x1c4>)
 8003aa6:	4313      	orrs	r3, r2
 8003aa8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003aaa:	f000 f821 	bl	8003af0 <HAL_RCC_GetSysClockFreq>
 8003aae:	4602      	mov	r2, r0
 8003ab0:	4b0b      	ldr	r3, [pc, #44]	; (8003ae0 <HAL_RCC_ClockConfig+0x1c4>)
 8003ab2:	685b      	ldr	r3, [r3, #4]
 8003ab4:	091b      	lsrs	r3, r3, #4
 8003ab6:	f003 030f 	and.w	r3, r3, #15
 8003aba:	490a      	ldr	r1, [pc, #40]	; (8003ae4 <HAL_RCC_ClockConfig+0x1c8>)
 8003abc:	5ccb      	ldrb	r3, [r1, r3]
 8003abe:	fa22 f303 	lsr.w	r3, r2, r3
 8003ac2:	4a09      	ldr	r2, [pc, #36]	; (8003ae8 <HAL_RCC_ClockConfig+0x1cc>)
 8003ac4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003ac6:	4b09      	ldr	r3, [pc, #36]	; (8003aec <HAL_RCC_ClockConfig+0x1d0>)
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	4618      	mov	r0, r3
 8003acc:	f7fe f8bc 	bl	8001c48 <HAL_InitTick>

  return HAL_OK;
 8003ad0:	2300      	movs	r3, #0
}
 8003ad2:	4618      	mov	r0, r3
 8003ad4:	3710      	adds	r7, #16
 8003ad6:	46bd      	mov	sp, r7
 8003ad8:	bd80      	pop	{r7, pc}
 8003ada:	bf00      	nop
 8003adc:	40022000 	.word	0x40022000
 8003ae0:	40021000 	.word	0x40021000
 8003ae4:	080077a8 	.word	0x080077a8
 8003ae8:	20000014 	.word	0x20000014
 8003aec:	20000018 	.word	0x20000018

08003af0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003af0:	b480      	push	{r7}
 8003af2:	b087      	sub	sp, #28
 8003af4:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003af6:	2300      	movs	r3, #0
 8003af8:	60fb      	str	r3, [r7, #12]
 8003afa:	2300      	movs	r3, #0
 8003afc:	60bb      	str	r3, [r7, #8]
 8003afe:	2300      	movs	r3, #0
 8003b00:	617b      	str	r3, [r7, #20]
 8003b02:	2300      	movs	r3, #0
 8003b04:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003b06:	2300      	movs	r3, #0
 8003b08:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003b0a:	4b1e      	ldr	r3, [pc, #120]	; (8003b84 <HAL_RCC_GetSysClockFreq+0x94>)
 8003b0c:	685b      	ldr	r3, [r3, #4]
 8003b0e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	f003 030c 	and.w	r3, r3, #12
 8003b16:	2b04      	cmp	r3, #4
 8003b18:	d002      	beq.n	8003b20 <HAL_RCC_GetSysClockFreq+0x30>
 8003b1a:	2b08      	cmp	r3, #8
 8003b1c:	d003      	beq.n	8003b26 <HAL_RCC_GetSysClockFreq+0x36>
 8003b1e:	e027      	b.n	8003b70 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003b20:	4b19      	ldr	r3, [pc, #100]	; (8003b88 <HAL_RCC_GetSysClockFreq+0x98>)
 8003b22:	613b      	str	r3, [r7, #16]
      break;
 8003b24:	e027      	b.n	8003b76 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	0c9b      	lsrs	r3, r3, #18
 8003b2a:	f003 030f 	and.w	r3, r3, #15
 8003b2e:	4a17      	ldr	r2, [pc, #92]	; (8003b8c <HAL_RCC_GetSysClockFreq+0x9c>)
 8003b30:	5cd3      	ldrb	r3, [r2, r3]
 8003b32:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d010      	beq.n	8003b60 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003b3e:	4b11      	ldr	r3, [pc, #68]	; (8003b84 <HAL_RCC_GetSysClockFreq+0x94>)
 8003b40:	685b      	ldr	r3, [r3, #4]
 8003b42:	0c5b      	lsrs	r3, r3, #17
 8003b44:	f003 0301 	and.w	r3, r3, #1
 8003b48:	4a11      	ldr	r2, [pc, #68]	; (8003b90 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003b4a:	5cd3      	ldrb	r3, [r2, r3]
 8003b4c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	4a0d      	ldr	r2, [pc, #52]	; (8003b88 <HAL_RCC_GetSysClockFreq+0x98>)
 8003b52:	fb03 f202 	mul.w	r2, r3, r2
 8003b56:	68bb      	ldr	r3, [r7, #8]
 8003b58:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b5c:	617b      	str	r3, [r7, #20]
 8003b5e:	e004      	b.n	8003b6a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	4a0c      	ldr	r2, [pc, #48]	; (8003b94 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003b64:	fb02 f303 	mul.w	r3, r2, r3
 8003b68:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8003b6a:	697b      	ldr	r3, [r7, #20]
 8003b6c:	613b      	str	r3, [r7, #16]
      break;
 8003b6e:	e002      	b.n	8003b76 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003b70:	4b05      	ldr	r3, [pc, #20]	; (8003b88 <HAL_RCC_GetSysClockFreq+0x98>)
 8003b72:	613b      	str	r3, [r7, #16]
      break;
 8003b74:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003b76:	693b      	ldr	r3, [r7, #16]
}
 8003b78:	4618      	mov	r0, r3
 8003b7a:	371c      	adds	r7, #28
 8003b7c:	46bd      	mov	sp, r7
 8003b7e:	bc80      	pop	{r7}
 8003b80:	4770      	bx	lr
 8003b82:	bf00      	nop
 8003b84:	40021000 	.word	0x40021000
 8003b88:	007a1200 	.word	0x007a1200
 8003b8c:	080077c0 	.word	0x080077c0
 8003b90:	080077d0 	.word	0x080077d0
 8003b94:	003d0900 	.word	0x003d0900

08003b98 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003b98:	b480      	push	{r7}
 8003b9a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003b9c:	4b02      	ldr	r3, [pc, #8]	; (8003ba8 <HAL_RCC_GetHCLKFreq+0x10>)
 8003b9e:	681b      	ldr	r3, [r3, #0]
}
 8003ba0:	4618      	mov	r0, r3
 8003ba2:	46bd      	mov	sp, r7
 8003ba4:	bc80      	pop	{r7}
 8003ba6:	4770      	bx	lr
 8003ba8:	20000014 	.word	0x20000014

08003bac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003bac:	b580      	push	{r7, lr}
 8003bae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003bb0:	f7ff fff2 	bl	8003b98 <HAL_RCC_GetHCLKFreq>
 8003bb4:	4602      	mov	r2, r0
 8003bb6:	4b05      	ldr	r3, [pc, #20]	; (8003bcc <HAL_RCC_GetPCLK1Freq+0x20>)
 8003bb8:	685b      	ldr	r3, [r3, #4]
 8003bba:	0a1b      	lsrs	r3, r3, #8
 8003bbc:	f003 0307 	and.w	r3, r3, #7
 8003bc0:	4903      	ldr	r1, [pc, #12]	; (8003bd0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003bc2:	5ccb      	ldrb	r3, [r1, r3]
 8003bc4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003bc8:	4618      	mov	r0, r3
 8003bca:	bd80      	pop	{r7, pc}
 8003bcc:	40021000 	.word	0x40021000
 8003bd0:	080077b8 	.word	0x080077b8

08003bd4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003bd4:	b580      	push	{r7, lr}
 8003bd6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003bd8:	f7ff ffde 	bl	8003b98 <HAL_RCC_GetHCLKFreq>
 8003bdc:	4602      	mov	r2, r0
 8003bde:	4b05      	ldr	r3, [pc, #20]	; (8003bf4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003be0:	685b      	ldr	r3, [r3, #4]
 8003be2:	0adb      	lsrs	r3, r3, #11
 8003be4:	f003 0307 	and.w	r3, r3, #7
 8003be8:	4903      	ldr	r1, [pc, #12]	; (8003bf8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003bea:	5ccb      	ldrb	r3, [r1, r3]
 8003bec:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003bf0:	4618      	mov	r0, r3
 8003bf2:	bd80      	pop	{r7, pc}
 8003bf4:	40021000 	.word	0x40021000
 8003bf8:	080077b8 	.word	0x080077b8

08003bfc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003bfc:	b480      	push	{r7}
 8003bfe:	b085      	sub	sp, #20
 8003c00:	af00      	add	r7, sp, #0
 8003c02:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003c04:	4b0a      	ldr	r3, [pc, #40]	; (8003c30 <RCC_Delay+0x34>)
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	4a0a      	ldr	r2, [pc, #40]	; (8003c34 <RCC_Delay+0x38>)
 8003c0a:	fba2 2303 	umull	r2, r3, r2, r3
 8003c0e:	0a5b      	lsrs	r3, r3, #9
 8003c10:	687a      	ldr	r2, [r7, #4]
 8003c12:	fb02 f303 	mul.w	r3, r2, r3
 8003c16:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003c18:	bf00      	nop
  }
  while (Delay --);
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	1e5a      	subs	r2, r3, #1
 8003c1e:	60fa      	str	r2, [r7, #12]
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d1f9      	bne.n	8003c18 <RCC_Delay+0x1c>
}
 8003c24:	bf00      	nop
 8003c26:	bf00      	nop
 8003c28:	3714      	adds	r7, #20
 8003c2a:	46bd      	mov	sp, r7
 8003c2c:	bc80      	pop	{r7}
 8003c2e:	4770      	bx	lr
 8003c30:	20000014 	.word	0x20000014
 8003c34:	10624dd3 	.word	0x10624dd3

08003c38 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003c38:	b580      	push	{r7, lr}
 8003c3a:	b082      	sub	sp, #8
 8003c3c:	af00      	add	r7, sp, #0
 8003c3e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d101      	bne.n	8003c4a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003c46:	2301      	movs	r3, #1
 8003c48:	e042      	b.n	8003cd0 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003c50:	b2db      	uxtb	r3, r3
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d106      	bne.n	8003c64 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	2200      	movs	r2, #0
 8003c5a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003c5e:	6878      	ldr	r0, [r7, #4]
 8003c60:	f7fd fe6a 	bl	8001938 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	2224      	movs	r2, #36	; 0x24
 8003c68:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	68da      	ldr	r2, [r3, #12]
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003c7a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003c7c:	6878      	ldr	r0, [r7, #4]
 8003c7e:	f000 fdb7 	bl	80047f0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	691a      	ldr	r2, [r3, #16]
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003c90:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	695a      	ldr	r2, [r3, #20]
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003ca0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	68da      	ldr	r2, [r3, #12]
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003cb0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	2200      	movs	r2, #0
 8003cb6:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	2220      	movs	r2, #32
 8003cbc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	2220      	movs	r2, #32
 8003cc4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	2200      	movs	r2, #0
 8003ccc:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8003cce:	2300      	movs	r3, #0
}
 8003cd0:	4618      	mov	r0, r3
 8003cd2:	3708      	adds	r7, #8
 8003cd4:	46bd      	mov	sp, r7
 8003cd6:	bd80      	pop	{r7, pc}

08003cd8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003cd8:	b580      	push	{r7, lr}
 8003cda:	b08a      	sub	sp, #40	; 0x28
 8003cdc:	af02      	add	r7, sp, #8
 8003cde:	60f8      	str	r0, [r7, #12]
 8003ce0:	60b9      	str	r1, [r7, #8]
 8003ce2:	603b      	str	r3, [r7, #0]
 8003ce4:	4613      	mov	r3, r2
 8003ce6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003ce8:	2300      	movs	r3, #0
 8003cea:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003cf2:	b2db      	uxtb	r3, r3
 8003cf4:	2b20      	cmp	r3, #32
 8003cf6:	d175      	bne.n	8003de4 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003cf8:	68bb      	ldr	r3, [r7, #8]
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d002      	beq.n	8003d04 <HAL_UART_Transmit+0x2c>
 8003cfe:	88fb      	ldrh	r3, [r7, #6]
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d101      	bne.n	8003d08 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003d04:	2301      	movs	r3, #1
 8003d06:	e06e      	b.n	8003de6 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	2200      	movs	r2, #0
 8003d0c:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	2221      	movs	r2, #33	; 0x21
 8003d12:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003d16:	f7fd ffd9 	bl	8001ccc <HAL_GetTick>
 8003d1a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	88fa      	ldrh	r2, [r7, #6]
 8003d20:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	88fa      	ldrh	r2, [r7, #6]
 8003d26:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	689b      	ldr	r3, [r3, #8]
 8003d2c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d30:	d108      	bne.n	8003d44 <HAL_UART_Transmit+0x6c>
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	691b      	ldr	r3, [r3, #16]
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d104      	bne.n	8003d44 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003d3a:	2300      	movs	r3, #0
 8003d3c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003d3e:	68bb      	ldr	r3, [r7, #8]
 8003d40:	61bb      	str	r3, [r7, #24]
 8003d42:	e003      	b.n	8003d4c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003d44:	68bb      	ldr	r3, [r7, #8]
 8003d46:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003d48:	2300      	movs	r3, #0
 8003d4a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003d4c:	e02e      	b.n	8003dac <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003d4e:	683b      	ldr	r3, [r7, #0]
 8003d50:	9300      	str	r3, [sp, #0]
 8003d52:	697b      	ldr	r3, [r7, #20]
 8003d54:	2200      	movs	r2, #0
 8003d56:	2180      	movs	r1, #128	; 0x80
 8003d58:	68f8      	ldr	r0, [r7, #12]
 8003d5a:	f000 fb1c 	bl	8004396 <UART_WaitOnFlagUntilTimeout>
 8003d5e:	4603      	mov	r3, r0
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d005      	beq.n	8003d70 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	2220      	movs	r2, #32
 8003d68:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 8003d6c:	2303      	movs	r3, #3
 8003d6e:	e03a      	b.n	8003de6 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8003d70:	69fb      	ldr	r3, [r7, #28]
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d10b      	bne.n	8003d8e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003d76:	69bb      	ldr	r3, [r7, #24]
 8003d78:	881b      	ldrh	r3, [r3, #0]
 8003d7a:	461a      	mov	r2, r3
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003d84:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003d86:	69bb      	ldr	r3, [r7, #24]
 8003d88:	3302      	adds	r3, #2
 8003d8a:	61bb      	str	r3, [r7, #24]
 8003d8c:	e007      	b.n	8003d9e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003d8e:	69fb      	ldr	r3, [r7, #28]
 8003d90:	781a      	ldrb	r2, [r3, #0]
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003d98:	69fb      	ldr	r3, [r7, #28]
 8003d9a:	3301      	adds	r3, #1
 8003d9c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003da2:	b29b      	uxth	r3, r3
 8003da4:	3b01      	subs	r3, #1
 8003da6:	b29a      	uxth	r2, r3
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003db0:	b29b      	uxth	r3, r3
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d1cb      	bne.n	8003d4e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003db6:	683b      	ldr	r3, [r7, #0]
 8003db8:	9300      	str	r3, [sp, #0]
 8003dba:	697b      	ldr	r3, [r7, #20]
 8003dbc:	2200      	movs	r2, #0
 8003dbe:	2140      	movs	r1, #64	; 0x40
 8003dc0:	68f8      	ldr	r0, [r7, #12]
 8003dc2:	f000 fae8 	bl	8004396 <UART_WaitOnFlagUntilTimeout>
 8003dc6:	4603      	mov	r3, r0
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d005      	beq.n	8003dd8 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	2220      	movs	r2, #32
 8003dd0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 8003dd4:	2303      	movs	r3, #3
 8003dd6:	e006      	b.n	8003de6 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	2220      	movs	r2, #32
 8003ddc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8003de0:	2300      	movs	r3, #0
 8003de2:	e000      	b.n	8003de6 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8003de4:	2302      	movs	r3, #2
  }
}
 8003de6:	4618      	mov	r0, r3
 8003de8:	3720      	adds	r7, #32
 8003dea:	46bd      	mov	sp, r7
 8003dec:	bd80      	pop	{r7, pc}

08003dee <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003dee:	b580      	push	{r7, lr}
 8003df0:	b084      	sub	sp, #16
 8003df2:	af00      	add	r7, sp, #0
 8003df4:	60f8      	str	r0, [r7, #12]
 8003df6:	60b9      	str	r1, [r7, #8]
 8003df8:	4613      	mov	r3, r2
 8003dfa:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003e02:	b2db      	uxtb	r3, r3
 8003e04:	2b20      	cmp	r3, #32
 8003e06:	d112      	bne.n	8003e2e <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8003e08:	68bb      	ldr	r3, [r7, #8]
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d002      	beq.n	8003e14 <HAL_UART_Receive_IT+0x26>
 8003e0e:	88fb      	ldrh	r3, [r7, #6]
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d101      	bne.n	8003e18 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003e14:	2301      	movs	r3, #1
 8003e16:	e00b      	b.n	8003e30 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	2200      	movs	r2, #0
 8003e1c:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003e1e:	88fb      	ldrh	r3, [r7, #6]
 8003e20:	461a      	mov	r2, r3
 8003e22:	68b9      	ldr	r1, [r7, #8]
 8003e24:	68f8      	ldr	r0, [r7, #12]
 8003e26:	f000 fb0f 	bl	8004448 <UART_Start_Receive_IT>
 8003e2a:	4603      	mov	r3, r0
 8003e2c:	e000      	b.n	8003e30 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8003e2e:	2302      	movs	r3, #2
  }
}
 8003e30:	4618      	mov	r0, r3
 8003e32:	3710      	adds	r7, #16
 8003e34:	46bd      	mov	sp, r7
 8003e36:	bd80      	pop	{r7, pc}

08003e38 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003e38:	b580      	push	{r7, lr}
 8003e3a:	b0ba      	sub	sp, #232	; 0xe8
 8003e3c:	af00      	add	r7, sp, #0
 8003e3e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	68db      	ldr	r3, [r3, #12]
 8003e50:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	695b      	ldr	r3, [r3, #20]
 8003e5a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8003e5e:	2300      	movs	r3, #0
 8003e60:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8003e64:	2300      	movs	r3, #0
 8003e66:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003e6a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e6e:	f003 030f 	and.w	r3, r3, #15
 8003e72:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8003e76:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d10f      	bne.n	8003e9e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003e7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e82:	f003 0320 	and.w	r3, r3, #32
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d009      	beq.n	8003e9e <HAL_UART_IRQHandler+0x66>
 8003e8a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003e8e:	f003 0320 	and.w	r3, r3, #32
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d003      	beq.n	8003e9e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003e96:	6878      	ldr	r0, [r7, #4]
 8003e98:	f000 fbec 	bl	8004674 <UART_Receive_IT>
      return;
 8003e9c:	e25b      	b.n	8004356 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003e9e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	f000 80de 	beq.w	8004064 <HAL_UART_IRQHandler+0x22c>
 8003ea8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003eac:	f003 0301 	and.w	r3, r3, #1
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d106      	bne.n	8003ec2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003eb4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003eb8:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	f000 80d1 	beq.w	8004064 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003ec2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ec6:	f003 0301 	and.w	r3, r3, #1
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d00b      	beq.n	8003ee6 <HAL_UART_IRQHandler+0xae>
 8003ece:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003ed2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d005      	beq.n	8003ee6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ede:	f043 0201 	orr.w	r2, r3, #1
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003ee6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003eea:	f003 0304 	and.w	r3, r3, #4
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d00b      	beq.n	8003f0a <HAL_UART_IRQHandler+0xd2>
 8003ef2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003ef6:	f003 0301 	and.w	r3, r3, #1
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d005      	beq.n	8003f0a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f02:	f043 0202 	orr.w	r2, r3, #2
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003f0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f0e:	f003 0302 	and.w	r3, r3, #2
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d00b      	beq.n	8003f2e <HAL_UART_IRQHandler+0xf6>
 8003f16:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003f1a:	f003 0301 	and.w	r3, r3, #1
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d005      	beq.n	8003f2e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f26:	f043 0204 	orr.w	r2, r3, #4
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003f2e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f32:	f003 0308 	and.w	r3, r3, #8
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d011      	beq.n	8003f5e <HAL_UART_IRQHandler+0x126>
 8003f3a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003f3e:	f003 0320 	and.w	r3, r3, #32
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d105      	bne.n	8003f52 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003f46:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003f4a:	f003 0301 	and.w	r3, r3, #1
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d005      	beq.n	8003f5e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f56:	f043 0208 	orr.w	r2, r3, #8
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	f000 81f2 	beq.w	800434c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003f68:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f6c:	f003 0320 	and.w	r3, r3, #32
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d008      	beq.n	8003f86 <HAL_UART_IRQHandler+0x14e>
 8003f74:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003f78:	f003 0320 	and.w	r3, r3, #32
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d002      	beq.n	8003f86 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003f80:	6878      	ldr	r0, [r7, #4]
 8003f82:	f000 fb77 	bl	8004674 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	695b      	ldr	r3, [r3, #20]
 8003f8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	bf14      	ite	ne
 8003f94:	2301      	movne	r3, #1
 8003f96:	2300      	moveq	r3, #0
 8003f98:	b2db      	uxtb	r3, r3
 8003f9a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fa2:	f003 0308 	and.w	r3, r3, #8
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d103      	bne.n	8003fb2 <HAL_UART_IRQHandler+0x17a>
 8003faa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d04f      	beq.n	8004052 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003fb2:	6878      	ldr	r0, [r7, #4]
 8003fb4:	f000 fa81 	bl	80044ba <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	695b      	ldr	r3, [r3, #20]
 8003fbe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d041      	beq.n	800404a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	3314      	adds	r3, #20
 8003fcc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fd0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003fd4:	e853 3f00 	ldrex	r3, [r3]
 8003fd8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003fdc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003fe0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003fe4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	3314      	adds	r3, #20
 8003fee:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003ff2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003ff6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ffa:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003ffe:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004002:	e841 2300 	strex	r3, r2, [r1]
 8004006:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800400a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800400e:	2b00      	cmp	r3, #0
 8004010:	d1d9      	bne.n	8003fc6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004016:	2b00      	cmp	r3, #0
 8004018:	d013      	beq.n	8004042 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800401e:	4a7e      	ldr	r2, [pc, #504]	; (8004218 <HAL_UART_IRQHandler+0x3e0>)
 8004020:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004026:	4618      	mov	r0, r3
 8004028:	f7fd ffc6 	bl	8001fb8 <HAL_DMA_Abort_IT>
 800402c:	4603      	mov	r3, r0
 800402e:	2b00      	cmp	r3, #0
 8004030:	d016      	beq.n	8004060 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004036:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004038:	687a      	ldr	r2, [r7, #4]
 800403a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800403c:	4610      	mov	r0, r2
 800403e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004040:	e00e      	b.n	8004060 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004042:	6878      	ldr	r0, [r7, #4]
 8004044:	f000 f993 	bl	800436e <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004048:	e00a      	b.n	8004060 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800404a:	6878      	ldr	r0, [r7, #4]
 800404c:	f000 f98f 	bl	800436e <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004050:	e006      	b.n	8004060 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004052:	6878      	ldr	r0, [r7, #4]
 8004054:	f000 f98b 	bl	800436e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	2200      	movs	r2, #0
 800405c:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 800405e:	e175      	b.n	800434c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004060:	bf00      	nop
    return;
 8004062:	e173      	b.n	800434c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004068:	2b01      	cmp	r3, #1
 800406a:	f040 814f 	bne.w	800430c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800406e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004072:	f003 0310 	and.w	r3, r3, #16
 8004076:	2b00      	cmp	r3, #0
 8004078:	f000 8148 	beq.w	800430c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800407c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004080:	f003 0310 	and.w	r3, r3, #16
 8004084:	2b00      	cmp	r3, #0
 8004086:	f000 8141 	beq.w	800430c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800408a:	2300      	movs	r3, #0
 800408c:	60bb      	str	r3, [r7, #8]
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	60bb      	str	r3, [r7, #8]
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	685b      	ldr	r3, [r3, #4]
 800409c:	60bb      	str	r3, [r7, #8]
 800409e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	695b      	ldr	r3, [r3, #20]
 80040a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	f000 80b6 	beq.w	800421c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	685b      	ldr	r3, [r3, #4]
 80040b8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80040bc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	f000 8145 	beq.w	8004350 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80040ca:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80040ce:	429a      	cmp	r2, r3
 80040d0:	f080 813e 	bcs.w	8004350 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80040da:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040e0:	699b      	ldr	r3, [r3, #24]
 80040e2:	2b20      	cmp	r3, #32
 80040e4:	f000 8088 	beq.w	80041f8 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	330c      	adds	r3, #12
 80040ee:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040f2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80040f6:	e853 3f00 	ldrex	r3, [r3]
 80040fa:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80040fe:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004102:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004106:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	330c      	adds	r3, #12
 8004110:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8004114:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004118:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800411c:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004120:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004124:	e841 2300 	strex	r3, r2, [r1]
 8004128:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800412c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004130:	2b00      	cmp	r3, #0
 8004132:	d1d9      	bne.n	80040e8 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	3314      	adds	r3, #20
 800413a:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800413c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800413e:	e853 3f00 	ldrex	r3, [r3]
 8004142:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004144:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004146:	f023 0301 	bic.w	r3, r3, #1
 800414a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	3314      	adds	r3, #20
 8004154:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004158:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800415c:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800415e:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004160:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004164:	e841 2300 	strex	r3, r2, [r1]
 8004168:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800416a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800416c:	2b00      	cmp	r3, #0
 800416e:	d1e1      	bne.n	8004134 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	3314      	adds	r3, #20
 8004176:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004178:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800417a:	e853 3f00 	ldrex	r3, [r3]
 800417e:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004180:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004182:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004186:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	3314      	adds	r3, #20
 8004190:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004194:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004196:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004198:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800419a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800419c:	e841 2300 	strex	r3, r2, [r1]
 80041a0:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80041a2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d1e3      	bne.n	8004170 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	2220      	movs	r2, #32
 80041ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	2200      	movs	r2, #0
 80041b4:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	330c      	adds	r3, #12
 80041bc:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80041c0:	e853 3f00 	ldrex	r3, [r3]
 80041c4:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80041c6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80041c8:	f023 0310 	bic.w	r3, r3, #16
 80041cc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	330c      	adds	r3, #12
 80041d6:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80041da:	65ba      	str	r2, [r7, #88]	; 0x58
 80041dc:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041de:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80041e0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80041e2:	e841 2300 	strex	r3, r2, [r1]
 80041e6:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80041e8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d1e3      	bne.n	80041b6 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041f2:	4618      	mov	r0, r3
 80041f4:	f7fd fea5 	bl	8001f42 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	2202      	movs	r2, #2
 80041fc:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004206:	b29b      	uxth	r3, r3
 8004208:	1ad3      	subs	r3, r2, r3
 800420a:	b29b      	uxth	r3, r3
 800420c:	4619      	mov	r1, r3
 800420e:	6878      	ldr	r0, [r7, #4]
 8004210:	f000 f8b6 	bl	8004380 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004214:	e09c      	b.n	8004350 <HAL_UART_IRQHandler+0x518>
 8004216:	bf00      	nop
 8004218:	0800457f 	.word	0x0800457f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004224:	b29b      	uxth	r3, r3
 8004226:	1ad3      	subs	r3, r2, r3
 8004228:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004230:	b29b      	uxth	r3, r3
 8004232:	2b00      	cmp	r3, #0
 8004234:	f000 808e 	beq.w	8004354 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8004238:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800423c:	2b00      	cmp	r3, #0
 800423e:	f000 8089 	beq.w	8004354 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	330c      	adds	r3, #12
 8004248:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800424a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800424c:	e853 3f00 	ldrex	r3, [r3]
 8004250:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004252:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004254:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004258:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	330c      	adds	r3, #12
 8004262:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8004266:	647a      	str	r2, [r7, #68]	; 0x44
 8004268:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800426a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800426c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800426e:	e841 2300 	strex	r3, r2, [r1]
 8004272:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004274:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004276:	2b00      	cmp	r3, #0
 8004278:	d1e3      	bne.n	8004242 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	3314      	adds	r3, #20
 8004280:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004282:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004284:	e853 3f00 	ldrex	r3, [r3]
 8004288:	623b      	str	r3, [r7, #32]
   return(result);
 800428a:	6a3b      	ldr	r3, [r7, #32]
 800428c:	f023 0301 	bic.w	r3, r3, #1
 8004290:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	3314      	adds	r3, #20
 800429a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800429e:	633a      	str	r2, [r7, #48]	; 0x30
 80042a0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042a2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80042a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80042a6:	e841 2300 	strex	r3, r2, [r1]
 80042aa:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80042ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d1e3      	bne.n	800427a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	2220      	movs	r2, #32
 80042b6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	2200      	movs	r2, #0
 80042be:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	330c      	adds	r3, #12
 80042c6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042c8:	693b      	ldr	r3, [r7, #16]
 80042ca:	e853 3f00 	ldrex	r3, [r3]
 80042ce:	60fb      	str	r3, [r7, #12]
   return(result);
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	f023 0310 	bic.w	r3, r3, #16
 80042d6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	330c      	adds	r3, #12
 80042e0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80042e4:	61fa      	str	r2, [r7, #28]
 80042e6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042e8:	69b9      	ldr	r1, [r7, #24]
 80042ea:	69fa      	ldr	r2, [r7, #28]
 80042ec:	e841 2300 	strex	r3, r2, [r1]
 80042f0:	617b      	str	r3, [r7, #20]
   return(result);
 80042f2:	697b      	ldr	r3, [r7, #20]
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d1e3      	bne.n	80042c0 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	2202      	movs	r2, #2
 80042fc:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80042fe:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004302:	4619      	mov	r1, r3
 8004304:	6878      	ldr	r0, [r7, #4]
 8004306:	f000 f83b 	bl	8004380 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800430a:	e023      	b.n	8004354 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800430c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004310:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004314:	2b00      	cmp	r3, #0
 8004316:	d009      	beq.n	800432c <HAL_UART_IRQHandler+0x4f4>
 8004318:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800431c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004320:	2b00      	cmp	r3, #0
 8004322:	d003      	beq.n	800432c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8004324:	6878      	ldr	r0, [r7, #4]
 8004326:	f000 f93e 	bl	80045a6 <UART_Transmit_IT>
    return;
 800432a:	e014      	b.n	8004356 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800432c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004330:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004334:	2b00      	cmp	r3, #0
 8004336:	d00e      	beq.n	8004356 <HAL_UART_IRQHandler+0x51e>
 8004338:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800433c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004340:	2b00      	cmp	r3, #0
 8004342:	d008      	beq.n	8004356 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8004344:	6878      	ldr	r0, [r7, #4]
 8004346:	f000 f97d 	bl	8004644 <UART_EndTransmit_IT>
    return;
 800434a:	e004      	b.n	8004356 <HAL_UART_IRQHandler+0x51e>
    return;
 800434c:	bf00      	nop
 800434e:	e002      	b.n	8004356 <HAL_UART_IRQHandler+0x51e>
      return;
 8004350:	bf00      	nop
 8004352:	e000      	b.n	8004356 <HAL_UART_IRQHandler+0x51e>
      return;
 8004354:	bf00      	nop
  }
}
 8004356:	37e8      	adds	r7, #232	; 0xe8
 8004358:	46bd      	mov	sp, r7
 800435a:	bd80      	pop	{r7, pc}

0800435c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800435c:	b480      	push	{r7}
 800435e:	b083      	sub	sp, #12
 8004360:	af00      	add	r7, sp, #0
 8004362:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004364:	bf00      	nop
 8004366:	370c      	adds	r7, #12
 8004368:	46bd      	mov	sp, r7
 800436a:	bc80      	pop	{r7}
 800436c:	4770      	bx	lr

0800436e <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800436e:	b480      	push	{r7}
 8004370:	b083      	sub	sp, #12
 8004372:	af00      	add	r7, sp, #0
 8004374:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004376:	bf00      	nop
 8004378:	370c      	adds	r7, #12
 800437a:	46bd      	mov	sp, r7
 800437c:	bc80      	pop	{r7}
 800437e:	4770      	bx	lr

08004380 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004380:	b480      	push	{r7}
 8004382:	b083      	sub	sp, #12
 8004384:	af00      	add	r7, sp, #0
 8004386:	6078      	str	r0, [r7, #4]
 8004388:	460b      	mov	r3, r1
 800438a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800438c:	bf00      	nop
 800438e:	370c      	adds	r7, #12
 8004390:	46bd      	mov	sp, r7
 8004392:	bc80      	pop	{r7}
 8004394:	4770      	bx	lr

08004396 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004396:	b580      	push	{r7, lr}
 8004398:	b086      	sub	sp, #24
 800439a:	af00      	add	r7, sp, #0
 800439c:	60f8      	str	r0, [r7, #12]
 800439e:	60b9      	str	r1, [r7, #8]
 80043a0:	603b      	str	r3, [r7, #0]
 80043a2:	4613      	mov	r3, r2
 80043a4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80043a6:	e03b      	b.n	8004420 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80043a8:	6a3b      	ldr	r3, [r7, #32]
 80043aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043ae:	d037      	beq.n	8004420 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80043b0:	f7fd fc8c 	bl	8001ccc <HAL_GetTick>
 80043b4:	4602      	mov	r2, r0
 80043b6:	683b      	ldr	r3, [r7, #0]
 80043b8:	1ad3      	subs	r3, r2, r3
 80043ba:	6a3a      	ldr	r2, [r7, #32]
 80043bc:	429a      	cmp	r2, r3
 80043be:	d302      	bcc.n	80043c6 <UART_WaitOnFlagUntilTimeout+0x30>
 80043c0:	6a3b      	ldr	r3, [r7, #32]
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d101      	bne.n	80043ca <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80043c6:	2303      	movs	r3, #3
 80043c8:	e03a      	b.n	8004440 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	68db      	ldr	r3, [r3, #12]
 80043d0:	f003 0304 	and.w	r3, r3, #4
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d023      	beq.n	8004420 <UART_WaitOnFlagUntilTimeout+0x8a>
 80043d8:	68bb      	ldr	r3, [r7, #8]
 80043da:	2b80      	cmp	r3, #128	; 0x80
 80043dc:	d020      	beq.n	8004420 <UART_WaitOnFlagUntilTimeout+0x8a>
 80043de:	68bb      	ldr	r3, [r7, #8]
 80043e0:	2b40      	cmp	r3, #64	; 0x40
 80043e2:	d01d      	beq.n	8004420 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	f003 0308 	and.w	r3, r3, #8
 80043ee:	2b08      	cmp	r3, #8
 80043f0:	d116      	bne.n	8004420 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80043f2:	2300      	movs	r3, #0
 80043f4:	617b      	str	r3, [r7, #20]
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	617b      	str	r3, [r7, #20]
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	685b      	ldr	r3, [r3, #4]
 8004404:	617b      	str	r3, [r7, #20]
 8004406:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004408:	68f8      	ldr	r0, [r7, #12]
 800440a:	f000 f856 	bl	80044ba <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	2208      	movs	r2, #8
 8004412:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	2200      	movs	r2, #0
 8004418:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800441c:	2301      	movs	r3, #1
 800441e:	e00f      	b.n	8004440 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	681a      	ldr	r2, [r3, #0]
 8004426:	68bb      	ldr	r3, [r7, #8]
 8004428:	4013      	ands	r3, r2
 800442a:	68ba      	ldr	r2, [r7, #8]
 800442c:	429a      	cmp	r2, r3
 800442e:	bf0c      	ite	eq
 8004430:	2301      	moveq	r3, #1
 8004432:	2300      	movne	r3, #0
 8004434:	b2db      	uxtb	r3, r3
 8004436:	461a      	mov	r2, r3
 8004438:	79fb      	ldrb	r3, [r7, #7]
 800443a:	429a      	cmp	r2, r3
 800443c:	d0b4      	beq.n	80043a8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800443e:	2300      	movs	r3, #0
}
 8004440:	4618      	mov	r0, r3
 8004442:	3718      	adds	r7, #24
 8004444:	46bd      	mov	sp, r7
 8004446:	bd80      	pop	{r7, pc}

08004448 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004448:	b480      	push	{r7}
 800444a:	b085      	sub	sp, #20
 800444c:	af00      	add	r7, sp, #0
 800444e:	60f8      	str	r0, [r7, #12]
 8004450:	60b9      	str	r1, [r7, #8]
 8004452:	4613      	mov	r3, r2
 8004454:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	68ba      	ldr	r2, [r7, #8]
 800445a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	88fa      	ldrh	r2, [r7, #6]
 8004460:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	88fa      	ldrh	r2, [r7, #6]
 8004466:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	2200      	movs	r2, #0
 800446c:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	2222      	movs	r2, #34	; 0x22
 8004472:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	691b      	ldr	r3, [r3, #16]
 800447a:	2b00      	cmp	r3, #0
 800447c:	d007      	beq.n	800448e <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	68da      	ldr	r2, [r3, #12]
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800448c:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	695a      	ldr	r2, [r3, #20]
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	f042 0201 	orr.w	r2, r2, #1
 800449c:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	68da      	ldr	r2, [r3, #12]
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	f042 0220 	orr.w	r2, r2, #32
 80044ac:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80044ae:	2300      	movs	r3, #0
}
 80044b0:	4618      	mov	r0, r3
 80044b2:	3714      	adds	r7, #20
 80044b4:	46bd      	mov	sp, r7
 80044b6:	bc80      	pop	{r7}
 80044b8:	4770      	bx	lr

080044ba <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80044ba:	b480      	push	{r7}
 80044bc:	b095      	sub	sp, #84	; 0x54
 80044be:	af00      	add	r7, sp, #0
 80044c0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	330c      	adds	r3, #12
 80044c8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80044cc:	e853 3f00 	ldrex	r3, [r3]
 80044d0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80044d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044d4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80044d8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	330c      	adds	r3, #12
 80044e0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80044e2:	643a      	str	r2, [r7, #64]	; 0x40
 80044e4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044e6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80044e8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80044ea:	e841 2300 	strex	r3, r2, [r1]
 80044ee:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80044f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d1e5      	bne.n	80044c2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	3314      	adds	r3, #20
 80044fc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044fe:	6a3b      	ldr	r3, [r7, #32]
 8004500:	e853 3f00 	ldrex	r3, [r3]
 8004504:	61fb      	str	r3, [r7, #28]
   return(result);
 8004506:	69fb      	ldr	r3, [r7, #28]
 8004508:	f023 0301 	bic.w	r3, r3, #1
 800450c:	64bb      	str	r3, [r7, #72]	; 0x48
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	3314      	adds	r3, #20
 8004514:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004516:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004518:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800451a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800451c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800451e:	e841 2300 	strex	r3, r2, [r1]
 8004522:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004524:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004526:	2b00      	cmp	r3, #0
 8004528:	d1e5      	bne.n	80044f6 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800452e:	2b01      	cmp	r3, #1
 8004530:	d119      	bne.n	8004566 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	330c      	adds	r3, #12
 8004538:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	e853 3f00 	ldrex	r3, [r3]
 8004540:	60bb      	str	r3, [r7, #8]
   return(result);
 8004542:	68bb      	ldr	r3, [r7, #8]
 8004544:	f023 0310 	bic.w	r3, r3, #16
 8004548:	647b      	str	r3, [r7, #68]	; 0x44
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	330c      	adds	r3, #12
 8004550:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004552:	61ba      	str	r2, [r7, #24]
 8004554:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004556:	6979      	ldr	r1, [r7, #20]
 8004558:	69ba      	ldr	r2, [r7, #24]
 800455a:	e841 2300 	strex	r3, r2, [r1]
 800455e:	613b      	str	r3, [r7, #16]
   return(result);
 8004560:	693b      	ldr	r3, [r7, #16]
 8004562:	2b00      	cmp	r3, #0
 8004564:	d1e5      	bne.n	8004532 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	2220      	movs	r2, #32
 800456a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	2200      	movs	r2, #0
 8004572:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004574:	bf00      	nop
 8004576:	3754      	adds	r7, #84	; 0x54
 8004578:	46bd      	mov	sp, r7
 800457a:	bc80      	pop	{r7}
 800457c:	4770      	bx	lr

0800457e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800457e:	b580      	push	{r7, lr}
 8004580:	b084      	sub	sp, #16
 8004582:	af00      	add	r7, sp, #0
 8004584:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800458a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	2200      	movs	r2, #0
 8004590:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	2200      	movs	r2, #0
 8004596:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004598:	68f8      	ldr	r0, [r7, #12]
 800459a:	f7ff fee8 	bl	800436e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800459e:	bf00      	nop
 80045a0:	3710      	adds	r7, #16
 80045a2:	46bd      	mov	sp, r7
 80045a4:	bd80      	pop	{r7, pc}

080045a6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80045a6:	b480      	push	{r7}
 80045a8:	b085      	sub	sp, #20
 80045aa:	af00      	add	r7, sp, #0
 80045ac:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80045b4:	b2db      	uxtb	r3, r3
 80045b6:	2b21      	cmp	r3, #33	; 0x21
 80045b8:	d13e      	bne.n	8004638 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	689b      	ldr	r3, [r3, #8]
 80045be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80045c2:	d114      	bne.n	80045ee <UART_Transmit_IT+0x48>
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	691b      	ldr	r3, [r3, #16]
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d110      	bne.n	80045ee <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	6a1b      	ldr	r3, [r3, #32]
 80045d0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	881b      	ldrh	r3, [r3, #0]
 80045d6:	461a      	mov	r2, r3
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80045e0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	6a1b      	ldr	r3, [r3, #32]
 80045e6:	1c9a      	adds	r2, r3, #2
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	621a      	str	r2, [r3, #32]
 80045ec:	e008      	b.n	8004600 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	6a1b      	ldr	r3, [r3, #32]
 80045f2:	1c59      	adds	r1, r3, #1
 80045f4:	687a      	ldr	r2, [r7, #4]
 80045f6:	6211      	str	r1, [r2, #32]
 80045f8:	781a      	ldrb	r2, [r3, #0]
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004604:	b29b      	uxth	r3, r3
 8004606:	3b01      	subs	r3, #1
 8004608:	b29b      	uxth	r3, r3
 800460a:	687a      	ldr	r2, [r7, #4]
 800460c:	4619      	mov	r1, r3
 800460e:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004610:	2b00      	cmp	r3, #0
 8004612:	d10f      	bne.n	8004634 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	68da      	ldr	r2, [r3, #12]
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004622:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	68da      	ldr	r2, [r3, #12]
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004632:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004634:	2300      	movs	r3, #0
 8004636:	e000      	b.n	800463a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004638:	2302      	movs	r3, #2
  }
}
 800463a:	4618      	mov	r0, r3
 800463c:	3714      	adds	r7, #20
 800463e:	46bd      	mov	sp, r7
 8004640:	bc80      	pop	{r7}
 8004642:	4770      	bx	lr

08004644 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004644:	b580      	push	{r7, lr}
 8004646:	b082      	sub	sp, #8
 8004648:	af00      	add	r7, sp, #0
 800464a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	68da      	ldr	r2, [r3, #12]
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800465a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	2220      	movs	r2, #32
 8004660:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004664:	6878      	ldr	r0, [r7, #4]
 8004666:	f7ff fe79 	bl	800435c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800466a:	2300      	movs	r3, #0
}
 800466c:	4618      	mov	r0, r3
 800466e:	3708      	adds	r7, #8
 8004670:	46bd      	mov	sp, r7
 8004672:	bd80      	pop	{r7, pc}

08004674 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004674:	b580      	push	{r7, lr}
 8004676:	b08c      	sub	sp, #48	; 0x30
 8004678:	af00      	add	r7, sp, #0
 800467a:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004682:	b2db      	uxtb	r3, r3
 8004684:	2b22      	cmp	r3, #34	; 0x22
 8004686:	f040 80ae 	bne.w	80047e6 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	689b      	ldr	r3, [r3, #8]
 800468e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004692:	d117      	bne.n	80046c4 <UART_Receive_IT+0x50>
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	691b      	ldr	r3, [r3, #16]
 8004698:	2b00      	cmp	r3, #0
 800469a:	d113      	bne.n	80046c4 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800469c:	2300      	movs	r3, #0
 800469e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046a4:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	685b      	ldr	r3, [r3, #4]
 80046ac:	b29b      	uxth	r3, r3
 80046ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80046b2:	b29a      	uxth	r2, r3
 80046b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046b6:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046bc:	1c9a      	adds	r2, r3, #2
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	629a      	str	r2, [r3, #40]	; 0x28
 80046c2:	e026      	b.n	8004712 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046c8:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80046ca:	2300      	movs	r3, #0
 80046cc:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	689b      	ldr	r3, [r3, #8]
 80046d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80046d6:	d007      	beq.n	80046e8 <UART_Receive_IT+0x74>
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	689b      	ldr	r3, [r3, #8]
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d10a      	bne.n	80046f6 <UART_Receive_IT+0x82>
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	691b      	ldr	r3, [r3, #16]
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d106      	bne.n	80046f6 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	685b      	ldr	r3, [r3, #4]
 80046ee:	b2da      	uxtb	r2, r3
 80046f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046f2:	701a      	strb	r2, [r3, #0]
 80046f4:	e008      	b.n	8004708 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	685b      	ldr	r3, [r3, #4]
 80046fc:	b2db      	uxtb	r3, r3
 80046fe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004702:	b2da      	uxtb	r2, r3
 8004704:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004706:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800470c:	1c5a      	adds	r2, r3, #1
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004716:	b29b      	uxth	r3, r3
 8004718:	3b01      	subs	r3, #1
 800471a:	b29b      	uxth	r3, r3
 800471c:	687a      	ldr	r2, [r7, #4]
 800471e:	4619      	mov	r1, r3
 8004720:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004722:	2b00      	cmp	r3, #0
 8004724:	d15d      	bne.n	80047e2 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	68da      	ldr	r2, [r3, #12]
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	f022 0220 	bic.w	r2, r2, #32
 8004734:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	68da      	ldr	r2, [r3, #12]
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004744:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	695a      	ldr	r2, [r3, #20]
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	f022 0201 	bic.w	r2, r2, #1
 8004754:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	2220      	movs	r2, #32
 800475a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	2200      	movs	r2, #0
 8004762:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004768:	2b01      	cmp	r3, #1
 800476a:	d135      	bne.n	80047d8 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	2200      	movs	r2, #0
 8004770:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	330c      	adds	r3, #12
 8004778:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800477a:	697b      	ldr	r3, [r7, #20]
 800477c:	e853 3f00 	ldrex	r3, [r3]
 8004780:	613b      	str	r3, [r7, #16]
   return(result);
 8004782:	693b      	ldr	r3, [r7, #16]
 8004784:	f023 0310 	bic.w	r3, r3, #16
 8004788:	627b      	str	r3, [r7, #36]	; 0x24
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	330c      	adds	r3, #12
 8004790:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004792:	623a      	str	r2, [r7, #32]
 8004794:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004796:	69f9      	ldr	r1, [r7, #28]
 8004798:	6a3a      	ldr	r2, [r7, #32]
 800479a:	e841 2300 	strex	r3, r2, [r1]
 800479e:	61bb      	str	r3, [r7, #24]
   return(result);
 80047a0:	69bb      	ldr	r3, [r7, #24]
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d1e5      	bne.n	8004772 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	f003 0310 	and.w	r3, r3, #16
 80047b0:	2b10      	cmp	r3, #16
 80047b2:	d10a      	bne.n	80047ca <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80047b4:	2300      	movs	r3, #0
 80047b6:	60fb      	str	r3, [r7, #12]
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	60fb      	str	r3, [r7, #12]
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	685b      	ldr	r3, [r3, #4]
 80047c6:	60fb      	str	r3, [r7, #12]
 80047c8:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80047ce:	4619      	mov	r1, r3
 80047d0:	6878      	ldr	r0, [r7, #4]
 80047d2:	f7ff fdd5 	bl	8004380 <HAL_UARTEx_RxEventCallback>
 80047d6:	e002      	b.n	80047de <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80047d8:	6878      	ldr	r0, [r7, #4]
 80047da:	f7fc fcf1 	bl	80011c0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80047de:	2300      	movs	r3, #0
 80047e0:	e002      	b.n	80047e8 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80047e2:	2300      	movs	r3, #0
 80047e4:	e000      	b.n	80047e8 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80047e6:	2302      	movs	r3, #2
  }
}
 80047e8:	4618      	mov	r0, r3
 80047ea:	3730      	adds	r7, #48	; 0x30
 80047ec:	46bd      	mov	sp, r7
 80047ee:	bd80      	pop	{r7, pc}

080047f0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80047f0:	b580      	push	{r7, lr}
 80047f2:	b084      	sub	sp, #16
 80047f4:	af00      	add	r7, sp, #0
 80047f6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	691b      	ldr	r3, [r3, #16]
 80047fe:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	68da      	ldr	r2, [r3, #12]
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	430a      	orrs	r2, r1
 800480c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	689a      	ldr	r2, [r3, #8]
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	691b      	ldr	r3, [r3, #16]
 8004816:	431a      	orrs	r2, r3
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	695b      	ldr	r3, [r3, #20]
 800481c:	4313      	orrs	r3, r2
 800481e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	68db      	ldr	r3, [r3, #12]
 8004826:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800482a:	f023 030c 	bic.w	r3, r3, #12
 800482e:	687a      	ldr	r2, [r7, #4]
 8004830:	6812      	ldr	r2, [r2, #0]
 8004832:	68b9      	ldr	r1, [r7, #8]
 8004834:	430b      	orrs	r3, r1
 8004836:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	695b      	ldr	r3, [r3, #20]
 800483e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	699a      	ldr	r2, [r3, #24]
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	430a      	orrs	r2, r1
 800484c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	4a2c      	ldr	r2, [pc, #176]	; (8004904 <UART_SetConfig+0x114>)
 8004854:	4293      	cmp	r3, r2
 8004856:	d103      	bne.n	8004860 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004858:	f7ff f9bc 	bl	8003bd4 <HAL_RCC_GetPCLK2Freq>
 800485c:	60f8      	str	r0, [r7, #12]
 800485e:	e002      	b.n	8004866 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004860:	f7ff f9a4 	bl	8003bac <HAL_RCC_GetPCLK1Freq>
 8004864:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004866:	68fa      	ldr	r2, [r7, #12]
 8004868:	4613      	mov	r3, r2
 800486a:	009b      	lsls	r3, r3, #2
 800486c:	4413      	add	r3, r2
 800486e:	009a      	lsls	r2, r3, #2
 8004870:	441a      	add	r2, r3
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	685b      	ldr	r3, [r3, #4]
 8004876:	009b      	lsls	r3, r3, #2
 8004878:	fbb2 f3f3 	udiv	r3, r2, r3
 800487c:	4a22      	ldr	r2, [pc, #136]	; (8004908 <UART_SetConfig+0x118>)
 800487e:	fba2 2303 	umull	r2, r3, r2, r3
 8004882:	095b      	lsrs	r3, r3, #5
 8004884:	0119      	lsls	r1, r3, #4
 8004886:	68fa      	ldr	r2, [r7, #12]
 8004888:	4613      	mov	r3, r2
 800488a:	009b      	lsls	r3, r3, #2
 800488c:	4413      	add	r3, r2
 800488e:	009a      	lsls	r2, r3, #2
 8004890:	441a      	add	r2, r3
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	685b      	ldr	r3, [r3, #4]
 8004896:	009b      	lsls	r3, r3, #2
 8004898:	fbb2 f2f3 	udiv	r2, r2, r3
 800489c:	4b1a      	ldr	r3, [pc, #104]	; (8004908 <UART_SetConfig+0x118>)
 800489e:	fba3 0302 	umull	r0, r3, r3, r2
 80048a2:	095b      	lsrs	r3, r3, #5
 80048a4:	2064      	movs	r0, #100	; 0x64
 80048a6:	fb00 f303 	mul.w	r3, r0, r3
 80048aa:	1ad3      	subs	r3, r2, r3
 80048ac:	011b      	lsls	r3, r3, #4
 80048ae:	3332      	adds	r3, #50	; 0x32
 80048b0:	4a15      	ldr	r2, [pc, #84]	; (8004908 <UART_SetConfig+0x118>)
 80048b2:	fba2 2303 	umull	r2, r3, r2, r3
 80048b6:	095b      	lsrs	r3, r3, #5
 80048b8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80048bc:	4419      	add	r1, r3
 80048be:	68fa      	ldr	r2, [r7, #12]
 80048c0:	4613      	mov	r3, r2
 80048c2:	009b      	lsls	r3, r3, #2
 80048c4:	4413      	add	r3, r2
 80048c6:	009a      	lsls	r2, r3, #2
 80048c8:	441a      	add	r2, r3
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	685b      	ldr	r3, [r3, #4]
 80048ce:	009b      	lsls	r3, r3, #2
 80048d0:	fbb2 f2f3 	udiv	r2, r2, r3
 80048d4:	4b0c      	ldr	r3, [pc, #48]	; (8004908 <UART_SetConfig+0x118>)
 80048d6:	fba3 0302 	umull	r0, r3, r3, r2
 80048da:	095b      	lsrs	r3, r3, #5
 80048dc:	2064      	movs	r0, #100	; 0x64
 80048de:	fb00 f303 	mul.w	r3, r0, r3
 80048e2:	1ad3      	subs	r3, r2, r3
 80048e4:	011b      	lsls	r3, r3, #4
 80048e6:	3332      	adds	r3, #50	; 0x32
 80048e8:	4a07      	ldr	r2, [pc, #28]	; (8004908 <UART_SetConfig+0x118>)
 80048ea:	fba2 2303 	umull	r2, r3, r2, r3
 80048ee:	095b      	lsrs	r3, r3, #5
 80048f0:	f003 020f 	and.w	r2, r3, #15
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	440a      	add	r2, r1
 80048fa:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80048fc:	bf00      	nop
 80048fe:	3710      	adds	r7, #16
 8004900:	46bd      	mov	sp, r7
 8004902:	bd80      	pop	{r7, pc}
 8004904:	40013800 	.word	0x40013800
 8004908:	51eb851f 	.word	0x51eb851f

0800490c <__cvt>:
 800490c:	2b00      	cmp	r3, #0
 800490e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004912:	461f      	mov	r7, r3
 8004914:	bfbb      	ittet	lt
 8004916:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 800491a:	461f      	movlt	r7, r3
 800491c:	2300      	movge	r3, #0
 800491e:	232d      	movlt	r3, #45	; 0x2d
 8004920:	b088      	sub	sp, #32
 8004922:	4614      	mov	r4, r2
 8004924:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8004926:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8004928:	7013      	strb	r3, [r2, #0]
 800492a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800492c:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8004930:	f023 0820 	bic.w	r8, r3, #32
 8004934:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004938:	d005      	beq.n	8004946 <__cvt+0x3a>
 800493a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800493e:	d100      	bne.n	8004942 <__cvt+0x36>
 8004940:	3501      	adds	r5, #1
 8004942:	2302      	movs	r3, #2
 8004944:	e000      	b.n	8004948 <__cvt+0x3c>
 8004946:	2303      	movs	r3, #3
 8004948:	aa07      	add	r2, sp, #28
 800494a:	9204      	str	r2, [sp, #16]
 800494c:	aa06      	add	r2, sp, #24
 800494e:	e9cd a202 	strd	sl, r2, [sp, #8]
 8004952:	e9cd 3500 	strd	r3, r5, [sp]
 8004956:	4622      	mov	r2, r4
 8004958:	463b      	mov	r3, r7
 800495a:	f000 ff61 	bl	8005820 <_dtoa_r>
 800495e:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8004962:	4606      	mov	r6, r0
 8004964:	d102      	bne.n	800496c <__cvt+0x60>
 8004966:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004968:	07db      	lsls	r3, r3, #31
 800496a:	d522      	bpl.n	80049b2 <__cvt+0xa6>
 800496c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004970:	eb06 0905 	add.w	r9, r6, r5
 8004974:	d110      	bne.n	8004998 <__cvt+0x8c>
 8004976:	7833      	ldrb	r3, [r6, #0]
 8004978:	2b30      	cmp	r3, #48	; 0x30
 800497a:	d10a      	bne.n	8004992 <__cvt+0x86>
 800497c:	2200      	movs	r2, #0
 800497e:	2300      	movs	r3, #0
 8004980:	4620      	mov	r0, r4
 8004982:	4639      	mov	r1, r7
 8004984:	f7fc f810 	bl	80009a8 <__aeabi_dcmpeq>
 8004988:	b918      	cbnz	r0, 8004992 <__cvt+0x86>
 800498a:	f1c5 0501 	rsb	r5, r5, #1
 800498e:	f8ca 5000 	str.w	r5, [sl]
 8004992:	f8da 3000 	ldr.w	r3, [sl]
 8004996:	4499      	add	r9, r3
 8004998:	2200      	movs	r2, #0
 800499a:	2300      	movs	r3, #0
 800499c:	4620      	mov	r0, r4
 800499e:	4639      	mov	r1, r7
 80049a0:	f7fc f802 	bl	80009a8 <__aeabi_dcmpeq>
 80049a4:	b108      	cbz	r0, 80049aa <__cvt+0x9e>
 80049a6:	f8cd 901c 	str.w	r9, [sp, #28]
 80049aa:	2230      	movs	r2, #48	; 0x30
 80049ac:	9b07      	ldr	r3, [sp, #28]
 80049ae:	454b      	cmp	r3, r9
 80049b0:	d307      	bcc.n	80049c2 <__cvt+0xb6>
 80049b2:	4630      	mov	r0, r6
 80049b4:	9b07      	ldr	r3, [sp, #28]
 80049b6:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80049b8:	1b9b      	subs	r3, r3, r6
 80049ba:	6013      	str	r3, [r2, #0]
 80049bc:	b008      	add	sp, #32
 80049be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80049c2:	1c59      	adds	r1, r3, #1
 80049c4:	9107      	str	r1, [sp, #28]
 80049c6:	701a      	strb	r2, [r3, #0]
 80049c8:	e7f0      	b.n	80049ac <__cvt+0xa0>

080049ca <__exponent>:
 80049ca:	4603      	mov	r3, r0
 80049cc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80049ce:	2900      	cmp	r1, #0
 80049d0:	f803 2b02 	strb.w	r2, [r3], #2
 80049d4:	bfb6      	itet	lt
 80049d6:	222d      	movlt	r2, #45	; 0x2d
 80049d8:	222b      	movge	r2, #43	; 0x2b
 80049da:	4249      	neglt	r1, r1
 80049dc:	2909      	cmp	r1, #9
 80049de:	7042      	strb	r2, [r0, #1]
 80049e0:	dd2a      	ble.n	8004a38 <__exponent+0x6e>
 80049e2:	f10d 0207 	add.w	r2, sp, #7
 80049e6:	4617      	mov	r7, r2
 80049e8:	260a      	movs	r6, #10
 80049ea:	fb91 f5f6 	sdiv	r5, r1, r6
 80049ee:	4694      	mov	ip, r2
 80049f0:	fb06 1415 	mls	r4, r6, r5, r1
 80049f4:	3430      	adds	r4, #48	; 0x30
 80049f6:	f80c 4c01 	strb.w	r4, [ip, #-1]
 80049fa:	460c      	mov	r4, r1
 80049fc:	2c63      	cmp	r4, #99	; 0x63
 80049fe:	4629      	mov	r1, r5
 8004a00:	f102 32ff 	add.w	r2, r2, #4294967295
 8004a04:	dcf1      	bgt.n	80049ea <__exponent+0x20>
 8004a06:	3130      	adds	r1, #48	; 0x30
 8004a08:	f1ac 0402 	sub.w	r4, ip, #2
 8004a0c:	f802 1c01 	strb.w	r1, [r2, #-1]
 8004a10:	4622      	mov	r2, r4
 8004a12:	1c41      	adds	r1, r0, #1
 8004a14:	42ba      	cmp	r2, r7
 8004a16:	d30a      	bcc.n	8004a2e <__exponent+0x64>
 8004a18:	f10d 0209 	add.w	r2, sp, #9
 8004a1c:	eba2 020c 	sub.w	r2, r2, ip
 8004a20:	42bc      	cmp	r4, r7
 8004a22:	bf88      	it	hi
 8004a24:	2200      	movhi	r2, #0
 8004a26:	4413      	add	r3, r2
 8004a28:	1a18      	subs	r0, r3, r0
 8004a2a:	b003      	add	sp, #12
 8004a2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004a2e:	f812 5b01 	ldrb.w	r5, [r2], #1
 8004a32:	f801 5f01 	strb.w	r5, [r1, #1]!
 8004a36:	e7ed      	b.n	8004a14 <__exponent+0x4a>
 8004a38:	2330      	movs	r3, #48	; 0x30
 8004a3a:	3130      	adds	r1, #48	; 0x30
 8004a3c:	7083      	strb	r3, [r0, #2]
 8004a3e:	70c1      	strb	r1, [r0, #3]
 8004a40:	1d03      	adds	r3, r0, #4
 8004a42:	e7f1      	b.n	8004a28 <__exponent+0x5e>

08004a44 <_printf_float>:
 8004a44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a48:	b091      	sub	sp, #68	; 0x44
 8004a4a:	460c      	mov	r4, r1
 8004a4c:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8004a50:	4616      	mov	r6, r2
 8004a52:	461f      	mov	r7, r3
 8004a54:	4605      	mov	r5, r0
 8004a56:	f000 fdd5 	bl	8005604 <_localeconv_r>
 8004a5a:	6803      	ldr	r3, [r0, #0]
 8004a5c:	4618      	mov	r0, r3
 8004a5e:	9309      	str	r3, [sp, #36]	; 0x24
 8004a60:	f7fb fb76 	bl	8000150 <strlen>
 8004a64:	2300      	movs	r3, #0
 8004a66:	930e      	str	r3, [sp, #56]	; 0x38
 8004a68:	f8d8 3000 	ldr.w	r3, [r8]
 8004a6c:	900a      	str	r0, [sp, #40]	; 0x28
 8004a6e:	3307      	adds	r3, #7
 8004a70:	f023 0307 	bic.w	r3, r3, #7
 8004a74:	f103 0208 	add.w	r2, r3, #8
 8004a78:	f894 9018 	ldrb.w	r9, [r4, #24]
 8004a7c:	f8d4 b000 	ldr.w	fp, [r4]
 8004a80:	f8c8 2000 	str.w	r2, [r8]
 8004a84:	e9d3 a800 	ldrd	sl, r8, [r3]
 8004a88:	4652      	mov	r2, sl
 8004a8a:	4643      	mov	r3, r8
 8004a8c:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8004a90:	f028 4300 	bic.w	r3, r8, #2147483648	; 0x80000000
 8004a94:	930b      	str	r3, [sp, #44]	; 0x2c
 8004a96:	f04f 32ff 	mov.w	r2, #4294967295
 8004a9a:	4650      	mov	r0, sl
 8004a9c:	4b9c      	ldr	r3, [pc, #624]	; (8004d10 <_printf_float+0x2cc>)
 8004a9e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004aa0:	f7fb ffb4 	bl	8000a0c <__aeabi_dcmpun>
 8004aa4:	bb70      	cbnz	r0, 8004b04 <_printf_float+0xc0>
 8004aa6:	f04f 32ff 	mov.w	r2, #4294967295
 8004aaa:	4650      	mov	r0, sl
 8004aac:	4b98      	ldr	r3, [pc, #608]	; (8004d10 <_printf_float+0x2cc>)
 8004aae:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004ab0:	f7fb ff8e 	bl	80009d0 <__aeabi_dcmple>
 8004ab4:	bb30      	cbnz	r0, 8004b04 <_printf_float+0xc0>
 8004ab6:	2200      	movs	r2, #0
 8004ab8:	2300      	movs	r3, #0
 8004aba:	4650      	mov	r0, sl
 8004abc:	4641      	mov	r1, r8
 8004abe:	f7fb ff7d 	bl	80009bc <__aeabi_dcmplt>
 8004ac2:	b110      	cbz	r0, 8004aca <_printf_float+0x86>
 8004ac4:	232d      	movs	r3, #45	; 0x2d
 8004ac6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004aca:	4a92      	ldr	r2, [pc, #584]	; (8004d14 <_printf_float+0x2d0>)
 8004acc:	4b92      	ldr	r3, [pc, #584]	; (8004d18 <_printf_float+0x2d4>)
 8004ace:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8004ad2:	bf94      	ite	ls
 8004ad4:	4690      	movls	r8, r2
 8004ad6:	4698      	movhi	r8, r3
 8004ad8:	2303      	movs	r3, #3
 8004ada:	f04f 0a00 	mov.w	sl, #0
 8004ade:	6123      	str	r3, [r4, #16]
 8004ae0:	f02b 0304 	bic.w	r3, fp, #4
 8004ae4:	6023      	str	r3, [r4, #0]
 8004ae6:	4633      	mov	r3, r6
 8004ae8:	4621      	mov	r1, r4
 8004aea:	4628      	mov	r0, r5
 8004aec:	9700      	str	r7, [sp, #0]
 8004aee:	aa0f      	add	r2, sp, #60	; 0x3c
 8004af0:	f000 f9d6 	bl	8004ea0 <_printf_common>
 8004af4:	3001      	adds	r0, #1
 8004af6:	f040 8090 	bne.w	8004c1a <_printf_float+0x1d6>
 8004afa:	f04f 30ff 	mov.w	r0, #4294967295
 8004afe:	b011      	add	sp, #68	; 0x44
 8004b00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004b04:	4652      	mov	r2, sl
 8004b06:	4643      	mov	r3, r8
 8004b08:	4650      	mov	r0, sl
 8004b0a:	4641      	mov	r1, r8
 8004b0c:	f7fb ff7e 	bl	8000a0c <__aeabi_dcmpun>
 8004b10:	b148      	cbz	r0, 8004b26 <_printf_float+0xe2>
 8004b12:	f1b8 0f00 	cmp.w	r8, #0
 8004b16:	bfb8      	it	lt
 8004b18:	232d      	movlt	r3, #45	; 0x2d
 8004b1a:	4a80      	ldr	r2, [pc, #512]	; (8004d1c <_printf_float+0x2d8>)
 8004b1c:	bfb8      	it	lt
 8004b1e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8004b22:	4b7f      	ldr	r3, [pc, #508]	; (8004d20 <_printf_float+0x2dc>)
 8004b24:	e7d3      	b.n	8004ace <_printf_float+0x8a>
 8004b26:	6863      	ldr	r3, [r4, #4]
 8004b28:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8004b2c:	1c5a      	adds	r2, r3, #1
 8004b2e:	d142      	bne.n	8004bb6 <_printf_float+0x172>
 8004b30:	2306      	movs	r3, #6
 8004b32:	6063      	str	r3, [r4, #4]
 8004b34:	2200      	movs	r2, #0
 8004b36:	9206      	str	r2, [sp, #24]
 8004b38:	aa0e      	add	r2, sp, #56	; 0x38
 8004b3a:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8004b3e:	aa0d      	add	r2, sp, #52	; 0x34
 8004b40:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8004b44:	9203      	str	r2, [sp, #12]
 8004b46:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8004b4a:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8004b4e:	6023      	str	r3, [r4, #0]
 8004b50:	6863      	ldr	r3, [r4, #4]
 8004b52:	4652      	mov	r2, sl
 8004b54:	9300      	str	r3, [sp, #0]
 8004b56:	4628      	mov	r0, r5
 8004b58:	4643      	mov	r3, r8
 8004b5a:	910b      	str	r1, [sp, #44]	; 0x2c
 8004b5c:	f7ff fed6 	bl	800490c <__cvt>
 8004b60:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004b62:	4680      	mov	r8, r0
 8004b64:	2947      	cmp	r1, #71	; 0x47
 8004b66:	990d      	ldr	r1, [sp, #52]	; 0x34
 8004b68:	d108      	bne.n	8004b7c <_printf_float+0x138>
 8004b6a:	1cc8      	adds	r0, r1, #3
 8004b6c:	db02      	blt.n	8004b74 <_printf_float+0x130>
 8004b6e:	6863      	ldr	r3, [r4, #4]
 8004b70:	4299      	cmp	r1, r3
 8004b72:	dd40      	ble.n	8004bf6 <_printf_float+0x1b2>
 8004b74:	f1a9 0902 	sub.w	r9, r9, #2
 8004b78:	fa5f f989 	uxtb.w	r9, r9
 8004b7c:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8004b80:	d81f      	bhi.n	8004bc2 <_printf_float+0x17e>
 8004b82:	464a      	mov	r2, r9
 8004b84:	3901      	subs	r1, #1
 8004b86:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8004b8a:	910d      	str	r1, [sp, #52]	; 0x34
 8004b8c:	f7ff ff1d 	bl	80049ca <__exponent>
 8004b90:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004b92:	4682      	mov	sl, r0
 8004b94:	1813      	adds	r3, r2, r0
 8004b96:	2a01      	cmp	r2, #1
 8004b98:	6123      	str	r3, [r4, #16]
 8004b9a:	dc02      	bgt.n	8004ba2 <_printf_float+0x15e>
 8004b9c:	6822      	ldr	r2, [r4, #0]
 8004b9e:	07d2      	lsls	r2, r2, #31
 8004ba0:	d501      	bpl.n	8004ba6 <_printf_float+0x162>
 8004ba2:	3301      	adds	r3, #1
 8004ba4:	6123      	str	r3, [r4, #16]
 8004ba6:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d09b      	beq.n	8004ae6 <_printf_float+0xa2>
 8004bae:	232d      	movs	r3, #45	; 0x2d
 8004bb0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004bb4:	e797      	b.n	8004ae6 <_printf_float+0xa2>
 8004bb6:	2947      	cmp	r1, #71	; 0x47
 8004bb8:	d1bc      	bne.n	8004b34 <_printf_float+0xf0>
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d1ba      	bne.n	8004b34 <_printf_float+0xf0>
 8004bbe:	2301      	movs	r3, #1
 8004bc0:	e7b7      	b.n	8004b32 <_printf_float+0xee>
 8004bc2:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8004bc6:	d118      	bne.n	8004bfa <_printf_float+0x1b6>
 8004bc8:	2900      	cmp	r1, #0
 8004bca:	6863      	ldr	r3, [r4, #4]
 8004bcc:	dd0b      	ble.n	8004be6 <_printf_float+0x1a2>
 8004bce:	6121      	str	r1, [r4, #16]
 8004bd0:	b913      	cbnz	r3, 8004bd8 <_printf_float+0x194>
 8004bd2:	6822      	ldr	r2, [r4, #0]
 8004bd4:	07d0      	lsls	r0, r2, #31
 8004bd6:	d502      	bpl.n	8004bde <_printf_float+0x19a>
 8004bd8:	3301      	adds	r3, #1
 8004bda:	440b      	add	r3, r1
 8004bdc:	6123      	str	r3, [r4, #16]
 8004bde:	f04f 0a00 	mov.w	sl, #0
 8004be2:	65a1      	str	r1, [r4, #88]	; 0x58
 8004be4:	e7df      	b.n	8004ba6 <_printf_float+0x162>
 8004be6:	b913      	cbnz	r3, 8004bee <_printf_float+0x1aa>
 8004be8:	6822      	ldr	r2, [r4, #0]
 8004bea:	07d2      	lsls	r2, r2, #31
 8004bec:	d501      	bpl.n	8004bf2 <_printf_float+0x1ae>
 8004bee:	3302      	adds	r3, #2
 8004bf0:	e7f4      	b.n	8004bdc <_printf_float+0x198>
 8004bf2:	2301      	movs	r3, #1
 8004bf4:	e7f2      	b.n	8004bdc <_printf_float+0x198>
 8004bf6:	f04f 0967 	mov.w	r9, #103	; 0x67
 8004bfa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004bfc:	4299      	cmp	r1, r3
 8004bfe:	db05      	blt.n	8004c0c <_printf_float+0x1c8>
 8004c00:	6823      	ldr	r3, [r4, #0]
 8004c02:	6121      	str	r1, [r4, #16]
 8004c04:	07d8      	lsls	r0, r3, #31
 8004c06:	d5ea      	bpl.n	8004bde <_printf_float+0x19a>
 8004c08:	1c4b      	adds	r3, r1, #1
 8004c0a:	e7e7      	b.n	8004bdc <_printf_float+0x198>
 8004c0c:	2900      	cmp	r1, #0
 8004c0e:	bfcc      	ite	gt
 8004c10:	2201      	movgt	r2, #1
 8004c12:	f1c1 0202 	rsble	r2, r1, #2
 8004c16:	4413      	add	r3, r2
 8004c18:	e7e0      	b.n	8004bdc <_printf_float+0x198>
 8004c1a:	6823      	ldr	r3, [r4, #0]
 8004c1c:	055a      	lsls	r2, r3, #21
 8004c1e:	d407      	bmi.n	8004c30 <_printf_float+0x1ec>
 8004c20:	6923      	ldr	r3, [r4, #16]
 8004c22:	4642      	mov	r2, r8
 8004c24:	4631      	mov	r1, r6
 8004c26:	4628      	mov	r0, r5
 8004c28:	47b8      	blx	r7
 8004c2a:	3001      	adds	r0, #1
 8004c2c:	d12b      	bne.n	8004c86 <_printf_float+0x242>
 8004c2e:	e764      	b.n	8004afa <_printf_float+0xb6>
 8004c30:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8004c34:	f240 80dd 	bls.w	8004df2 <_printf_float+0x3ae>
 8004c38:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004c3c:	2200      	movs	r2, #0
 8004c3e:	2300      	movs	r3, #0
 8004c40:	f7fb feb2 	bl	80009a8 <__aeabi_dcmpeq>
 8004c44:	2800      	cmp	r0, #0
 8004c46:	d033      	beq.n	8004cb0 <_printf_float+0x26c>
 8004c48:	2301      	movs	r3, #1
 8004c4a:	4631      	mov	r1, r6
 8004c4c:	4628      	mov	r0, r5
 8004c4e:	4a35      	ldr	r2, [pc, #212]	; (8004d24 <_printf_float+0x2e0>)
 8004c50:	47b8      	blx	r7
 8004c52:	3001      	adds	r0, #1
 8004c54:	f43f af51 	beq.w	8004afa <_printf_float+0xb6>
 8004c58:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004c5c:	429a      	cmp	r2, r3
 8004c5e:	db02      	blt.n	8004c66 <_printf_float+0x222>
 8004c60:	6823      	ldr	r3, [r4, #0]
 8004c62:	07d8      	lsls	r0, r3, #31
 8004c64:	d50f      	bpl.n	8004c86 <_printf_float+0x242>
 8004c66:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004c6a:	4631      	mov	r1, r6
 8004c6c:	4628      	mov	r0, r5
 8004c6e:	47b8      	blx	r7
 8004c70:	3001      	adds	r0, #1
 8004c72:	f43f af42 	beq.w	8004afa <_printf_float+0xb6>
 8004c76:	f04f 0800 	mov.w	r8, #0
 8004c7a:	f104 091a 	add.w	r9, r4, #26
 8004c7e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004c80:	3b01      	subs	r3, #1
 8004c82:	4543      	cmp	r3, r8
 8004c84:	dc09      	bgt.n	8004c9a <_printf_float+0x256>
 8004c86:	6823      	ldr	r3, [r4, #0]
 8004c88:	079b      	lsls	r3, r3, #30
 8004c8a:	f100 8104 	bmi.w	8004e96 <_printf_float+0x452>
 8004c8e:	68e0      	ldr	r0, [r4, #12]
 8004c90:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004c92:	4298      	cmp	r0, r3
 8004c94:	bfb8      	it	lt
 8004c96:	4618      	movlt	r0, r3
 8004c98:	e731      	b.n	8004afe <_printf_float+0xba>
 8004c9a:	2301      	movs	r3, #1
 8004c9c:	464a      	mov	r2, r9
 8004c9e:	4631      	mov	r1, r6
 8004ca0:	4628      	mov	r0, r5
 8004ca2:	47b8      	blx	r7
 8004ca4:	3001      	adds	r0, #1
 8004ca6:	f43f af28 	beq.w	8004afa <_printf_float+0xb6>
 8004caa:	f108 0801 	add.w	r8, r8, #1
 8004cae:	e7e6      	b.n	8004c7e <_printf_float+0x23a>
 8004cb0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	dc38      	bgt.n	8004d28 <_printf_float+0x2e4>
 8004cb6:	2301      	movs	r3, #1
 8004cb8:	4631      	mov	r1, r6
 8004cba:	4628      	mov	r0, r5
 8004cbc:	4a19      	ldr	r2, [pc, #100]	; (8004d24 <_printf_float+0x2e0>)
 8004cbe:	47b8      	blx	r7
 8004cc0:	3001      	adds	r0, #1
 8004cc2:	f43f af1a 	beq.w	8004afa <_printf_float+0xb6>
 8004cc6:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8004cca:	4313      	orrs	r3, r2
 8004ccc:	d102      	bne.n	8004cd4 <_printf_float+0x290>
 8004cce:	6823      	ldr	r3, [r4, #0]
 8004cd0:	07d9      	lsls	r1, r3, #31
 8004cd2:	d5d8      	bpl.n	8004c86 <_printf_float+0x242>
 8004cd4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004cd8:	4631      	mov	r1, r6
 8004cda:	4628      	mov	r0, r5
 8004cdc:	47b8      	blx	r7
 8004cde:	3001      	adds	r0, #1
 8004ce0:	f43f af0b 	beq.w	8004afa <_printf_float+0xb6>
 8004ce4:	f04f 0900 	mov.w	r9, #0
 8004ce8:	f104 0a1a 	add.w	sl, r4, #26
 8004cec:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004cee:	425b      	negs	r3, r3
 8004cf0:	454b      	cmp	r3, r9
 8004cf2:	dc01      	bgt.n	8004cf8 <_printf_float+0x2b4>
 8004cf4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004cf6:	e794      	b.n	8004c22 <_printf_float+0x1de>
 8004cf8:	2301      	movs	r3, #1
 8004cfa:	4652      	mov	r2, sl
 8004cfc:	4631      	mov	r1, r6
 8004cfe:	4628      	mov	r0, r5
 8004d00:	47b8      	blx	r7
 8004d02:	3001      	adds	r0, #1
 8004d04:	f43f aef9 	beq.w	8004afa <_printf_float+0xb6>
 8004d08:	f109 0901 	add.w	r9, r9, #1
 8004d0c:	e7ee      	b.n	8004cec <_printf_float+0x2a8>
 8004d0e:	bf00      	nop
 8004d10:	7fefffff 	.word	0x7fefffff
 8004d14:	080077d2 	.word	0x080077d2
 8004d18:	080077d6 	.word	0x080077d6
 8004d1c:	080077da 	.word	0x080077da
 8004d20:	080077de 	.word	0x080077de
 8004d24:	080077e2 	.word	0x080077e2
 8004d28:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004d2a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004d2c:	429a      	cmp	r2, r3
 8004d2e:	bfa8      	it	ge
 8004d30:	461a      	movge	r2, r3
 8004d32:	2a00      	cmp	r2, #0
 8004d34:	4691      	mov	r9, r2
 8004d36:	dc37      	bgt.n	8004da8 <_printf_float+0x364>
 8004d38:	f04f 0b00 	mov.w	fp, #0
 8004d3c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004d40:	f104 021a 	add.w	r2, r4, #26
 8004d44:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8004d48:	ebaa 0309 	sub.w	r3, sl, r9
 8004d4c:	455b      	cmp	r3, fp
 8004d4e:	dc33      	bgt.n	8004db8 <_printf_float+0x374>
 8004d50:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004d54:	429a      	cmp	r2, r3
 8004d56:	db3b      	blt.n	8004dd0 <_printf_float+0x38c>
 8004d58:	6823      	ldr	r3, [r4, #0]
 8004d5a:	07da      	lsls	r2, r3, #31
 8004d5c:	d438      	bmi.n	8004dd0 <_printf_float+0x38c>
 8004d5e:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8004d62:	eba2 0903 	sub.w	r9, r2, r3
 8004d66:	eba2 020a 	sub.w	r2, r2, sl
 8004d6a:	4591      	cmp	r9, r2
 8004d6c:	bfa8      	it	ge
 8004d6e:	4691      	movge	r9, r2
 8004d70:	f1b9 0f00 	cmp.w	r9, #0
 8004d74:	dc34      	bgt.n	8004de0 <_printf_float+0x39c>
 8004d76:	f04f 0800 	mov.w	r8, #0
 8004d7a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004d7e:	f104 0a1a 	add.w	sl, r4, #26
 8004d82:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004d86:	1a9b      	subs	r3, r3, r2
 8004d88:	eba3 0309 	sub.w	r3, r3, r9
 8004d8c:	4543      	cmp	r3, r8
 8004d8e:	f77f af7a 	ble.w	8004c86 <_printf_float+0x242>
 8004d92:	2301      	movs	r3, #1
 8004d94:	4652      	mov	r2, sl
 8004d96:	4631      	mov	r1, r6
 8004d98:	4628      	mov	r0, r5
 8004d9a:	47b8      	blx	r7
 8004d9c:	3001      	adds	r0, #1
 8004d9e:	f43f aeac 	beq.w	8004afa <_printf_float+0xb6>
 8004da2:	f108 0801 	add.w	r8, r8, #1
 8004da6:	e7ec      	b.n	8004d82 <_printf_float+0x33e>
 8004da8:	4613      	mov	r3, r2
 8004daa:	4631      	mov	r1, r6
 8004dac:	4642      	mov	r2, r8
 8004dae:	4628      	mov	r0, r5
 8004db0:	47b8      	blx	r7
 8004db2:	3001      	adds	r0, #1
 8004db4:	d1c0      	bne.n	8004d38 <_printf_float+0x2f4>
 8004db6:	e6a0      	b.n	8004afa <_printf_float+0xb6>
 8004db8:	2301      	movs	r3, #1
 8004dba:	4631      	mov	r1, r6
 8004dbc:	4628      	mov	r0, r5
 8004dbe:	920b      	str	r2, [sp, #44]	; 0x2c
 8004dc0:	47b8      	blx	r7
 8004dc2:	3001      	adds	r0, #1
 8004dc4:	f43f ae99 	beq.w	8004afa <_printf_float+0xb6>
 8004dc8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004dca:	f10b 0b01 	add.w	fp, fp, #1
 8004dce:	e7b9      	b.n	8004d44 <_printf_float+0x300>
 8004dd0:	4631      	mov	r1, r6
 8004dd2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004dd6:	4628      	mov	r0, r5
 8004dd8:	47b8      	blx	r7
 8004dda:	3001      	adds	r0, #1
 8004ddc:	d1bf      	bne.n	8004d5e <_printf_float+0x31a>
 8004dde:	e68c      	b.n	8004afa <_printf_float+0xb6>
 8004de0:	464b      	mov	r3, r9
 8004de2:	4631      	mov	r1, r6
 8004de4:	4628      	mov	r0, r5
 8004de6:	eb08 020a 	add.w	r2, r8, sl
 8004dea:	47b8      	blx	r7
 8004dec:	3001      	adds	r0, #1
 8004dee:	d1c2      	bne.n	8004d76 <_printf_float+0x332>
 8004df0:	e683      	b.n	8004afa <_printf_float+0xb6>
 8004df2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004df4:	2a01      	cmp	r2, #1
 8004df6:	dc01      	bgt.n	8004dfc <_printf_float+0x3b8>
 8004df8:	07db      	lsls	r3, r3, #31
 8004dfa:	d539      	bpl.n	8004e70 <_printf_float+0x42c>
 8004dfc:	2301      	movs	r3, #1
 8004dfe:	4642      	mov	r2, r8
 8004e00:	4631      	mov	r1, r6
 8004e02:	4628      	mov	r0, r5
 8004e04:	47b8      	blx	r7
 8004e06:	3001      	adds	r0, #1
 8004e08:	f43f ae77 	beq.w	8004afa <_printf_float+0xb6>
 8004e0c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004e10:	4631      	mov	r1, r6
 8004e12:	4628      	mov	r0, r5
 8004e14:	47b8      	blx	r7
 8004e16:	3001      	adds	r0, #1
 8004e18:	f43f ae6f 	beq.w	8004afa <_printf_float+0xb6>
 8004e1c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004e20:	2200      	movs	r2, #0
 8004e22:	2300      	movs	r3, #0
 8004e24:	f8dd 9038 	ldr.w	r9, [sp, #56]	; 0x38
 8004e28:	f7fb fdbe 	bl	80009a8 <__aeabi_dcmpeq>
 8004e2c:	b9d8      	cbnz	r0, 8004e66 <_printf_float+0x422>
 8004e2e:	f109 33ff 	add.w	r3, r9, #4294967295
 8004e32:	f108 0201 	add.w	r2, r8, #1
 8004e36:	4631      	mov	r1, r6
 8004e38:	4628      	mov	r0, r5
 8004e3a:	47b8      	blx	r7
 8004e3c:	3001      	adds	r0, #1
 8004e3e:	d10e      	bne.n	8004e5e <_printf_float+0x41a>
 8004e40:	e65b      	b.n	8004afa <_printf_float+0xb6>
 8004e42:	2301      	movs	r3, #1
 8004e44:	464a      	mov	r2, r9
 8004e46:	4631      	mov	r1, r6
 8004e48:	4628      	mov	r0, r5
 8004e4a:	47b8      	blx	r7
 8004e4c:	3001      	adds	r0, #1
 8004e4e:	f43f ae54 	beq.w	8004afa <_printf_float+0xb6>
 8004e52:	f108 0801 	add.w	r8, r8, #1
 8004e56:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004e58:	3b01      	subs	r3, #1
 8004e5a:	4543      	cmp	r3, r8
 8004e5c:	dcf1      	bgt.n	8004e42 <_printf_float+0x3fe>
 8004e5e:	4653      	mov	r3, sl
 8004e60:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8004e64:	e6de      	b.n	8004c24 <_printf_float+0x1e0>
 8004e66:	f04f 0800 	mov.w	r8, #0
 8004e6a:	f104 091a 	add.w	r9, r4, #26
 8004e6e:	e7f2      	b.n	8004e56 <_printf_float+0x412>
 8004e70:	2301      	movs	r3, #1
 8004e72:	4642      	mov	r2, r8
 8004e74:	e7df      	b.n	8004e36 <_printf_float+0x3f2>
 8004e76:	2301      	movs	r3, #1
 8004e78:	464a      	mov	r2, r9
 8004e7a:	4631      	mov	r1, r6
 8004e7c:	4628      	mov	r0, r5
 8004e7e:	47b8      	blx	r7
 8004e80:	3001      	adds	r0, #1
 8004e82:	f43f ae3a 	beq.w	8004afa <_printf_float+0xb6>
 8004e86:	f108 0801 	add.w	r8, r8, #1
 8004e8a:	68e3      	ldr	r3, [r4, #12]
 8004e8c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8004e8e:	1a5b      	subs	r3, r3, r1
 8004e90:	4543      	cmp	r3, r8
 8004e92:	dcf0      	bgt.n	8004e76 <_printf_float+0x432>
 8004e94:	e6fb      	b.n	8004c8e <_printf_float+0x24a>
 8004e96:	f04f 0800 	mov.w	r8, #0
 8004e9a:	f104 0919 	add.w	r9, r4, #25
 8004e9e:	e7f4      	b.n	8004e8a <_printf_float+0x446>

08004ea0 <_printf_common>:
 8004ea0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004ea4:	4616      	mov	r6, r2
 8004ea6:	4699      	mov	r9, r3
 8004ea8:	688a      	ldr	r2, [r1, #8]
 8004eaa:	690b      	ldr	r3, [r1, #16]
 8004eac:	4607      	mov	r7, r0
 8004eae:	4293      	cmp	r3, r2
 8004eb0:	bfb8      	it	lt
 8004eb2:	4613      	movlt	r3, r2
 8004eb4:	6033      	str	r3, [r6, #0]
 8004eb6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004eba:	460c      	mov	r4, r1
 8004ebc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004ec0:	b10a      	cbz	r2, 8004ec6 <_printf_common+0x26>
 8004ec2:	3301      	adds	r3, #1
 8004ec4:	6033      	str	r3, [r6, #0]
 8004ec6:	6823      	ldr	r3, [r4, #0]
 8004ec8:	0699      	lsls	r1, r3, #26
 8004eca:	bf42      	ittt	mi
 8004ecc:	6833      	ldrmi	r3, [r6, #0]
 8004ece:	3302      	addmi	r3, #2
 8004ed0:	6033      	strmi	r3, [r6, #0]
 8004ed2:	6825      	ldr	r5, [r4, #0]
 8004ed4:	f015 0506 	ands.w	r5, r5, #6
 8004ed8:	d106      	bne.n	8004ee8 <_printf_common+0x48>
 8004eda:	f104 0a19 	add.w	sl, r4, #25
 8004ede:	68e3      	ldr	r3, [r4, #12]
 8004ee0:	6832      	ldr	r2, [r6, #0]
 8004ee2:	1a9b      	subs	r3, r3, r2
 8004ee4:	42ab      	cmp	r3, r5
 8004ee6:	dc2b      	bgt.n	8004f40 <_printf_common+0xa0>
 8004ee8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004eec:	1e13      	subs	r3, r2, #0
 8004eee:	6822      	ldr	r2, [r4, #0]
 8004ef0:	bf18      	it	ne
 8004ef2:	2301      	movne	r3, #1
 8004ef4:	0692      	lsls	r2, r2, #26
 8004ef6:	d430      	bmi.n	8004f5a <_printf_common+0xba>
 8004ef8:	4649      	mov	r1, r9
 8004efa:	4638      	mov	r0, r7
 8004efc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004f00:	47c0      	blx	r8
 8004f02:	3001      	adds	r0, #1
 8004f04:	d023      	beq.n	8004f4e <_printf_common+0xae>
 8004f06:	6823      	ldr	r3, [r4, #0]
 8004f08:	6922      	ldr	r2, [r4, #16]
 8004f0a:	f003 0306 	and.w	r3, r3, #6
 8004f0e:	2b04      	cmp	r3, #4
 8004f10:	bf14      	ite	ne
 8004f12:	2500      	movne	r5, #0
 8004f14:	6833      	ldreq	r3, [r6, #0]
 8004f16:	f04f 0600 	mov.w	r6, #0
 8004f1a:	bf08      	it	eq
 8004f1c:	68e5      	ldreq	r5, [r4, #12]
 8004f1e:	f104 041a 	add.w	r4, r4, #26
 8004f22:	bf08      	it	eq
 8004f24:	1aed      	subeq	r5, r5, r3
 8004f26:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8004f2a:	bf08      	it	eq
 8004f2c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004f30:	4293      	cmp	r3, r2
 8004f32:	bfc4      	itt	gt
 8004f34:	1a9b      	subgt	r3, r3, r2
 8004f36:	18ed      	addgt	r5, r5, r3
 8004f38:	42b5      	cmp	r5, r6
 8004f3a:	d11a      	bne.n	8004f72 <_printf_common+0xd2>
 8004f3c:	2000      	movs	r0, #0
 8004f3e:	e008      	b.n	8004f52 <_printf_common+0xb2>
 8004f40:	2301      	movs	r3, #1
 8004f42:	4652      	mov	r2, sl
 8004f44:	4649      	mov	r1, r9
 8004f46:	4638      	mov	r0, r7
 8004f48:	47c0      	blx	r8
 8004f4a:	3001      	adds	r0, #1
 8004f4c:	d103      	bne.n	8004f56 <_printf_common+0xb6>
 8004f4e:	f04f 30ff 	mov.w	r0, #4294967295
 8004f52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004f56:	3501      	adds	r5, #1
 8004f58:	e7c1      	b.n	8004ede <_printf_common+0x3e>
 8004f5a:	2030      	movs	r0, #48	; 0x30
 8004f5c:	18e1      	adds	r1, r4, r3
 8004f5e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004f62:	1c5a      	adds	r2, r3, #1
 8004f64:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004f68:	4422      	add	r2, r4
 8004f6a:	3302      	adds	r3, #2
 8004f6c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004f70:	e7c2      	b.n	8004ef8 <_printf_common+0x58>
 8004f72:	2301      	movs	r3, #1
 8004f74:	4622      	mov	r2, r4
 8004f76:	4649      	mov	r1, r9
 8004f78:	4638      	mov	r0, r7
 8004f7a:	47c0      	blx	r8
 8004f7c:	3001      	adds	r0, #1
 8004f7e:	d0e6      	beq.n	8004f4e <_printf_common+0xae>
 8004f80:	3601      	adds	r6, #1
 8004f82:	e7d9      	b.n	8004f38 <_printf_common+0x98>

08004f84 <_printf_i>:
 8004f84:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004f88:	7e0f      	ldrb	r7, [r1, #24]
 8004f8a:	4691      	mov	r9, r2
 8004f8c:	2f78      	cmp	r7, #120	; 0x78
 8004f8e:	4680      	mov	r8, r0
 8004f90:	460c      	mov	r4, r1
 8004f92:	469a      	mov	sl, r3
 8004f94:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004f96:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004f9a:	d807      	bhi.n	8004fac <_printf_i+0x28>
 8004f9c:	2f62      	cmp	r7, #98	; 0x62
 8004f9e:	d80a      	bhi.n	8004fb6 <_printf_i+0x32>
 8004fa0:	2f00      	cmp	r7, #0
 8004fa2:	f000 80d5 	beq.w	8005150 <_printf_i+0x1cc>
 8004fa6:	2f58      	cmp	r7, #88	; 0x58
 8004fa8:	f000 80c1 	beq.w	800512e <_printf_i+0x1aa>
 8004fac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004fb0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004fb4:	e03a      	b.n	800502c <_printf_i+0xa8>
 8004fb6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004fba:	2b15      	cmp	r3, #21
 8004fbc:	d8f6      	bhi.n	8004fac <_printf_i+0x28>
 8004fbe:	a101      	add	r1, pc, #4	; (adr r1, 8004fc4 <_printf_i+0x40>)
 8004fc0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004fc4:	0800501d 	.word	0x0800501d
 8004fc8:	08005031 	.word	0x08005031
 8004fcc:	08004fad 	.word	0x08004fad
 8004fd0:	08004fad 	.word	0x08004fad
 8004fd4:	08004fad 	.word	0x08004fad
 8004fd8:	08004fad 	.word	0x08004fad
 8004fdc:	08005031 	.word	0x08005031
 8004fe0:	08004fad 	.word	0x08004fad
 8004fe4:	08004fad 	.word	0x08004fad
 8004fe8:	08004fad 	.word	0x08004fad
 8004fec:	08004fad 	.word	0x08004fad
 8004ff0:	08005137 	.word	0x08005137
 8004ff4:	0800505d 	.word	0x0800505d
 8004ff8:	080050f1 	.word	0x080050f1
 8004ffc:	08004fad 	.word	0x08004fad
 8005000:	08004fad 	.word	0x08004fad
 8005004:	08005159 	.word	0x08005159
 8005008:	08004fad 	.word	0x08004fad
 800500c:	0800505d 	.word	0x0800505d
 8005010:	08004fad 	.word	0x08004fad
 8005014:	08004fad 	.word	0x08004fad
 8005018:	080050f9 	.word	0x080050f9
 800501c:	682b      	ldr	r3, [r5, #0]
 800501e:	1d1a      	adds	r2, r3, #4
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	602a      	str	r2, [r5, #0]
 8005024:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005028:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800502c:	2301      	movs	r3, #1
 800502e:	e0a0      	b.n	8005172 <_printf_i+0x1ee>
 8005030:	6820      	ldr	r0, [r4, #0]
 8005032:	682b      	ldr	r3, [r5, #0]
 8005034:	0607      	lsls	r7, r0, #24
 8005036:	f103 0104 	add.w	r1, r3, #4
 800503a:	6029      	str	r1, [r5, #0]
 800503c:	d501      	bpl.n	8005042 <_printf_i+0xbe>
 800503e:	681e      	ldr	r6, [r3, #0]
 8005040:	e003      	b.n	800504a <_printf_i+0xc6>
 8005042:	0646      	lsls	r6, r0, #25
 8005044:	d5fb      	bpl.n	800503e <_printf_i+0xba>
 8005046:	f9b3 6000 	ldrsh.w	r6, [r3]
 800504a:	2e00      	cmp	r6, #0
 800504c:	da03      	bge.n	8005056 <_printf_i+0xd2>
 800504e:	232d      	movs	r3, #45	; 0x2d
 8005050:	4276      	negs	r6, r6
 8005052:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005056:	230a      	movs	r3, #10
 8005058:	4859      	ldr	r0, [pc, #356]	; (80051c0 <_printf_i+0x23c>)
 800505a:	e012      	b.n	8005082 <_printf_i+0xfe>
 800505c:	682b      	ldr	r3, [r5, #0]
 800505e:	6820      	ldr	r0, [r4, #0]
 8005060:	1d19      	adds	r1, r3, #4
 8005062:	6029      	str	r1, [r5, #0]
 8005064:	0605      	lsls	r5, r0, #24
 8005066:	d501      	bpl.n	800506c <_printf_i+0xe8>
 8005068:	681e      	ldr	r6, [r3, #0]
 800506a:	e002      	b.n	8005072 <_printf_i+0xee>
 800506c:	0641      	lsls	r1, r0, #25
 800506e:	d5fb      	bpl.n	8005068 <_printf_i+0xe4>
 8005070:	881e      	ldrh	r6, [r3, #0]
 8005072:	2f6f      	cmp	r7, #111	; 0x6f
 8005074:	bf0c      	ite	eq
 8005076:	2308      	moveq	r3, #8
 8005078:	230a      	movne	r3, #10
 800507a:	4851      	ldr	r0, [pc, #324]	; (80051c0 <_printf_i+0x23c>)
 800507c:	2100      	movs	r1, #0
 800507e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005082:	6865      	ldr	r5, [r4, #4]
 8005084:	2d00      	cmp	r5, #0
 8005086:	bfa8      	it	ge
 8005088:	6821      	ldrge	r1, [r4, #0]
 800508a:	60a5      	str	r5, [r4, #8]
 800508c:	bfa4      	itt	ge
 800508e:	f021 0104 	bicge.w	r1, r1, #4
 8005092:	6021      	strge	r1, [r4, #0]
 8005094:	b90e      	cbnz	r6, 800509a <_printf_i+0x116>
 8005096:	2d00      	cmp	r5, #0
 8005098:	d04b      	beq.n	8005132 <_printf_i+0x1ae>
 800509a:	4615      	mov	r5, r2
 800509c:	fbb6 f1f3 	udiv	r1, r6, r3
 80050a0:	fb03 6711 	mls	r7, r3, r1, r6
 80050a4:	5dc7      	ldrb	r7, [r0, r7]
 80050a6:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80050aa:	4637      	mov	r7, r6
 80050ac:	42bb      	cmp	r3, r7
 80050ae:	460e      	mov	r6, r1
 80050b0:	d9f4      	bls.n	800509c <_printf_i+0x118>
 80050b2:	2b08      	cmp	r3, #8
 80050b4:	d10b      	bne.n	80050ce <_printf_i+0x14a>
 80050b6:	6823      	ldr	r3, [r4, #0]
 80050b8:	07de      	lsls	r6, r3, #31
 80050ba:	d508      	bpl.n	80050ce <_printf_i+0x14a>
 80050bc:	6923      	ldr	r3, [r4, #16]
 80050be:	6861      	ldr	r1, [r4, #4]
 80050c0:	4299      	cmp	r1, r3
 80050c2:	bfde      	ittt	le
 80050c4:	2330      	movle	r3, #48	; 0x30
 80050c6:	f805 3c01 	strble.w	r3, [r5, #-1]
 80050ca:	f105 35ff 	addle.w	r5, r5, #4294967295
 80050ce:	1b52      	subs	r2, r2, r5
 80050d0:	6122      	str	r2, [r4, #16]
 80050d2:	464b      	mov	r3, r9
 80050d4:	4621      	mov	r1, r4
 80050d6:	4640      	mov	r0, r8
 80050d8:	f8cd a000 	str.w	sl, [sp]
 80050dc:	aa03      	add	r2, sp, #12
 80050de:	f7ff fedf 	bl	8004ea0 <_printf_common>
 80050e2:	3001      	adds	r0, #1
 80050e4:	d14a      	bne.n	800517c <_printf_i+0x1f8>
 80050e6:	f04f 30ff 	mov.w	r0, #4294967295
 80050ea:	b004      	add	sp, #16
 80050ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80050f0:	6823      	ldr	r3, [r4, #0]
 80050f2:	f043 0320 	orr.w	r3, r3, #32
 80050f6:	6023      	str	r3, [r4, #0]
 80050f8:	2778      	movs	r7, #120	; 0x78
 80050fa:	4832      	ldr	r0, [pc, #200]	; (80051c4 <_printf_i+0x240>)
 80050fc:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005100:	6823      	ldr	r3, [r4, #0]
 8005102:	6829      	ldr	r1, [r5, #0]
 8005104:	061f      	lsls	r7, r3, #24
 8005106:	f851 6b04 	ldr.w	r6, [r1], #4
 800510a:	d402      	bmi.n	8005112 <_printf_i+0x18e>
 800510c:	065f      	lsls	r7, r3, #25
 800510e:	bf48      	it	mi
 8005110:	b2b6      	uxthmi	r6, r6
 8005112:	07df      	lsls	r7, r3, #31
 8005114:	bf48      	it	mi
 8005116:	f043 0320 	orrmi.w	r3, r3, #32
 800511a:	6029      	str	r1, [r5, #0]
 800511c:	bf48      	it	mi
 800511e:	6023      	strmi	r3, [r4, #0]
 8005120:	b91e      	cbnz	r6, 800512a <_printf_i+0x1a6>
 8005122:	6823      	ldr	r3, [r4, #0]
 8005124:	f023 0320 	bic.w	r3, r3, #32
 8005128:	6023      	str	r3, [r4, #0]
 800512a:	2310      	movs	r3, #16
 800512c:	e7a6      	b.n	800507c <_printf_i+0xf8>
 800512e:	4824      	ldr	r0, [pc, #144]	; (80051c0 <_printf_i+0x23c>)
 8005130:	e7e4      	b.n	80050fc <_printf_i+0x178>
 8005132:	4615      	mov	r5, r2
 8005134:	e7bd      	b.n	80050b2 <_printf_i+0x12e>
 8005136:	682b      	ldr	r3, [r5, #0]
 8005138:	6826      	ldr	r6, [r4, #0]
 800513a:	1d18      	adds	r0, r3, #4
 800513c:	6961      	ldr	r1, [r4, #20]
 800513e:	6028      	str	r0, [r5, #0]
 8005140:	0635      	lsls	r5, r6, #24
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	d501      	bpl.n	800514a <_printf_i+0x1c6>
 8005146:	6019      	str	r1, [r3, #0]
 8005148:	e002      	b.n	8005150 <_printf_i+0x1cc>
 800514a:	0670      	lsls	r0, r6, #25
 800514c:	d5fb      	bpl.n	8005146 <_printf_i+0x1c2>
 800514e:	8019      	strh	r1, [r3, #0]
 8005150:	2300      	movs	r3, #0
 8005152:	4615      	mov	r5, r2
 8005154:	6123      	str	r3, [r4, #16]
 8005156:	e7bc      	b.n	80050d2 <_printf_i+0x14e>
 8005158:	682b      	ldr	r3, [r5, #0]
 800515a:	2100      	movs	r1, #0
 800515c:	1d1a      	adds	r2, r3, #4
 800515e:	602a      	str	r2, [r5, #0]
 8005160:	681d      	ldr	r5, [r3, #0]
 8005162:	6862      	ldr	r2, [r4, #4]
 8005164:	4628      	mov	r0, r5
 8005166:	f000 fac4 	bl	80056f2 <memchr>
 800516a:	b108      	cbz	r0, 8005170 <_printf_i+0x1ec>
 800516c:	1b40      	subs	r0, r0, r5
 800516e:	6060      	str	r0, [r4, #4]
 8005170:	6863      	ldr	r3, [r4, #4]
 8005172:	6123      	str	r3, [r4, #16]
 8005174:	2300      	movs	r3, #0
 8005176:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800517a:	e7aa      	b.n	80050d2 <_printf_i+0x14e>
 800517c:	462a      	mov	r2, r5
 800517e:	4649      	mov	r1, r9
 8005180:	4640      	mov	r0, r8
 8005182:	6923      	ldr	r3, [r4, #16]
 8005184:	47d0      	blx	sl
 8005186:	3001      	adds	r0, #1
 8005188:	d0ad      	beq.n	80050e6 <_printf_i+0x162>
 800518a:	6823      	ldr	r3, [r4, #0]
 800518c:	079b      	lsls	r3, r3, #30
 800518e:	d413      	bmi.n	80051b8 <_printf_i+0x234>
 8005190:	68e0      	ldr	r0, [r4, #12]
 8005192:	9b03      	ldr	r3, [sp, #12]
 8005194:	4298      	cmp	r0, r3
 8005196:	bfb8      	it	lt
 8005198:	4618      	movlt	r0, r3
 800519a:	e7a6      	b.n	80050ea <_printf_i+0x166>
 800519c:	2301      	movs	r3, #1
 800519e:	4632      	mov	r2, r6
 80051a0:	4649      	mov	r1, r9
 80051a2:	4640      	mov	r0, r8
 80051a4:	47d0      	blx	sl
 80051a6:	3001      	adds	r0, #1
 80051a8:	d09d      	beq.n	80050e6 <_printf_i+0x162>
 80051aa:	3501      	adds	r5, #1
 80051ac:	68e3      	ldr	r3, [r4, #12]
 80051ae:	9903      	ldr	r1, [sp, #12]
 80051b0:	1a5b      	subs	r3, r3, r1
 80051b2:	42ab      	cmp	r3, r5
 80051b4:	dcf2      	bgt.n	800519c <_printf_i+0x218>
 80051b6:	e7eb      	b.n	8005190 <_printf_i+0x20c>
 80051b8:	2500      	movs	r5, #0
 80051ba:	f104 0619 	add.w	r6, r4, #25
 80051be:	e7f5      	b.n	80051ac <_printf_i+0x228>
 80051c0:	080077e4 	.word	0x080077e4
 80051c4:	080077f5 	.word	0x080077f5

080051c8 <std>:
 80051c8:	2300      	movs	r3, #0
 80051ca:	b510      	push	{r4, lr}
 80051cc:	4604      	mov	r4, r0
 80051ce:	e9c0 3300 	strd	r3, r3, [r0]
 80051d2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80051d6:	6083      	str	r3, [r0, #8]
 80051d8:	8181      	strh	r1, [r0, #12]
 80051da:	6643      	str	r3, [r0, #100]	; 0x64
 80051dc:	81c2      	strh	r2, [r0, #14]
 80051de:	6183      	str	r3, [r0, #24]
 80051e0:	4619      	mov	r1, r3
 80051e2:	2208      	movs	r2, #8
 80051e4:	305c      	adds	r0, #92	; 0x5c
 80051e6:	f000 fa05 	bl	80055f4 <memset>
 80051ea:	4b0d      	ldr	r3, [pc, #52]	; (8005220 <std+0x58>)
 80051ec:	6224      	str	r4, [r4, #32]
 80051ee:	6263      	str	r3, [r4, #36]	; 0x24
 80051f0:	4b0c      	ldr	r3, [pc, #48]	; (8005224 <std+0x5c>)
 80051f2:	62a3      	str	r3, [r4, #40]	; 0x28
 80051f4:	4b0c      	ldr	r3, [pc, #48]	; (8005228 <std+0x60>)
 80051f6:	62e3      	str	r3, [r4, #44]	; 0x2c
 80051f8:	4b0c      	ldr	r3, [pc, #48]	; (800522c <std+0x64>)
 80051fa:	6323      	str	r3, [r4, #48]	; 0x30
 80051fc:	4b0c      	ldr	r3, [pc, #48]	; (8005230 <std+0x68>)
 80051fe:	429c      	cmp	r4, r3
 8005200:	d006      	beq.n	8005210 <std+0x48>
 8005202:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8005206:	4294      	cmp	r4, r2
 8005208:	d002      	beq.n	8005210 <std+0x48>
 800520a:	33d0      	adds	r3, #208	; 0xd0
 800520c:	429c      	cmp	r4, r3
 800520e:	d105      	bne.n	800521c <std+0x54>
 8005210:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005214:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005218:	f000 ba68 	b.w	80056ec <__retarget_lock_init_recursive>
 800521c:	bd10      	pop	{r4, pc}
 800521e:	bf00      	nop
 8005220:	08005445 	.word	0x08005445
 8005224:	08005467 	.word	0x08005467
 8005228:	0800549f 	.word	0x0800549f
 800522c:	080054c3 	.word	0x080054c3
 8005230:	20000344 	.word	0x20000344

08005234 <stdio_exit_handler>:
 8005234:	4a02      	ldr	r2, [pc, #8]	; (8005240 <stdio_exit_handler+0xc>)
 8005236:	4903      	ldr	r1, [pc, #12]	; (8005244 <stdio_exit_handler+0x10>)
 8005238:	4803      	ldr	r0, [pc, #12]	; (8005248 <stdio_exit_handler+0x14>)
 800523a:	f000 b869 	b.w	8005310 <_fwalk_sglue>
 800523e:	bf00      	nop
 8005240:	20000020 	.word	0x20000020
 8005244:	08007085 	.word	0x08007085
 8005248:	2000002c 	.word	0x2000002c

0800524c <cleanup_stdio>:
 800524c:	6841      	ldr	r1, [r0, #4]
 800524e:	4b0c      	ldr	r3, [pc, #48]	; (8005280 <cleanup_stdio+0x34>)
 8005250:	b510      	push	{r4, lr}
 8005252:	4299      	cmp	r1, r3
 8005254:	4604      	mov	r4, r0
 8005256:	d001      	beq.n	800525c <cleanup_stdio+0x10>
 8005258:	f001 ff14 	bl	8007084 <_fflush_r>
 800525c:	68a1      	ldr	r1, [r4, #8]
 800525e:	4b09      	ldr	r3, [pc, #36]	; (8005284 <cleanup_stdio+0x38>)
 8005260:	4299      	cmp	r1, r3
 8005262:	d002      	beq.n	800526a <cleanup_stdio+0x1e>
 8005264:	4620      	mov	r0, r4
 8005266:	f001 ff0d 	bl	8007084 <_fflush_r>
 800526a:	68e1      	ldr	r1, [r4, #12]
 800526c:	4b06      	ldr	r3, [pc, #24]	; (8005288 <cleanup_stdio+0x3c>)
 800526e:	4299      	cmp	r1, r3
 8005270:	d004      	beq.n	800527c <cleanup_stdio+0x30>
 8005272:	4620      	mov	r0, r4
 8005274:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005278:	f001 bf04 	b.w	8007084 <_fflush_r>
 800527c:	bd10      	pop	{r4, pc}
 800527e:	bf00      	nop
 8005280:	20000344 	.word	0x20000344
 8005284:	200003ac 	.word	0x200003ac
 8005288:	20000414 	.word	0x20000414

0800528c <global_stdio_init.part.0>:
 800528c:	b510      	push	{r4, lr}
 800528e:	4b0b      	ldr	r3, [pc, #44]	; (80052bc <global_stdio_init.part.0+0x30>)
 8005290:	4c0b      	ldr	r4, [pc, #44]	; (80052c0 <global_stdio_init.part.0+0x34>)
 8005292:	4a0c      	ldr	r2, [pc, #48]	; (80052c4 <global_stdio_init.part.0+0x38>)
 8005294:	4620      	mov	r0, r4
 8005296:	601a      	str	r2, [r3, #0]
 8005298:	2104      	movs	r1, #4
 800529a:	2200      	movs	r2, #0
 800529c:	f7ff ff94 	bl	80051c8 <std>
 80052a0:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80052a4:	2201      	movs	r2, #1
 80052a6:	2109      	movs	r1, #9
 80052a8:	f7ff ff8e 	bl	80051c8 <std>
 80052ac:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80052b0:	2202      	movs	r2, #2
 80052b2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80052b6:	2112      	movs	r1, #18
 80052b8:	f7ff bf86 	b.w	80051c8 <std>
 80052bc:	2000047c 	.word	0x2000047c
 80052c0:	20000344 	.word	0x20000344
 80052c4:	08005235 	.word	0x08005235

080052c8 <__sfp_lock_acquire>:
 80052c8:	4801      	ldr	r0, [pc, #4]	; (80052d0 <__sfp_lock_acquire+0x8>)
 80052ca:	f000 ba10 	b.w	80056ee <__retarget_lock_acquire_recursive>
 80052ce:	bf00      	nop
 80052d0:	20000485 	.word	0x20000485

080052d4 <__sfp_lock_release>:
 80052d4:	4801      	ldr	r0, [pc, #4]	; (80052dc <__sfp_lock_release+0x8>)
 80052d6:	f000 ba0b 	b.w	80056f0 <__retarget_lock_release_recursive>
 80052da:	bf00      	nop
 80052dc:	20000485 	.word	0x20000485

080052e0 <__sinit>:
 80052e0:	b510      	push	{r4, lr}
 80052e2:	4604      	mov	r4, r0
 80052e4:	f7ff fff0 	bl	80052c8 <__sfp_lock_acquire>
 80052e8:	6a23      	ldr	r3, [r4, #32]
 80052ea:	b11b      	cbz	r3, 80052f4 <__sinit+0x14>
 80052ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80052f0:	f7ff bff0 	b.w	80052d4 <__sfp_lock_release>
 80052f4:	4b04      	ldr	r3, [pc, #16]	; (8005308 <__sinit+0x28>)
 80052f6:	6223      	str	r3, [r4, #32]
 80052f8:	4b04      	ldr	r3, [pc, #16]	; (800530c <__sinit+0x2c>)
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d1f5      	bne.n	80052ec <__sinit+0xc>
 8005300:	f7ff ffc4 	bl	800528c <global_stdio_init.part.0>
 8005304:	e7f2      	b.n	80052ec <__sinit+0xc>
 8005306:	bf00      	nop
 8005308:	0800524d 	.word	0x0800524d
 800530c:	2000047c 	.word	0x2000047c

08005310 <_fwalk_sglue>:
 8005310:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005314:	4607      	mov	r7, r0
 8005316:	4688      	mov	r8, r1
 8005318:	4614      	mov	r4, r2
 800531a:	2600      	movs	r6, #0
 800531c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005320:	f1b9 0901 	subs.w	r9, r9, #1
 8005324:	d505      	bpl.n	8005332 <_fwalk_sglue+0x22>
 8005326:	6824      	ldr	r4, [r4, #0]
 8005328:	2c00      	cmp	r4, #0
 800532a:	d1f7      	bne.n	800531c <_fwalk_sglue+0xc>
 800532c:	4630      	mov	r0, r6
 800532e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005332:	89ab      	ldrh	r3, [r5, #12]
 8005334:	2b01      	cmp	r3, #1
 8005336:	d907      	bls.n	8005348 <_fwalk_sglue+0x38>
 8005338:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800533c:	3301      	adds	r3, #1
 800533e:	d003      	beq.n	8005348 <_fwalk_sglue+0x38>
 8005340:	4629      	mov	r1, r5
 8005342:	4638      	mov	r0, r7
 8005344:	47c0      	blx	r8
 8005346:	4306      	orrs	r6, r0
 8005348:	3568      	adds	r5, #104	; 0x68
 800534a:	e7e9      	b.n	8005320 <_fwalk_sglue+0x10>

0800534c <_puts_r>:
 800534c:	6a03      	ldr	r3, [r0, #32]
 800534e:	b570      	push	{r4, r5, r6, lr}
 8005350:	4605      	mov	r5, r0
 8005352:	460e      	mov	r6, r1
 8005354:	6884      	ldr	r4, [r0, #8]
 8005356:	b90b      	cbnz	r3, 800535c <_puts_r+0x10>
 8005358:	f7ff ffc2 	bl	80052e0 <__sinit>
 800535c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800535e:	07db      	lsls	r3, r3, #31
 8005360:	d405      	bmi.n	800536e <_puts_r+0x22>
 8005362:	89a3      	ldrh	r3, [r4, #12]
 8005364:	0598      	lsls	r0, r3, #22
 8005366:	d402      	bmi.n	800536e <_puts_r+0x22>
 8005368:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800536a:	f000 f9c0 	bl	80056ee <__retarget_lock_acquire_recursive>
 800536e:	89a3      	ldrh	r3, [r4, #12]
 8005370:	0719      	lsls	r1, r3, #28
 8005372:	d513      	bpl.n	800539c <_puts_r+0x50>
 8005374:	6923      	ldr	r3, [r4, #16]
 8005376:	b18b      	cbz	r3, 800539c <_puts_r+0x50>
 8005378:	3e01      	subs	r6, #1
 800537a:	68a3      	ldr	r3, [r4, #8]
 800537c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005380:	3b01      	subs	r3, #1
 8005382:	60a3      	str	r3, [r4, #8]
 8005384:	b9e9      	cbnz	r1, 80053c2 <_puts_r+0x76>
 8005386:	2b00      	cmp	r3, #0
 8005388:	da2e      	bge.n	80053e8 <_puts_r+0x9c>
 800538a:	4622      	mov	r2, r4
 800538c:	210a      	movs	r1, #10
 800538e:	4628      	mov	r0, r5
 8005390:	f000 f89b 	bl	80054ca <__swbuf_r>
 8005394:	3001      	adds	r0, #1
 8005396:	d007      	beq.n	80053a8 <_puts_r+0x5c>
 8005398:	250a      	movs	r5, #10
 800539a:	e007      	b.n	80053ac <_puts_r+0x60>
 800539c:	4621      	mov	r1, r4
 800539e:	4628      	mov	r0, r5
 80053a0:	f000 f8d0 	bl	8005544 <__swsetup_r>
 80053a4:	2800      	cmp	r0, #0
 80053a6:	d0e7      	beq.n	8005378 <_puts_r+0x2c>
 80053a8:	f04f 35ff 	mov.w	r5, #4294967295
 80053ac:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80053ae:	07da      	lsls	r2, r3, #31
 80053b0:	d405      	bmi.n	80053be <_puts_r+0x72>
 80053b2:	89a3      	ldrh	r3, [r4, #12]
 80053b4:	059b      	lsls	r3, r3, #22
 80053b6:	d402      	bmi.n	80053be <_puts_r+0x72>
 80053b8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80053ba:	f000 f999 	bl	80056f0 <__retarget_lock_release_recursive>
 80053be:	4628      	mov	r0, r5
 80053c0:	bd70      	pop	{r4, r5, r6, pc}
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	da04      	bge.n	80053d0 <_puts_r+0x84>
 80053c6:	69a2      	ldr	r2, [r4, #24]
 80053c8:	429a      	cmp	r2, r3
 80053ca:	dc06      	bgt.n	80053da <_puts_r+0x8e>
 80053cc:	290a      	cmp	r1, #10
 80053ce:	d004      	beq.n	80053da <_puts_r+0x8e>
 80053d0:	6823      	ldr	r3, [r4, #0]
 80053d2:	1c5a      	adds	r2, r3, #1
 80053d4:	6022      	str	r2, [r4, #0]
 80053d6:	7019      	strb	r1, [r3, #0]
 80053d8:	e7cf      	b.n	800537a <_puts_r+0x2e>
 80053da:	4622      	mov	r2, r4
 80053dc:	4628      	mov	r0, r5
 80053de:	f000 f874 	bl	80054ca <__swbuf_r>
 80053e2:	3001      	adds	r0, #1
 80053e4:	d1c9      	bne.n	800537a <_puts_r+0x2e>
 80053e6:	e7df      	b.n	80053a8 <_puts_r+0x5c>
 80053e8:	250a      	movs	r5, #10
 80053ea:	6823      	ldr	r3, [r4, #0]
 80053ec:	1c5a      	adds	r2, r3, #1
 80053ee:	6022      	str	r2, [r4, #0]
 80053f0:	701d      	strb	r5, [r3, #0]
 80053f2:	e7db      	b.n	80053ac <_puts_r+0x60>

080053f4 <puts>:
 80053f4:	4b02      	ldr	r3, [pc, #8]	; (8005400 <puts+0xc>)
 80053f6:	4601      	mov	r1, r0
 80053f8:	6818      	ldr	r0, [r3, #0]
 80053fa:	f7ff bfa7 	b.w	800534c <_puts_r>
 80053fe:	bf00      	nop
 8005400:	20000078 	.word	0x20000078

08005404 <siprintf>:
 8005404:	b40e      	push	{r1, r2, r3}
 8005406:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800540a:	b500      	push	{lr}
 800540c:	b09c      	sub	sp, #112	; 0x70
 800540e:	ab1d      	add	r3, sp, #116	; 0x74
 8005410:	9002      	str	r0, [sp, #8]
 8005412:	9006      	str	r0, [sp, #24]
 8005414:	9107      	str	r1, [sp, #28]
 8005416:	9104      	str	r1, [sp, #16]
 8005418:	4808      	ldr	r0, [pc, #32]	; (800543c <siprintf+0x38>)
 800541a:	4909      	ldr	r1, [pc, #36]	; (8005440 <siprintf+0x3c>)
 800541c:	f853 2b04 	ldr.w	r2, [r3], #4
 8005420:	9105      	str	r1, [sp, #20]
 8005422:	6800      	ldr	r0, [r0, #0]
 8005424:	a902      	add	r1, sp, #8
 8005426:	9301      	str	r3, [sp, #4]
 8005428:	f001 fcac 	bl	8006d84 <_svfiprintf_r>
 800542c:	2200      	movs	r2, #0
 800542e:	9b02      	ldr	r3, [sp, #8]
 8005430:	701a      	strb	r2, [r3, #0]
 8005432:	b01c      	add	sp, #112	; 0x70
 8005434:	f85d eb04 	ldr.w	lr, [sp], #4
 8005438:	b003      	add	sp, #12
 800543a:	4770      	bx	lr
 800543c:	20000078 	.word	0x20000078
 8005440:	ffff0208 	.word	0xffff0208

08005444 <__sread>:
 8005444:	b510      	push	{r4, lr}
 8005446:	460c      	mov	r4, r1
 8005448:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800544c:	f000 f900 	bl	8005650 <_read_r>
 8005450:	2800      	cmp	r0, #0
 8005452:	bfab      	itete	ge
 8005454:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005456:	89a3      	ldrhlt	r3, [r4, #12]
 8005458:	181b      	addge	r3, r3, r0
 800545a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800545e:	bfac      	ite	ge
 8005460:	6563      	strge	r3, [r4, #84]	; 0x54
 8005462:	81a3      	strhlt	r3, [r4, #12]
 8005464:	bd10      	pop	{r4, pc}

08005466 <__swrite>:
 8005466:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800546a:	461f      	mov	r7, r3
 800546c:	898b      	ldrh	r3, [r1, #12]
 800546e:	4605      	mov	r5, r0
 8005470:	05db      	lsls	r3, r3, #23
 8005472:	460c      	mov	r4, r1
 8005474:	4616      	mov	r6, r2
 8005476:	d505      	bpl.n	8005484 <__swrite+0x1e>
 8005478:	2302      	movs	r3, #2
 800547a:	2200      	movs	r2, #0
 800547c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005480:	f000 f8d4 	bl	800562c <_lseek_r>
 8005484:	89a3      	ldrh	r3, [r4, #12]
 8005486:	4632      	mov	r2, r6
 8005488:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800548c:	81a3      	strh	r3, [r4, #12]
 800548e:	4628      	mov	r0, r5
 8005490:	463b      	mov	r3, r7
 8005492:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005496:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800549a:	f000 b8eb 	b.w	8005674 <_write_r>

0800549e <__sseek>:
 800549e:	b510      	push	{r4, lr}
 80054a0:	460c      	mov	r4, r1
 80054a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80054a6:	f000 f8c1 	bl	800562c <_lseek_r>
 80054aa:	1c43      	adds	r3, r0, #1
 80054ac:	89a3      	ldrh	r3, [r4, #12]
 80054ae:	bf15      	itete	ne
 80054b0:	6560      	strne	r0, [r4, #84]	; 0x54
 80054b2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80054b6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80054ba:	81a3      	strheq	r3, [r4, #12]
 80054bc:	bf18      	it	ne
 80054be:	81a3      	strhne	r3, [r4, #12]
 80054c0:	bd10      	pop	{r4, pc}

080054c2 <__sclose>:
 80054c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80054c6:	f000 b8a1 	b.w	800560c <_close_r>

080054ca <__swbuf_r>:
 80054ca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80054cc:	460e      	mov	r6, r1
 80054ce:	4614      	mov	r4, r2
 80054d0:	4605      	mov	r5, r0
 80054d2:	b118      	cbz	r0, 80054dc <__swbuf_r+0x12>
 80054d4:	6a03      	ldr	r3, [r0, #32]
 80054d6:	b90b      	cbnz	r3, 80054dc <__swbuf_r+0x12>
 80054d8:	f7ff ff02 	bl	80052e0 <__sinit>
 80054dc:	69a3      	ldr	r3, [r4, #24]
 80054de:	60a3      	str	r3, [r4, #8]
 80054e0:	89a3      	ldrh	r3, [r4, #12]
 80054e2:	071a      	lsls	r2, r3, #28
 80054e4:	d525      	bpl.n	8005532 <__swbuf_r+0x68>
 80054e6:	6923      	ldr	r3, [r4, #16]
 80054e8:	b31b      	cbz	r3, 8005532 <__swbuf_r+0x68>
 80054ea:	6823      	ldr	r3, [r4, #0]
 80054ec:	6922      	ldr	r2, [r4, #16]
 80054ee:	b2f6      	uxtb	r6, r6
 80054f0:	1a98      	subs	r0, r3, r2
 80054f2:	6963      	ldr	r3, [r4, #20]
 80054f4:	4637      	mov	r7, r6
 80054f6:	4283      	cmp	r3, r0
 80054f8:	dc04      	bgt.n	8005504 <__swbuf_r+0x3a>
 80054fa:	4621      	mov	r1, r4
 80054fc:	4628      	mov	r0, r5
 80054fe:	f001 fdc1 	bl	8007084 <_fflush_r>
 8005502:	b9e0      	cbnz	r0, 800553e <__swbuf_r+0x74>
 8005504:	68a3      	ldr	r3, [r4, #8]
 8005506:	3b01      	subs	r3, #1
 8005508:	60a3      	str	r3, [r4, #8]
 800550a:	6823      	ldr	r3, [r4, #0]
 800550c:	1c5a      	adds	r2, r3, #1
 800550e:	6022      	str	r2, [r4, #0]
 8005510:	701e      	strb	r6, [r3, #0]
 8005512:	6962      	ldr	r2, [r4, #20]
 8005514:	1c43      	adds	r3, r0, #1
 8005516:	429a      	cmp	r2, r3
 8005518:	d004      	beq.n	8005524 <__swbuf_r+0x5a>
 800551a:	89a3      	ldrh	r3, [r4, #12]
 800551c:	07db      	lsls	r3, r3, #31
 800551e:	d506      	bpl.n	800552e <__swbuf_r+0x64>
 8005520:	2e0a      	cmp	r6, #10
 8005522:	d104      	bne.n	800552e <__swbuf_r+0x64>
 8005524:	4621      	mov	r1, r4
 8005526:	4628      	mov	r0, r5
 8005528:	f001 fdac 	bl	8007084 <_fflush_r>
 800552c:	b938      	cbnz	r0, 800553e <__swbuf_r+0x74>
 800552e:	4638      	mov	r0, r7
 8005530:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005532:	4621      	mov	r1, r4
 8005534:	4628      	mov	r0, r5
 8005536:	f000 f805 	bl	8005544 <__swsetup_r>
 800553a:	2800      	cmp	r0, #0
 800553c:	d0d5      	beq.n	80054ea <__swbuf_r+0x20>
 800553e:	f04f 37ff 	mov.w	r7, #4294967295
 8005542:	e7f4      	b.n	800552e <__swbuf_r+0x64>

08005544 <__swsetup_r>:
 8005544:	b538      	push	{r3, r4, r5, lr}
 8005546:	4b2a      	ldr	r3, [pc, #168]	; (80055f0 <__swsetup_r+0xac>)
 8005548:	4605      	mov	r5, r0
 800554a:	6818      	ldr	r0, [r3, #0]
 800554c:	460c      	mov	r4, r1
 800554e:	b118      	cbz	r0, 8005558 <__swsetup_r+0x14>
 8005550:	6a03      	ldr	r3, [r0, #32]
 8005552:	b90b      	cbnz	r3, 8005558 <__swsetup_r+0x14>
 8005554:	f7ff fec4 	bl	80052e0 <__sinit>
 8005558:	89a3      	ldrh	r3, [r4, #12]
 800555a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800555e:	0718      	lsls	r0, r3, #28
 8005560:	d422      	bmi.n	80055a8 <__swsetup_r+0x64>
 8005562:	06d9      	lsls	r1, r3, #27
 8005564:	d407      	bmi.n	8005576 <__swsetup_r+0x32>
 8005566:	2309      	movs	r3, #9
 8005568:	602b      	str	r3, [r5, #0]
 800556a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800556e:	f04f 30ff 	mov.w	r0, #4294967295
 8005572:	81a3      	strh	r3, [r4, #12]
 8005574:	e034      	b.n	80055e0 <__swsetup_r+0x9c>
 8005576:	0758      	lsls	r0, r3, #29
 8005578:	d512      	bpl.n	80055a0 <__swsetup_r+0x5c>
 800557a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800557c:	b141      	cbz	r1, 8005590 <__swsetup_r+0x4c>
 800557e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005582:	4299      	cmp	r1, r3
 8005584:	d002      	beq.n	800558c <__swsetup_r+0x48>
 8005586:	4628      	mov	r0, r5
 8005588:	f000 ff2e 	bl	80063e8 <_free_r>
 800558c:	2300      	movs	r3, #0
 800558e:	6363      	str	r3, [r4, #52]	; 0x34
 8005590:	89a3      	ldrh	r3, [r4, #12]
 8005592:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005596:	81a3      	strh	r3, [r4, #12]
 8005598:	2300      	movs	r3, #0
 800559a:	6063      	str	r3, [r4, #4]
 800559c:	6923      	ldr	r3, [r4, #16]
 800559e:	6023      	str	r3, [r4, #0]
 80055a0:	89a3      	ldrh	r3, [r4, #12]
 80055a2:	f043 0308 	orr.w	r3, r3, #8
 80055a6:	81a3      	strh	r3, [r4, #12]
 80055a8:	6923      	ldr	r3, [r4, #16]
 80055aa:	b94b      	cbnz	r3, 80055c0 <__swsetup_r+0x7c>
 80055ac:	89a3      	ldrh	r3, [r4, #12]
 80055ae:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80055b2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80055b6:	d003      	beq.n	80055c0 <__swsetup_r+0x7c>
 80055b8:	4621      	mov	r1, r4
 80055ba:	4628      	mov	r0, r5
 80055bc:	f001 fdaf 	bl	800711e <__smakebuf_r>
 80055c0:	89a0      	ldrh	r0, [r4, #12]
 80055c2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80055c6:	f010 0301 	ands.w	r3, r0, #1
 80055ca:	d00a      	beq.n	80055e2 <__swsetup_r+0x9e>
 80055cc:	2300      	movs	r3, #0
 80055ce:	60a3      	str	r3, [r4, #8]
 80055d0:	6963      	ldr	r3, [r4, #20]
 80055d2:	425b      	negs	r3, r3
 80055d4:	61a3      	str	r3, [r4, #24]
 80055d6:	6923      	ldr	r3, [r4, #16]
 80055d8:	b943      	cbnz	r3, 80055ec <__swsetup_r+0xa8>
 80055da:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80055de:	d1c4      	bne.n	800556a <__swsetup_r+0x26>
 80055e0:	bd38      	pop	{r3, r4, r5, pc}
 80055e2:	0781      	lsls	r1, r0, #30
 80055e4:	bf58      	it	pl
 80055e6:	6963      	ldrpl	r3, [r4, #20]
 80055e8:	60a3      	str	r3, [r4, #8]
 80055ea:	e7f4      	b.n	80055d6 <__swsetup_r+0x92>
 80055ec:	2000      	movs	r0, #0
 80055ee:	e7f7      	b.n	80055e0 <__swsetup_r+0x9c>
 80055f0:	20000078 	.word	0x20000078

080055f4 <memset>:
 80055f4:	4603      	mov	r3, r0
 80055f6:	4402      	add	r2, r0
 80055f8:	4293      	cmp	r3, r2
 80055fa:	d100      	bne.n	80055fe <memset+0xa>
 80055fc:	4770      	bx	lr
 80055fe:	f803 1b01 	strb.w	r1, [r3], #1
 8005602:	e7f9      	b.n	80055f8 <memset+0x4>

08005604 <_localeconv_r>:
 8005604:	4800      	ldr	r0, [pc, #0]	; (8005608 <_localeconv_r+0x4>)
 8005606:	4770      	bx	lr
 8005608:	2000016c 	.word	0x2000016c

0800560c <_close_r>:
 800560c:	b538      	push	{r3, r4, r5, lr}
 800560e:	2300      	movs	r3, #0
 8005610:	4d05      	ldr	r5, [pc, #20]	; (8005628 <_close_r+0x1c>)
 8005612:	4604      	mov	r4, r0
 8005614:	4608      	mov	r0, r1
 8005616:	602b      	str	r3, [r5, #0]
 8005618:	f7fc fa6e 	bl	8001af8 <_close>
 800561c:	1c43      	adds	r3, r0, #1
 800561e:	d102      	bne.n	8005626 <_close_r+0x1a>
 8005620:	682b      	ldr	r3, [r5, #0]
 8005622:	b103      	cbz	r3, 8005626 <_close_r+0x1a>
 8005624:	6023      	str	r3, [r4, #0]
 8005626:	bd38      	pop	{r3, r4, r5, pc}
 8005628:	20000480 	.word	0x20000480

0800562c <_lseek_r>:
 800562c:	b538      	push	{r3, r4, r5, lr}
 800562e:	4604      	mov	r4, r0
 8005630:	4608      	mov	r0, r1
 8005632:	4611      	mov	r1, r2
 8005634:	2200      	movs	r2, #0
 8005636:	4d05      	ldr	r5, [pc, #20]	; (800564c <_lseek_r+0x20>)
 8005638:	602a      	str	r2, [r5, #0]
 800563a:	461a      	mov	r2, r3
 800563c:	f7fc fa80 	bl	8001b40 <_lseek>
 8005640:	1c43      	adds	r3, r0, #1
 8005642:	d102      	bne.n	800564a <_lseek_r+0x1e>
 8005644:	682b      	ldr	r3, [r5, #0]
 8005646:	b103      	cbz	r3, 800564a <_lseek_r+0x1e>
 8005648:	6023      	str	r3, [r4, #0]
 800564a:	bd38      	pop	{r3, r4, r5, pc}
 800564c:	20000480 	.word	0x20000480

08005650 <_read_r>:
 8005650:	b538      	push	{r3, r4, r5, lr}
 8005652:	4604      	mov	r4, r0
 8005654:	4608      	mov	r0, r1
 8005656:	4611      	mov	r1, r2
 8005658:	2200      	movs	r2, #0
 800565a:	4d05      	ldr	r5, [pc, #20]	; (8005670 <_read_r+0x20>)
 800565c:	602a      	str	r2, [r5, #0]
 800565e:	461a      	mov	r2, r3
 8005660:	f7fc fa11 	bl	8001a86 <_read>
 8005664:	1c43      	adds	r3, r0, #1
 8005666:	d102      	bne.n	800566e <_read_r+0x1e>
 8005668:	682b      	ldr	r3, [r5, #0]
 800566a:	b103      	cbz	r3, 800566e <_read_r+0x1e>
 800566c:	6023      	str	r3, [r4, #0]
 800566e:	bd38      	pop	{r3, r4, r5, pc}
 8005670:	20000480 	.word	0x20000480

08005674 <_write_r>:
 8005674:	b538      	push	{r3, r4, r5, lr}
 8005676:	4604      	mov	r4, r0
 8005678:	4608      	mov	r0, r1
 800567a:	4611      	mov	r1, r2
 800567c:	2200      	movs	r2, #0
 800567e:	4d05      	ldr	r5, [pc, #20]	; (8005694 <_write_r+0x20>)
 8005680:	602a      	str	r2, [r5, #0]
 8005682:	461a      	mov	r2, r3
 8005684:	f7fc fa1c 	bl	8001ac0 <_write>
 8005688:	1c43      	adds	r3, r0, #1
 800568a:	d102      	bne.n	8005692 <_write_r+0x1e>
 800568c:	682b      	ldr	r3, [r5, #0]
 800568e:	b103      	cbz	r3, 8005692 <_write_r+0x1e>
 8005690:	6023      	str	r3, [r4, #0]
 8005692:	bd38      	pop	{r3, r4, r5, pc}
 8005694:	20000480 	.word	0x20000480

08005698 <__errno>:
 8005698:	4b01      	ldr	r3, [pc, #4]	; (80056a0 <__errno+0x8>)
 800569a:	6818      	ldr	r0, [r3, #0]
 800569c:	4770      	bx	lr
 800569e:	bf00      	nop
 80056a0:	20000078 	.word	0x20000078

080056a4 <__libc_init_array>:
 80056a4:	b570      	push	{r4, r5, r6, lr}
 80056a6:	2600      	movs	r6, #0
 80056a8:	4d0c      	ldr	r5, [pc, #48]	; (80056dc <__libc_init_array+0x38>)
 80056aa:	4c0d      	ldr	r4, [pc, #52]	; (80056e0 <__libc_init_array+0x3c>)
 80056ac:	1b64      	subs	r4, r4, r5
 80056ae:	10a4      	asrs	r4, r4, #2
 80056b0:	42a6      	cmp	r6, r4
 80056b2:	d109      	bne.n	80056c8 <__libc_init_array+0x24>
 80056b4:	f001 fff0 	bl	8007698 <_init>
 80056b8:	2600      	movs	r6, #0
 80056ba:	4d0a      	ldr	r5, [pc, #40]	; (80056e4 <__libc_init_array+0x40>)
 80056bc:	4c0a      	ldr	r4, [pc, #40]	; (80056e8 <__libc_init_array+0x44>)
 80056be:	1b64      	subs	r4, r4, r5
 80056c0:	10a4      	asrs	r4, r4, #2
 80056c2:	42a6      	cmp	r6, r4
 80056c4:	d105      	bne.n	80056d2 <__libc_init_array+0x2e>
 80056c6:	bd70      	pop	{r4, r5, r6, pc}
 80056c8:	f855 3b04 	ldr.w	r3, [r5], #4
 80056cc:	4798      	blx	r3
 80056ce:	3601      	adds	r6, #1
 80056d0:	e7ee      	b.n	80056b0 <__libc_init_array+0xc>
 80056d2:	f855 3b04 	ldr.w	r3, [r5], #4
 80056d6:	4798      	blx	r3
 80056d8:	3601      	adds	r6, #1
 80056da:	e7f2      	b.n	80056c2 <__libc_init_array+0x1e>
 80056dc:	08007b44 	.word	0x08007b44
 80056e0:	08007b44 	.word	0x08007b44
 80056e4:	08007b44 	.word	0x08007b44
 80056e8:	08007b48 	.word	0x08007b48

080056ec <__retarget_lock_init_recursive>:
 80056ec:	4770      	bx	lr

080056ee <__retarget_lock_acquire_recursive>:
 80056ee:	4770      	bx	lr

080056f0 <__retarget_lock_release_recursive>:
 80056f0:	4770      	bx	lr

080056f2 <memchr>:
 80056f2:	4603      	mov	r3, r0
 80056f4:	b510      	push	{r4, lr}
 80056f6:	b2c9      	uxtb	r1, r1
 80056f8:	4402      	add	r2, r0
 80056fa:	4293      	cmp	r3, r2
 80056fc:	4618      	mov	r0, r3
 80056fe:	d101      	bne.n	8005704 <memchr+0x12>
 8005700:	2000      	movs	r0, #0
 8005702:	e003      	b.n	800570c <memchr+0x1a>
 8005704:	7804      	ldrb	r4, [r0, #0]
 8005706:	3301      	adds	r3, #1
 8005708:	428c      	cmp	r4, r1
 800570a:	d1f6      	bne.n	80056fa <memchr+0x8>
 800570c:	bd10      	pop	{r4, pc}

0800570e <quorem>:
 800570e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005712:	6903      	ldr	r3, [r0, #16]
 8005714:	690c      	ldr	r4, [r1, #16]
 8005716:	4607      	mov	r7, r0
 8005718:	42a3      	cmp	r3, r4
 800571a:	db7f      	blt.n	800581c <quorem+0x10e>
 800571c:	3c01      	subs	r4, #1
 800571e:	f100 0514 	add.w	r5, r0, #20
 8005722:	f101 0814 	add.w	r8, r1, #20
 8005726:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800572a:	9301      	str	r3, [sp, #4]
 800572c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005730:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005734:	3301      	adds	r3, #1
 8005736:	429a      	cmp	r2, r3
 8005738:	fbb2 f6f3 	udiv	r6, r2, r3
 800573c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8005740:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005744:	d331      	bcc.n	80057aa <quorem+0x9c>
 8005746:	f04f 0e00 	mov.w	lr, #0
 800574a:	4640      	mov	r0, r8
 800574c:	46ac      	mov	ip, r5
 800574e:	46f2      	mov	sl, lr
 8005750:	f850 2b04 	ldr.w	r2, [r0], #4
 8005754:	b293      	uxth	r3, r2
 8005756:	fb06 e303 	mla	r3, r6, r3, lr
 800575a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800575e:	0c1a      	lsrs	r2, r3, #16
 8005760:	b29b      	uxth	r3, r3
 8005762:	fb06 220e 	mla	r2, r6, lr, r2
 8005766:	ebaa 0303 	sub.w	r3, sl, r3
 800576a:	f8dc a000 	ldr.w	sl, [ip]
 800576e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8005772:	fa1f fa8a 	uxth.w	sl, sl
 8005776:	4453      	add	r3, sl
 8005778:	f8dc a000 	ldr.w	sl, [ip]
 800577c:	b292      	uxth	r2, r2
 800577e:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8005782:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005786:	b29b      	uxth	r3, r3
 8005788:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800578c:	4581      	cmp	r9, r0
 800578e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8005792:	f84c 3b04 	str.w	r3, [ip], #4
 8005796:	d2db      	bcs.n	8005750 <quorem+0x42>
 8005798:	f855 300b 	ldr.w	r3, [r5, fp]
 800579c:	b92b      	cbnz	r3, 80057aa <quorem+0x9c>
 800579e:	9b01      	ldr	r3, [sp, #4]
 80057a0:	3b04      	subs	r3, #4
 80057a2:	429d      	cmp	r5, r3
 80057a4:	461a      	mov	r2, r3
 80057a6:	d32d      	bcc.n	8005804 <quorem+0xf6>
 80057a8:	613c      	str	r4, [r7, #16]
 80057aa:	4638      	mov	r0, r7
 80057ac:	f001 f992 	bl	8006ad4 <__mcmp>
 80057b0:	2800      	cmp	r0, #0
 80057b2:	db23      	blt.n	80057fc <quorem+0xee>
 80057b4:	4629      	mov	r1, r5
 80057b6:	2000      	movs	r0, #0
 80057b8:	3601      	adds	r6, #1
 80057ba:	f858 2b04 	ldr.w	r2, [r8], #4
 80057be:	f8d1 c000 	ldr.w	ip, [r1]
 80057c2:	b293      	uxth	r3, r2
 80057c4:	1ac3      	subs	r3, r0, r3
 80057c6:	0c12      	lsrs	r2, r2, #16
 80057c8:	fa1f f08c 	uxth.w	r0, ip
 80057cc:	4403      	add	r3, r0
 80057ce:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 80057d2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80057d6:	b29b      	uxth	r3, r3
 80057d8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80057dc:	45c1      	cmp	r9, r8
 80057de:	ea4f 4022 	mov.w	r0, r2, asr #16
 80057e2:	f841 3b04 	str.w	r3, [r1], #4
 80057e6:	d2e8      	bcs.n	80057ba <quorem+0xac>
 80057e8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80057ec:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80057f0:	b922      	cbnz	r2, 80057fc <quorem+0xee>
 80057f2:	3b04      	subs	r3, #4
 80057f4:	429d      	cmp	r5, r3
 80057f6:	461a      	mov	r2, r3
 80057f8:	d30a      	bcc.n	8005810 <quorem+0x102>
 80057fa:	613c      	str	r4, [r7, #16]
 80057fc:	4630      	mov	r0, r6
 80057fe:	b003      	add	sp, #12
 8005800:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005804:	6812      	ldr	r2, [r2, #0]
 8005806:	3b04      	subs	r3, #4
 8005808:	2a00      	cmp	r2, #0
 800580a:	d1cd      	bne.n	80057a8 <quorem+0x9a>
 800580c:	3c01      	subs	r4, #1
 800580e:	e7c8      	b.n	80057a2 <quorem+0x94>
 8005810:	6812      	ldr	r2, [r2, #0]
 8005812:	3b04      	subs	r3, #4
 8005814:	2a00      	cmp	r2, #0
 8005816:	d1f0      	bne.n	80057fa <quorem+0xec>
 8005818:	3c01      	subs	r4, #1
 800581a:	e7eb      	b.n	80057f4 <quorem+0xe6>
 800581c:	2000      	movs	r0, #0
 800581e:	e7ee      	b.n	80057fe <quorem+0xf0>

08005820 <_dtoa_r>:
 8005820:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005824:	4616      	mov	r6, r2
 8005826:	461f      	mov	r7, r3
 8005828:	69c4      	ldr	r4, [r0, #28]
 800582a:	b099      	sub	sp, #100	; 0x64
 800582c:	4605      	mov	r5, r0
 800582e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8005832:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8005836:	b974      	cbnz	r4, 8005856 <_dtoa_r+0x36>
 8005838:	2010      	movs	r0, #16
 800583a:	f000 fe1d 	bl	8006478 <malloc>
 800583e:	4602      	mov	r2, r0
 8005840:	61e8      	str	r0, [r5, #28]
 8005842:	b920      	cbnz	r0, 800584e <_dtoa_r+0x2e>
 8005844:	21ef      	movs	r1, #239	; 0xef
 8005846:	4bac      	ldr	r3, [pc, #688]	; (8005af8 <_dtoa_r+0x2d8>)
 8005848:	48ac      	ldr	r0, [pc, #688]	; (8005afc <_dtoa_r+0x2dc>)
 800584a:	f001 fcff 	bl	800724c <__assert_func>
 800584e:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005852:	6004      	str	r4, [r0, #0]
 8005854:	60c4      	str	r4, [r0, #12]
 8005856:	69eb      	ldr	r3, [r5, #28]
 8005858:	6819      	ldr	r1, [r3, #0]
 800585a:	b151      	cbz	r1, 8005872 <_dtoa_r+0x52>
 800585c:	685a      	ldr	r2, [r3, #4]
 800585e:	2301      	movs	r3, #1
 8005860:	4093      	lsls	r3, r2
 8005862:	604a      	str	r2, [r1, #4]
 8005864:	608b      	str	r3, [r1, #8]
 8005866:	4628      	mov	r0, r5
 8005868:	f000 fefa 	bl	8006660 <_Bfree>
 800586c:	2200      	movs	r2, #0
 800586e:	69eb      	ldr	r3, [r5, #28]
 8005870:	601a      	str	r2, [r3, #0]
 8005872:	1e3b      	subs	r3, r7, #0
 8005874:	bfaf      	iteee	ge
 8005876:	2300      	movge	r3, #0
 8005878:	2201      	movlt	r2, #1
 800587a:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800587e:	9305      	strlt	r3, [sp, #20]
 8005880:	bfa8      	it	ge
 8005882:	f8c8 3000 	strge.w	r3, [r8]
 8005886:	f8dd 9014 	ldr.w	r9, [sp, #20]
 800588a:	4b9d      	ldr	r3, [pc, #628]	; (8005b00 <_dtoa_r+0x2e0>)
 800588c:	bfb8      	it	lt
 800588e:	f8c8 2000 	strlt.w	r2, [r8]
 8005892:	ea33 0309 	bics.w	r3, r3, r9
 8005896:	d119      	bne.n	80058cc <_dtoa_r+0xac>
 8005898:	f242 730f 	movw	r3, #9999	; 0x270f
 800589c:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800589e:	6013      	str	r3, [r2, #0]
 80058a0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80058a4:	4333      	orrs	r3, r6
 80058a6:	f000 8589 	beq.w	80063bc <_dtoa_r+0xb9c>
 80058aa:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80058ac:	b953      	cbnz	r3, 80058c4 <_dtoa_r+0xa4>
 80058ae:	4b95      	ldr	r3, [pc, #596]	; (8005b04 <_dtoa_r+0x2e4>)
 80058b0:	e023      	b.n	80058fa <_dtoa_r+0xda>
 80058b2:	4b95      	ldr	r3, [pc, #596]	; (8005b08 <_dtoa_r+0x2e8>)
 80058b4:	9303      	str	r3, [sp, #12]
 80058b6:	3308      	adds	r3, #8
 80058b8:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80058ba:	6013      	str	r3, [r2, #0]
 80058bc:	9803      	ldr	r0, [sp, #12]
 80058be:	b019      	add	sp, #100	; 0x64
 80058c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80058c4:	4b8f      	ldr	r3, [pc, #572]	; (8005b04 <_dtoa_r+0x2e4>)
 80058c6:	9303      	str	r3, [sp, #12]
 80058c8:	3303      	adds	r3, #3
 80058ca:	e7f5      	b.n	80058b8 <_dtoa_r+0x98>
 80058cc:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 80058d0:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 80058d4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80058d8:	2200      	movs	r2, #0
 80058da:	2300      	movs	r3, #0
 80058dc:	f7fb f864 	bl	80009a8 <__aeabi_dcmpeq>
 80058e0:	4680      	mov	r8, r0
 80058e2:	b160      	cbz	r0, 80058fe <_dtoa_r+0xde>
 80058e4:	2301      	movs	r3, #1
 80058e6:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80058e8:	6013      	str	r3, [r2, #0]
 80058ea:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	f000 8562 	beq.w	80063b6 <_dtoa_r+0xb96>
 80058f2:	4b86      	ldr	r3, [pc, #536]	; (8005b0c <_dtoa_r+0x2ec>)
 80058f4:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80058f6:	6013      	str	r3, [r2, #0]
 80058f8:	3b01      	subs	r3, #1
 80058fa:	9303      	str	r3, [sp, #12]
 80058fc:	e7de      	b.n	80058bc <_dtoa_r+0x9c>
 80058fe:	ab16      	add	r3, sp, #88	; 0x58
 8005900:	9301      	str	r3, [sp, #4]
 8005902:	ab17      	add	r3, sp, #92	; 0x5c
 8005904:	9300      	str	r3, [sp, #0]
 8005906:	4628      	mov	r0, r5
 8005908:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800590c:	f001 f98a 	bl	8006c24 <__d2b>
 8005910:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8005914:	4682      	mov	sl, r0
 8005916:	2c00      	cmp	r4, #0
 8005918:	d07e      	beq.n	8005a18 <_dtoa_r+0x1f8>
 800591a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800591e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005920:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8005924:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005928:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800592c:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8005930:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8005934:	4619      	mov	r1, r3
 8005936:	2200      	movs	r2, #0
 8005938:	4b75      	ldr	r3, [pc, #468]	; (8005b10 <_dtoa_r+0x2f0>)
 800593a:	f7fa fc15 	bl	8000168 <__aeabi_dsub>
 800593e:	a368      	add	r3, pc, #416	; (adr r3, 8005ae0 <_dtoa_r+0x2c0>)
 8005940:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005944:	f7fa fdc8 	bl	80004d8 <__aeabi_dmul>
 8005948:	a367      	add	r3, pc, #412	; (adr r3, 8005ae8 <_dtoa_r+0x2c8>)
 800594a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800594e:	f7fa fc0d 	bl	800016c <__adddf3>
 8005952:	4606      	mov	r6, r0
 8005954:	4620      	mov	r0, r4
 8005956:	460f      	mov	r7, r1
 8005958:	f7fa fd54 	bl	8000404 <__aeabi_i2d>
 800595c:	a364      	add	r3, pc, #400	; (adr r3, 8005af0 <_dtoa_r+0x2d0>)
 800595e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005962:	f7fa fdb9 	bl	80004d8 <__aeabi_dmul>
 8005966:	4602      	mov	r2, r0
 8005968:	460b      	mov	r3, r1
 800596a:	4630      	mov	r0, r6
 800596c:	4639      	mov	r1, r7
 800596e:	f7fa fbfd 	bl	800016c <__adddf3>
 8005972:	4606      	mov	r6, r0
 8005974:	460f      	mov	r7, r1
 8005976:	f7fb f85f 	bl	8000a38 <__aeabi_d2iz>
 800597a:	2200      	movs	r2, #0
 800597c:	4683      	mov	fp, r0
 800597e:	2300      	movs	r3, #0
 8005980:	4630      	mov	r0, r6
 8005982:	4639      	mov	r1, r7
 8005984:	f7fb f81a 	bl	80009bc <__aeabi_dcmplt>
 8005988:	b148      	cbz	r0, 800599e <_dtoa_r+0x17e>
 800598a:	4658      	mov	r0, fp
 800598c:	f7fa fd3a 	bl	8000404 <__aeabi_i2d>
 8005990:	4632      	mov	r2, r6
 8005992:	463b      	mov	r3, r7
 8005994:	f7fb f808 	bl	80009a8 <__aeabi_dcmpeq>
 8005998:	b908      	cbnz	r0, 800599e <_dtoa_r+0x17e>
 800599a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800599e:	f1bb 0f16 	cmp.w	fp, #22
 80059a2:	d857      	bhi.n	8005a54 <_dtoa_r+0x234>
 80059a4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80059a8:	4b5a      	ldr	r3, [pc, #360]	; (8005b14 <_dtoa_r+0x2f4>)
 80059aa:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80059ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059b2:	f7fb f803 	bl	80009bc <__aeabi_dcmplt>
 80059b6:	2800      	cmp	r0, #0
 80059b8:	d04e      	beq.n	8005a58 <_dtoa_r+0x238>
 80059ba:	2300      	movs	r3, #0
 80059bc:	f10b 3bff 	add.w	fp, fp, #4294967295
 80059c0:	930f      	str	r3, [sp, #60]	; 0x3c
 80059c2:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80059c4:	1b1b      	subs	r3, r3, r4
 80059c6:	1e5a      	subs	r2, r3, #1
 80059c8:	bf46      	itte	mi
 80059ca:	f1c3 0901 	rsbmi	r9, r3, #1
 80059ce:	2300      	movmi	r3, #0
 80059d0:	f04f 0900 	movpl.w	r9, #0
 80059d4:	9209      	str	r2, [sp, #36]	; 0x24
 80059d6:	bf48      	it	mi
 80059d8:	9309      	strmi	r3, [sp, #36]	; 0x24
 80059da:	f1bb 0f00 	cmp.w	fp, #0
 80059de:	db3d      	blt.n	8005a5c <_dtoa_r+0x23c>
 80059e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80059e2:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 80059e6:	445b      	add	r3, fp
 80059e8:	9309      	str	r3, [sp, #36]	; 0x24
 80059ea:	2300      	movs	r3, #0
 80059ec:	930a      	str	r3, [sp, #40]	; 0x28
 80059ee:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80059f0:	2b09      	cmp	r3, #9
 80059f2:	d867      	bhi.n	8005ac4 <_dtoa_r+0x2a4>
 80059f4:	2b05      	cmp	r3, #5
 80059f6:	bfc4      	itt	gt
 80059f8:	3b04      	subgt	r3, #4
 80059fa:	9322      	strgt	r3, [sp, #136]	; 0x88
 80059fc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80059fe:	bfc8      	it	gt
 8005a00:	2400      	movgt	r4, #0
 8005a02:	f1a3 0302 	sub.w	r3, r3, #2
 8005a06:	bfd8      	it	le
 8005a08:	2401      	movle	r4, #1
 8005a0a:	2b03      	cmp	r3, #3
 8005a0c:	f200 8086 	bhi.w	8005b1c <_dtoa_r+0x2fc>
 8005a10:	e8df f003 	tbb	[pc, r3]
 8005a14:	5637392c 	.word	0x5637392c
 8005a18:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8005a1c:	441c      	add	r4, r3
 8005a1e:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8005a22:	2b20      	cmp	r3, #32
 8005a24:	bfc1      	itttt	gt
 8005a26:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8005a2a:	fa09 f903 	lslgt.w	r9, r9, r3
 8005a2e:	f204 4312 	addwgt	r3, r4, #1042	; 0x412
 8005a32:	fa26 f303 	lsrgt.w	r3, r6, r3
 8005a36:	bfd6      	itet	le
 8005a38:	f1c3 0320 	rsble	r3, r3, #32
 8005a3c:	ea49 0003 	orrgt.w	r0, r9, r3
 8005a40:	fa06 f003 	lslle.w	r0, r6, r3
 8005a44:	f7fa fcce 	bl	80003e4 <__aeabi_ui2d>
 8005a48:	2201      	movs	r2, #1
 8005a4a:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8005a4e:	3c01      	subs	r4, #1
 8005a50:	9213      	str	r2, [sp, #76]	; 0x4c
 8005a52:	e76f      	b.n	8005934 <_dtoa_r+0x114>
 8005a54:	2301      	movs	r3, #1
 8005a56:	e7b3      	b.n	80059c0 <_dtoa_r+0x1a0>
 8005a58:	900f      	str	r0, [sp, #60]	; 0x3c
 8005a5a:	e7b2      	b.n	80059c2 <_dtoa_r+0x1a2>
 8005a5c:	f1cb 0300 	rsb	r3, fp, #0
 8005a60:	930a      	str	r3, [sp, #40]	; 0x28
 8005a62:	2300      	movs	r3, #0
 8005a64:	eba9 090b 	sub.w	r9, r9, fp
 8005a68:	930e      	str	r3, [sp, #56]	; 0x38
 8005a6a:	e7c0      	b.n	80059ee <_dtoa_r+0x1ce>
 8005a6c:	2300      	movs	r3, #0
 8005a6e:	930b      	str	r3, [sp, #44]	; 0x2c
 8005a70:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	dc55      	bgt.n	8005b22 <_dtoa_r+0x302>
 8005a76:	2301      	movs	r3, #1
 8005a78:	461a      	mov	r2, r3
 8005a7a:	9306      	str	r3, [sp, #24]
 8005a7c:	9308      	str	r3, [sp, #32]
 8005a7e:	9223      	str	r2, [sp, #140]	; 0x8c
 8005a80:	e00b      	b.n	8005a9a <_dtoa_r+0x27a>
 8005a82:	2301      	movs	r3, #1
 8005a84:	e7f3      	b.n	8005a6e <_dtoa_r+0x24e>
 8005a86:	2300      	movs	r3, #0
 8005a88:	930b      	str	r3, [sp, #44]	; 0x2c
 8005a8a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005a8c:	445b      	add	r3, fp
 8005a8e:	9306      	str	r3, [sp, #24]
 8005a90:	3301      	adds	r3, #1
 8005a92:	2b01      	cmp	r3, #1
 8005a94:	9308      	str	r3, [sp, #32]
 8005a96:	bfb8      	it	lt
 8005a98:	2301      	movlt	r3, #1
 8005a9a:	2100      	movs	r1, #0
 8005a9c:	2204      	movs	r2, #4
 8005a9e:	69e8      	ldr	r0, [r5, #28]
 8005aa0:	f102 0614 	add.w	r6, r2, #20
 8005aa4:	429e      	cmp	r6, r3
 8005aa6:	d940      	bls.n	8005b2a <_dtoa_r+0x30a>
 8005aa8:	6041      	str	r1, [r0, #4]
 8005aaa:	4628      	mov	r0, r5
 8005aac:	f000 fd98 	bl	80065e0 <_Balloc>
 8005ab0:	9003      	str	r0, [sp, #12]
 8005ab2:	2800      	cmp	r0, #0
 8005ab4:	d13c      	bne.n	8005b30 <_dtoa_r+0x310>
 8005ab6:	4602      	mov	r2, r0
 8005ab8:	f240 11af 	movw	r1, #431	; 0x1af
 8005abc:	4b16      	ldr	r3, [pc, #88]	; (8005b18 <_dtoa_r+0x2f8>)
 8005abe:	e6c3      	b.n	8005848 <_dtoa_r+0x28>
 8005ac0:	2301      	movs	r3, #1
 8005ac2:	e7e1      	b.n	8005a88 <_dtoa_r+0x268>
 8005ac4:	2401      	movs	r4, #1
 8005ac6:	2300      	movs	r3, #0
 8005ac8:	940b      	str	r4, [sp, #44]	; 0x2c
 8005aca:	9322      	str	r3, [sp, #136]	; 0x88
 8005acc:	f04f 33ff 	mov.w	r3, #4294967295
 8005ad0:	2200      	movs	r2, #0
 8005ad2:	9306      	str	r3, [sp, #24]
 8005ad4:	9308      	str	r3, [sp, #32]
 8005ad6:	2312      	movs	r3, #18
 8005ad8:	e7d1      	b.n	8005a7e <_dtoa_r+0x25e>
 8005ada:	bf00      	nop
 8005adc:	f3af 8000 	nop.w
 8005ae0:	636f4361 	.word	0x636f4361
 8005ae4:	3fd287a7 	.word	0x3fd287a7
 8005ae8:	8b60c8b3 	.word	0x8b60c8b3
 8005aec:	3fc68a28 	.word	0x3fc68a28
 8005af0:	509f79fb 	.word	0x509f79fb
 8005af4:	3fd34413 	.word	0x3fd34413
 8005af8:	08007813 	.word	0x08007813
 8005afc:	0800782a 	.word	0x0800782a
 8005b00:	7ff00000 	.word	0x7ff00000
 8005b04:	0800780f 	.word	0x0800780f
 8005b08:	08007806 	.word	0x08007806
 8005b0c:	080077e3 	.word	0x080077e3
 8005b10:	3ff80000 	.word	0x3ff80000
 8005b14:	08007918 	.word	0x08007918
 8005b18:	08007882 	.word	0x08007882
 8005b1c:	2301      	movs	r3, #1
 8005b1e:	930b      	str	r3, [sp, #44]	; 0x2c
 8005b20:	e7d4      	b.n	8005acc <_dtoa_r+0x2ac>
 8005b22:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005b24:	9306      	str	r3, [sp, #24]
 8005b26:	9308      	str	r3, [sp, #32]
 8005b28:	e7b7      	b.n	8005a9a <_dtoa_r+0x27a>
 8005b2a:	3101      	adds	r1, #1
 8005b2c:	0052      	lsls	r2, r2, #1
 8005b2e:	e7b7      	b.n	8005aa0 <_dtoa_r+0x280>
 8005b30:	69eb      	ldr	r3, [r5, #28]
 8005b32:	9a03      	ldr	r2, [sp, #12]
 8005b34:	601a      	str	r2, [r3, #0]
 8005b36:	9b08      	ldr	r3, [sp, #32]
 8005b38:	2b0e      	cmp	r3, #14
 8005b3a:	f200 80a8 	bhi.w	8005c8e <_dtoa_r+0x46e>
 8005b3e:	2c00      	cmp	r4, #0
 8005b40:	f000 80a5 	beq.w	8005c8e <_dtoa_r+0x46e>
 8005b44:	f1bb 0f00 	cmp.w	fp, #0
 8005b48:	dd34      	ble.n	8005bb4 <_dtoa_r+0x394>
 8005b4a:	4b9a      	ldr	r3, [pc, #616]	; (8005db4 <_dtoa_r+0x594>)
 8005b4c:	f00b 020f 	and.w	r2, fp, #15
 8005b50:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005b54:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8005b58:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005b5c:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8005b60:	ea4f 142b 	mov.w	r4, fp, asr #4
 8005b64:	d016      	beq.n	8005b94 <_dtoa_r+0x374>
 8005b66:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005b6a:	4b93      	ldr	r3, [pc, #588]	; (8005db8 <_dtoa_r+0x598>)
 8005b6c:	2703      	movs	r7, #3
 8005b6e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005b72:	f7fa fddb 	bl	800072c <__aeabi_ddiv>
 8005b76:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005b7a:	f004 040f 	and.w	r4, r4, #15
 8005b7e:	4e8e      	ldr	r6, [pc, #568]	; (8005db8 <_dtoa_r+0x598>)
 8005b80:	b954      	cbnz	r4, 8005b98 <_dtoa_r+0x378>
 8005b82:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005b86:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005b8a:	f7fa fdcf 	bl	800072c <__aeabi_ddiv>
 8005b8e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005b92:	e029      	b.n	8005be8 <_dtoa_r+0x3c8>
 8005b94:	2702      	movs	r7, #2
 8005b96:	e7f2      	b.n	8005b7e <_dtoa_r+0x35e>
 8005b98:	07e1      	lsls	r1, r4, #31
 8005b9a:	d508      	bpl.n	8005bae <_dtoa_r+0x38e>
 8005b9c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005ba0:	e9d6 2300 	ldrd	r2, r3, [r6]
 8005ba4:	f7fa fc98 	bl	80004d8 <__aeabi_dmul>
 8005ba8:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005bac:	3701      	adds	r7, #1
 8005bae:	1064      	asrs	r4, r4, #1
 8005bb0:	3608      	adds	r6, #8
 8005bb2:	e7e5      	b.n	8005b80 <_dtoa_r+0x360>
 8005bb4:	f000 80a5 	beq.w	8005d02 <_dtoa_r+0x4e2>
 8005bb8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005bbc:	f1cb 0400 	rsb	r4, fp, #0
 8005bc0:	4b7c      	ldr	r3, [pc, #496]	; (8005db4 <_dtoa_r+0x594>)
 8005bc2:	f004 020f 	and.w	r2, r4, #15
 8005bc6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005bca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bce:	f7fa fc83 	bl	80004d8 <__aeabi_dmul>
 8005bd2:	2702      	movs	r7, #2
 8005bd4:	2300      	movs	r3, #0
 8005bd6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005bda:	4e77      	ldr	r6, [pc, #476]	; (8005db8 <_dtoa_r+0x598>)
 8005bdc:	1124      	asrs	r4, r4, #4
 8005bde:	2c00      	cmp	r4, #0
 8005be0:	f040 8084 	bne.w	8005cec <_dtoa_r+0x4cc>
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d1d2      	bne.n	8005b8e <_dtoa_r+0x36e>
 8005be8:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8005bec:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8005bf0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	f000 8087 	beq.w	8005d06 <_dtoa_r+0x4e6>
 8005bf8:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005bfc:	2200      	movs	r2, #0
 8005bfe:	4b6f      	ldr	r3, [pc, #444]	; (8005dbc <_dtoa_r+0x59c>)
 8005c00:	f7fa fedc 	bl	80009bc <__aeabi_dcmplt>
 8005c04:	2800      	cmp	r0, #0
 8005c06:	d07e      	beq.n	8005d06 <_dtoa_r+0x4e6>
 8005c08:	9b08      	ldr	r3, [sp, #32]
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d07b      	beq.n	8005d06 <_dtoa_r+0x4e6>
 8005c0e:	9b06      	ldr	r3, [sp, #24]
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	dd38      	ble.n	8005c86 <_dtoa_r+0x466>
 8005c14:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005c18:	2200      	movs	r2, #0
 8005c1a:	4b69      	ldr	r3, [pc, #420]	; (8005dc0 <_dtoa_r+0x5a0>)
 8005c1c:	f7fa fc5c 	bl	80004d8 <__aeabi_dmul>
 8005c20:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005c24:	9c06      	ldr	r4, [sp, #24]
 8005c26:	f10b 38ff 	add.w	r8, fp, #4294967295
 8005c2a:	3701      	adds	r7, #1
 8005c2c:	4638      	mov	r0, r7
 8005c2e:	f7fa fbe9 	bl	8000404 <__aeabi_i2d>
 8005c32:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005c36:	f7fa fc4f 	bl	80004d8 <__aeabi_dmul>
 8005c3a:	2200      	movs	r2, #0
 8005c3c:	4b61      	ldr	r3, [pc, #388]	; (8005dc4 <_dtoa_r+0x5a4>)
 8005c3e:	f7fa fa95 	bl	800016c <__adddf3>
 8005c42:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8005c46:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005c4a:	9611      	str	r6, [sp, #68]	; 0x44
 8005c4c:	2c00      	cmp	r4, #0
 8005c4e:	d15d      	bne.n	8005d0c <_dtoa_r+0x4ec>
 8005c50:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005c54:	2200      	movs	r2, #0
 8005c56:	4b5c      	ldr	r3, [pc, #368]	; (8005dc8 <_dtoa_r+0x5a8>)
 8005c58:	f7fa fa86 	bl	8000168 <__aeabi_dsub>
 8005c5c:	4602      	mov	r2, r0
 8005c5e:	460b      	mov	r3, r1
 8005c60:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005c64:	4633      	mov	r3, r6
 8005c66:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8005c68:	f7fa fec6 	bl	80009f8 <__aeabi_dcmpgt>
 8005c6c:	2800      	cmp	r0, #0
 8005c6e:	f040 8295 	bne.w	800619c <_dtoa_r+0x97c>
 8005c72:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005c76:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8005c78:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8005c7c:	f7fa fe9e 	bl	80009bc <__aeabi_dcmplt>
 8005c80:	2800      	cmp	r0, #0
 8005c82:	f040 8289 	bne.w	8006198 <_dtoa_r+0x978>
 8005c86:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8005c8a:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8005c8e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	f2c0 8151 	blt.w	8005f38 <_dtoa_r+0x718>
 8005c96:	f1bb 0f0e 	cmp.w	fp, #14
 8005c9a:	f300 814d 	bgt.w	8005f38 <_dtoa_r+0x718>
 8005c9e:	4b45      	ldr	r3, [pc, #276]	; (8005db4 <_dtoa_r+0x594>)
 8005ca0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8005ca4:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005ca8:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8005cac:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	f280 80da 	bge.w	8005e68 <_dtoa_r+0x648>
 8005cb4:	9b08      	ldr	r3, [sp, #32]
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	f300 80d6 	bgt.w	8005e68 <_dtoa_r+0x648>
 8005cbc:	f040 826b 	bne.w	8006196 <_dtoa_r+0x976>
 8005cc0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005cc4:	2200      	movs	r2, #0
 8005cc6:	4b40      	ldr	r3, [pc, #256]	; (8005dc8 <_dtoa_r+0x5a8>)
 8005cc8:	f7fa fc06 	bl	80004d8 <__aeabi_dmul>
 8005ccc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005cd0:	f7fa fe88 	bl	80009e4 <__aeabi_dcmpge>
 8005cd4:	9c08      	ldr	r4, [sp, #32]
 8005cd6:	4626      	mov	r6, r4
 8005cd8:	2800      	cmp	r0, #0
 8005cda:	f040 8241 	bne.w	8006160 <_dtoa_r+0x940>
 8005cde:	2331      	movs	r3, #49	; 0x31
 8005ce0:	9f03      	ldr	r7, [sp, #12]
 8005ce2:	f10b 0b01 	add.w	fp, fp, #1
 8005ce6:	f807 3b01 	strb.w	r3, [r7], #1
 8005cea:	e23d      	b.n	8006168 <_dtoa_r+0x948>
 8005cec:	07e2      	lsls	r2, r4, #31
 8005cee:	d505      	bpl.n	8005cfc <_dtoa_r+0x4dc>
 8005cf0:	e9d6 2300 	ldrd	r2, r3, [r6]
 8005cf4:	f7fa fbf0 	bl	80004d8 <__aeabi_dmul>
 8005cf8:	2301      	movs	r3, #1
 8005cfa:	3701      	adds	r7, #1
 8005cfc:	1064      	asrs	r4, r4, #1
 8005cfe:	3608      	adds	r6, #8
 8005d00:	e76d      	b.n	8005bde <_dtoa_r+0x3be>
 8005d02:	2702      	movs	r7, #2
 8005d04:	e770      	b.n	8005be8 <_dtoa_r+0x3c8>
 8005d06:	46d8      	mov	r8, fp
 8005d08:	9c08      	ldr	r4, [sp, #32]
 8005d0a:	e78f      	b.n	8005c2c <_dtoa_r+0x40c>
 8005d0c:	9903      	ldr	r1, [sp, #12]
 8005d0e:	4b29      	ldr	r3, [pc, #164]	; (8005db4 <_dtoa_r+0x594>)
 8005d10:	4421      	add	r1, r4
 8005d12:	9112      	str	r1, [sp, #72]	; 0x48
 8005d14:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005d16:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8005d1a:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8005d1e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8005d22:	2900      	cmp	r1, #0
 8005d24:	d054      	beq.n	8005dd0 <_dtoa_r+0x5b0>
 8005d26:	2000      	movs	r0, #0
 8005d28:	4928      	ldr	r1, [pc, #160]	; (8005dcc <_dtoa_r+0x5ac>)
 8005d2a:	f7fa fcff 	bl	800072c <__aeabi_ddiv>
 8005d2e:	463b      	mov	r3, r7
 8005d30:	4632      	mov	r2, r6
 8005d32:	f7fa fa19 	bl	8000168 <__aeabi_dsub>
 8005d36:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005d3a:	9f03      	ldr	r7, [sp, #12]
 8005d3c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005d40:	f7fa fe7a 	bl	8000a38 <__aeabi_d2iz>
 8005d44:	4604      	mov	r4, r0
 8005d46:	f7fa fb5d 	bl	8000404 <__aeabi_i2d>
 8005d4a:	4602      	mov	r2, r0
 8005d4c:	460b      	mov	r3, r1
 8005d4e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005d52:	f7fa fa09 	bl	8000168 <__aeabi_dsub>
 8005d56:	4602      	mov	r2, r0
 8005d58:	460b      	mov	r3, r1
 8005d5a:	3430      	adds	r4, #48	; 0x30
 8005d5c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005d60:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005d64:	f807 4b01 	strb.w	r4, [r7], #1
 8005d68:	f7fa fe28 	bl	80009bc <__aeabi_dcmplt>
 8005d6c:	2800      	cmp	r0, #0
 8005d6e:	d173      	bne.n	8005e58 <_dtoa_r+0x638>
 8005d70:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005d74:	2000      	movs	r0, #0
 8005d76:	4911      	ldr	r1, [pc, #68]	; (8005dbc <_dtoa_r+0x59c>)
 8005d78:	f7fa f9f6 	bl	8000168 <__aeabi_dsub>
 8005d7c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005d80:	f7fa fe1c 	bl	80009bc <__aeabi_dcmplt>
 8005d84:	2800      	cmp	r0, #0
 8005d86:	f040 80b6 	bne.w	8005ef6 <_dtoa_r+0x6d6>
 8005d8a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005d8c:	429f      	cmp	r7, r3
 8005d8e:	f43f af7a 	beq.w	8005c86 <_dtoa_r+0x466>
 8005d92:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005d96:	2200      	movs	r2, #0
 8005d98:	4b09      	ldr	r3, [pc, #36]	; (8005dc0 <_dtoa_r+0x5a0>)
 8005d9a:	f7fa fb9d 	bl	80004d8 <__aeabi_dmul>
 8005d9e:	2200      	movs	r2, #0
 8005da0:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005da4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005da8:	4b05      	ldr	r3, [pc, #20]	; (8005dc0 <_dtoa_r+0x5a0>)
 8005daa:	f7fa fb95 	bl	80004d8 <__aeabi_dmul>
 8005dae:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005db2:	e7c3      	b.n	8005d3c <_dtoa_r+0x51c>
 8005db4:	08007918 	.word	0x08007918
 8005db8:	080078f0 	.word	0x080078f0
 8005dbc:	3ff00000 	.word	0x3ff00000
 8005dc0:	40240000 	.word	0x40240000
 8005dc4:	401c0000 	.word	0x401c0000
 8005dc8:	40140000 	.word	0x40140000
 8005dcc:	3fe00000 	.word	0x3fe00000
 8005dd0:	4630      	mov	r0, r6
 8005dd2:	4639      	mov	r1, r7
 8005dd4:	f7fa fb80 	bl	80004d8 <__aeabi_dmul>
 8005dd8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005dda:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005dde:	9c03      	ldr	r4, [sp, #12]
 8005de0:	9314      	str	r3, [sp, #80]	; 0x50
 8005de2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005de6:	f7fa fe27 	bl	8000a38 <__aeabi_d2iz>
 8005dea:	9015      	str	r0, [sp, #84]	; 0x54
 8005dec:	f7fa fb0a 	bl	8000404 <__aeabi_i2d>
 8005df0:	4602      	mov	r2, r0
 8005df2:	460b      	mov	r3, r1
 8005df4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005df8:	f7fa f9b6 	bl	8000168 <__aeabi_dsub>
 8005dfc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005dfe:	4606      	mov	r6, r0
 8005e00:	3330      	adds	r3, #48	; 0x30
 8005e02:	f804 3b01 	strb.w	r3, [r4], #1
 8005e06:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005e08:	460f      	mov	r7, r1
 8005e0a:	429c      	cmp	r4, r3
 8005e0c:	f04f 0200 	mov.w	r2, #0
 8005e10:	d124      	bne.n	8005e5c <_dtoa_r+0x63c>
 8005e12:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005e16:	4baf      	ldr	r3, [pc, #700]	; (80060d4 <_dtoa_r+0x8b4>)
 8005e18:	f7fa f9a8 	bl	800016c <__adddf3>
 8005e1c:	4602      	mov	r2, r0
 8005e1e:	460b      	mov	r3, r1
 8005e20:	4630      	mov	r0, r6
 8005e22:	4639      	mov	r1, r7
 8005e24:	f7fa fde8 	bl	80009f8 <__aeabi_dcmpgt>
 8005e28:	2800      	cmp	r0, #0
 8005e2a:	d163      	bne.n	8005ef4 <_dtoa_r+0x6d4>
 8005e2c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005e30:	2000      	movs	r0, #0
 8005e32:	49a8      	ldr	r1, [pc, #672]	; (80060d4 <_dtoa_r+0x8b4>)
 8005e34:	f7fa f998 	bl	8000168 <__aeabi_dsub>
 8005e38:	4602      	mov	r2, r0
 8005e3a:	460b      	mov	r3, r1
 8005e3c:	4630      	mov	r0, r6
 8005e3e:	4639      	mov	r1, r7
 8005e40:	f7fa fdbc 	bl	80009bc <__aeabi_dcmplt>
 8005e44:	2800      	cmp	r0, #0
 8005e46:	f43f af1e 	beq.w	8005c86 <_dtoa_r+0x466>
 8005e4a:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8005e4c:	1e7b      	subs	r3, r7, #1
 8005e4e:	9314      	str	r3, [sp, #80]	; 0x50
 8005e50:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8005e54:	2b30      	cmp	r3, #48	; 0x30
 8005e56:	d0f8      	beq.n	8005e4a <_dtoa_r+0x62a>
 8005e58:	46c3      	mov	fp, r8
 8005e5a:	e03b      	b.n	8005ed4 <_dtoa_r+0x6b4>
 8005e5c:	4b9e      	ldr	r3, [pc, #632]	; (80060d8 <_dtoa_r+0x8b8>)
 8005e5e:	f7fa fb3b 	bl	80004d8 <__aeabi_dmul>
 8005e62:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005e66:	e7bc      	b.n	8005de2 <_dtoa_r+0x5c2>
 8005e68:	9f03      	ldr	r7, [sp, #12]
 8005e6a:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8005e6e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005e72:	4640      	mov	r0, r8
 8005e74:	4649      	mov	r1, r9
 8005e76:	f7fa fc59 	bl	800072c <__aeabi_ddiv>
 8005e7a:	f7fa fddd 	bl	8000a38 <__aeabi_d2iz>
 8005e7e:	4604      	mov	r4, r0
 8005e80:	f7fa fac0 	bl	8000404 <__aeabi_i2d>
 8005e84:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005e88:	f7fa fb26 	bl	80004d8 <__aeabi_dmul>
 8005e8c:	4602      	mov	r2, r0
 8005e8e:	460b      	mov	r3, r1
 8005e90:	4640      	mov	r0, r8
 8005e92:	4649      	mov	r1, r9
 8005e94:	f7fa f968 	bl	8000168 <__aeabi_dsub>
 8005e98:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8005e9c:	f807 6b01 	strb.w	r6, [r7], #1
 8005ea0:	9e03      	ldr	r6, [sp, #12]
 8005ea2:	f8dd c020 	ldr.w	ip, [sp, #32]
 8005ea6:	1bbe      	subs	r6, r7, r6
 8005ea8:	45b4      	cmp	ip, r6
 8005eaa:	4602      	mov	r2, r0
 8005eac:	460b      	mov	r3, r1
 8005eae:	d136      	bne.n	8005f1e <_dtoa_r+0x6fe>
 8005eb0:	f7fa f95c 	bl	800016c <__adddf3>
 8005eb4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005eb8:	4680      	mov	r8, r0
 8005eba:	4689      	mov	r9, r1
 8005ebc:	f7fa fd9c 	bl	80009f8 <__aeabi_dcmpgt>
 8005ec0:	bb58      	cbnz	r0, 8005f1a <_dtoa_r+0x6fa>
 8005ec2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005ec6:	4640      	mov	r0, r8
 8005ec8:	4649      	mov	r1, r9
 8005eca:	f7fa fd6d 	bl	80009a8 <__aeabi_dcmpeq>
 8005ece:	b108      	cbz	r0, 8005ed4 <_dtoa_r+0x6b4>
 8005ed0:	07e3      	lsls	r3, r4, #31
 8005ed2:	d422      	bmi.n	8005f1a <_dtoa_r+0x6fa>
 8005ed4:	4651      	mov	r1, sl
 8005ed6:	4628      	mov	r0, r5
 8005ed8:	f000 fbc2 	bl	8006660 <_Bfree>
 8005edc:	2300      	movs	r3, #0
 8005ede:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8005ee0:	703b      	strb	r3, [r7, #0]
 8005ee2:	f10b 0301 	add.w	r3, fp, #1
 8005ee6:	6013      	str	r3, [r2, #0]
 8005ee8:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	f43f ace6 	beq.w	80058bc <_dtoa_r+0x9c>
 8005ef0:	601f      	str	r7, [r3, #0]
 8005ef2:	e4e3      	b.n	80058bc <_dtoa_r+0x9c>
 8005ef4:	4627      	mov	r7, r4
 8005ef6:	463b      	mov	r3, r7
 8005ef8:	461f      	mov	r7, r3
 8005efa:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005efe:	2a39      	cmp	r2, #57	; 0x39
 8005f00:	d107      	bne.n	8005f12 <_dtoa_r+0x6f2>
 8005f02:	9a03      	ldr	r2, [sp, #12]
 8005f04:	429a      	cmp	r2, r3
 8005f06:	d1f7      	bne.n	8005ef8 <_dtoa_r+0x6d8>
 8005f08:	2230      	movs	r2, #48	; 0x30
 8005f0a:	9903      	ldr	r1, [sp, #12]
 8005f0c:	f108 0801 	add.w	r8, r8, #1
 8005f10:	700a      	strb	r2, [r1, #0]
 8005f12:	781a      	ldrb	r2, [r3, #0]
 8005f14:	3201      	adds	r2, #1
 8005f16:	701a      	strb	r2, [r3, #0]
 8005f18:	e79e      	b.n	8005e58 <_dtoa_r+0x638>
 8005f1a:	46d8      	mov	r8, fp
 8005f1c:	e7eb      	b.n	8005ef6 <_dtoa_r+0x6d6>
 8005f1e:	2200      	movs	r2, #0
 8005f20:	4b6d      	ldr	r3, [pc, #436]	; (80060d8 <_dtoa_r+0x8b8>)
 8005f22:	f7fa fad9 	bl	80004d8 <__aeabi_dmul>
 8005f26:	2200      	movs	r2, #0
 8005f28:	2300      	movs	r3, #0
 8005f2a:	4680      	mov	r8, r0
 8005f2c:	4689      	mov	r9, r1
 8005f2e:	f7fa fd3b 	bl	80009a8 <__aeabi_dcmpeq>
 8005f32:	2800      	cmp	r0, #0
 8005f34:	d09b      	beq.n	8005e6e <_dtoa_r+0x64e>
 8005f36:	e7cd      	b.n	8005ed4 <_dtoa_r+0x6b4>
 8005f38:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005f3a:	2a00      	cmp	r2, #0
 8005f3c:	f000 80c4 	beq.w	80060c8 <_dtoa_r+0x8a8>
 8005f40:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8005f42:	2a01      	cmp	r2, #1
 8005f44:	f300 80a8 	bgt.w	8006098 <_dtoa_r+0x878>
 8005f48:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8005f4a:	2a00      	cmp	r2, #0
 8005f4c:	f000 80a0 	beq.w	8006090 <_dtoa_r+0x870>
 8005f50:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8005f54:	464f      	mov	r7, r9
 8005f56:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8005f58:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005f5a:	2101      	movs	r1, #1
 8005f5c:	441a      	add	r2, r3
 8005f5e:	4628      	mov	r0, r5
 8005f60:	4499      	add	r9, r3
 8005f62:	9209      	str	r2, [sp, #36]	; 0x24
 8005f64:	f000 fc32 	bl	80067cc <__i2b>
 8005f68:	4606      	mov	r6, r0
 8005f6a:	b15f      	cbz	r7, 8005f84 <_dtoa_r+0x764>
 8005f6c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	dd08      	ble.n	8005f84 <_dtoa_r+0x764>
 8005f72:	42bb      	cmp	r3, r7
 8005f74:	bfa8      	it	ge
 8005f76:	463b      	movge	r3, r7
 8005f78:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005f7a:	eba9 0903 	sub.w	r9, r9, r3
 8005f7e:	1aff      	subs	r7, r7, r3
 8005f80:	1ad3      	subs	r3, r2, r3
 8005f82:	9309      	str	r3, [sp, #36]	; 0x24
 8005f84:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005f86:	b1f3      	cbz	r3, 8005fc6 <_dtoa_r+0x7a6>
 8005f88:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	f000 80a0 	beq.w	80060d0 <_dtoa_r+0x8b0>
 8005f90:	2c00      	cmp	r4, #0
 8005f92:	dd10      	ble.n	8005fb6 <_dtoa_r+0x796>
 8005f94:	4631      	mov	r1, r6
 8005f96:	4622      	mov	r2, r4
 8005f98:	4628      	mov	r0, r5
 8005f9a:	f000 fcd5 	bl	8006948 <__pow5mult>
 8005f9e:	4652      	mov	r2, sl
 8005fa0:	4601      	mov	r1, r0
 8005fa2:	4606      	mov	r6, r0
 8005fa4:	4628      	mov	r0, r5
 8005fa6:	f000 fc27 	bl	80067f8 <__multiply>
 8005faa:	4680      	mov	r8, r0
 8005fac:	4651      	mov	r1, sl
 8005fae:	4628      	mov	r0, r5
 8005fb0:	f000 fb56 	bl	8006660 <_Bfree>
 8005fb4:	46c2      	mov	sl, r8
 8005fb6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005fb8:	1b1a      	subs	r2, r3, r4
 8005fba:	d004      	beq.n	8005fc6 <_dtoa_r+0x7a6>
 8005fbc:	4651      	mov	r1, sl
 8005fbe:	4628      	mov	r0, r5
 8005fc0:	f000 fcc2 	bl	8006948 <__pow5mult>
 8005fc4:	4682      	mov	sl, r0
 8005fc6:	2101      	movs	r1, #1
 8005fc8:	4628      	mov	r0, r5
 8005fca:	f000 fbff 	bl	80067cc <__i2b>
 8005fce:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005fd0:	4604      	mov	r4, r0
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	f340 8082 	ble.w	80060dc <_dtoa_r+0x8bc>
 8005fd8:	461a      	mov	r2, r3
 8005fda:	4601      	mov	r1, r0
 8005fdc:	4628      	mov	r0, r5
 8005fde:	f000 fcb3 	bl	8006948 <__pow5mult>
 8005fe2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005fe4:	4604      	mov	r4, r0
 8005fe6:	2b01      	cmp	r3, #1
 8005fe8:	dd7b      	ble.n	80060e2 <_dtoa_r+0x8c2>
 8005fea:	f04f 0800 	mov.w	r8, #0
 8005fee:	6923      	ldr	r3, [r4, #16]
 8005ff0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8005ff4:	6918      	ldr	r0, [r3, #16]
 8005ff6:	f000 fb9b 	bl	8006730 <__hi0bits>
 8005ffa:	f1c0 0020 	rsb	r0, r0, #32
 8005ffe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006000:	4418      	add	r0, r3
 8006002:	f010 001f 	ands.w	r0, r0, #31
 8006006:	f000 8092 	beq.w	800612e <_dtoa_r+0x90e>
 800600a:	f1c0 0320 	rsb	r3, r0, #32
 800600e:	2b04      	cmp	r3, #4
 8006010:	f340 8085 	ble.w	800611e <_dtoa_r+0x8fe>
 8006014:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006016:	f1c0 001c 	rsb	r0, r0, #28
 800601a:	4403      	add	r3, r0
 800601c:	4481      	add	r9, r0
 800601e:	4407      	add	r7, r0
 8006020:	9309      	str	r3, [sp, #36]	; 0x24
 8006022:	f1b9 0f00 	cmp.w	r9, #0
 8006026:	dd05      	ble.n	8006034 <_dtoa_r+0x814>
 8006028:	4651      	mov	r1, sl
 800602a:	464a      	mov	r2, r9
 800602c:	4628      	mov	r0, r5
 800602e:	f000 fce5 	bl	80069fc <__lshift>
 8006032:	4682      	mov	sl, r0
 8006034:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006036:	2b00      	cmp	r3, #0
 8006038:	dd05      	ble.n	8006046 <_dtoa_r+0x826>
 800603a:	4621      	mov	r1, r4
 800603c:	461a      	mov	r2, r3
 800603e:	4628      	mov	r0, r5
 8006040:	f000 fcdc 	bl	80069fc <__lshift>
 8006044:	4604      	mov	r4, r0
 8006046:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006048:	2b00      	cmp	r3, #0
 800604a:	d072      	beq.n	8006132 <_dtoa_r+0x912>
 800604c:	4621      	mov	r1, r4
 800604e:	4650      	mov	r0, sl
 8006050:	f000 fd40 	bl	8006ad4 <__mcmp>
 8006054:	2800      	cmp	r0, #0
 8006056:	da6c      	bge.n	8006132 <_dtoa_r+0x912>
 8006058:	2300      	movs	r3, #0
 800605a:	4651      	mov	r1, sl
 800605c:	220a      	movs	r2, #10
 800605e:	4628      	mov	r0, r5
 8006060:	f000 fb20 	bl	80066a4 <__multadd>
 8006064:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006066:	4682      	mov	sl, r0
 8006068:	f10b 3bff 	add.w	fp, fp, #4294967295
 800606c:	2b00      	cmp	r3, #0
 800606e:	f000 81ac 	beq.w	80063ca <_dtoa_r+0xbaa>
 8006072:	2300      	movs	r3, #0
 8006074:	4631      	mov	r1, r6
 8006076:	220a      	movs	r2, #10
 8006078:	4628      	mov	r0, r5
 800607a:	f000 fb13 	bl	80066a4 <__multadd>
 800607e:	9b06      	ldr	r3, [sp, #24]
 8006080:	4606      	mov	r6, r0
 8006082:	2b00      	cmp	r3, #0
 8006084:	f300 8093 	bgt.w	80061ae <_dtoa_r+0x98e>
 8006088:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800608a:	2b02      	cmp	r3, #2
 800608c:	dc59      	bgt.n	8006142 <_dtoa_r+0x922>
 800608e:	e08e      	b.n	80061ae <_dtoa_r+0x98e>
 8006090:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8006092:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8006096:	e75d      	b.n	8005f54 <_dtoa_r+0x734>
 8006098:	9b08      	ldr	r3, [sp, #32]
 800609a:	1e5c      	subs	r4, r3, #1
 800609c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800609e:	42a3      	cmp	r3, r4
 80060a0:	bfbf      	itttt	lt
 80060a2:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80060a4:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 80060a6:	1ae3      	sublt	r3, r4, r3
 80060a8:	18d2      	addlt	r2, r2, r3
 80060aa:	bfa8      	it	ge
 80060ac:	1b1c      	subge	r4, r3, r4
 80060ae:	9b08      	ldr	r3, [sp, #32]
 80060b0:	bfbe      	ittt	lt
 80060b2:	940a      	strlt	r4, [sp, #40]	; 0x28
 80060b4:	920e      	strlt	r2, [sp, #56]	; 0x38
 80060b6:	2400      	movlt	r4, #0
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	bfb5      	itete	lt
 80060bc:	eba9 0703 	sublt.w	r7, r9, r3
 80060c0:	464f      	movge	r7, r9
 80060c2:	2300      	movlt	r3, #0
 80060c4:	9b08      	ldrge	r3, [sp, #32]
 80060c6:	e747      	b.n	8005f58 <_dtoa_r+0x738>
 80060c8:	464f      	mov	r7, r9
 80060ca:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80060cc:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 80060ce:	e74c      	b.n	8005f6a <_dtoa_r+0x74a>
 80060d0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80060d2:	e773      	b.n	8005fbc <_dtoa_r+0x79c>
 80060d4:	3fe00000 	.word	0x3fe00000
 80060d8:	40240000 	.word	0x40240000
 80060dc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80060de:	2b01      	cmp	r3, #1
 80060e0:	dc18      	bgt.n	8006114 <_dtoa_r+0x8f4>
 80060e2:	9b04      	ldr	r3, [sp, #16]
 80060e4:	b9b3      	cbnz	r3, 8006114 <_dtoa_r+0x8f4>
 80060e6:	9b05      	ldr	r3, [sp, #20]
 80060e8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80060ec:	b993      	cbnz	r3, 8006114 <_dtoa_r+0x8f4>
 80060ee:	9b05      	ldr	r3, [sp, #20]
 80060f0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80060f4:	0d1b      	lsrs	r3, r3, #20
 80060f6:	051b      	lsls	r3, r3, #20
 80060f8:	b17b      	cbz	r3, 800611a <_dtoa_r+0x8fa>
 80060fa:	f04f 0801 	mov.w	r8, #1
 80060fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006100:	f109 0901 	add.w	r9, r9, #1
 8006104:	3301      	adds	r3, #1
 8006106:	9309      	str	r3, [sp, #36]	; 0x24
 8006108:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800610a:	2b00      	cmp	r3, #0
 800610c:	f47f af6f 	bne.w	8005fee <_dtoa_r+0x7ce>
 8006110:	2001      	movs	r0, #1
 8006112:	e774      	b.n	8005ffe <_dtoa_r+0x7de>
 8006114:	f04f 0800 	mov.w	r8, #0
 8006118:	e7f6      	b.n	8006108 <_dtoa_r+0x8e8>
 800611a:	4698      	mov	r8, r3
 800611c:	e7f4      	b.n	8006108 <_dtoa_r+0x8e8>
 800611e:	d080      	beq.n	8006022 <_dtoa_r+0x802>
 8006120:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006122:	331c      	adds	r3, #28
 8006124:	441a      	add	r2, r3
 8006126:	4499      	add	r9, r3
 8006128:	441f      	add	r7, r3
 800612a:	9209      	str	r2, [sp, #36]	; 0x24
 800612c:	e779      	b.n	8006022 <_dtoa_r+0x802>
 800612e:	4603      	mov	r3, r0
 8006130:	e7f6      	b.n	8006120 <_dtoa_r+0x900>
 8006132:	9b08      	ldr	r3, [sp, #32]
 8006134:	2b00      	cmp	r3, #0
 8006136:	dc34      	bgt.n	80061a2 <_dtoa_r+0x982>
 8006138:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800613a:	2b02      	cmp	r3, #2
 800613c:	dd31      	ble.n	80061a2 <_dtoa_r+0x982>
 800613e:	9b08      	ldr	r3, [sp, #32]
 8006140:	9306      	str	r3, [sp, #24]
 8006142:	9b06      	ldr	r3, [sp, #24]
 8006144:	b963      	cbnz	r3, 8006160 <_dtoa_r+0x940>
 8006146:	4621      	mov	r1, r4
 8006148:	2205      	movs	r2, #5
 800614a:	4628      	mov	r0, r5
 800614c:	f000 faaa 	bl	80066a4 <__multadd>
 8006150:	4601      	mov	r1, r0
 8006152:	4604      	mov	r4, r0
 8006154:	4650      	mov	r0, sl
 8006156:	f000 fcbd 	bl	8006ad4 <__mcmp>
 800615a:	2800      	cmp	r0, #0
 800615c:	f73f adbf 	bgt.w	8005cde <_dtoa_r+0x4be>
 8006160:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006162:	9f03      	ldr	r7, [sp, #12]
 8006164:	ea6f 0b03 	mvn.w	fp, r3
 8006168:	f04f 0800 	mov.w	r8, #0
 800616c:	4621      	mov	r1, r4
 800616e:	4628      	mov	r0, r5
 8006170:	f000 fa76 	bl	8006660 <_Bfree>
 8006174:	2e00      	cmp	r6, #0
 8006176:	f43f aead 	beq.w	8005ed4 <_dtoa_r+0x6b4>
 800617a:	f1b8 0f00 	cmp.w	r8, #0
 800617e:	d005      	beq.n	800618c <_dtoa_r+0x96c>
 8006180:	45b0      	cmp	r8, r6
 8006182:	d003      	beq.n	800618c <_dtoa_r+0x96c>
 8006184:	4641      	mov	r1, r8
 8006186:	4628      	mov	r0, r5
 8006188:	f000 fa6a 	bl	8006660 <_Bfree>
 800618c:	4631      	mov	r1, r6
 800618e:	4628      	mov	r0, r5
 8006190:	f000 fa66 	bl	8006660 <_Bfree>
 8006194:	e69e      	b.n	8005ed4 <_dtoa_r+0x6b4>
 8006196:	2400      	movs	r4, #0
 8006198:	4626      	mov	r6, r4
 800619a:	e7e1      	b.n	8006160 <_dtoa_r+0x940>
 800619c:	46c3      	mov	fp, r8
 800619e:	4626      	mov	r6, r4
 80061a0:	e59d      	b.n	8005cde <_dtoa_r+0x4be>
 80061a2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	f000 80c8 	beq.w	800633a <_dtoa_r+0xb1a>
 80061aa:	9b08      	ldr	r3, [sp, #32]
 80061ac:	9306      	str	r3, [sp, #24]
 80061ae:	2f00      	cmp	r7, #0
 80061b0:	dd05      	ble.n	80061be <_dtoa_r+0x99e>
 80061b2:	4631      	mov	r1, r6
 80061b4:	463a      	mov	r2, r7
 80061b6:	4628      	mov	r0, r5
 80061b8:	f000 fc20 	bl	80069fc <__lshift>
 80061bc:	4606      	mov	r6, r0
 80061be:	f1b8 0f00 	cmp.w	r8, #0
 80061c2:	d05b      	beq.n	800627c <_dtoa_r+0xa5c>
 80061c4:	4628      	mov	r0, r5
 80061c6:	6871      	ldr	r1, [r6, #4]
 80061c8:	f000 fa0a 	bl	80065e0 <_Balloc>
 80061cc:	4607      	mov	r7, r0
 80061ce:	b928      	cbnz	r0, 80061dc <_dtoa_r+0x9bc>
 80061d0:	4602      	mov	r2, r0
 80061d2:	f240 21ef 	movw	r1, #751	; 0x2ef
 80061d6:	4b81      	ldr	r3, [pc, #516]	; (80063dc <_dtoa_r+0xbbc>)
 80061d8:	f7ff bb36 	b.w	8005848 <_dtoa_r+0x28>
 80061dc:	6932      	ldr	r2, [r6, #16]
 80061de:	f106 010c 	add.w	r1, r6, #12
 80061e2:	3202      	adds	r2, #2
 80061e4:	0092      	lsls	r2, r2, #2
 80061e6:	300c      	adds	r0, #12
 80061e8:	f001 f822 	bl	8007230 <memcpy>
 80061ec:	2201      	movs	r2, #1
 80061ee:	4639      	mov	r1, r7
 80061f0:	4628      	mov	r0, r5
 80061f2:	f000 fc03 	bl	80069fc <__lshift>
 80061f6:	46b0      	mov	r8, r6
 80061f8:	4606      	mov	r6, r0
 80061fa:	9b03      	ldr	r3, [sp, #12]
 80061fc:	9a03      	ldr	r2, [sp, #12]
 80061fe:	3301      	adds	r3, #1
 8006200:	9308      	str	r3, [sp, #32]
 8006202:	9b06      	ldr	r3, [sp, #24]
 8006204:	4413      	add	r3, r2
 8006206:	930b      	str	r3, [sp, #44]	; 0x2c
 8006208:	9b04      	ldr	r3, [sp, #16]
 800620a:	f003 0301 	and.w	r3, r3, #1
 800620e:	930a      	str	r3, [sp, #40]	; 0x28
 8006210:	9b08      	ldr	r3, [sp, #32]
 8006212:	4621      	mov	r1, r4
 8006214:	3b01      	subs	r3, #1
 8006216:	4650      	mov	r0, sl
 8006218:	9304      	str	r3, [sp, #16]
 800621a:	f7ff fa78 	bl	800570e <quorem>
 800621e:	4641      	mov	r1, r8
 8006220:	9006      	str	r0, [sp, #24]
 8006222:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8006226:	4650      	mov	r0, sl
 8006228:	f000 fc54 	bl	8006ad4 <__mcmp>
 800622c:	4632      	mov	r2, r6
 800622e:	9009      	str	r0, [sp, #36]	; 0x24
 8006230:	4621      	mov	r1, r4
 8006232:	4628      	mov	r0, r5
 8006234:	f000 fc6a 	bl	8006b0c <__mdiff>
 8006238:	68c2      	ldr	r2, [r0, #12]
 800623a:	4607      	mov	r7, r0
 800623c:	bb02      	cbnz	r2, 8006280 <_dtoa_r+0xa60>
 800623e:	4601      	mov	r1, r0
 8006240:	4650      	mov	r0, sl
 8006242:	f000 fc47 	bl	8006ad4 <__mcmp>
 8006246:	4602      	mov	r2, r0
 8006248:	4639      	mov	r1, r7
 800624a:	4628      	mov	r0, r5
 800624c:	920c      	str	r2, [sp, #48]	; 0x30
 800624e:	f000 fa07 	bl	8006660 <_Bfree>
 8006252:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006254:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006256:	9f08      	ldr	r7, [sp, #32]
 8006258:	ea43 0102 	orr.w	r1, r3, r2
 800625c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800625e:	4319      	orrs	r1, r3
 8006260:	d110      	bne.n	8006284 <_dtoa_r+0xa64>
 8006262:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8006266:	d029      	beq.n	80062bc <_dtoa_r+0xa9c>
 8006268:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800626a:	2b00      	cmp	r3, #0
 800626c:	dd02      	ble.n	8006274 <_dtoa_r+0xa54>
 800626e:	9b06      	ldr	r3, [sp, #24]
 8006270:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8006274:	9b04      	ldr	r3, [sp, #16]
 8006276:	f883 9000 	strb.w	r9, [r3]
 800627a:	e777      	b.n	800616c <_dtoa_r+0x94c>
 800627c:	4630      	mov	r0, r6
 800627e:	e7ba      	b.n	80061f6 <_dtoa_r+0x9d6>
 8006280:	2201      	movs	r2, #1
 8006282:	e7e1      	b.n	8006248 <_dtoa_r+0xa28>
 8006284:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006286:	2b00      	cmp	r3, #0
 8006288:	db04      	blt.n	8006294 <_dtoa_r+0xa74>
 800628a:	9922      	ldr	r1, [sp, #136]	; 0x88
 800628c:	430b      	orrs	r3, r1
 800628e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8006290:	430b      	orrs	r3, r1
 8006292:	d120      	bne.n	80062d6 <_dtoa_r+0xab6>
 8006294:	2a00      	cmp	r2, #0
 8006296:	dded      	ble.n	8006274 <_dtoa_r+0xa54>
 8006298:	4651      	mov	r1, sl
 800629a:	2201      	movs	r2, #1
 800629c:	4628      	mov	r0, r5
 800629e:	f000 fbad 	bl	80069fc <__lshift>
 80062a2:	4621      	mov	r1, r4
 80062a4:	4682      	mov	sl, r0
 80062a6:	f000 fc15 	bl	8006ad4 <__mcmp>
 80062aa:	2800      	cmp	r0, #0
 80062ac:	dc03      	bgt.n	80062b6 <_dtoa_r+0xa96>
 80062ae:	d1e1      	bne.n	8006274 <_dtoa_r+0xa54>
 80062b0:	f019 0f01 	tst.w	r9, #1
 80062b4:	d0de      	beq.n	8006274 <_dtoa_r+0xa54>
 80062b6:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80062ba:	d1d8      	bne.n	800626e <_dtoa_r+0xa4e>
 80062bc:	2339      	movs	r3, #57	; 0x39
 80062be:	9a04      	ldr	r2, [sp, #16]
 80062c0:	7013      	strb	r3, [r2, #0]
 80062c2:	463b      	mov	r3, r7
 80062c4:	461f      	mov	r7, r3
 80062c6:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 80062ca:	3b01      	subs	r3, #1
 80062cc:	2a39      	cmp	r2, #57	; 0x39
 80062ce:	d06b      	beq.n	80063a8 <_dtoa_r+0xb88>
 80062d0:	3201      	adds	r2, #1
 80062d2:	701a      	strb	r2, [r3, #0]
 80062d4:	e74a      	b.n	800616c <_dtoa_r+0x94c>
 80062d6:	2a00      	cmp	r2, #0
 80062d8:	dd07      	ble.n	80062ea <_dtoa_r+0xaca>
 80062da:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80062de:	d0ed      	beq.n	80062bc <_dtoa_r+0xa9c>
 80062e0:	9a04      	ldr	r2, [sp, #16]
 80062e2:	f109 0301 	add.w	r3, r9, #1
 80062e6:	7013      	strb	r3, [r2, #0]
 80062e8:	e740      	b.n	800616c <_dtoa_r+0x94c>
 80062ea:	9b08      	ldr	r3, [sp, #32]
 80062ec:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80062ee:	f803 9c01 	strb.w	r9, [r3, #-1]
 80062f2:	4293      	cmp	r3, r2
 80062f4:	d042      	beq.n	800637c <_dtoa_r+0xb5c>
 80062f6:	4651      	mov	r1, sl
 80062f8:	2300      	movs	r3, #0
 80062fa:	220a      	movs	r2, #10
 80062fc:	4628      	mov	r0, r5
 80062fe:	f000 f9d1 	bl	80066a4 <__multadd>
 8006302:	45b0      	cmp	r8, r6
 8006304:	4682      	mov	sl, r0
 8006306:	f04f 0300 	mov.w	r3, #0
 800630a:	f04f 020a 	mov.w	r2, #10
 800630e:	4641      	mov	r1, r8
 8006310:	4628      	mov	r0, r5
 8006312:	d107      	bne.n	8006324 <_dtoa_r+0xb04>
 8006314:	f000 f9c6 	bl	80066a4 <__multadd>
 8006318:	4680      	mov	r8, r0
 800631a:	4606      	mov	r6, r0
 800631c:	9b08      	ldr	r3, [sp, #32]
 800631e:	3301      	adds	r3, #1
 8006320:	9308      	str	r3, [sp, #32]
 8006322:	e775      	b.n	8006210 <_dtoa_r+0x9f0>
 8006324:	f000 f9be 	bl	80066a4 <__multadd>
 8006328:	4631      	mov	r1, r6
 800632a:	4680      	mov	r8, r0
 800632c:	2300      	movs	r3, #0
 800632e:	220a      	movs	r2, #10
 8006330:	4628      	mov	r0, r5
 8006332:	f000 f9b7 	bl	80066a4 <__multadd>
 8006336:	4606      	mov	r6, r0
 8006338:	e7f0      	b.n	800631c <_dtoa_r+0xafc>
 800633a:	9b08      	ldr	r3, [sp, #32]
 800633c:	9306      	str	r3, [sp, #24]
 800633e:	9f03      	ldr	r7, [sp, #12]
 8006340:	4621      	mov	r1, r4
 8006342:	4650      	mov	r0, sl
 8006344:	f7ff f9e3 	bl	800570e <quorem>
 8006348:	9b03      	ldr	r3, [sp, #12]
 800634a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800634e:	f807 9b01 	strb.w	r9, [r7], #1
 8006352:	1afa      	subs	r2, r7, r3
 8006354:	9b06      	ldr	r3, [sp, #24]
 8006356:	4293      	cmp	r3, r2
 8006358:	dd07      	ble.n	800636a <_dtoa_r+0xb4a>
 800635a:	4651      	mov	r1, sl
 800635c:	2300      	movs	r3, #0
 800635e:	220a      	movs	r2, #10
 8006360:	4628      	mov	r0, r5
 8006362:	f000 f99f 	bl	80066a4 <__multadd>
 8006366:	4682      	mov	sl, r0
 8006368:	e7ea      	b.n	8006340 <_dtoa_r+0xb20>
 800636a:	9b06      	ldr	r3, [sp, #24]
 800636c:	f04f 0800 	mov.w	r8, #0
 8006370:	2b00      	cmp	r3, #0
 8006372:	bfcc      	ite	gt
 8006374:	461f      	movgt	r7, r3
 8006376:	2701      	movle	r7, #1
 8006378:	9b03      	ldr	r3, [sp, #12]
 800637a:	441f      	add	r7, r3
 800637c:	4651      	mov	r1, sl
 800637e:	2201      	movs	r2, #1
 8006380:	4628      	mov	r0, r5
 8006382:	f000 fb3b 	bl	80069fc <__lshift>
 8006386:	4621      	mov	r1, r4
 8006388:	4682      	mov	sl, r0
 800638a:	f000 fba3 	bl	8006ad4 <__mcmp>
 800638e:	2800      	cmp	r0, #0
 8006390:	dc97      	bgt.n	80062c2 <_dtoa_r+0xaa2>
 8006392:	d102      	bne.n	800639a <_dtoa_r+0xb7a>
 8006394:	f019 0f01 	tst.w	r9, #1
 8006398:	d193      	bne.n	80062c2 <_dtoa_r+0xaa2>
 800639a:	463b      	mov	r3, r7
 800639c:	461f      	mov	r7, r3
 800639e:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80063a2:	2a30      	cmp	r2, #48	; 0x30
 80063a4:	d0fa      	beq.n	800639c <_dtoa_r+0xb7c>
 80063a6:	e6e1      	b.n	800616c <_dtoa_r+0x94c>
 80063a8:	9a03      	ldr	r2, [sp, #12]
 80063aa:	429a      	cmp	r2, r3
 80063ac:	d18a      	bne.n	80062c4 <_dtoa_r+0xaa4>
 80063ae:	2331      	movs	r3, #49	; 0x31
 80063b0:	f10b 0b01 	add.w	fp, fp, #1
 80063b4:	e797      	b.n	80062e6 <_dtoa_r+0xac6>
 80063b6:	4b0a      	ldr	r3, [pc, #40]	; (80063e0 <_dtoa_r+0xbc0>)
 80063b8:	f7ff ba9f 	b.w	80058fa <_dtoa_r+0xda>
 80063bc:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80063be:	2b00      	cmp	r3, #0
 80063c0:	f47f aa77 	bne.w	80058b2 <_dtoa_r+0x92>
 80063c4:	4b07      	ldr	r3, [pc, #28]	; (80063e4 <_dtoa_r+0xbc4>)
 80063c6:	f7ff ba98 	b.w	80058fa <_dtoa_r+0xda>
 80063ca:	9b06      	ldr	r3, [sp, #24]
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	dcb6      	bgt.n	800633e <_dtoa_r+0xb1e>
 80063d0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80063d2:	2b02      	cmp	r3, #2
 80063d4:	f73f aeb5 	bgt.w	8006142 <_dtoa_r+0x922>
 80063d8:	e7b1      	b.n	800633e <_dtoa_r+0xb1e>
 80063da:	bf00      	nop
 80063dc:	08007882 	.word	0x08007882
 80063e0:	080077e2 	.word	0x080077e2
 80063e4:	08007806 	.word	0x08007806

080063e8 <_free_r>:
 80063e8:	b538      	push	{r3, r4, r5, lr}
 80063ea:	4605      	mov	r5, r0
 80063ec:	2900      	cmp	r1, #0
 80063ee:	d040      	beq.n	8006472 <_free_r+0x8a>
 80063f0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80063f4:	1f0c      	subs	r4, r1, #4
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	bfb8      	it	lt
 80063fa:	18e4      	addlt	r4, r4, r3
 80063fc:	f000 f8e4 	bl	80065c8 <__malloc_lock>
 8006400:	4a1c      	ldr	r2, [pc, #112]	; (8006474 <_free_r+0x8c>)
 8006402:	6813      	ldr	r3, [r2, #0]
 8006404:	b933      	cbnz	r3, 8006414 <_free_r+0x2c>
 8006406:	6063      	str	r3, [r4, #4]
 8006408:	6014      	str	r4, [r2, #0]
 800640a:	4628      	mov	r0, r5
 800640c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006410:	f000 b8e0 	b.w	80065d4 <__malloc_unlock>
 8006414:	42a3      	cmp	r3, r4
 8006416:	d908      	bls.n	800642a <_free_r+0x42>
 8006418:	6820      	ldr	r0, [r4, #0]
 800641a:	1821      	adds	r1, r4, r0
 800641c:	428b      	cmp	r3, r1
 800641e:	bf01      	itttt	eq
 8006420:	6819      	ldreq	r1, [r3, #0]
 8006422:	685b      	ldreq	r3, [r3, #4]
 8006424:	1809      	addeq	r1, r1, r0
 8006426:	6021      	streq	r1, [r4, #0]
 8006428:	e7ed      	b.n	8006406 <_free_r+0x1e>
 800642a:	461a      	mov	r2, r3
 800642c:	685b      	ldr	r3, [r3, #4]
 800642e:	b10b      	cbz	r3, 8006434 <_free_r+0x4c>
 8006430:	42a3      	cmp	r3, r4
 8006432:	d9fa      	bls.n	800642a <_free_r+0x42>
 8006434:	6811      	ldr	r1, [r2, #0]
 8006436:	1850      	adds	r0, r2, r1
 8006438:	42a0      	cmp	r0, r4
 800643a:	d10b      	bne.n	8006454 <_free_r+0x6c>
 800643c:	6820      	ldr	r0, [r4, #0]
 800643e:	4401      	add	r1, r0
 8006440:	1850      	adds	r0, r2, r1
 8006442:	4283      	cmp	r3, r0
 8006444:	6011      	str	r1, [r2, #0]
 8006446:	d1e0      	bne.n	800640a <_free_r+0x22>
 8006448:	6818      	ldr	r0, [r3, #0]
 800644a:	685b      	ldr	r3, [r3, #4]
 800644c:	4408      	add	r0, r1
 800644e:	6010      	str	r0, [r2, #0]
 8006450:	6053      	str	r3, [r2, #4]
 8006452:	e7da      	b.n	800640a <_free_r+0x22>
 8006454:	d902      	bls.n	800645c <_free_r+0x74>
 8006456:	230c      	movs	r3, #12
 8006458:	602b      	str	r3, [r5, #0]
 800645a:	e7d6      	b.n	800640a <_free_r+0x22>
 800645c:	6820      	ldr	r0, [r4, #0]
 800645e:	1821      	adds	r1, r4, r0
 8006460:	428b      	cmp	r3, r1
 8006462:	bf01      	itttt	eq
 8006464:	6819      	ldreq	r1, [r3, #0]
 8006466:	685b      	ldreq	r3, [r3, #4]
 8006468:	1809      	addeq	r1, r1, r0
 800646a:	6021      	streq	r1, [r4, #0]
 800646c:	6063      	str	r3, [r4, #4]
 800646e:	6054      	str	r4, [r2, #4]
 8006470:	e7cb      	b.n	800640a <_free_r+0x22>
 8006472:	bd38      	pop	{r3, r4, r5, pc}
 8006474:	20000488 	.word	0x20000488

08006478 <malloc>:
 8006478:	4b02      	ldr	r3, [pc, #8]	; (8006484 <malloc+0xc>)
 800647a:	4601      	mov	r1, r0
 800647c:	6818      	ldr	r0, [r3, #0]
 800647e:	f000 b823 	b.w	80064c8 <_malloc_r>
 8006482:	bf00      	nop
 8006484:	20000078 	.word	0x20000078

08006488 <sbrk_aligned>:
 8006488:	b570      	push	{r4, r5, r6, lr}
 800648a:	4e0e      	ldr	r6, [pc, #56]	; (80064c4 <sbrk_aligned+0x3c>)
 800648c:	460c      	mov	r4, r1
 800648e:	6831      	ldr	r1, [r6, #0]
 8006490:	4605      	mov	r5, r0
 8006492:	b911      	cbnz	r1, 800649a <sbrk_aligned+0x12>
 8006494:	f000 febc 	bl	8007210 <_sbrk_r>
 8006498:	6030      	str	r0, [r6, #0]
 800649a:	4621      	mov	r1, r4
 800649c:	4628      	mov	r0, r5
 800649e:	f000 feb7 	bl	8007210 <_sbrk_r>
 80064a2:	1c43      	adds	r3, r0, #1
 80064a4:	d00a      	beq.n	80064bc <sbrk_aligned+0x34>
 80064a6:	1cc4      	adds	r4, r0, #3
 80064a8:	f024 0403 	bic.w	r4, r4, #3
 80064ac:	42a0      	cmp	r0, r4
 80064ae:	d007      	beq.n	80064c0 <sbrk_aligned+0x38>
 80064b0:	1a21      	subs	r1, r4, r0
 80064b2:	4628      	mov	r0, r5
 80064b4:	f000 feac 	bl	8007210 <_sbrk_r>
 80064b8:	3001      	adds	r0, #1
 80064ba:	d101      	bne.n	80064c0 <sbrk_aligned+0x38>
 80064bc:	f04f 34ff 	mov.w	r4, #4294967295
 80064c0:	4620      	mov	r0, r4
 80064c2:	bd70      	pop	{r4, r5, r6, pc}
 80064c4:	2000048c 	.word	0x2000048c

080064c8 <_malloc_r>:
 80064c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80064cc:	1ccd      	adds	r5, r1, #3
 80064ce:	f025 0503 	bic.w	r5, r5, #3
 80064d2:	3508      	adds	r5, #8
 80064d4:	2d0c      	cmp	r5, #12
 80064d6:	bf38      	it	cc
 80064d8:	250c      	movcc	r5, #12
 80064da:	2d00      	cmp	r5, #0
 80064dc:	4607      	mov	r7, r0
 80064de:	db01      	blt.n	80064e4 <_malloc_r+0x1c>
 80064e0:	42a9      	cmp	r1, r5
 80064e2:	d905      	bls.n	80064f0 <_malloc_r+0x28>
 80064e4:	230c      	movs	r3, #12
 80064e6:	2600      	movs	r6, #0
 80064e8:	603b      	str	r3, [r7, #0]
 80064ea:	4630      	mov	r0, r6
 80064ec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80064f0:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80065c4 <_malloc_r+0xfc>
 80064f4:	f000 f868 	bl	80065c8 <__malloc_lock>
 80064f8:	f8d8 3000 	ldr.w	r3, [r8]
 80064fc:	461c      	mov	r4, r3
 80064fe:	bb5c      	cbnz	r4, 8006558 <_malloc_r+0x90>
 8006500:	4629      	mov	r1, r5
 8006502:	4638      	mov	r0, r7
 8006504:	f7ff ffc0 	bl	8006488 <sbrk_aligned>
 8006508:	1c43      	adds	r3, r0, #1
 800650a:	4604      	mov	r4, r0
 800650c:	d155      	bne.n	80065ba <_malloc_r+0xf2>
 800650e:	f8d8 4000 	ldr.w	r4, [r8]
 8006512:	4626      	mov	r6, r4
 8006514:	2e00      	cmp	r6, #0
 8006516:	d145      	bne.n	80065a4 <_malloc_r+0xdc>
 8006518:	2c00      	cmp	r4, #0
 800651a:	d048      	beq.n	80065ae <_malloc_r+0xe6>
 800651c:	6823      	ldr	r3, [r4, #0]
 800651e:	4631      	mov	r1, r6
 8006520:	4638      	mov	r0, r7
 8006522:	eb04 0903 	add.w	r9, r4, r3
 8006526:	f000 fe73 	bl	8007210 <_sbrk_r>
 800652a:	4581      	cmp	r9, r0
 800652c:	d13f      	bne.n	80065ae <_malloc_r+0xe6>
 800652e:	6821      	ldr	r1, [r4, #0]
 8006530:	4638      	mov	r0, r7
 8006532:	1a6d      	subs	r5, r5, r1
 8006534:	4629      	mov	r1, r5
 8006536:	f7ff ffa7 	bl	8006488 <sbrk_aligned>
 800653a:	3001      	adds	r0, #1
 800653c:	d037      	beq.n	80065ae <_malloc_r+0xe6>
 800653e:	6823      	ldr	r3, [r4, #0]
 8006540:	442b      	add	r3, r5
 8006542:	6023      	str	r3, [r4, #0]
 8006544:	f8d8 3000 	ldr.w	r3, [r8]
 8006548:	2b00      	cmp	r3, #0
 800654a:	d038      	beq.n	80065be <_malloc_r+0xf6>
 800654c:	685a      	ldr	r2, [r3, #4]
 800654e:	42a2      	cmp	r2, r4
 8006550:	d12b      	bne.n	80065aa <_malloc_r+0xe2>
 8006552:	2200      	movs	r2, #0
 8006554:	605a      	str	r2, [r3, #4]
 8006556:	e00f      	b.n	8006578 <_malloc_r+0xb0>
 8006558:	6822      	ldr	r2, [r4, #0]
 800655a:	1b52      	subs	r2, r2, r5
 800655c:	d41f      	bmi.n	800659e <_malloc_r+0xd6>
 800655e:	2a0b      	cmp	r2, #11
 8006560:	d917      	bls.n	8006592 <_malloc_r+0xca>
 8006562:	1961      	adds	r1, r4, r5
 8006564:	42a3      	cmp	r3, r4
 8006566:	6025      	str	r5, [r4, #0]
 8006568:	bf18      	it	ne
 800656a:	6059      	strne	r1, [r3, #4]
 800656c:	6863      	ldr	r3, [r4, #4]
 800656e:	bf08      	it	eq
 8006570:	f8c8 1000 	streq.w	r1, [r8]
 8006574:	5162      	str	r2, [r4, r5]
 8006576:	604b      	str	r3, [r1, #4]
 8006578:	4638      	mov	r0, r7
 800657a:	f104 060b 	add.w	r6, r4, #11
 800657e:	f000 f829 	bl	80065d4 <__malloc_unlock>
 8006582:	f026 0607 	bic.w	r6, r6, #7
 8006586:	1d23      	adds	r3, r4, #4
 8006588:	1af2      	subs	r2, r6, r3
 800658a:	d0ae      	beq.n	80064ea <_malloc_r+0x22>
 800658c:	1b9b      	subs	r3, r3, r6
 800658e:	50a3      	str	r3, [r4, r2]
 8006590:	e7ab      	b.n	80064ea <_malloc_r+0x22>
 8006592:	42a3      	cmp	r3, r4
 8006594:	6862      	ldr	r2, [r4, #4]
 8006596:	d1dd      	bne.n	8006554 <_malloc_r+0x8c>
 8006598:	f8c8 2000 	str.w	r2, [r8]
 800659c:	e7ec      	b.n	8006578 <_malloc_r+0xb0>
 800659e:	4623      	mov	r3, r4
 80065a0:	6864      	ldr	r4, [r4, #4]
 80065a2:	e7ac      	b.n	80064fe <_malloc_r+0x36>
 80065a4:	4634      	mov	r4, r6
 80065a6:	6876      	ldr	r6, [r6, #4]
 80065a8:	e7b4      	b.n	8006514 <_malloc_r+0x4c>
 80065aa:	4613      	mov	r3, r2
 80065ac:	e7cc      	b.n	8006548 <_malloc_r+0x80>
 80065ae:	230c      	movs	r3, #12
 80065b0:	4638      	mov	r0, r7
 80065b2:	603b      	str	r3, [r7, #0]
 80065b4:	f000 f80e 	bl	80065d4 <__malloc_unlock>
 80065b8:	e797      	b.n	80064ea <_malloc_r+0x22>
 80065ba:	6025      	str	r5, [r4, #0]
 80065bc:	e7dc      	b.n	8006578 <_malloc_r+0xb0>
 80065be:	605b      	str	r3, [r3, #4]
 80065c0:	deff      	udf	#255	; 0xff
 80065c2:	bf00      	nop
 80065c4:	20000488 	.word	0x20000488

080065c8 <__malloc_lock>:
 80065c8:	4801      	ldr	r0, [pc, #4]	; (80065d0 <__malloc_lock+0x8>)
 80065ca:	f7ff b890 	b.w	80056ee <__retarget_lock_acquire_recursive>
 80065ce:	bf00      	nop
 80065d0:	20000484 	.word	0x20000484

080065d4 <__malloc_unlock>:
 80065d4:	4801      	ldr	r0, [pc, #4]	; (80065dc <__malloc_unlock+0x8>)
 80065d6:	f7ff b88b 	b.w	80056f0 <__retarget_lock_release_recursive>
 80065da:	bf00      	nop
 80065dc:	20000484 	.word	0x20000484

080065e0 <_Balloc>:
 80065e0:	b570      	push	{r4, r5, r6, lr}
 80065e2:	69c6      	ldr	r6, [r0, #28]
 80065e4:	4604      	mov	r4, r0
 80065e6:	460d      	mov	r5, r1
 80065e8:	b976      	cbnz	r6, 8006608 <_Balloc+0x28>
 80065ea:	2010      	movs	r0, #16
 80065ec:	f7ff ff44 	bl	8006478 <malloc>
 80065f0:	4602      	mov	r2, r0
 80065f2:	61e0      	str	r0, [r4, #28]
 80065f4:	b920      	cbnz	r0, 8006600 <_Balloc+0x20>
 80065f6:	216b      	movs	r1, #107	; 0x6b
 80065f8:	4b17      	ldr	r3, [pc, #92]	; (8006658 <_Balloc+0x78>)
 80065fa:	4818      	ldr	r0, [pc, #96]	; (800665c <_Balloc+0x7c>)
 80065fc:	f000 fe26 	bl	800724c <__assert_func>
 8006600:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006604:	6006      	str	r6, [r0, #0]
 8006606:	60c6      	str	r6, [r0, #12]
 8006608:	69e6      	ldr	r6, [r4, #28]
 800660a:	68f3      	ldr	r3, [r6, #12]
 800660c:	b183      	cbz	r3, 8006630 <_Balloc+0x50>
 800660e:	69e3      	ldr	r3, [r4, #28]
 8006610:	68db      	ldr	r3, [r3, #12]
 8006612:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006616:	b9b8      	cbnz	r0, 8006648 <_Balloc+0x68>
 8006618:	2101      	movs	r1, #1
 800661a:	fa01 f605 	lsl.w	r6, r1, r5
 800661e:	1d72      	adds	r2, r6, #5
 8006620:	4620      	mov	r0, r4
 8006622:	0092      	lsls	r2, r2, #2
 8006624:	f000 fe30 	bl	8007288 <_calloc_r>
 8006628:	b160      	cbz	r0, 8006644 <_Balloc+0x64>
 800662a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800662e:	e00e      	b.n	800664e <_Balloc+0x6e>
 8006630:	2221      	movs	r2, #33	; 0x21
 8006632:	2104      	movs	r1, #4
 8006634:	4620      	mov	r0, r4
 8006636:	f000 fe27 	bl	8007288 <_calloc_r>
 800663a:	69e3      	ldr	r3, [r4, #28]
 800663c:	60f0      	str	r0, [r6, #12]
 800663e:	68db      	ldr	r3, [r3, #12]
 8006640:	2b00      	cmp	r3, #0
 8006642:	d1e4      	bne.n	800660e <_Balloc+0x2e>
 8006644:	2000      	movs	r0, #0
 8006646:	bd70      	pop	{r4, r5, r6, pc}
 8006648:	6802      	ldr	r2, [r0, #0]
 800664a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800664e:	2300      	movs	r3, #0
 8006650:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006654:	e7f7      	b.n	8006646 <_Balloc+0x66>
 8006656:	bf00      	nop
 8006658:	08007813 	.word	0x08007813
 800665c:	08007893 	.word	0x08007893

08006660 <_Bfree>:
 8006660:	b570      	push	{r4, r5, r6, lr}
 8006662:	69c6      	ldr	r6, [r0, #28]
 8006664:	4605      	mov	r5, r0
 8006666:	460c      	mov	r4, r1
 8006668:	b976      	cbnz	r6, 8006688 <_Bfree+0x28>
 800666a:	2010      	movs	r0, #16
 800666c:	f7ff ff04 	bl	8006478 <malloc>
 8006670:	4602      	mov	r2, r0
 8006672:	61e8      	str	r0, [r5, #28]
 8006674:	b920      	cbnz	r0, 8006680 <_Bfree+0x20>
 8006676:	218f      	movs	r1, #143	; 0x8f
 8006678:	4b08      	ldr	r3, [pc, #32]	; (800669c <_Bfree+0x3c>)
 800667a:	4809      	ldr	r0, [pc, #36]	; (80066a0 <_Bfree+0x40>)
 800667c:	f000 fde6 	bl	800724c <__assert_func>
 8006680:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006684:	6006      	str	r6, [r0, #0]
 8006686:	60c6      	str	r6, [r0, #12]
 8006688:	b13c      	cbz	r4, 800669a <_Bfree+0x3a>
 800668a:	69eb      	ldr	r3, [r5, #28]
 800668c:	6862      	ldr	r2, [r4, #4]
 800668e:	68db      	ldr	r3, [r3, #12]
 8006690:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006694:	6021      	str	r1, [r4, #0]
 8006696:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800669a:	bd70      	pop	{r4, r5, r6, pc}
 800669c:	08007813 	.word	0x08007813
 80066a0:	08007893 	.word	0x08007893

080066a4 <__multadd>:
 80066a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80066a8:	4607      	mov	r7, r0
 80066aa:	460c      	mov	r4, r1
 80066ac:	461e      	mov	r6, r3
 80066ae:	2000      	movs	r0, #0
 80066b0:	690d      	ldr	r5, [r1, #16]
 80066b2:	f101 0c14 	add.w	ip, r1, #20
 80066b6:	f8dc 3000 	ldr.w	r3, [ip]
 80066ba:	3001      	adds	r0, #1
 80066bc:	b299      	uxth	r1, r3
 80066be:	fb02 6101 	mla	r1, r2, r1, r6
 80066c2:	0c1e      	lsrs	r6, r3, #16
 80066c4:	0c0b      	lsrs	r3, r1, #16
 80066c6:	fb02 3306 	mla	r3, r2, r6, r3
 80066ca:	b289      	uxth	r1, r1
 80066cc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80066d0:	4285      	cmp	r5, r0
 80066d2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80066d6:	f84c 1b04 	str.w	r1, [ip], #4
 80066da:	dcec      	bgt.n	80066b6 <__multadd+0x12>
 80066dc:	b30e      	cbz	r6, 8006722 <__multadd+0x7e>
 80066de:	68a3      	ldr	r3, [r4, #8]
 80066e0:	42ab      	cmp	r3, r5
 80066e2:	dc19      	bgt.n	8006718 <__multadd+0x74>
 80066e4:	6861      	ldr	r1, [r4, #4]
 80066e6:	4638      	mov	r0, r7
 80066e8:	3101      	adds	r1, #1
 80066ea:	f7ff ff79 	bl	80065e0 <_Balloc>
 80066ee:	4680      	mov	r8, r0
 80066f0:	b928      	cbnz	r0, 80066fe <__multadd+0x5a>
 80066f2:	4602      	mov	r2, r0
 80066f4:	21ba      	movs	r1, #186	; 0xba
 80066f6:	4b0c      	ldr	r3, [pc, #48]	; (8006728 <__multadd+0x84>)
 80066f8:	480c      	ldr	r0, [pc, #48]	; (800672c <__multadd+0x88>)
 80066fa:	f000 fda7 	bl	800724c <__assert_func>
 80066fe:	6922      	ldr	r2, [r4, #16]
 8006700:	f104 010c 	add.w	r1, r4, #12
 8006704:	3202      	adds	r2, #2
 8006706:	0092      	lsls	r2, r2, #2
 8006708:	300c      	adds	r0, #12
 800670a:	f000 fd91 	bl	8007230 <memcpy>
 800670e:	4621      	mov	r1, r4
 8006710:	4638      	mov	r0, r7
 8006712:	f7ff ffa5 	bl	8006660 <_Bfree>
 8006716:	4644      	mov	r4, r8
 8006718:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800671c:	3501      	adds	r5, #1
 800671e:	615e      	str	r6, [r3, #20]
 8006720:	6125      	str	r5, [r4, #16]
 8006722:	4620      	mov	r0, r4
 8006724:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006728:	08007882 	.word	0x08007882
 800672c:	08007893 	.word	0x08007893

08006730 <__hi0bits>:
 8006730:	0c02      	lsrs	r2, r0, #16
 8006732:	0412      	lsls	r2, r2, #16
 8006734:	4603      	mov	r3, r0
 8006736:	b9ca      	cbnz	r2, 800676c <__hi0bits+0x3c>
 8006738:	0403      	lsls	r3, r0, #16
 800673a:	2010      	movs	r0, #16
 800673c:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8006740:	bf04      	itt	eq
 8006742:	021b      	lsleq	r3, r3, #8
 8006744:	3008      	addeq	r0, #8
 8006746:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800674a:	bf04      	itt	eq
 800674c:	011b      	lsleq	r3, r3, #4
 800674e:	3004      	addeq	r0, #4
 8006750:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8006754:	bf04      	itt	eq
 8006756:	009b      	lsleq	r3, r3, #2
 8006758:	3002      	addeq	r0, #2
 800675a:	2b00      	cmp	r3, #0
 800675c:	db05      	blt.n	800676a <__hi0bits+0x3a>
 800675e:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8006762:	f100 0001 	add.w	r0, r0, #1
 8006766:	bf08      	it	eq
 8006768:	2020      	moveq	r0, #32
 800676a:	4770      	bx	lr
 800676c:	2000      	movs	r0, #0
 800676e:	e7e5      	b.n	800673c <__hi0bits+0xc>

08006770 <__lo0bits>:
 8006770:	6803      	ldr	r3, [r0, #0]
 8006772:	4602      	mov	r2, r0
 8006774:	f013 0007 	ands.w	r0, r3, #7
 8006778:	d00b      	beq.n	8006792 <__lo0bits+0x22>
 800677a:	07d9      	lsls	r1, r3, #31
 800677c:	d421      	bmi.n	80067c2 <__lo0bits+0x52>
 800677e:	0798      	lsls	r0, r3, #30
 8006780:	bf49      	itett	mi
 8006782:	085b      	lsrmi	r3, r3, #1
 8006784:	089b      	lsrpl	r3, r3, #2
 8006786:	2001      	movmi	r0, #1
 8006788:	6013      	strmi	r3, [r2, #0]
 800678a:	bf5c      	itt	pl
 800678c:	2002      	movpl	r0, #2
 800678e:	6013      	strpl	r3, [r2, #0]
 8006790:	4770      	bx	lr
 8006792:	b299      	uxth	r1, r3
 8006794:	b909      	cbnz	r1, 800679a <__lo0bits+0x2a>
 8006796:	2010      	movs	r0, #16
 8006798:	0c1b      	lsrs	r3, r3, #16
 800679a:	b2d9      	uxtb	r1, r3
 800679c:	b909      	cbnz	r1, 80067a2 <__lo0bits+0x32>
 800679e:	3008      	adds	r0, #8
 80067a0:	0a1b      	lsrs	r3, r3, #8
 80067a2:	0719      	lsls	r1, r3, #28
 80067a4:	bf04      	itt	eq
 80067a6:	091b      	lsreq	r3, r3, #4
 80067a8:	3004      	addeq	r0, #4
 80067aa:	0799      	lsls	r1, r3, #30
 80067ac:	bf04      	itt	eq
 80067ae:	089b      	lsreq	r3, r3, #2
 80067b0:	3002      	addeq	r0, #2
 80067b2:	07d9      	lsls	r1, r3, #31
 80067b4:	d403      	bmi.n	80067be <__lo0bits+0x4e>
 80067b6:	085b      	lsrs	r3, r3, #1
 80067b8:	f100 0001 	add.w	r0, r0, #1
 80067bc:	d003      	beq.n	80067c6 <__lo0bits+0x56>
 80067be:	6013      	str	r3, [r2, #0]
 80067c0:	4770      	bx	lr
 80067c2:	2000      	movs	r0, #0
 80067c4:	4770      	bx	lr
 80067c6:	2020      	movs	r0, #32
 80067c8:	4770      	bx	lr
	...

080067cc <__i2b>:
 80067cc:	b510      	push	{r4, lr}
 80067ce:	460c      	mov	r4, r1
 80067d0:	2101      	movs	r1, #1
 80067d2:	f7ff ff05 	bl	80065e0 <_Balloc>
 80067d6:	4602      	mov	r2, r0
 80067d8:	b928      	cbnz	r0, 80067e6 <__i2b+0x1a>
 80067da:	f240 1145 	movw	r1, #325	; 0x145
 80067de:	4b04      	ldr	r3, [pc, #16]	; (80067f0 <__i2b+0x24>)
 80067e0:	4804      	ldr	r0, [pc, #16]	; (80067f4 <__i2b+0x28>)
 80067e2:	f000 fd33 	bl	800724c <__assert_func>
 80067e6:	2301      	movs	r3, #1
 80067e8:	6144      	str	r4, [r0, #20]
 80067ea:	6103      	str	r3, [r0, #16]
 80067ec:	bd10      	pop	{r4, pc}
 80067ee:	bf00      	nop
 80067f0:	08007882 	.word	0x08007882
 80067f4:	08007893 	.word	0x08007893

080067f8 <__multiply>:
 80067f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80067fc:	4691      	mov	r9, r2
 80067fe:	690a      	ldr	r2, [r1, #16]
 8006800:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8006804:	460c      	mov	r4, r1
 8006806:	429a      	cmp	r2, r3
 8006808:	bfbe      	ittt	lt
 800680a:	460b      	movlt	r3, r1
 800680c:	464c      	movlt	r4, r9
 800680e:	4699      	movlt	r9, r3
 8006810:	6927      	ldr	r7, [r4, #16]
 8006812:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8006816:	68a3      	ldr	r3, [r4, #8]
 8006818:	6861      	ldr	r1, [r4, #4]
 800681a:	eb07 060a 	add.w	r6, r7, sl
 800681e:	42b3      	cmp	r3, r6
 8006820:	b085      	sub	sp, #20
 8006822:	bfb8      	it	lt
 8006824:	3101      	addlt	r1, #1
 8006826:	f7ff fedb 	bl	80065e0 <_Balloc>
 800682a:	b930      	cbnz	r0, 800683a <__multiply+0x42>
 800682c:	4602      	mov	r2, r0
 800682e:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8006832:	4b43      	ldr	r3, [pc, #268]	; (8006940 <__multiply+0x148>)
 8006834:	4843      	ldr	r0, [pc, #268]	; (8006944 <__multiply+0x14c>)
 8006836:	f000 fd09 	bl	800724c <__assert_func>
 800683a:	f100 0514 	add.w	r5, r0, #20
 800683e:	462b      	mov	r3, r5
 8006840:	2200      	movs	r2, #0
 8006842:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8006846:	4543      	cmp	r3, r8
 8006848:	d321      	bcc.n	800688e <__multiply+0x96>
 800684a:	f104 0314 	add.w	r3, r4, #20
 800684e:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8006852:	f109 0314 	add.w	r3, r9, #20
 8006856:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800685a:	9202      	str	r2, [sp, #8]
 800685c:	1b3a      	subs	r2, r7, r4
 800685e:	3a15      	subs	r2, #21
 8006860:	f022 0203 	bic.w	r2, r2, #3
 8006864:	3204      	adds	r2, #4
 8006866:	f104 0115 	add.w	r1, r4, #21
 800686a:	428f      	cmp	r7, r1
 800686c:	bf38      	it	cc
 800686e:	2204      	movcc	r2, #4
 8006870:	9201      	str	r2, [sp, #4]
 8006872:	9a02      	ldr	r2, [sp, #8]
 8006874:	9303      	str	r3, [sp, #12]
 8006876:	429a      	cmp	r2, r3
 8006878:	d80c      	bhi.n	8006894 <__multiply+0x9c>
 800687a:	2e00      	cmp	r6, #0
 800687c:	dd03      	ble.n	8006886 <__multiply+0x8e>
 800687e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8006882:	2b00      	cmp	r3, #0
 8006884:	d05a      	beq.n	800693c <__multiply+0x144>
 8006886:	6106      	str	r6, [r0, #16]
 8006888:	b005      	add	sp, #20
 800688a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800688e:	f843 2b04 	str.w	r2, [r3], #4
 8006892:	e7d8      	b.n	8006846 <__multiply+0x4e>
 8006894:	f8b3 a000 	ldrh.w	sl, [r3]
 8006898:	f1ba 0f00 	cmp.w	sl, #0
 800689c:	d023      	beq.n	80068e6 <__multiply+0xee>
 800689e:	46a9      	mov	r9, r5
 80068a0:	f04f 0c00 	mov.w	ip, #0
 80068a4:	f104 0e14 	add.w	lr, r4, #20
 80068a8:	f85e 2b04 	ldr.w	r2, [lr], #4
 80068ac:	f8d9 1000 	ldr.w	r1, [r9]
 80068b0:	fa1f fb82 	uxth.w	fp, r2
 80068b4:	b289      	uxth	r1, r1
 80068b6:	fb0a 110b 	mla	r1, sl, fp, r1
 80068ba:	4461      	add	r1, ip
 80068bc:	f8d9 c000 	ldr.w	ip, [r9]
 80068c0:	0c12      	lsrs	r2, r2, #16
 80068c2:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 80068c6:	fb0a c202 	mla	r2, sl, r2, ip
 80068ca:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80068ce:	b289      	uxth	r1, r1
 80068d0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80068d4:	4577      	cmp	r7, lr
 80068d6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80068da:	f849 1b04 	str.w	r1, [r9], #4
 80068de:	d8e3      	bhi.n	80068a8 <__multiply+0xb0>
 80068e0:	9a01      	ldr	r2, [sp, #4]
 80068e2:	f845 c002 	str.w	ip, [r5, r2]
 80068e6:	9a03      	ldr	r2, [sp, #12]
 80068e8:	3304      	adds	r3, #4
 80068ea:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80068ee:	f1b9 0f00 	cmp.w	r9, #0
 80068f2:	d021      	beq.n	8006938 <__multiply+0x140>
 80068f4:	46ae      	mov	lr, r5
 80068f6:	f04f 0a00 	mov.w	sl, #0
 80068fa:	6829      	ldr	r1, [r5, #0]
 80068fc:	f104 0c14 	add.w	ip, r4, #20
 8006900:	f8bc b000 	ldrh.w	fp, [ip]
 8006904:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8006908:	b289      	uxth	r1, r1
 800690a:	fb09 220b 	mla	r2, r9, fp, r2
 800690e:	4452      	add	r2, sl
 8006910:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8006914:	f84e 1b04 	str.w	r1, [lr], #4
 8006918:	f85c 1b04 	ldr.w	r1, [ip], #4
 800691c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8006920:	f8be 1000 	ldrh.w	r1, [lr]
 8006924:	4567      	cmp	r7, ip
 8006926:	fb09 110a 	mla	r1, r9, sl, r1
 800692a:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800692e:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8006932:	d8e5      	bhi.n	8006900 <__multiply+0x108>
 8006934:	9a01      	ldr	r2, [sp, #4]
 8006936:	50a9      	str	r1, [r5, r2]
 8006938:	3504      	adds	r5, #4
 800693a:	e79a      	b.n	8006872 <__multiply+0x7a>
 800693c:	3e01      	subs	r6, #1
 800693e:	e79c      	b.n	800687a <__multiply+0x82>
 8006940:	08007882 	.word	0x08007882
 8006944:	08007893 	.word	0x08007893

08006948 <__pow5mult>:
 8006948:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800694c:	4615      	mov	r5, r2
 800694e:	f012 0203 	ands.w	r2, r2, #3
 8006952:	4606      	mov	r6, r0
 8006954:	460f      	mov	r7, r1
 8006956:	d007      	beq.n	8006968 <__pow5mult+0x20>
 8006958:	4c25      	ldr	r4, [pc, #148]	; (80069f0 <__pow5mult+0xa8>)
 800695a:	3a01      	subs	r2, #1
 800695c:	2300      	movs	r3, #0
 800695e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006962:	f7ff fe9f 	bl	80066a4 <__multadd>
 8006966:	4607      	mov	r7, r0
 8006968:	10ad      	asrs	r5, r5, #2
 800696a:	d03d      	beq.n	80069e8 <__pow5mult+0xa0>
 800696c:	69f4      	ldr	r4, [r6, #28]
 800696e:	b97c      	cbnz	r4, 8006990 <__pow5mult+0x48>
 8006970:	2010      	movs	r0, #16
 8006972:	f7ff fd81 	bl	8006478 <malloc>
 8006976:	4602      	mov	r2, r0
 8006978:	61f0      	str	r0, [r6, #28]
 800697a:	b928      	cbnz	r0, 8006988 <__pow5mult+0x40>
 800697c:	f240 11b3 	movw	r1, #435	; 0x1b3
 8006980:	4b1c      	ldr	r3, [pc, #112]	; (80069f4 <__pow5mult+0xac>)
 8006982:	481d      	ldr	r0, [pc, #116]	; (80069f8 <__pow5mult+0xb0>)
 8006984:	f000 fc62 	bl	800724c <__assert_func>
 8006988:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800698c:	6004      	str	r4, [r0, #0]
 800698e:	60c4      	str	r4, [r0, #12]
 8006990:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8006994:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006998:	b94c      	cbnz	r4, 80069ae <__pow5mult+0x66>
 800699a:	f240 2171 	movw	r1, #625	; 0x271
 800699e:	4630      	mov	r0, r6
 80069a0:	f7ff ff14 	bl	80067cc <__i2b>
 80069a4:	2300      	movs	r3, #0
 80069a6:	4604      	mov	r4, r0
 80069a8:	f8c8 0008 	str.w	r0, [r8, #8]
 80069ac:	6003      	str	r3, [r0, #0]
 80069ae:	f04f 0900 	mov.w	r9, #0
 80069b2:	07eb      	lsls	r3, r5, #31
 80069b4:	d50a      	bpl.n	80069cc <__pow5mult+0x84>
 80069b6:	4639      	mov	r1, r7
 80069b8:	4622      	mov	r2, r4
 80069ba:	4630      	mov	r0, r6
 80069bc:	f7ff ff1c 	bl	80067f8 <__multiply>
 80069c0:	4680      	mov	r8, r0
 80069c2:	4639      	mov	r1, r7
 80069c4:	4630      	mov	r0, r6
 80069c6:	f7ff fe4b 	bl	8006660 <_Bfree>
 80069ca:	4647      	mov	r7, r8
 80069cc:	106d      	asrs	r5, r5, #1
 80069ce:	d00b      	beq.n	80069e8 <__pow5mult+0xa0>
 80069d0:	6820      	ldr	r0, [r4, #0]
 80069d2:	b938      	cbnz	r0, 80069e4 <__pow5mult+0x9c>
 80069d4:	4622      	mov	r2, r4
 80069d6:	4621      	mov	r1, r4
 80069d8:	4630      	mov	r0, r6
 80069da:	f7ff ff0d 	bl	80067f8 <__multiply>
 80069de:	6020      	str	r0, [r4, #0]
 80069e0:	f8c0 9000 	str.w	r9, [r0]
 80069e4:	4604      	mov	r4, r0
 80069e6:	e7e4      	b.n	80069b2 <__pow5mult+0x6a>
 80069e8:	4638      	mov	r0, r7
 80069ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80069ee:	bf00      	nop
 80069f0:	080079e0 	.word	0x080079e0
 80069f4:	08007813 	.word	0x08007813
 80069f8:	08007893 	.word	0x08007893

080069fc <__lshift>:
 80069fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006a00:	460c      	mov	r4, r1
 8006a02:	4607      	mov	r7, r0
 8006a04:	4691      	mov	r9, r2
 8006a06:	6923      	ldr	r3, [r4, #16]
 8006a08:	6849      	ldr	r1, [r1, #4]
 8006a0a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8006a0e:	68a3      	ldr	r3, [r4, #8]
 8006a10:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006a14:	f108 0601 	add.w	r6, r8, #1
 8006a18:	42b3      	cmp	r3, r6
 8006a1a:	db0b      	blt.n	8006a34 <__lshift+0x38>
 8006a1c:	4638      	mov	r0, r7
 8006a1e:	f7ff fddf 	bl	80065e0 <_Balloc>
 8006a22:	4605      	mov	r5, r0
 8006a24:	b948      	cbnz	r0, 8006a3a <__lshift+0x3e>
 8006a26:	4602      	mov	r2, r0
 8006a28:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8006a2c:	4b27      	ldr	r3, [pc, #156]	; (8006acc <__lshift+0xd0>)
 8006a2e:	4828      	ldr	r0, [pc, #160]	; (8006ad0 <__lshift+0xd4>)
 8006a30:	f000 fc0c 	bl	800724c <__assert_func>
 8006a34:	3101      	adds	r1, #1
 8006a36:	005b      	lsls	r3, r3, #1
 8006a38:	e7ee      	b.n	8006a18 <__lshift+0x1c>
 8006a3a:	2300      	movs	r3, #0
 8006a3c:	f100 0114 	add.w	r1, r0, #20
 8006a40:	f100 0210 	add.w	r2, r0, #16
 8006a44:	4618      	mov	r0, r3
 8006a46:	4553      	cmp	r3, sl
 8006a48:	db33      	blt.n	8006ab2 <__lshift+0xb6>
 8006a4a:	6920      	ldr	r0, [r4, #16]
 8006a4c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006a50:	f104 0314 	add.w	r3, r4, #20
 8006a54:	f019 091f 	ands.w	r9, r9, #31
 8006a58:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006a5c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8006a60:	d02b      	beq.n	8006aba <__lshift+0xbe>
 8006a62:	468a      	mov	sl, r1
 8006a64:	2200      	movs	r2, #0
 8006a66:	f1c9 0e20 	rsb	lr, r9, #32
 8006a6a:	6818      	ldr	r0, [r3, #0]
 8006a6c:	fa00 f009 	lsl.w	r0, r0, r9
 8006a70:	4310      	orrs	r0, r2
 8006a72:	f84a 0b04 	str.w	r0, [sl], #4
 8006a76:	f853 2b04 	ldr.w	r2, [r3], #4
 8006a7a:	459c      	cmp	ip, r3
 8006a7c:	fa22 f20e 	lsr.w	r2, r2, lr
 8006a80:	d8f3      	bhi.n	8006a6a <__lshift+0x6e>
 8006a82:	ebac 0304 	sub.w	r3, ip, r4
 8006a86:	3b15      	subs	r3, #21
 8006a88:	f023 0303 	bic.w	r3, r3, #3
 8006a8c:	3304      	adds	r3, #4
 8006a8e:	f104 0015 	add.w	r0, r4, #21
 8006a92:	4584      	cmp	ip, r0
 8006a94:	bf38      	it	cc
 8006a96:	2304      	movcc	r3, #4
 8006a98:	50ca      	str	r2, [r1, r3]
 8006a9a:	b10a      	cbz	r2, 8006aa0 <__lshift+0xa4>
 8006a9c:	f108 0602 	add.w	r6, r8, #2
 8006aa0:	3e01      	subs	r6, #1
 8006aa2:	4638      	mov	r0, r7
 8006aa4:	4621      	mov	r1, r4
 8006aa6:	612e      	str	r6, [r5, #16]
 8006aa8:	f7ff fdda 	bl	8006660 <_Bfree>
 8006aac:	4628      	mov	r0, r5
 8006aae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006ab2:	f842 0f04 	str.w	r0, [r2, #4]!
 8006ab6:	3301      	adds	r3, #1
 8006ab8:	e7c5      	b.n	8006a46 <__lshift+0x4a>
 8006aba:	3904      	subs	r1, #4
 8006abc:	f853 2b04 	ldr.w	r2, [r3], #4
 8006ac0:	459c      	cmp	ip, r3
 8006ac2:	f841 2f04 	str.w	r2, [r1, #4]!
 8006ac6:	d8f9      	bhi.n	8006abc <__lshift+0xc0>
 8006ac8:	e7ea      	b.n	8006aa0 <__lshift+0xa4>
 8006aca:	bf00      	nop
 8006acc:	08007882 	.word	0x08007882
 8006ad0:	08007893 	.word	0x08007893

08006ad4 <__mcmp>:
 8006ad4:	4603      	mov	r3, r0
 8006ad6:	690a      	ldr	r2, [r1, #16]
 8006ad8:	6900      	ldr	r0, [r0, #16]
 8006ada:	b530      	push	{r4, r5, lr}
 8006adc:	1a80      	subs	r0, r0, r2
 8006ade:	d10d      	bne.n	8006afc <__mcmp+0x28>
 8006ae0:	3314      	adds	r3, #20
 8006ae2:	3114      	adds	r1, #20
 8006ae4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8006ae8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8006aec:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8006af0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8006af4:	4295      	cmp	r5, r2
 8006af6:	d002      	beq.n	8006afe <__mcmp+0x2a>
 8006af8:	d304      	bcc.n	8006b04 <__mcmp+0x30>
 8006afa:	2001      	movs	r0, #1
 8006afc:	bd30      	pop	{r4, r5, pc}
 8006afe:	42a3      	cmp	r3, r4
 8006b00:	d3f4      	bcc.n	8006aec <__mcmp+0x18>
 8006b02:	e7fb      	b.n	8006afc <__mcmp+0x28>
 8006b04:	f04f 30ff 	mov.w	r0, #4294967295
 8006b08:	e7f8      	b.n	8006afc <__mcmp+0x28>
	...

08006b0c <__mdiff>:
 8006b0c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b10:	460d      	mov	r5, r1
 8006b12:	4607      	mov	r7, r0
 8006b14:	4611      	mov	r1, r2
 8006b16:	4628      	mov	r0, r5
 8006b18:	4614      	mov	r4, r2
 8006b1a:	f7ff ffdb 	bl	8006ad4 <__mcmp>
 8006b1e:	1e06      	subs	r6, r0, #0
 8006b20:	d111      	bne.n	8006b46 <__mdiff+0x3a>
 8006b22:	4631      	mov	r1, r6
 8006b24:	4638      	mov	r0, r7
 8006b26:	f7ff fd5b 	bl	80065e0 <_Balloc>
 8006b2a:	4602      	mov	r2, r0
 8006b2c:	b928      	cbnz	r0, 8006b3a <__mdiff+0x2e>
 8006b2e:	f240 2137 	movw	r1, #567	; 0x237
 8006b32:	4b3a      	ldr	r3, [pc, #232]	; (8006c1c <__mdiff+0x110>)
 8006b34:	483a      	ldr	r0, [pc, #232]	; (8006c20 <__mdiff+0x114>)
 8006b36:	f000 fb89 	bl	800724c <__assert_func>
 8006b3a:	2301      	movs	r3, #1
 8006b3c:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8006b40:	4610      	mov	r0, r2
 8006b42:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006b46:	bfa4      	itt	ge
 8006b48:	4623      	movge	r3, r4
 8006b4a:	462c      	movge	r4, r5
 8006b4c:	4638      	mov	r0, r7
 8006b4e:	6861      	ldr	r1, [r4, #4]
 8006b50:	bfa6      	itte	ge
 8006b52:	461d      	movge	r5, r3
 8006b54:	2600      	movge	r6, #0
 8006b56:	2601      	movlt	r6, #1
 8006b58:	f7ff fd42 	bl	80065e0 <_Balloc>
 8006b5c:	4602      	mov	r2, r0
 8006b5e:	b918      	cbnz	r0, 8006b68 <__mdiff+0x5c>
 8006b60:	f240 2145 	movw	r1, #581	; 0x245
 8006b64:	4b2d      	ldr	r3, [pc, #180]	; (8006c1c <__mdiff+0x110>)
 8006b66:	e7e5      	b.n	8006b34 <__mdiff+0x28>
 8006b68:	f102 0814 	add.w	r8, r2, #20
 8006b6c:	46c2      	mov	sl, r8
 8006b6e:	f04f 0c00 	mov.w	ip, #0
 8006b72:	6927      	ldr	r7, [r4, #16]
 8006b74:	60c6      	str	r6, [r0, #12]
 8006b76:	692e      	ldr	r6, [r5, #16]
 8006b78:	f104 0014 	add.w	r0, r4, #20
 8006b7c:	f105 0914 	add.w	r9, r5, #20
 8006b80:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 8006b84:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8006b88:	3410      	adds	r4, #16
 8006b8a:	f854 bf04 	ldr.w	fp, [r4, #4]!
 8006b8e:	f859 3b04 	ldr.w	r3, [r9], #4
 8006b92:	fa1f f18b 	uxth.w	r1, fp
 8006b96:	4461      	add	r1, ip
 8006b98:	fa1f fc83 	uxth.w	ip, r3
 8006b9c:	0c1b      	lsrs	r3, r3, #16
 8006b9e:	eba1 010c 	sub.w	r1, r1, ip
 8006ba2:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8006ba6:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8006baa:	b289      	uxth	r1, r1
 8006bac:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8006bb0:	454e      	cmp	r6, r9
 8006bb2:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8006bb6:	f84a 1b04 	str.w	r1, [sl], #4
 8006bba:	d8e6      	bhi.n	8006b8a <__mdiff+0x7e>
 8006bbc:	1b73      	subs	r3, r6, r5
 8006bbe:	3b15      	subs	r3, #21
 8006bc0:	f023 0303 	bic.w	r3, r3, #3
 8006bc4:	3515      	adds	r5, #21
 8006bc6:	3304      	adds	r3, #4
 8006bc8:	42ae      	cmp	r6, r5
 8006bca:	bf38      	it	cc
 8006bcc:	2304      	movcc	r3, #4
 8006bce:	4418      	add	r0, r3
 8006bd0:	4443      	add	r3, r8
 8006bd2:	461e      	mov	r6, r3
 8006bd4:	4605      	mov	r5, r0
 8006bd6:	4575      	cmp	r5, lr
 8006bd8:	d30e      	bcc.n	8006bf8 <__mdiff+0xec>
 8006bda:	f10e 0103 	add.w	r1, lr, #3
 8006bde:	1a09      	subs	r1, r1, r0
 8006be0:	f021 0103 	bic.w	r1, r1, #3
 8006be4:	3803      	subs	r0, #3
 8006be6:	4586      	cmp	lr, r0
 8006be8:	bf38      	it	cc
 8006bea:	2100      	movcc	r1, #0
 8006bec:	440b      	add	r3, r1
 8006bee:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8006bf2:	b189      	cbz	r1, 8006c18 <__mdiff+0x10c>
 8006bf4:	6117      	str	r7, [r2, #16]
 8006bf6:	e7a3      	b.n	8006b40 <__mdiff+0x34>
 8006bf8:	f855 8b04 	ldr.w	r8, [r5], #4
 8006bfc:	fa1f f188 	uxth.w	r1, r8
 8006c00:	4461      	add	r1, ip
 8006c02:	140c      	asrs	r4, r1, #16
 8006c04:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8006c08:	b289      	uxth	r1, r1
 8006c0a:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8006c0e:	ea4f 4c24 	mov.w	ip, r4, asr #16
 8006c12:	f846 1b04 	str.w	r1, [r6], #4
 8006c16:	e7de      	b.n	8006bd6 <__mdiff+0xca>
 8006c18:	3f01      	subs	r7, #1
 8006c1a:	e7e8      	b.n	8006bee <__mdiff+0xe2>
 8006c1c:	08007882 	.word	0x08007882
 8006c20:	08007893 	.word	0x08007893

08006c24 <__d2b>:
 8006c24:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006c26:	2101      	movs	r1, #1
 8006c28:	4617      	mov	r7, r2
 8006c2a:	461c      	mov	r4, r3
 8006c2c:	9e08      	ldr	r6, [sp, #32]
 8006c2e:	f7ff fcd7 	bl	80065e0 <_Balloc>
 8006c32:	4605      	mov	r5, r0
 8006c34:	b930      	cbnz	r0, 8006c44 <__d2b+0x20>
 8006c36:	4602      	mov	r2, r0
 8006c38:	f240 310f 	movw	r1, #783	; 0x30f
 8006c3c:	4b22      	ldr	r3, [pc, #136]	; (8006cc8 <__d2b+0xa4>)
 8006c3e:	4823      	ldr	r0, [pc, #140]	; (8006ccc <__d2b+0xa8>)
 8006c40:	f000 fb04 	bl	800724c <__assert_func>
 8006c44:	f3c4 0313 	ubfx	r3, r4, #0, #20
 8006c48:	f3c4 540a 	ubfx	r4, r4, #20, #11
 8006c4c:	bb24      	cbnz	r4, 8006c98 <__d2b+0x74>
 8006c4e:	2f00      	cmp	r7, #0
 8006c50:	9301      	str	r3, [sp, #4]
 8006c52:	d026      	beq.n	8006ca2 <__d2b+0x7e>
 8006c54:	4668      	mov	r0, sp
 8006c56:	9700      	str	r7, [sp, #0]
 8006c58:	f7ff fd8a 	bl	8006770 <__lo0bits>
 8006c5c:	e9dd 1200 	ldrd	r1, r2, [sp]
 8006c60:	b1e8      	cbz	r0, 8006c9e <__d2b+0x7a>
 8006c62:	f1c0 0320 	rsb	r3, r0, #32
 8006c66:	fa02 f303 	lsl.w	r3, r2, r3
 8006c6a:	430b      	orrs	r3, r1
 8006c6c:	40c2      	lsrs	r2, r0
 8006c6e:	616b      	str	r3, [r5, #20]
 8006c70:	9201      	str	r2, [sp, #4]
 8006c72:	9b01      	ldr	r3, [sp, #4]
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	bf14      	ite	ne
 8006c78:	2102      	movne	r1, #2
 8006c7a:	2101      	moveq	r1, #1
 8006c7c:	61ab      	str	r3, [r5, #24]
 8006c7e:	6129      	str	r1, [r5, #16]
 8006c80:	b1bc      	cbz	r4, 8006cb2 <__d2b+0x8e>
 8006c82:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8006c86:	4404      	add	r4, r0
 8006c88:	6034      	str	r4, [r6, #0]
 8006c8a:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8006c8e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006c90:	6018      	str	r0, [r3, #0]
 8006c92:	4628      	mov	r0, r5
 8006c94:	b003      	add	sp, #12
 8006c96:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006c98:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006c9c:	e7d7      	b.n	8006c4e <__d2b+0x2a>
 8006c9e:	6169      	str	r1, [r5, #20]
 8006ca0:	e7e7      	b.n	8006c72 <__d2b+0x4e>
 8006ca2:	a801      	add	r0, sp, #4
 8006ca4:	f7ff fd64 	bl	8006770 <__lo0bits>
 8006ca8:	9b01      	ldr	r3, [sp, #4]
 8006caa:	2101      	movs	r1, #1
 8006cac:	616b      	str	r3, [r5, #20]
 8006cae:	3020      	adds	r0, #32
 8006cb0:	e7e5      	b.n	8006c7e <__d2b+0x5a>
 8006cb2:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8006cb6:	eb05 0381 	add.w	r3, r5, r1, lsl #2
 8006cba:	6030      	str	r0, [r6, #0]
 8006cbc:	6918      	ldr	r0, [r3, #16]
 8006cbe:	f7ff fd37 	bl	8006730 <__hi0bits>
 8006cc2:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8006cc6:	e7e2      	b.n	8006c8e <__d2b+0x6a>
 8006cc8:	08007882 	.word	0x08007882
 8006ccc:	08007893 	.word	0x08007893

08006cd0 <__ssputs_r>:
 8006cd0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006cd4:	461f      	mov	r7, r3
 8006cd6:	688e      	ldr	r6, [r1, #8]
 8006cd8:	4682      	mov	sl, r0
 8006cda:	42be      	cmp	r6, r7
 8006cdc:	460c      	mov	r4, r1
 8006cde:	4690      	mov	r8, r2
 8006ce0:	680b      	ldr	r3, [r1, #0]
 8006ce2:	d82c      	bhi.n	8006d3e <__ssputs_r+0x6e>
 8006ce4:	898a      	ldrh	r2, [r1, #12]
 8006ce6:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006cea:	d026      	beq.n	8006d3a <__ssputs_r+0x6a>
 8006cec:	6965      	ldr	r5, [r4, #20]
 8006cee:	6909      	ldr	r1, [r1, #16]
 8006cf0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006cf4:	eba3 0901 	sub.w	r9, r3, r1
 8006cf8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006cfc:	1c7b      	adds	r3, r7, #1
 8006cfe:	444b      	add	r3, r9
 8006d00:	106d      	asrs	r5, r5, #1
 8006d02:	429d      	cmp	r5, r3
 8006d04:	bf38      	it	cc
 8006d06:	461d      	movcc	r5, r3
 8006d08:	0553      	lsls	r3, r2, #21
 8006d0a:	d527      	bpl.n	8006d5c <__ssputs_r+0x8c>
 8006d0c:	4629      	mov	r1, r5
 8006d0e:	f7ff fbdb 	bl	80064c8 <_malloc_r>
 8006d12:	4606      	mov	r6, r0
 8006d14:	b360      	cbz	r0, 8006d70 <__ssputs_r+0xa0>
 8006d16:	464a      	mov	r2, r9
 8006d18:	6921      	ldr	r1, [r4, #16]
 8006d1a:	f000 fa89 	bl	8007230 <memcpy>
 8006d1e:	89a3      	ldrh	r3, [r4, #12]
 8006d20:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006d24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006d28:	81a3      	strh	r3, [r4, #12]
 8006d2a:	6126      	str	r6, [r4, #16]
 8006d2c:	444e      	add	r6, r9
 8006d2e:	6026      	str	r6, [r4, #0]
 8006d30:	463e      	mov	r6, r7
 8006d32:	6165      	str	r5, [r4, #20]
 8006d34:	eba5 0509 	sub.w	r5, r5, r9
 8006d38:	60a5      	str	r5, [r4, #8]
 8006d3a:	42be      	cmp	r6, r7
 8006d3c:	d900      	bls.n	8006d40 <__ssputs_r+0x70>
 8006d3e:	463e      	mov	r6, r7
 8006d40:	4632      	mov	r2, r6
 8006d42:	4641      	mov	r1, r8
 8006d44:	6820      	ldr	r0, [r4, #0]
 8006d46:	f000 fa26 	bl	8007196 <memmove>
 8006d4a:	2000      	movs	r0, #0
 8006d4c:	68a3      	ldr	r3, [r4, #8]
 8006d4e:	1b9b      	subs	r3, r3, r6
 8006d50:	60a3      	str	r3, [r4, #8]
 8006d52:	6823      	ldr	r3, [r4, #0]
 8006d54:	4433      	add	r3, r6
 8006d56:	6023      	str	r3, [r4, #0]
 8006d58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006d5c:	462a      	mov	r2, r5
 8006d5e:	f000 fab9 	bl	80072d4 <_realloc_r>
 8006d62:	4606      	mov	r6, r0
 8006d64:	2800      	cmp	r0, #0
 8006d66:	d1e0      	bne.n	8006d2a <__ssputs_r+0x5a>
 8006d68:	4650      	mov	r0, sl
 8006d6a:	6921      	ldr	r1, [r4, #16]
 8006d6c:	f7ff fb3c 	bl	80063e8 <_free_r>
 8006d70:	230c      	movs	r3, #12
 8006d72:	f8ca 3000 	str.w	r3, [sl]
 8006d76:	89a3      	ldrh	r3, [r4, #12]
 8006d78:	f04f 30ff 	mov.w	r0, #4294967295
 8006d7c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006d80:	81a3      	strh	r3, [r4, #12]
 8006d82:	e7e9      	b.n	8006d58 <__ssputs_r+0x88>

08006d84 <_svfiprintf_r>:
 8006d84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d88:	4698      	mov	r8, r3
 8006d8a:	898b      	ldrh	r3, [r1, #12]
 8006d8c:	4607      	mov	r7, r0
 8006d8e:	061b      	lsls	r3, r3, #24
 8006d90:	460d      	mov	r5, r1
 8006d92:	4614      	mov	r4, r2
 8006d94:	b09d      	sub	sp, #116	; 0x74
 8006d96:	d50e      	bpl.n	8006db6 <_svfiprintf_r+0x32>
 8006d98:	690b      	ldr	r3, [r1, #16]
 8006d9a:	b963      	cbnz	r3, 8006db6 <_svfiprintf_r+0x32>
 8006d9c:	2140      	movs	r1, #64	; 0x40
 8006d9e:	f7ff fb93 	bl	80064c8 <_malloc_r>
 8006da2:	6028      	str	r0, [r5, #0]
 8006da4:	6128      	str	r0, [r5, #16]
 8006da6:	b920      	cbnz	r0, 8006db2 <_svfiprintf_r+0x2e>
 8006da8:	230c      	movs	r3, #12
 8006daa:	603b      	str	r3, [r7, #0]
 8006dac:	f04f 30ff 	mov.w	r0, #4294967295
 8006db0:	e0d0      	b.n	8006f54 <_svfiprintf_r+0x1d0>
 8006db2:	2340      	movs	r3, #64	; 0x40
 8006db4:	616b      	str	r3, [r5, #20]
 8006db6:	2300      	movs	r3, #0
 8006db8:	9309      	str	r3, [sp, #36]	; 0x24
 8006dba:	2320      	movs	r3, #32
 8006dbc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006dc0:	2330      	movs	r3, #48	; 0x30
 8006dc2:	f04f 0901 	mov.w	r9, #1
 8006dc6:	f8cd 800c 	str.w	r8, [sp, #12]
 8006dca:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 8006f6c <_svfiprintf_r+0x1e8>
 8006dce:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006dd2:	4623      	mov	r3, r4
 8006dd4:	469a      	mov	sl, r3
 8006dd6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006dda:	b10a      	cbz	r2, 8006de0 <_svfiprintf_r+0x5c>
 8006ddc:	2a25      	cmp	r2, #37	; 0x25
 8006dde:	d1f9      	bne.n	8006dd4 <_svfiprintf_r+0x50>
 8006de0:	ebba 0b04 	subs.w	fp, sl, r4
 8006de4:	d00b      	beq.n	8006dfe <_svfiprintf_r+0x7a>
 8006de6:	465b      	mov	r3, fp
 8006de8:	4622      	mov	r2, r4
 8006dea:	4629      	mov	r1, r5
 8006dec:	4638      	mov	r0, r7
 8006dee:	f7ff ff6f 	bl	8006cd0 <__ssputs_r>
 8006df2:	3001      	adds	r0, #1
 8006df4:	f000 80a9 	beq.w	8006f4a <_svfiprintf_r+0x1c6>
 8006df8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006dfa:	445a      	add	r2, fp
 8006dfc:	9209      	str	r2, [sp, #36]	; 0x24
 8006dfe:	f89a 3000 	ldrb.w	r3, [sl]
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	f000 80a1 	beq.w	8006f4a <_svfiprintf_r+0x1c6>
 8006e08:	2300      	movs	r3, #0
 8006e0a:	f04f 32ff 	mov.w	r2, #4294967295
 8006e0e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006e12:	f10a 0a01 	add.w	sl, sl, #1
 8006e16:	9304      	str	r3, [sp, #16]
 8006e18:	9307      	str	r3, [sp, #28]
 8006e1a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006e1e:	931a      	str	r3, [sp, #104]	; 0x68
 8006e20:	4654      	mov	r4, sl
 8006e22:	2205      	movs	r2, #5
 8006e24:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006e28:	4850      	ldr	r0, [pc, #320]	; (8006f6c <_svfiprintf_r+0x1e8>)
 8006e2a:	f7fe fc62 	bl	80056f2 <memchr>
 8006e2e:	9a04      	ldr	r2, [sp, #16]
 8006e30:	b9d8      	cbnz	r0, 8006e6a <_svfiprintf_r+0xe6>
 8006e32:	06d0      	lsls	r0, r2, #27
 8006e34:	bf44      	itt	mi
 8006e36:	2320      	movmi	r3, #32
 8006e38:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006e3c:	0711      	lsls	r1, r2, #28
 8006e3e:	bf44      	itt	mi
 8006e40:	232b      	movmi	r3, #43	; 0x2b
 8006e42:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006e46:	f89a 3000 	ldrb.w	r3, [sl]
 8006e4a:	2b2a      	cmp	r3, #42	; 0x2a
 8006e4c:	d015      	beq.n	8006e7a <_svfiprintf_r+0xf6>
 8006e4e:	4654      	mov	r4, sl
 8006e50:	2000      	movs	r0, #0
 8006e52:	f04f 0c0a 	mov.w	ip, #10
 8006e56:	9a07      	ldr	r2, [sp, #28]
 8006e58:	4621      	mov	r1, r4
 8006e5a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006e5e:	3b30      	subs	r3, #48	; 0x30
 8006e60:	2b09      	cmp	r3, #9
 8006e62:	d94d      	bls.n	8006f00 <_svfiprintf_r+0x17c>
 8006e64:	b1b0      	cbz	r0, 8006e94 <_svfiprintf_r+0x110>
 8006e66:	9207      	str	r2, [sp, #28]
 8006e68:	e014      	b.n	8006e94 <_svfiprintf_r+0x110>
 8006e6a:	eba0 0308 	sub.w	r3, r0, r8
 8006e6e:	fa09 f303 	lsl.w	r3, r9, r3
 8006e72:	4313      	orrs	r3, r2
 8006e74:	46a2      	mov	sl, r4
 8006e76:	9304      	str	r3, [sp, #16]
 8006e78:	e7d2      	b.n	8006e20 <_svfiprintf_r+0x9c>
 8006e7a:	9b03      	ldr	r3, [sp, #12]
 8006e7c:	1d19      	adds	r1, r3, #4
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	9103      	str	r1, [sp, #12]
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	bfbb      	ittet	lt
 8006e86:	425b      	neglt	r3, r3
 8006e88:	f042 0202 	orrlt.w	r2, r2, #2
 8006e8c:	9307      	strge	r3, [sp, #28]
 8006e8e:	9307      	strlt	r3, [sp, #28]
 8006e90:	bfb8      	it	lt
 8006e92:	9204      	strlt	r2, [sp, #16]
 8006e94:	7823      	ldrb	r3, [r4, #0]
 8006e96:	2b2e      	cmp	r3, #46	; 0x2e
 8006e98:	d10c      	bne.n	8006eb4 <_svfiprintf_r+0x130>
 8006e9a:	7863      	ldrb	r3, [r4, #1]
 8006e9c:	2b2a      	cmp	r3, #42	; 0x2a
 8006e9e:	d134      	bne.n	8006f0a <_svfiprintf_r+0x186>
 8006ea0:	9b03      	ldr	r3, [sp, #12]
 8006ea2:	3402      	adds	r4, #2
 8006ea4:	1d1a      	adds	r2, r3, #4
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	9203      	str	r2, [sp, #12]
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	bfb8      	it	lt
 8006eae:	f04f 33ff 	movlt.w	r3, #4294967295
 8006eb2:	9305      	str	r3, [sp, #20]
 8006eb4:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 8006f70 <_svfiprintf_r+0x1ec>
 8006eb8:	2203      	movs	r2, #3
 8006eba:	4650      	mov	r0, sl
 8006ebc:	7821      	ldrb	r1, [r4, #0]
 8006ebe:	f7fe fc18 	bl	80056f2 <memchr>
 8006ec2:	b138      	cbz	r0, 8006ed4 <_svfiprintf_r+0x150>
 8006ec4:	2240      	movs	r2, #64	; 0x40
 8006ec6:	9b04      	ldr	r3, [sp, #16]
 8006ec8:	eba0 000a 	sub.w	r0, r0, sl
 8006ecc:	4082      	lsls	r2, r0
 8006ece:	4313      	orrs	r3, r2
 8006ed0:	3401      	adds	r4, #1
 8006ed2:	9304      	str	r3, [sp, #16]
 8006ed4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006ed8:	2206      	movs	r2, #6
 8006eda:	4826      	ldr	r0, [pc, #152]	; (8006f74 <_svfiprintf_r+0x1f0>)
 8006edc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006ee0:	f7fe fc07 	bl	80056f2 <memchr>
 8006ee4:	2800      	cmp	r0, #0
 8006ee6:	d038      	beq.n	8006f5a <_svfiprintf_r+0x1d6>
 8006ee8:	4b23      	ldr	r3, [pc, #140]	; (8006f78 <_svfiprintf_r+0x1f4>)
 8006eea:	bb1b      	cbnz	r3, 8006f34 <_svfiprintf_r+0x1b0>
 8006eec:	9b03      	ldr	r3, [sp, #12]
 8006eee:	3307      	adds	r3, #7
 8006ef0:	f023 0307 	bic.w	r3, r3, #7
 8006ef4:	3308      	adds	r3, #8
 8006ef6:	9303      	str	r3, [sp, #12]
 8006ef8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006efa:	4433      	add	r3, r6
 8006efc:	9309      	str	r3, [sp, #36]	; 0x24
 8006efe:	e768      	b.n	8006dd2 <_svfiprintf_r+0x4e>
 8006f00:	460c      	mov	r4, r1
 8006f02:	2001      	movs	r0, #1
 8006f04:	fb0c 3202 	mla	r2, ip, r2, r3
 8006f08:	e7a6      	b.n	8006e58 <_svfiprintf_r+0xd4>
 8006f0a:	2300      	movs	r3, #0
 8006f0c:	f04f 0c0a 	mov.w	ip, #10
 8006f10:	4619      	mov	r1, r3
 8006f12:	3401      	adds	r4, #1
 8006f14:	9305      	str	r3, [sp, #20]
 8006f16:	4620      	mov	r0, r4
 8006f18:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006f1c:	3a30      	subs	r2, #48	; 0x30
 8006f1e:	2a09      	cmp	r2, #9
 8006f20:	d903      	bls.n	8006f2a <_svfiprintf_r+0x1a6>
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d0c6      	beq.n	8006eb4 <_svfiprintf_r+0x130>
 8006f26:	9105      	str	r1, [sp, #20]
 8006f28:	e7c4      	b.n	8006eb4 <_svfiprintf_r+0x130>
 8006f2a:	4604      	mov	r4, r0
 8006f2c:	2301      	movs	r3, #1
 8006f2e:	fb0c 2101 	mla	r1, ip, r1, r2
 8006f32:	e7f0      	b.n	8006f16 <_svfiprintf_r+0x192>
 8006f34:	ab03      	add	r3, sp, #12
 8006f36:	9300      	str	r3, [sp, #0]
 8006f38:	462a      	mov	r2, r5
 8006f3a:	4638      	mov	r0, r7
 8006f3c:	4b0f      	ldr	r3, [pc, #60]	; (8006f7c <_svfiprintf_r+0x1f8>)
 8006f3e:	a904      	add	r1, sp, #16
 8006f40:	f7fd fd80 	bl	8004a44 <_printf_float>
 8006f44:	1c42      	adds	r2, r0, #1
 8006f46:	4606      	mov	r6, r0
 8006f48:	d1d6      	bne.n	8006ef8 <_svfiprintf_r+0x174>
 8006f4a:	89ab      	ldrh	r3, [r5, #12]
 8006f4c:	065b      	lsls	r3, r3, #25
 8006f4e:	f53f af2d 	bmi.w	8006dac <_svfiprintf_r+0x28>
 8006f52:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006f54:	b01d      	add	sp, #116	; 0x74
 8006f56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f5a:	ab03      	add	r3, sp, #12
 8006f5c:	9300      	str	r3, [sp, #0]
 8006f5e:	462a      	mov	r2, r5
 8006f60:	4638      	mov	r0, r7
 8006f62:	4b06      	ldr	r3, [pc, #24]	; (8006f7c <_svfiprintf_r+0x1f8>)
 8006f64:	a904      	add	r1, sp, #16
 8006f66:	f7fe f80d 	bl	8004f84 <_printf_i>
 8006f6a:	e7eb      	b.n	8006f44 <_svfiprintf_r+0x1c0>
 8006f6c:	080079ec 	.word	0x080079ec
 8006f70:	080079f2 	.word	0x080079f2
 8006f74:	080079f6 	.word	0x080079f6
 8006f78:	08004a45 	.word	0x08004a45
 8006f7c:	08006cd1 	.word	0x08006cd1

08006f80 <__sflush_r>:
 8006f80:	898a      	ldrh	r2, [r1, #12]
 8006f82:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f84:	4605      	mov	r5, r0
 8006f86:	0710      	lsls	r0, r2, #28
 8006f88:	460c      	mov	r4, r1
 8006f8a:	d457      	bmi.n	800703c <__sflush_r+0xbc>
 8006f8c:	684b      	ldr	r3, [r1, #4]
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	dc04      	bgt.n	8006f9c <__sflush_r+0x1c>
 8006f92:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	dc01      	bgt.n	8006f9c <__sflush_r+0x1c>
 8006f98:	2000      	movs	r0, #0
 8006f9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006f9c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006f9e:	2e00      	cmp	r6, #0
 8006fa0:	d0fa      	beq.n	8006f98 <__sflush_r+0x18>
 8006fa2:	2300      	movs	r3, #0
 8006fa4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006fa8:	682f      	ldr	r7, [r5, #0]
 8006faa:	6a21      	ldr	r1, [r4, #32]
 8006fac:	602b      	str	r3, [r5, #0]
 8006fae:	d032      	beq.n	8007016 <__sflush_r+0x96>
 8006fb0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006fb2:	89a3      	ldrh	r3, [r4, #12]
 8006fb4:	075a      	lsls	r2, r3, #29
 8006fb6:	d505      	bpl.n	8006fc4 <__sflush_r+0x44>
 8006fb8:	6863      	ldr	r3, [r4, #4]
 8006fba:	1ac0      	subs	r0, r0, r3
 8006fbc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006fbe:	b10b      	cbz	r3, 8006fc4 <__sflush_r+0x44>
 8006fc0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006fc2:	1ac0      	subs	r0, r0, r3
 8006fc4:	2300      	movs	r3, #0
 8006fc6:	4602      	mov	r2, r0
 8006fc8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006fca:	4628      	mov	r0, r5
 8006fcc:	6a21      	ldr	r1, [r4, #32]
 8006fce:	47b0      	blx	r6
 8006fd0:	1c43      	adds	r3, r0, #1
 8006fd2:	89a3      	ldrh	r3, [r4, #12]
 8006fd4:	d106      	bne.n	8006fe4 <__sflush_r+0x64>
 8006fd6:	6829      	ldr	r1, [r5, #0]
 8006fd8:	291d      	cmp	r1, #29
 8006fda:	d82b      	bhi.n	8007034 <__sflush_r+0xb4>
 8006fdc:	4a28      	ldr	r2, [pc, #160]	; (8007080 <__sflush_r+0x100>)
 8006fde:	410a      	asrs	r2, r1
 8006fe0:	07d6      	lsls	r6, r2, #31
 8006fe2:	d427      	bmi.n	8007034 <__sflush_r+0xb4>
 8006fe4:	2200      	movs	r2, #0
 8006fe6:	6062      	str	r2, [r4, #4]
 8006fe8:	6922      	ldr	r2, [r4, #16]
 8006fea:	04d9      	lsls	r1, r3, #19
 8006fec:	6022      	str	r2, [r4, #0]
 8006fee:	d504      	bpl.n	8006ffa <__sflush_r+0x7a>
 8006ff0:	1c42      	adds	r2, r0, #1
 8006ff2:	d101      	bne.n	8006ff8 <__sflush_r+0x78>
 8006ff4:	682b      	ldr	r3, [r5, #0]
 8006ff6:	b903      	cbnz	r3, 8006ffa <__sflush_r+0x7a>
 8006ff8:	6560      	str	r0, [r4, #84]	; 0x54
 8006ffa:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006ffc:	602f      	str	r7, [r5, #0]
 8006ffe:	2900      	cmp	r1, #0
 8007000:	d0ca      	beq.n	8006f98 <__sflush_r+0x18>
 8007002:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007006:	4299      	cmp	r1, r3
 8007008:	d002      	beq.n	8007010 <__sflush_r+0x90>
 800700a:	4628      	mov	r0, r5
 800700c:	f7ff f9ec 	bl	80063e8 <_free_r>
 8007010:	2000      	movs	r0, #0
 8007012:	6360      	str	r0, [r4, #52]	; 0x34
 8007014:	e7c1      	b.n	8006f9a <__sflush_r+0x1a>
 8007016:	2301      	movs	r3, #1
 8007018:	4628      	mov	r0, r5
 800701a:	47b0      	blx	r6
 800701c:	1c41      	adds	r1, r0, #1
 800701e:	d1c8      	bne.n	8006fb2 <__sflush_r+0x32>
 8007020:	682b      	ldr	r3, [r5, #0]
 8007022:	2b00      	cmp	r3, #0
 8007024:	d0c5      	beq.n	8006fb2 <__sflush_r+0x32>
 8007026:	2b1d      	cmp	r3, #29
 8007028:	d001      	beq.n	800702e <__sflush_r+0xae>
 800702a:	2b16      	cmp	r3, #22
 800702c:	d101      	bne.n	8007032 <__sflush_r+0xb2>
 800702e:	602f      	str	r7, [r5, #0]
 8007030:	e7b2      	b.n	8006f98 <__sflush_r+0x18>
 8007032:	89a3      	ldrh	r3, [r4, #12]
 8007034:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007038:	81a3      	strh	r3, [r4, #12]
 800703a:	e7ae      	b.n	8006f9a <__sflush_r+0x1a>
 800703c:	690f      	ldr	r7, [r1, #16]
 800703e:	2f00      	cmp	r7, #0
 8007040:	d0aa      	beq.n	8006f98 <__sflush_r+0x18>
 8007042:	0793      	lsls	r3, r2, #30
 8007044:	bf18      	it	ne
 8007046:	2300      	movne	r3, #0
 8007048:	680e      	ldr	r6, [r1, #0]
 800704a:	bf08      	it	eq
 800704c:	694b      	ldreq	r3, [r1, #20]
 800704e:	1bf6      	subs	r6, r6, r7
 8007050:	600f      	str	r7, [r1, #0]
 8007052:	608b      	str	r3, [r1, #8]
 8007054:	2e00      	cmp	r6, #0
 8007056:	dd9f      	ble.n	8006f98 <__sflush_r+0x18>
 8007058:	4633      	mov	r3, r6
 800705a:	463a      	mov	r2, r7
 800705c:	4628      	mov	r0, r5
 800705e:	6a21      	ldr	r1, [r4, #32]
 8007060:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8007064:	47e0      	blx	ip
 8007066:	2800      	cmp	r0, #0
 8007068:	dc06      	bgt.n	8007078 <__sflush_r+0xf8>
 800706a:	89a3      	ldrh	r3, [r4, #12]
 800706c:	f04f 30ff 	mov.w	r0, #4294967295
 8007070:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007074:	81a3      	strh	r3, [r4, #12]
 8007076:	e790      	b.n	8006f9a <__sflush_r+0x1a>
 8007078:	4407      	add	r7, r0
 800707a:	1a36      	subs	r6, r6, r0
 800707c:	e7ea      	b.n	8007054 <__sflush_r+0xd4>
 800707e:	bf00      	nop
 8007080:	dfbffffe 	.word	0xdfbffffe

08007084 <_fflush_r>:
 8007084:	b538      	push	{r3, r4, r5, lr}
 8007086:	690b      	ldr	r3, [r1, #16]
 8007088:	4605      	mov	r5, r0
 800708a:	460c      	mov	r4, r1
 800708c:	b913      	cbnz	r3, 8007094 <_fflush_r+0x10>
 800708e:	2500      	movs	r5, #0
 8007090:	4628      	mov	r0, r5
 8007092:	bd38      	pop	{r3, r4, r5, pc}
 8007094:	b118      	cbz	r0, 800709e <_fflush_r+0x1a>
 8007096:	6a03      	ldr	r3, [r0, #32]
 8007098:	b90b      	cbnz	r3, 800709e <_fflush_r+0x1a>
 800709a:	f7fe f921 	bl	80052e0 <__sinit>
 800709e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d0f3      	beq.n	800708e <_fflush_r+0xa>
 80070a6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80070a8:	07d0      	lsls	r0, r2, #31
 80070aa:	d404      	bmi.n	80070b6 <_fflush_r+0x32>
 80070ac:	0599      	lsls	r1, r3, #22
 80070ae:	d402      	bmi.n	80070b6 <_fflush_r+0x32>
 80070b0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80070b2:	f7fe fb1c 	bl	80056ee <__retarget_lock_acquire_recursive>
 80070b6:	4628      	mov	r0, r5
 80070b8:	4621      	mov	r1, r4
 80070ba:	f7ff ff61 	bl	8006f80 <__sflush_r>
 80070be:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80070c0:	4605      	mov	r5, r0
 80070c2:	07da      	lsls	r2, r3, #31
 80070c4:	d4e4      	bmi.n	8007090 <_fflush_r+0xc>
 80070c6:	89a3      	ldrh	r3, [r4, #12]
 80070c8:	059b      	lsls	r3, r3, #22
 80070ca:	d4e1      	bmi.n	8007090 <_fflush_r+0xc>
 80070cc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80070ce:	f7fe fb0f 	bl	80056f0 <__retarget_lock_release_recursive>
 80070d2:	e7dd      	b.n	8007090 <_fflush_r+0xc>

080070d4 <__swhatbuf_r>:
 80070d4:	b570      	push	{r4, r5, r6, lr}
 80070d6:	460c      	mov	r4, r1
 80070d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80070dc:	4615      	mov	r5, r2
 80070de:	2900      	cmp	r1, #0
 80070e0:	461e      	mov	r6, r3
 80070e2:	b096      	sub	sp, #88	; 0x58
 80070e4:	da0c      	bge.n	8007100 <__swhatbuf_r+0x2c>
 80070e6:	89a3      	ldrh	r3, [r4, #12]
 80070e8:	2100      	movs	r1, #0
 80070ea:	f013 0f80 	tst.w	r3, #128	; 0x80
 80070ee:	bf0c      	ite	eq
 80070f0:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80070f4:	2340      	movne	r3, #64	; 0x40
 80070f6:	2000      	movs	r0, #0
 80070f8:	6031      	str	r1, [r6, #0]
 80070fa:	602b      	str	r3, [r5, #0]
 80070fc:	b016      	add	sp, #88	; 0x58
 80070fe:	bd70      	pop	{r4, r5, r6, pc}
 8007100:	466a      	mov	r2, sp
 8007102:	f000 f863 	bl	80071cc <_fstat_r>
 8007106:	2800      	cmp	r0, #0
 8007108:	dbed      	blt.n	80070e6 <__swhatbuf_r+0x12>
 800710a:	9901      	ldr	r1, [sp, #4]
 800710c:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8007110:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8007114:	4259      	negs	r1, r3
 8007116:	4159      	adcs	r1, r3
 8007118:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800711c:	e7eb      	b.n	80070f6 <__swhatbuf_r+0x22>

0800711e <__smakebuf_r>:
 800711e:	898b      	ldrh	r3, [r1, #12]
 8007120:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007122:	079d      	lsls	r5, r3, #30
 8007124:	4606      	mov	r6, r0
 8007126:	460c      	mov	r4, r1
 8007128:	d507      	bpl.n	800713a <__smakebuf_r+0x1c>
 800712a:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800712e:	6023      	str	r3, [r4, #0]
 8007130:	6123      	str	r3, [r4, #16]
 8007132:	2301      	movs	r3, #1
 8007134:	6163      	str	r3, [r4, #20]
 8007136:	b002      	add	sp, #8
 8007138:	bd70      	pop	{r4, r5, r6, pc}
 800713a:	466a      	mov	r2, sp
 800713c:	ab01      	add	r3, sp, #4
 800713e:	f7ff ffc9 	bl	80070d4 <__swhatbuf_r>
 8007142:	9900      	ldr	r1, [sp, #0]
 8007144:	4605      	mov	r5, r0
 8007146:	4630      	mov	r0, r6
 8007148:	f7ff f9be 	bl	80064c8 <_malloc_r>
 800714c:	b948      	cbnz	r0, 8007162 <__smakebuf_r+0x44>
 800714e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007152:	059a      	lsls	r2, r3, #22
 8007154:	d4ef      	bmi.n	8007136 <__smakebuf_r+0x18>
 8007156:	f023 0303 	bic.w	r3, r3, #3
 800715a:	f043 0302 	orr.w	r3, r3, #2
 800715e:	81a3      	strh	r3, [r4, #12]
 8007160:	e7e3      	b.n	800712a <__smakebuf_r+0xc>
 8007162:	89a3      	ldrh	r3, [r4, #12]
 8007164:	6020      	str	r0, [r4, #0]
 8007166:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800716a:	81a3      	strh	r3, [r4, #12]
 800716c:	9b00      	ldr	r3, [sp, #0]
 800716e:	6120      	str	r0, [r4, #16]
 8007170:	6163      	str	r3, [r4, #20]
 8007172:	9b01      	ldr	r3, [sp, #4]
 8007174:	b15b      	cbz	r3, 800718e <__smakebuf_r+0x70>
 8007176:	4630      	mov	r0, r6
 8007178:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800717c:	f000 f838 	bl	80071f0 <_isatty_r>
 8007180:	b128      	cbz	r0, 800718e <__smakebuf_r+0x70>
 8007182:	89a3      	ldrh	r3, [r4, #12]
 8007184:	f023 0303 	bic.w	r3, r3, #3
 8007188:	f043 0301 	orr.w	r3, r3, #1
 800718c:	81a3      	strh	r3, [r4, #12]
 800718e:	89a3      	ldrh	r3, [r4, #12]
 8007190:	431d      	orrs	r5, r3
 8007192:	81a5      	strh	r5, [r4, #12]
 8007194:	e7cf      	b.n	8007136 <__smakebuf_r+0x18>

08007196 <memmove>:
 8007196:	4288      	cmp	r0, r1
 8007198:	b510      	push	{r4, lr}
 800719a:	eb01 0402 	add.w	r4, r1, r2
 800719e:	d902      	bls.n	80071a6 <memmove+0x10>
 80071a0:	4284      	cmp	r4, r0
 80071a2:	4623      	mov	r3, r4
 80071a4:	d807      	bhi.n	80071b6 <memmove+0x20>
 80071a6:	1e43      	subs	r3, r0, #1
 80071a8:	42a1      	cmp	r1, r4
 80071aa:	d008      	beq.n	80071be <memmove+0x28>
 80071ac:	f811 2b01 	ldrb.w	r2, [r1], #1
 80071b0:	f803 2f01 	strb.w	r2, [r3, #1]!
 80071b4:	e7f8      	b.n	80071a8 <memmove+0x12>
 80071b6:	4601      	mov	r1, r0
 80071b8:	4402      	add	r2, r0
 80071ba:	428a      	cmp	r2, r1
 80071bc:	d100      	bne.n	80071c0 <memmove+0x2a>
 80071be:	bd10      	pop	{r4, pc}
 80071c0:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80071c4:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80071c8:	e7f7      	b.n	80071ba <memmove+0x24>
	...

080071cc <_fstat_r>:
 80071cc:	b538      	push	{r3, r4, r5, lr}
 80071ce:	2300      	movs	r3, #0
 80071d0:	4d06      	ldr	r5, [pc, #24]	; (80071ec <_fstat_r+0x20>)
 80071d2:	4604      	mov	r4, r0
 80071d4:	4608      	mov	r0, r1
 80071d6:	4611      	mov	r1, r2
 80071d8:	602b      	str	r3, [r5, #0]
 80071da:	f7fa fc98 	bl	8001b0e <_fstat>
 80071de:	1c43      	adds	r3, r0, #1
 80071e0:	d102      	bne.n	80071e8 <_fstat_r+0x1c>
 80071e2:	682b      	ldr	r3, [r5, #0]
 80071e4:	b103      	cbz	r3, 80071e8 <_fstat_r+0x1c>
 80071e6:	6023      	str	r3, [r4, #0]
 80071e8:	bd38      	pop	{r3, r4, r5, pc}
 80071ea:	bf00      	nop
 80071ec:	20000480 	.word	0x20000480

080071f0 <_isatty_r>:
 80071f0:	b538      	push	{r3, r4, r5, lr}
 80071f2:	2300      	movs	r3, #0
 80071f4:	4d05      	ldr	r5, [pc, #20]	; (800720c <_isatty_r+0x1c>)
 80071f6:	4604      	mov	r4, r0
 80071f8:	4608      	mov	r0, r1
 80071fa:	602b      	str	r3, [r5, #0]
 80071fc:	f7fa fc96 	bl	8001b2c <_isatty>
 8007200:	1c43      	adds	r3, r0, #1
 8007202:	d102      	bne.n	800720a <_isatty_r+0x1a>
 8007204:	682b      	ldr	r3, [r5, #0]
 8007206:	b103      	cbz	r3, 800720a <_isatty_r+0x1a>
 8007208:	6023      	str	r3, [r4, #0]
 800720a:	bd38      	pop	{r3, r4, r5, pc}
 800720c:	20000480 	.word	0x20000480

08007210 <_sbrk_r>:
 8007210:	b538      	push	{r3, r4, r5, lr}
 8007212:	2300      	movs	r3, #0
 8007214:	4d05      	ldr	r5, [pc, #20]	; (800722c <_sbrk_r+0x1c>)
 8007216:	4604      	mov	r4, r0
 8007218:	4608      	mov	r0, r1
 800721a:	602b      	str	r3, [r5, #0]
 800721c:	f7fa fc9c 	bl	8001b58 <_sbrk>
 8007220:	1c43      	adds	r3, r0, #1
 8007222:	d102      	bne.n	800722a <_sbrk_r+0x1a>
 8007224:	682b      	ldr	r3, [r5, #0]
 8007226:	b103      	cbz	r3, 800722a <_sbrk_r+0x1a>
 8007228:	6023      	str	r3, [r4, #0]
 800722a:	bd38      	pop	{r3, r4, r5, pc}
 800722c:	20000480 	.word	0x20000480

08007230 <memcpy>:
 8007230:	440a      	add	r2, r1
 8007232:	4291      	cmp	r1, r2
 8007234:	f100 33ff 	add.w	r3, r0, #4294967295
 8007238:	d100      	bne.n	800723c <memcpy+0xc>
 800723a:	4770      	bx	lr
 800723c:	b510      	push	{r4, lr}
 800723e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007242:	4291      	cmp	r1, r2
 8007244:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007248:	d1f9      	bne.n	800723e <memcpy+0xe>
 800724a:	bd10      	pop	{r4, pc}

0800724c <__assert_func>:
 800724c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800724e:	4614      	mov	r4, r2
 8007250:	461a      	mov	r2, r3
 8007252:	4b09      	ldr	r3, [pc, #36]	; (8007278 <__assert_func+0x2c>)
 8007254:	4605      	mov	r5, r0
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	68d8      	ldr	r0, [r3, #12]
 800725a:	b14c      	cbz	r4, 8007270 <__assert_func+0x24>
 800725c:	4b07      	ldr	r3, [pc, #28]	; (800727c <__assert_func+0x30>)
 800725e:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007262:	9100      	str	r1, [sp, #0]
 8007264:	462b      	mov	r3, r5
 8007266:	4906      	ldr	r1, [pc, #24]	; (8007280 <__assert_func+0x34>)
 8007268:	f000 f870 	bl	800734c <fiprintf>
 800726c:	f000 f880 	bl	8007370 <abort>
 8007270:	4b04      	ldr	r3, [pc, #16]	; (8007284 <__assert_func+0x38>)
 8007272:	461c      	mov	r4, r3
 8007274:	e7f3      	b.n	800725e <__assert_func+0x12>
 8007276:	bf00      	nop
 8007278:	20000078 	.word	0x20000078
 800727c:	08007a07 	.word	0x08007a07
 8007280:	08007a14 	.word	0x08007a14
 8007284:	08007a42 	.word	0x08007a42

08007288 <_calloc_r>:
 8007288:	b570      	push	{r4, r5, r6, lr}
 800728a:	fba1 5402 	umull	r5, r4, r1, r2
 800728e:	b934      	cbnz	r4, 800729e <_calloc_r+0x16>
 8007290:	4629      	mov	r1, r5
 8007292:	f7ff f919 	bl	80064c8 <_malloc_r>
 8007296:	4606      	mov	r6, r0
 8007298:	b928      	cbnz	r0, 80072a6 <_calloc_r+0x1e>
 800729a:	4630      	mov	r0, r6
 800729c:	bd70      	pop	{r4, r5, r6, pc}
 800729e:	220c      	movs	r2, #12
 80072a0:	2600      	movs	r6, #0
 80072a2:	6002      	str	r2, [r0, #0]
 80072a4:	e7f9      	b.n	800729a <_calloc_r+0x12>
 80072a6:	462a      	mov	r2, r5
 80072a8:	4621      	mov	r1, r4
 80072aa:	f7fe f9a3 	bl	80055f4 <memset>
 80072ae:	e7f4      	b.n	800729a <_calloc_r+0x12>

080072b0 <__ascii_mbtowc>:
 80072b0:	b082      	sub	sp, #8
 80072b2:	b901      	cbnz	r1, 80072b6 <__ascii_mbtowc+0x6>
 80072b4:	a901      	add	r1, sp, #4
 80072b6:	b142      	cbz	r2, 80072ca <__ascii_mbtowc+0x1a>
 80072b8:	b14b      	cbz	r3, 80072ce <__ascii_mbtowc+0x1e>
 80072ba:	7813      	ldrb	r3, [r2, #0]
 80072bc:	600b      	str	r3, [r1, #0]
 80072be:	7812      	ldrb	r2, [r2, #0]
 80072c0:	1e10      	subs	r0, r2, #0
 80072c2:	bf18      	it	ne
 80072c4:	2001      	movne	r0, #1
 80072c6:	b002      	add	sp, #8
 80072c8:	4770      	bx	lr
 80072ca:	4610      	mov	r0, r2
 80072cc:	e7fb      	b.n	80072c6 <__ascii_mbtowc+0x16>
 80072ce:	f06f 0001 	mvn.w	r0, #1
 80072d2:	e7f8      	b.n	80072c6 <__ascii_mbtowc+0x16>

080072d4 <_realloc_r>:
 80072d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80072d8:	4680      	mov	r8, r0
 80072da:	4614      	mov	r4, r2
 80072dc:	460e      	mov	r6, r1
 80072de:	b921      	cbnz	r1, 80072ea <_realloc_r+0x16>
 80072e0:	4611      	mov	r1, r2
 80072e2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80072e6:	f7ff b8ef 	b.w	80064c8 <_malloc_r>
 80072ea:	b92a      	cbnz	r2, 80072f8 <_realloc_r+0x24>
 80072ec:	f7ff f87c 	bl	80063e8 <_free_r>
 80072f0:	4625      	mov	r5, r4
 80072f2:	4628      	mov	r0, r5
 80072f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80072f8:	f000 f841 	bl	800737e <_malloc_usable_size_r>
 80072fc:	4284      	cmp	r4, r0
 80072fe:	4607      	mov	r7, r0
 8007300:	d802      	bhi.n	8007308 <_realloc_r+0x34>
 8007302:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8007306:	d812      	bhi.n	800732e <_realloc_r+0x5a>
 8007308:	4621      	mov	r1, r4
 800730a:	4640      	mov	r0, r8
 800730c:	f7ff f8dc 	bl	80064c8 <_malloc_r>
 8007310:	4605      	mov	r5, r0
 8007312:	2800      	cmp	r0, #0
 8007314:	d0ed      	beq.n	80072f2 <_realloc_r+0x1e>
 8007316:	42bc      	cmp	r4, r7
 8007318:	4622      	mov	r2, r4
 800731a:	4631      	mov	r1, r6
 800731c:	bf28      	it	cs
 800731e:	463a      	movcs	r2, r7
 8007320:	f7ff ff86 	bl	8007230 <memcpy>
 8007324:	4631      	mov	r1, r6
 8007326:	4640      	mov	r0, r8
 8007328:	f7ff f85e 	bl	80063e8 <_free_r>
 800732c:	e7e1      	b.n	80072f2 <_realloc_r+0x1e>
 800732e:	4635      	mov	r5, r6
 8007330:	e7df      	b.n	80072f2 <_realloc_r+0x1e>

08007332 <__ascii_wctomb>:
 8007332:	4603      	mov	r3, r0
 8007334:	4608      	mov	r0, r1
 8007336:	b141      	cbz	r1, 800734a <__ascii_wctomb+0x18>
 8007338:	2aff      	cmp	r2, #255	; 0xff
 800733a:	d904      	bls.n	8007346 <__ascii_wctomb+0x14>
 800733c:	228a      	movs	r2, #138	; 0x8a
 800733e:	f04f 30ff 	mov.w	r0, #4294967295
 8007342:	601a      	str	r2, [r3, #0]
 8007344:	4770      	bx	lr
 8007346:	2001      	movs	r0, #1
 8007348:	700a      	strb	r2, [r1, #0]
 800734a:	4770      	bx	lr

0800734c <fiprintf>:
 800734c:	b40e      	push	{r1, r2, r3}
 800734e:	b503      	push	{r0, r1, lr}
 8007350:	4601      	mov	r1, r0
 8007352:	ab03      	add	r3, sp, #12
 8007354:	4805      	ldr	r0, [pc, #20]	; (800736c <fiprintf+0x20>)
 8007356:	f853 2b04 	ldr.w	r2, [r3], #4
 800735a:	6800      	ldr	r0, [r0, #0]
 800735c:	9301      	str	r3, [sp, #4]
 800735e:	f000 f83d 	bl	80073dc <_vfiprintf_r>
 8007362:	b002      	add	sp, #8
 8007364:	f85d eb04 	ldr.w	lr, [sp], #4
 8007368:	b003      	add	sp, #12
 800736a:	4770      	bx	lr
 800736c:	20000078 	.word	0x20000078

08007370 <abort>:
 8007370:	2006      	movs	r0, #6
 8007372:	b508      	push	{r3, lr}
 8007374:	f000 f974 	bl	8007660 <raise>
 8007378:	2001      	movs	r0, #1
 800737a:	f7fa fb7a 	bl	8001a72 <_exit>

0800737e <_malloc_usable_size_r>:
 800737e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007382:	1f18      	subs	r0, r3, #4
 8007384:	2b00      	cmp	r3, #0
 8007386:	bfbc      	itt	lt
 8007388:	580b      	ldrlt	r3, [r1, r0]
 800738a:	18c0      	addlt	r0, r0, r3
 800738c:	4770      	bx	lr

0800738e <__sfputc_r>:
 800738e:	6893      	ldr	r3, [r2, #8]
 8007390:	b410      	push	{r4}
 8007392:	3b01      	subs	r3, #1
 8007394:	2b00      	cmp	r3, #0
 8007396:	6093      	str	r3, [r2, #8]
 8007398:	da07      	bge.n	80073aa <__sfputc_r+0x1c>
 800739a:	6994      	ldr	r4, [r2, #24]
 800739c:	42a3      	cmp	r3, r4
 800739e:	db01      	blt.n	80073a4 <__sfputc_r+0x16>
 80073a0:	290a      	cmp	r1, #10
 80073a2:	d102      	bne.n	80073aa <__sfputc_r+0x1c>
 80073a4:	bc10      	pop	{r4}
 80073a6:	f7fe b890 	b.w	80054ca <__swbuf_r>
 80073aa:	6813      	ldr	r3, [r2, #0]
 80073ac:	1c58      	adds	r0, r3, #1
 80073ae:	6010      	str	r0, [r2, #0]
 80073b0:	7019      	strb	r1, [r3, #0]
 80073b2:	4608      	mov	r0, r1
 80073b4:	bc10      	pop	{r4}
 80073b6:	4770      	bx	lr

080073b8 <__sfputs_r>:
 80073b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80073ba:	4606      	mov	r6, r0
 80073bc:	460f      	mov	r7, r1
 80073be:	4614      	mov	r4, r2
 80073c0:	18d5      	adds	r5, r2, r3
 80073c2:	42ac      	cmp	r4, r5
 80073c4:	d101      	bne.n	80073ca <__sfputs_r+0x12>
 80073c6:	2000      	movs	r0, #0
 80073c8:	e007      	b.n	80073da <__sfputs_r+0x22>
 80073ca:	463a      	mov	r2, r7
 80073cc:	4630      	mov	r0, r6
 80073ce:	f814 1b01 	ldrb.w	r1, [r4], #1
 80073d2:	f7ff ffdc 	bl	800738e <__sfputc_r>
 80073d6:	1c43      	adds	r3, r0, #1
 80073d8:	d1f3      	bne.n	80073c2 <__sfputs_r+0xa>
 80073da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080073dc <_vfiprintf_r>:
 80073dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80073e0:	460d      	mov	r5, r1
 80073e2:	4614      	mov	r4, r2
 80073e4:	4698      	mov	r8, r3
 80073e6:	4606      	mov	r6, r0
 80073e8:	b09d      	sub	sp, #116	; 0x74
 80073ea:	b118      	cbz	r0, 80073f4 <_vfiprintf_r+0x18>
 80073ec:	6a03      	ldr	r3, [r0, #32]
 80073ee:	b90b      	cbnz	r3, 80073f4 <_vfiprintf_r+0x18>
 80073f0:	f7fd ff76 	bl	80052e0 <__sinit>
 80073f4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80073f6:	07d9      	lsls	r1, r3, #31
 80073f8:	d405      	bmi.n	8007406 <_vfiprintf_r+0x2a>
 80073fa:	89ab      	ldrh	r3, [r5, #12]
 80073fc:	059a      	lsls	r2, r3, #22
 80073fe:	d402      	bmi.n	8007406 <_vfiprintf_r+0x2a>
 8007400:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007402:	f7fe f974 	bl	80056ee <__retarget_lock_acquire_recursive>
 8007406:	89ab      	ldrh	r3, [r5, #12]
 8007408:	071b      	lsls	r3, r3, #28
 800740a:	d501      	bpl.n	8007410 <_vfiprintf_r+0x34>
 800740c:	692b      	ldr	r3, [r5, #16]
 800740e:	b99b      	cbnz	r3, 8007438 <_vfiprintf_r+0x5c>
 8007410:	4629      	mov	r1, r5
 8007412:	4630      	mov	r0, r6
 8007414:	f7fe f896 	bl	8005544 <__swsetup_r>
 8007418:	b170      	cbz	r0, 8007438 <_vfiprintf_r+0x5c>
 800741a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800741c:	07dc      	lsls	r4, r3, #31
 800741e:	d504      	bpl.n	800742a <_vfiprintf_r+0x4e>
 8007420:	f04f 30ff 	mov.w	r0, #4294967295
 8007424:	b01d      	add	sp, #116	; 0x74
 8007426:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800742a:	89ab      	ldrh	r3, [r5, #12]
 800742c:	0598      	lsls	r0, r3, #22
 800742e:	d4f7      	bmi.n	8007420 <_vfiprintf_r+0x44>
 8007430:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007432:	f7fe f95d 	bl	80056f0 <__retarget_lock_release_recursive>
 8007436:	e7f3      	b.n	8007420 <_vfiprintf_r+0x44>
 8007438:	2300      	movs	r3, #0
 800743a:	9309      	str	r3, [sp, #36]	; 0x24
 800743c:	2320      	movs	r3, #32
 800743e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007442:	2330      	movs	r3, #48	; 0x30
 8007444:	f04f 0901 	mov.w	r9, #1
 8007448:	f8cd 800c 	str.w	r8, [sp, #12]
 800744c:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 80075fc <_vfiprintf_r+0x220>
 8007450:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007454:	4623      	mov	r3, r4
 8007456:	469a      	mov	sl, r3
 8007458:	f813 2b01 	ldrb.w	r2, [r3], #1
 800745c:	b10a      	cbz	r2, 8007462 <_vfiprintf_r+0x86>
 800745e:	2a25      	cmp	r2, #37	; 0x25
 8007460:	d1f9      	bne.n	8007456 <_vfiprintf_r+0x7a>
 8007462:	ebba 0b04 	subs.w	fp, sl, r4
 8007466:	d00b      	beq.n	8007480 <_vfiprintf_r+0xa4>
 8007468:	465b      	mov	r3, fp
 800746a:	4622      	mov	r2, r4
 800746c:	4629      	mov	r1, r5
 800746e:	4630      	mov	r0, r6
 8007470:	f7ff ffa2 	bl	80073b8 <__sfputs_r>
 8007474:	3001      	adds	r0, #1
 8007476:	f000 80a9 	beq.w	80075cc <_vfiprintf_r+0x1f0>
 800747a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800747c:	445a      	add	r2, fp
 800747e:	9209      	str	r2, [sp, #36]	; 0x24
 8007480:	f89a 3000 	ldrb.w	r3, [sl]
 8007484:	2b00      	cmp	r3, #0
 8007486:	f000 80a1 	beq.w	80075cc <_vfiprintf_r+0x1f0>
 800748a:	2300      	movs	r3, #0
 800748c:	f04f 32ff 	mov.w	r2, #4294967295
 8007490:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007494:	f10a 0a01 	add.w	sl, sl, #1
 8007498:	9304      	str	r3, [sp, #16]
 800749a:	9307      	str	r3, [sp, #28]
 800749c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80074a0:	931a      	str	r3, [sp, #104]	; 0x68
 80074a2:	4654      	mov	r4, sl
 80074a4:	2205      	movs	r2, #5
 80074a6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80074aa:	4854      	ldr	r0, [pc, #336]	; (80075fc <_vfiprintf_r+0x220>)
 80074ac:	f7fe f921 	bl	80056f2 <memchr>
 80074b0:	9a04      	ldr	r2, [sp, #16]
 80074b2:	b9d8      	cbnz	r0, 80074ec <_vfiprintf_r+0x110>
 80074b4:	06d1      	lsls	r1, r2, #27
 80074b6:	bf44      	itt	mi
 80074b8:	2320      	movmi	r3, #32
 80074ba:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80074be:	0713      	lsls	r3, r2, #28
 80074c0:	bf44      	itt	mi
 80074c2:	232b      	movmi	r3, #43	; 0x2b
 80074c4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80074c8:	f89a 3000 	ldrb.w	r3, [sl]
 80074cc:	2b2a      	cmp	r3, #42	; 0x2a
 80074ce:	d015      	beq.n	80074fc <_vfiprintf_r+0x120>
 80074d0:	4654      	mov	r4, sl
 80074d2:	2000      	movs	r0, #0
 80074d4:	f04f 0c0a 	mov.w	ip, #10
 80074d8:	9a07      	ldr	r2, [sp, #28]
 80074da:	4621      	mov	r1, r4
 80074dc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80074e0:	3b30      	subs	r3, #48	; 0x30
 80074e2:	2b09      	cmp	r3, #9
 80074e4:	d94d      	bls.n	8007582 <_vfiprintf_r+0x1a6>
 80074e6:	b1b0      	cbz	r0, 8007516 <_vfiprintf_r+0x13a>
 80074e8:	9207      	str	r2, [sp, #28]
 80074ea:	e014      	b.n	8007516 <_vfiprintf_r+0x13a>
 80074ec:	eba0 0308 	sub.w	r3, r0, r8
 80074f0:	fa09 f303 	lsl.w	r3, r9, r3
 80074f4:	4313      	orrs	r3, r2
 80074f6:	46a2      	mov	sl, r4
 80074f8:	9304      	str	r3, [sp, #16]
 80074fa:	e7d2      	b.n	80074a2 <_vfiprintf_r+0xc6>
 80074fc:	9b03      	ldr	r3, [sp, #12]
 80074fe:	1d19      	adds	r1, r3, #4
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	9103      	str	r1, [sp, #12]
 8007504:	2b00      	cmp	r3, #0
 8007506:	bfbb      	ittet	lt
 8007508:	425b      	neglt	r3, r3
 800750a:	f042 0202 	orrlt.w	r2, r2, #2
 800750e:	9307      	strge	r3, [sp, #28]
 8007510:	9307      	strlt	r3, [sp, #28]
 8007512:	bfb8      	it	lt
 8007514:	9204      	strlt	r2, [sp, #16]
 8007516:	7823      	ldrb	r3, [r4, #0]
 8007518:	2b2e      	cmp	r3, #46	; 0x2e
 800751a:	d10c      	bne.n	8007536 <_vfiprintf_r+0x15a>
 800751c:	7863      	ldrb	r3, [r4, #1]
 800751e:	2b2a      	cmp	r3, #42	; 0x2a
 8007520:	d134      	bne.n	800758c <_vfiprintf_r+0x1b0>
 8007522:	9b03      	ldr	r3, [sp, #12]
 8007524:	3402      	adds	r4, #2
 8007526:	1d1a      	adds	r2, r3, #4
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	9203      	str	r2, [sp, #12]
 800752c:	2b00      	cmp	r3, #0
 800752e:	bfb8      	it	lt
 8007530:	f04f 33ff 	movlt.w	r3, #4294967295
 8007534:	9305      	str	r3, [sp, #20]
 8007536:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8007600 <_vfiprintf_r+0x224>
 800753a:	2203      	movs	r2, #3
 800753c:	4650      	mov	r0, sl
 800753e:	7821      	ldrb	r1, [r4, #0]
 8007540:	f7fe f8d7 	bl	80056f2 <memchr>
 8007544:	b138      	cbz	r0, 8007556 <_vfiprintf_r+0x17a>
 8007546:	2240      	movs	r2, #64	; 0x40
 8007548:	9b04      	ldr	r3, [sp, #16]
 800754a:	eba0 000a 	sub.w	r0, r0, sl
 800754e:	4082      	lsls	r2, r0
 8007550:	4313      	orrs	r3, r2
 8007552:	3401      	adds	r4, #1
 8007554:	9304      	str	r3, [sp, #16]
 8007556:	f814 1b01 	ldrb.w	r1, [r4], #1
 800755a:	2206      	movs	r2, #6
 800755c:	4829      	ldr	r0, [pc, #164]	; (8007604 <_vfiprintf_r+0x228>)
 800755e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007562:	f7fe f8c6 	bl	80056f2 <memchr>
 8007566:	2800      	cmp	r0, #0
 8007568:	d03f      	beq.n	80075ea <_vfiprintf_r+0x20e>
 800756a:	4b27      	ldr	r3, [pc, #156]	; (8007608 <_vfiprintf_r+0x22c>)
 800756c:	bb1b      	cbnz	r3, 80075b6 <_vfiprintf_r+0x1da>
 800756e:	9b03      	ldr	r3, [sp, #12]
 8007570:	3307      	adds	r3, #7
 8007572:	f023 0307 	bic.w	r3, r3, #7
 8007576:	3308      	adds	r3, #8
 8007578:	9303      	str	r3, [sp, #12]
 800757a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800757c:	443b      	add	r3, r7
 800757e:	9309      	str	r3, [sp, #36]	; 0x24
 8007580:	e768      	b.n	8007454 <_vfiprintf_r+0x78>
 8007582:	460c      	mov	r4, r1
 8007584:	2001      	movs	r0, #1
 8007586:	fb0c 3202 	mla	r2, ip, r2, r3
 800758a:	e7a6      	b.n	80074da <_vfiprintf_r+0xfe>
 800758c:	2300      	movs	r3, #0
 800758e:	f04f 0c0a 	mov.w	ip, #10
 8007592:	4619      	mov	r1, r3
 8007594:	3401      	adds	r4, #1
 8007596:	9305      	str	r3, [sp, #20]
 8007598:	4620      	mov	r0, r4
 800759a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800759e:	3a30      	subs	r2, #48	; 0x30
 80075a0:	2a09      	cmp	r2, #9
 80075a2:	d903      	bls.n	80075ac <_vfiprintf_r+0x1d0>
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	d0c6      	beq.n	8007536 <_vfiprintf_r+0x15a>
 80075a8:	9105      	str	r1, [sp, #20]
 80075aa:	e7c4      	b.n	8007536 <_vfiprintf_r+0x15a>
 80075ac:	4604      	mov	r4, r0
 80075ae:	2301      	movs	r3, #1
 80075b0:	fb0c 2101 	mla	r1, ip, r1, r2
 80075b4:	e7f0      	b.n	8007598 <_vfiprintf_r+0x1bc>
 80075b6:	ab03      	add	r3, sp, #12
 80075b8:	9300      	str	r3, [sp, #0]
 80075ba:	462a      	mov	r2, r5
 80075bc:	4630      	mov	r0, r6
 80075be:	4b13      	ldr	r3, [pc, #76]	; (800760c <_vfiprintf_r+0x230>)
 80075c0:	a904      	add	r1, sp, #16
 80075c2:	f7fd fa3f 	bl	8004a44 <_printf_float>
 80075c6:	4607      	mov	r7, r0
 80075c8:	1c78      	adds	r0, r7, #1
 80075ca:	d1d6      	bne.n	800757a <_vfiprintf_r+0x19e>
 80075cc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80075ce:	07d9      	lsls	r1, r3, #31
 80075d0:	d405      	bmi.n	80075de <_vfiprintf_r+0x202>
 80075d2:	89ab      	ldrh	r3, [r5, #12]
 80075d4:	059a      	lsls	r2, r3, #22
 80075d6:	d402      	bmi.n	80075de <_vfiprintf_r+0x202>
 80075d8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80075da:	f7fe f889 	bl	80056f0 <__retarget_lock_release_recursive>
 80075de:	89ab      	ldrh	r3, [r5, #12]
 80075e0:	065b      	lsls	r3, r3, #25
 80075e2:	f53f af1d 	bmi.w	8007420 <_vfiprintf_r+0x44>
 80075e6:	9809      	ldr	r0, [sp, #36]	; 0x24
 80075e8:	e71c      	b.n	8007424 <_vfiprintf_r+0x48>
 80075ea:	ab03      	add	r3, sp, #12
 80075ec:	9300      	str	r3, [sp, #0]
 80075ee:	462a      	mov	r2, r5
 80075f0:	4630      	mov	r0, r6
 80075f2:	4b06      	ldr	r3, [pc, #24]	; (800760c <_vfiprintf_r+0x230>)
 80075f4:	a904      	add	r1, sp, #16
 80075f6:	f7fd fcc5 	bl	8004f84 <_printf_i>
 80075fa:	e7e4      	b.n	80075c6 <_vfiprintf_r+0x1ea>
 80075fc:	080079ec 	.word	0x080079ec
 8007600:	080079f2 	.word	0x080079f2
 8007604:	080079f6 	.word	0x080079f6
 8007608:	08004a45 	.word	0x08004a45
 800760c:	080073b9 	.word	0x080073b9

08007610 <_raise_r>:
 8007610:	291f      	cmp	r1, #31
 8007612:	b538      	push	{r3, r4, r5, lr}
 8007614:	4604      	mov	r4, r0
 8007616:	460d      	mov	r5, r1
 8007618:	d904      	bls.n	8007624 <_raise_r+0x14>
 800761a:	2316      	movs	r3, #22
 800761c:	6003      	str	r3, [r0, #0]
 800761e:	f04f 30ff 	mov.w	r0, #4294967295
 8007622:	bd38      	pop	{r3, r4, r5, pc}
 8007624:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8007626:	b112      	cbz	r2, 800762e <_raise_r+0x1e>
 8007628:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800762c:	b94b      	cbnz	r3, 8007642 <_raise_r+0x32>
 800762e:	4620      	mov	r0, r4
 8007630:	f000 f830 	bl	8007694 <_getpid_r>
 8007634:	462a      	mov	r2, r5
 8007636:	4601      	mov	r1, r0
 8007638:	4620      	mov	r0, r4
 800763a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800763e:	f000 b817 	b.w	8007670 <_kill_r>
 8007642:	2b01      	cmp	r3, #1
 8007644:	d00a      	beq.n	800765c <_raise_r+0x4c>
 8007646:	1c59      	adds	r1, r3, #1
 8007648:	d103      	bne.n	8007652 <_raise_r+0x42>
 800764a:	2316      	movs	r3, #22
 800764c:	6003      	str	r3, [r0, #0]
 800764e:	2001      	movs	r0, #1
 8007650:	e7e7      	b.n	8007622 <_raise_r+0x12>
 8007652:	2400      	movs	r4, #0
 8007654:	4628      	mov	r0, r5
 8007656:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800765a:	4798      	blx	r3
 800765c:	2000      	movs	r0, #0
 800765e:	e7e0      	b.n	8007622 <_raise_r+0x12>

08007660 <raise>:
 8007660:	4b02      	ldr	r3, [pc, #8]	; (800766c <raise+0xc>)
 8007662:	4601      	mov	r1, r0
 8007664:	6818      	ldr	r0, [r3, #0]
 8007666:	f7ff bfd3 	b.w	8007610 <_raise_r>
 800766a:	bf00      	nop
 800766c:	20000078 	.word	0x20000078

08007670 <_kill_r>:
 8007670:	b538      	push	{r3, r4, r5, lr}
 8007672:	2300      	movs	r3, #0
 8007674:	4d06      	ldr	r5, [pc, #24]	; (8007690 <_kill_r+0x20>)
 8007676:	4604      	mov	r4, r0
 8007678:	4608      	mov	r0, r1
 800767a:	4611      	mov	r1, r2
 800767c:	602b      	str	r3, [r5, #0]
 800767e:	f7fa f9e8 	bl	8001a52 <_kill>
 8007682:	1c43      	adds	r3, r0, #1
 8007684:	d102      	bne.n	800768c <_kill_r+0x1c>
 8007686:	682b      	ldr	r3, [r5, #0]
 8007688:	b103      	cbz	r3, 800768c <_kill_r+0x1c>
 800768a:	6023      	str	r3, [r4, #0]
 800768c:	bd38      	pop	{r3, r4, r5, pc}
 800768e:	bf00      	nop
 8007690:	20000480 	.word	0x20000480

08007694 <_getpid_r>:
 8007694:	f7fa b9d6 	b.w	8001a44 <_getpid>

08007698 <_init>:
 8007698:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800769a:	bf00      	nop
 800769c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800769e:	bc08      	pop	{r3}
 80076a0:	469e      	mov	lr, r3
 80076a2:	4770      	bx	lr

080076a4 <_fini>:
 80076a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80076a6:	bf00      	nop
 80076a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80076aa:	bc08      	pop	{r3}
 80076ac:	469e      	mov	lr, r3
 80076ae:	4770      	bx	lr
